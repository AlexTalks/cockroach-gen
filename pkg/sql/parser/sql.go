// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/geo/geopb"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:72

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) unresolvedObjectNames() []*tree.UnresolvedObjectName {
	return u.val.([]*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) likeTableOption() tree.LikeTableOption {
	return u.val.(tree.LikeTableOption)
}
func (u *sqlSymUnion) likeTableOptionList() []tree.LikeTableOption {
	return u.val.([]tree.LikeTableOption)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func (u *sqlSymUnion) geoFigure() geopb.Shape {
	return u.val.(geopb.Shape)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:644
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ALWAYS = lex.ALWAYS
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CBRT = lex.CBRT
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMENTS = lex.COMMENTS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEFAULTS = lex.DEFAULTS
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXCLUDING = lex.EXCLUDING
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GENERATED = lex.GENERATED
const GEOGRAPHY = lex.GEOGRAPHY
const GEOMETRY = lex.GEOMETRY
const GEOMETRYCOLLECTION = lex.GEOMETRYCOLLECTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IDENTITY = lex.IDENTITY
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCLUDING = lex.INCLUDING
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LINESTRING = lex.LINESTRING
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MULTILINESTRING = lex.MULTILINESTRING
const MULTIPOINT = lex.MULTIPOINT
const MULTIPOLYGON = lex.MULTIPOLYGON
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POINT = lex.POINT
const POLYGON = lex.POLYGON
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORAGE = lex.STORAGE
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SQRT = lex.SQRT
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CBRT",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFAULTS",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GENERATED",
	"GEOGRAPHY",
	"GEOMETRY",
	"GEOMETRYCOLLECTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IDENTITY",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LINESTRING",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MULTILINESTRING",
	"MULTIPOINT",
	"MULTIPOLYGON",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POINT",
	"POLYGON",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORAGE",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SQRT",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10454

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	-2, 1140,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	196, 967,
	208, 967,
	223, 250,
	316, 250,
	325, 764,
	353, 250,
	362, 764,
	399, 764,
	423, 250,
	448, 764,
	-2, 0,
	-1, 78,
	223, 254,
	-2, 0,
	-1, 79,
	115, 1140,
	202, 1140,
	433, 1140,
	434, 1140,
	-2, 0,
	-1, 91,
	128, 1114,
	145, 1114,
	158, 1114,
	205, 1114,
	235, 1114,
	277, 1114,
	287, 1114,
	428, 1114,
	-2, 1085,
	-1, 123,
	135, 673,
	222, 673,
	319, 653,
	367, 653,
	416, 673,
	-2, 0,
	-1, 124,
	4, 1142,
	21, 1142,
	22, 1142,
	23, 1142,
	24, 1142,
	25, 1142,
	27, 1142,
	28, 1142,
	34, 1142,
	39, 1142,
	40, 1142,
	41, 1142,
	42, 1142,
	43, 1142,
	44, 1142,
	45, 1142,
	47, 1142,
	48, 1142,
	49, 1142,
	51, 1142,
	52, 1142,
	53, 1142,
	54, 1142,
	55, 1142,
	59, 1142,
	60, 1142,
	61, 1142,
	62, 1142,
	64, 1142,
	65, 1142,
	66, 1142,
	70, 1142,
	71, 1142,
	72, 1142,
	73, 1142,
	74, 1142,
	75, 1142,
	76, 1142,
	79, 1142,
	80, 1142,
	81, 1142,
	82, 1142,
	84, 1142,
	86, 1142,
	87, 1142,
	88, 1142,
	90, 1142,
	92, 1142,
	93, 1142,
	101, 1142,
	102, 1142,
	103, 1142,
	104, 1142,
	106, 1142,
	107, 1142,
	108, 1142,
	110, 1142,
	111, 1142,
	112, 1142,
	114, 1142,
	115, 1142,
	117, 1142,
	120, 1142,
	121, 1142,
	122, 1142,
	124, 1142,
	126, 1142,
	127, 1142,
	129, 1142,
	130, 1142,
	131, 1142,
	132, 1142,
	133, 1142,
	134, 1142,
	135, 1142,
	136, 1142,
	137, 1142,
	138, 1142,
	139, 1142,
	140, 1142,
	141, 1142,
	142, 1142,
	144, 1142,
	150, 1142,
	151, 1142,
	152, 1142,
	153, 1142,
	157, 1142,
	159, 1142,
	163, 1142,
	164, 1142,
	165, 1142,
	166, 1142,
	167, 1142,
	168, 1142,
	170, 1142,
	171, 1142,
	173, 1142,
	174, 1142,
	176, 1142,
	177, 1142,
	178, 1142,
	179, 1142,
	180, 1142,
	181, 1142,
	182, 1142,
	183, 1142,
	184, 1142,
	186, 1142,
	187, 1142,
	189, 1142,
	190, 1142,
	191, 1142,
	192, 1142,
	196, 1142,
	197, 1142,
	198, 1142,
	199, 1142,
	202, 1142,
	203, 1142,
	204, 1142,
	206, 1142,
	208, 1142,
	210, 1142,
	212, 1142,
	213, 1142,
	214, 1142,
	216, 1142,
	220, 1142,
	221, 1142,
	222, 1142,
	223, 1142,
	224, 1142,
	226, 1142,
	227, 1142,
	229, 1142,
	230, 1142,
	232, 1142,
	233, 1142,
	236, 1142,
	237, 1142,
	238, 1142,
	241, 1142,
	242, 1142,
	243, 1142,
	244, 1142,
	246, 1142,
	247, 1142,
	248, 1142,
	249, 1142,
	250, 1142,
	251, 1142,
	252, 1142,
	253, 1142,
	254, 1142,
	255, 1142,
	256, 1142,
	258, 1142,
	260, 1142,
	261, 1142,
	262, 1142,
	263, 1142,
	264, 1142,
	266, 1142,
	268, 1142,
	270, 1142,
	272, 1142,
	273, 1142,
	274, 1142,
	275, 1142,
	276, 1142,
	279, 1142,
	282, 1142,
	283, 1142,
	284, 1142,
	285, 1142,
	288, 1142,
	289, 1142,
	290, 1142,
	292, 1142,
	294, 1142,
	295, 1142,
	296, 1142,
	297, 1142,
	298, 1142,
	299, 1142,
	300, 1142,
	301, 1142,
	302, 1142,
	303, 1142,
	305, 1142,
	306, 1142,
	307, 1142,
	308, 1142,
	309, 1142,
	310, 1142,
	311, 1142,
	312, 1142,
	313, 1142,
	315, 1142,
	317, 1142,
	318, 1142,
	319, 1142,
	320, 1142,
	321, 1142,
	322, 1142,
	323, 1142,
	324, 1142,
	325, 1142,
	326, 1142,
	333, 1142,
	335, 1142,
	336, 1142,
	337, 1142,
	338, 1142,
	339, 1142,
	340, 1142,
	341, 1142,
	342, 1142,
	344, 1142,
	346, 1142,
	347, 1142,
	348, 1142,
	349, 1142,
	350, 1142,
	351, 1142,
	353, 1142,
	354, 1142,
	355, 1142,
	356, 1142,
	357, 1142,
	358, 1142,
	359, 1142,
	360, 1142,
	362, 1142,
	363, 1142,
	364, 1142,
	365, 1142,
	366, 1142,
	367, 1142,
	369, 1142,
	370, 1142,
	371, 1142,
	372, 1142,
	373, 1142,
	375, 1142,
	376, 1142,
	377, 1142,
	379, 1142,
	381, 1142,
	382, 1142,
	383, 1142,
	384, 1142,
	385, 1142,
	386, 1142,
	387, 1142,
	388, 1142,
	389, 1142,
	390, 1142,
	391, 1142,
	392, 1142,
	393, 1142,
	395, 1142,
	396, 1142,
	398, 1142,
	400, 1142,
	401, 1142,
	402, 1142,
	403, 1142,
	404, 1142,
	405, 1142,
	406, 1142,
	408, 1142,
	409, 1142,
	410, 1142,
	411, 1142,
	412, 1142,
	414, 1142,
	416, 1142,
	417, 1142,
	418, 1142,
	419, 1142,
	420, 1142,
	422, 1142,
	423, 1142,
	424, 1142,
	426, 1142,
	427, 1142,
	430, 1142,
	431, 1142,
	432, 1142,
	433, 1142,
	434, 1142,
	435, 1142,
	436, 1142,
	438, 1142,
	441, 1142,
	442, 1142,
	443, 1142,
	444, 1142,
	445, 1142,
	446, 1142,
	448, 1142,
	449, 1142,
	450, 1142,
	455, 1142,
	456, 1142,
	457, 1142,
	458, 1142,
	459, 1142,
	460, 1142,
	-2, 0,
	-1, 125,
	1, 1019,
	212, 1019,
	315, 1019,
	323, 1019,
	463, 1019,
	486, 1019,
	-2, 0,
	-1, 127,
	1, 1019,
	486, 1019,
	-2, 0,
	-1, 128,
	1, 1019,
	486, 1019,
	-2, 0,
	-1, 129,
	1, 1019,
	413, 1019,
	486, 1019,
	-2, 0,
	-1, 155,
	128, 1113,
	145, 1113,
	158, 1113,
	205, 1113,
	235, 1113,
	277, 1113,
	287, 1113,
	428, 1113,
	-2, 1088,
	-1, 188,
	4, 1149,
	5, 1149,
	6, 1149,
	7, 1149,
	8, 1149,
	9, 1149,
	10, 1149,
	21, 1149,
	22, 1149,
	23, 1149,
	24, 1149,
	25, 1149,
	27, 1149,
	28, 1149,
	34, 1149,
	35, 1149,
	39, 1149,
	40, 1149,
	41, 1149,
	42, 1149,
	43, 1149,
	44, 1149,
	45, 1149,
	47, 1149,
	48, 1149,
	49, 1149,
	51, 1149,
	52, 1149,
	53, 1149,
	54, 1149,
	55, 1149,
	56, 1149,
	57, 1149,
	58, 1149,
	59, 1149,
	60, 1149,
	61, 1149,
	62, 1149,
	64, 1149,
	65, 1149,
	66, 1149,
	68, 1149,
	70, 1149,
	71, 1149,
	72, 1149,
	73, 1149,
	74, 1149,
	75, 1149,
	76, 1149,
	79, 1149,
	80, 1149,
	81, 1149,
	82, 1149,
	84, 1149,
	86, 1149,
	87, 1149,
	88, 1149,
	90, 1149,
	91, 1149,
	92, 1149,
	93, 1149,
	94, 1149,
	95, 1149,
	96, 1149,
	97, 1149,
	98, 1149,
	99, 1149,
	100, 1149,
	101, 1149,
	102, 1149,
	103, 1149,
	104, 1149,
	105, 1149,
	106, 1149,
	107, 1149,
	108, 1149,
	109, 1149,
	110, 1149,
	111, 1149,
	112, 1149,
	114, 1149,
	115, 1149,
	117, 1149,
	120, 1149,
	121, 1149,
	122, 1149,
	124, 1149,
	126, 1149,
	127, 1149,
	129, 1149,
	130, 1149,
	131, 1149,
	132, 1149,
	133, 1149,
	134, 1149,
	135, 1149,
	136, 1149,
	137, 1149,
	138, 1149,
	139, 1149,
	140, 1149,
	141, 1149,
	142, 1149,
	143, 1149,
	144, 1149,
	150, 1149,
	151, 1149,
	152, 1149,
	153, 1149,
	157, 1149,
	159, 1149,
	162, 1149,
	163, 1149,
	164, 1149,
	165, 1149,
	166, 1149,
	167, 1149,
	168, 1149,
	170, 1149,
	171, 1149,
	173, 1149,
	174, 1149,
	176, 1149,
	177, 1149,
	178, 1149,
	179, 1149,
	180, 1149,
	181, 1149,
	182, 1149,
	183, 1149,
	184, 1149,
	185, 1149,
	186, 1149,
	187, 1149,
	189, 1149,
	190, 1149,
	191, 1149,
	192, 1149,
	196, 1149,
	197, 1149,
	198, 1149,
	199, 1149,
	201, 1149,
	202, 1149,
	203, 1149,
	204, 1149,
	206, 1149,
	208, 1149,
	209, 1149,
	210, 1149,
	211, 1149,
	212, 1149,
	213, 1149,
	214, 1149,
	215, 1149,
	216, 1149,
	220, 1149,
	221, 1149,
	222, 1149,
	223, 1149,
	224, 1149,
	226, 1149,
	227, 1149,
	229, 1149,
	230, 1149,
	231, 1149,
	232, 1149,
	233, 1149,
	234, 1149,
	236, 1149,
	237, 1149,
	238, 1149,
	239, 1149,
	240, 1149,
	241, 1149,
	242, 1149,
	243, 1149,
	244, 1149,
	246, 1149,
	247, 1149,
	248, 1149,
	249, 1149,
	250, 1149,
	251, 1149,
	252, 1149,
	253, 1149,
	254, 1149,
	255, 1149,
	256, 1149,
	258, 1149,
	259, 1149,
	260, 1149,
	261, 1149,
	262, 1149,
	263, 1149,
	264, 1149,
	265, 1149,
	266, 1149,
	267, 1149,
	268, 1149,
	269, 1149,
	270, 1149,
	271, 1149,
	272, 1149,
	273, 1149,
	274, 1149,
	275, 1149,
	276, 1149,
	279, 1149,
	283, 1149,
	284, 1149,
	285, 1149,
	288, 1149,
	289, 1149,
	290, 1149,
	291, 1149,
	292, 1149,
	293, 1149,
	294, 1149,
	295, 1149,
	296, 1149,
	297, 1149,
	298, 1149,
	299, 1149,
	300, 1149,
	301, 1149,
	302, 1149,
	303, 1149,
	305, 1149,
	306, 1149,
	307, 1149,
	308, 1149,
	309, 1149,
	310, 1149,
	311, 1149,
	312, 1149,
	313, 1149,
	315, 1149,
	317, 1149,
	318, 1149,
	319, 1149,
	320, 1149,
	321, 1149,
	322, 1149,
	323, 1149,
	324, 1149,
	325, 1149,
	326, 1149,
	333, 1149,
	335, 1149,
	336, 1149,
	337, 1149,
	338, 1149,
	339, 1149,
	340, 1149,
	341, 1149,
	342, 1149,
	344, 1149,
	345, 1149,
	346, 1149,
	347, 1149,
	348, 1149,
	349, 1149,
	350, 1149,
	351, 1149,
	353, 1149,
	354, 1149,
	355, 1149,
	356, 1149,
	357, 1149,
	358, 1149,
	359, 1149,
	360, 1149,
	362, 1149,
	363, 1149,
	364, 1149,
	365, 1149,
	366, 1149,
	367, 1149,
	368, 1149,
	369, 1149,
	370, 1149,
	371, 1149,
	372, 1149,
	373, 1149,
	374, 1149,
	375, 1149,
	376, 1149,
	377, 1149,
	379, 1149,
	381, 1149,
	382, 1149,
	383, 1149,
	384, 1149,
	385, 1149,
	386, 1149,
	387, 1149,
	388, 1149,
	389, 1149,
	390, 1149,
	391, 1149,
	392, 1149,
	393, 1149,
	395, 1149,
	396, 1149,
	397, 1149,
	398, 1149,
	400, 1149,
	401, 1149,
	402, 1149,
	403, 1149,
	404, 1149,
	405, 1149,
	406, 1149,
	408, 1149,
	409, 1149,
	410, 1149,
	411, 1149,
	412, 1149,
	414, 1149,
	416, 1149,
	417, 1149,
	418, 1149,
	419, 1149,
	420, 1149,
	421, 1149,
	422, 1149,
	423, 1149,
	424, 1149,
	426, 1149,
	427, 1149,
	429, 1149,
	430, 1149,
	431, 1149,
	432, 1149,
	433, 1149,
	434, 1149,
	435, 1149,
	436, 1149,
	437, 1149,
	438, 1149,
	441, 1149,
	442, 1149,
	443, 1149,
	444, 1149,
	445, 1149,
	446, 1149,
	448, 1149,
	449, 1149,
	450, 1149,
	455, 1149,
	456, 1149,
	457, 1149,
	458, 1149,
	459, 1149,
	460, 1149,
	461, 1149,
	467, 1149,
	474, 1149,
	475, 1149,
	476, 1149,
	483, 1149,
	487, 1149,
	-2, 0,
	-1, 567,
	161, 1849,
	413, 1849,
	466, 1849,
	485, 1849,
	-2, 0,
	-1, 568,
	161, 1928,
	413, 1928,
	466, 1928,
	485, 1928,
	-2, 0,
	-1, 569,
	161, 1837,
	413, 1837,
	466, 1837,
	485, 1837,
	-2, 0,
	-1, 571,
	161, 2017,
	413, 2017,
	466, 2017,
	485, 2017,
	-2, 0,
	-1, 573,
	161, 2046,
	413, 2046,
	466, 2046,
	485, 2046,
	-2, 0,
	-1, 580,
	161, 1943,
	413, 1943,
	466, 1943,
	485, 1943,
	-2, 511,
	-1, 608,
	485, 1793,
	488, 1793,
	-2, 726,
	-1, 609,
	485, 1795,
	488, 1795,
	-2, 727,
	-1, 610,
	485, 1794,
	488, 1794,
	-2, 728,
	-1, 611,
	488, 1728,
	-2, 729,
	-1, 653,
	448, 942,
	-2, 765,
	-1, 691,
	4, 965,
	21, 965,
	22, 965,
	23, 965,
	24, 965,
	25, 965,
	27, 965,
	28, 965,
	34, 965,
	39, 965,
	40, 965,
	41, 965,
	42, 965,
	43, 965,
	44, 965,
	45, 965,
	47, 965,
	48, 965,
	49, 965,
	51, 965,
	52, 965,
	53, 965,
	54, 965,
	55, 965,
	59, 965,
	60, 965,
	61, 965,
	62, 965,
	64, 965,
	65, 965,
	66, 965,
	70, 965,
	71, 965,
	72, 965,
	73, 965,
	74, 965,
	75, 965,
	76, 965,
	79, 965,
	80, 965,
	81, 965,
	82, 965,
	84, 965,
	86, 965,
	87, 965,
	88, 965,
	90, 965,
	92, 965,
	93, 965,
	101, 965,
	102, 965,
	103, 965,
	104, 965,
	106, 965,
	107, 965,
	108, 965,
	110, 965,
	111, 965,
	112, 965,
	114, 965,
	115, 965,
	117, 965,
	120, 965,
	121, 965,
	122, 965,
	124, 965,
	126, 965,
	127, 965,
	129, 965,
	130, 965,
	131, 965,
	132, 965,
	133, 965,
	134, 965,
	135, 965,
	136, 965,
	137, 965,
	138, 965,
	139, 965,
	140, 965,
	141, 965,
	142, 965,
	144, 965,
	150, 965,
	151, 965,
	152, 965,
	153, 965,
	157, 965,
	159, 965,
	163, 965,
	164, 965,
	165, 965,
	166, 965,
	167, 965,
	168, 965,
	170, 965,
	171, 965,
	173, 965,
	174, 965,
	176, 965,
	177, 965,
	178, 965,
	179, 965,
	180, 965,
	181, 965,
	182, 965,
	183, 965,
	184, 965,
	186, 965,
	187, 965,
	189, 965,
	190, 965,
	191, 965,
	192, 965,
	196, 965,
	197, 965,
	198, 965,
	199, 965,
	202, 965,
	203, 965,
	204, 965,
	206, 965,
	208, 965,
	210, 965,
	212, 965,
	213, 965,
	214, 965,
	216, 965,
	220, 965,
	221, 965,
	222, 965,
	223, 965,
	224, 965,
	226, 965,
	227, 965,
	229, 965,
	230, 965,
	232, 965,
	233, 965,
	236, 965,
	237, 965,
	238, 965,
	241, 965,
	242, 965,
	243, 965,
	244, 965,
	246, 965,
	247, 965,
	248, 965,
	249, 965,
	250, 965,
	251, 965,
	252, 965,
	253, 965,
	254, 965,
	255, 965,
	256, 965,
	258, 965,
	260, 965,
	261, 965,
	262, 965,
	263, 965,
	264, 965,
	266, 965,
	268, 965,
	270, 965,
	272, 965,
	273, 965,
	274, 965,
	275, 965,
	276, 965,
	279, 965,
	283, 965,
	284, 965,
	285, 965,
	288, 965,
	289, 965,
	290, 965,
	292, 965,
	294, 965,
	295, 965,
	296, 965,
	297, 965,
	298, 965,
	299, 965,
	300, 965,
	301, 965,
	302, 965,
	303, 965,
	305, 965,
	306, 965,
	307, 965,
	308, 965,
	309, 965,
	310, 965,
	311, 965,
	312, 965,
	313, 965,
	315, 965,
	317, 965,
	318, 965,
	319, 965,
	320, 965,
	321, 965,
	322, 965,
	323, 965,
	324, 965,
	325, 965,
	326, 965,
	333, 965,
	335, 965,
	336, 965,
	337, 965,
	338, 965,
	339, 965,
	340, 965,
	341, 965,
	342, 965,
	344, 965,
	346, 965,
	347, 965,
	348, 965,
	349, 965,
	350, 965,
	351, 965,
	353, 965,
	354, 965,
	355, 965,
	356, 965,
	357, 965,
	358, 965,
	359, 965,
	360, 965,
	362, 965,
	363, 965,
	364, 965,
	365, 965,
	366, 965,
	367, 965,
	369, 965,
	370, 965,
	371, 965,
	372, 965,
	373, 965,
	375, 965,
	376, 965,
	377, 965,
	379, 965,
	381, 965,
	382, 965,
	383, 965,
	384, 965,
	385, 965,
	386, 965,
	387, 965,
	388, 965,
	389, 965,
	390, 965,
	391, 965,
	392, 965,
	393, 965,
	395, 965,
	396, 965,
	398, 965,
	400, 965,
	401, 965,
	402, 965,
	403, 965,
	404, 965,
	405, 965,
	406, 965,
	408, 965,
	409, 965,
	410, 965,
	411, 965,
	412, 965,
	414, 965,
	416, 965,
	417, 965,
	418, 965,
	419, 965,
	420, 965,
	422, 965,
	423, 965,
	424, 965,
	426, 965,
	427, 965,
	430, 965,
	431, 965,
	432, 965,
	433, 965,
	434, 965,
	435, 965,
	436, 965,
	438, 965,
	441, 965,
	442, 965,
	443, 965,
	444, 965,
	445, 965,
	446, 965,
	448, 965,
	449, 965,
	450, 965,
	455, 965,
	456, 965,
	457, 965,
	458, 965,
	459, 965,
	460, 965,
	-2, 0,
	-1, 756,
	319, 654,
	367, 654,
	-2, 0,
	-1, 757,
	319, 653,
	367, 653,
	-2, 601,
	-1, 761,
	1, 683,
	482, 683,
	484, 683,
	486, 683,
	-2, 0,
	-1, 762,
	1, 725,
	158, 725,
	482, 725,
	484, 725,
	486, 725,
	-2, 0,
	-1, 770,
	1, 657,
	482, 657,
	484, 657,
	486, 657,
	-2, 0,
	-1, 773,
	1, 683,
	482, 683,
	484, 683,
	486, 683,
	-2, 0,
	-1, 774,
	1, 685,
	482, 685,
	484, 685,
	486, 685,
	-2, 0,
	-1, 775,
	1, 688,
	482, 688,
	484, 688,
	486, 688,
	-2, 0,
	-1, 780,
	1, 704,
	482, 704,
	484, 704,
	486, 704,
	-2, 0,
	-1, 781,
	1, 706,
	482, 706,
	484, 706,
	486, 706,
	-2, 0,
	-1, 825,
	145, 1151,
	158, 1151,
	235, 1151,
	277, 1151,
	-2, 1092,
	-1, 839,
	145, 1150,
	158, 1150,
	235, 1150,
	277, 1150,
	-2, 1089,
	-1, 865,
	485, 1792,
	-2, 519,
	-1, 893,
	5, 1784,
	483, 1782,
	-2, 1773,
	-1, 901,
	5, 1805,
	483, 1802,
	-2, 1793,
	-1, 902,
	5, 1806,
	483, 1803,
	-2, 1794,
	-1, 910,
	485, 1790,
	-2, 1772,
	-1, 911,
	483, 2124,
	-2, 1791,
	-1, 934,
	483, 2123,
	-2, 1807,
	-1, 935,
	5, 1312,
	-2, 2094,
	-1, 936,
	5, 1313,
	-2, 2095,
	-1, 937,
	5, 1314,
	-2, 2109,
	-1, 938,
	5, 1315,
	-2, 2074,
	-1, 939,
	5, 1316,
	-2, 2107,
	-1, 940,
	5, 1324,
	-2, 2086,
	-1, 941,
	5, 1311,
	-2, 2082,
	-1, 942,
	5, 1311,
	-2, 2081,
	-1, 943,
	5, 1311,
	-2, 2100,
	-1, 944,
	5, 1322,
	-2, 2076,
	-1, 945,
	5, 1327,
	-2, 2075,
	-1, 946,
	5, 1329,
	-2, 2119,
	-1, 949,
	5, 1351,
	-2, 2112,
	-1, 950,
	5, 1343,
	-2, 2113,
	-1, 951,
	5, 1351,
	-2, 2114,
	-1, 952,
	5, 1347,
	-2, 2115,
	-1, 953,
	5, 1298,
	-2, 2087,
	-1, 954,
	5, 1299,
	-2, 2088,
	-1, 981,
	5, 1334,
	-2, 2120,
	-1, 982,
	5, 1335,
	-2, 2110,
	-1, 983,
	5, 1336,
	449, 1336,
	-2, 2077,
	-1, 984,
	5, 1337,
	449, 1337,
	-2, 2078,
	-1, 1021,
	483, 1802,
	-2, 1793,
	-1, 1022,
	483, 1803,
	-2, 1794,
	-1, 1051,
	161, 2046,
	413, 2046,
	466, 2046,
	485, 2046,
	-2, 0,
	-1, 1054,
	1, 497,
	486, 497,
	-2, 1027,
	-1, 1179,
	335, 1768,
	476, 1768,
	-2, 1766,
	-1, 1191,
	487, 1768,
	-2, 1769,
	-1, 1192,
	1, 939,
	482, 939,
	484, 939,
	486, 939,
	-2, 1138,
	-1, 1240,
	325, 764,
	448, 764,
	-2, 249,
	-1, 1263,
	1, 939,
	482, 939,
	484, 939,
	486, 939,
	-2, 1138,
	-1, 1270,
	4, 965,
	21, 965,
	22, 965,
	23, 965,
	24, 965,
	25, 965,
	27, 965,
	28, 965,
	34, 965,
	39, 965,
	40, 965,
	41, 965,
	42, 965,
	43, 965,
	44, 965,
	45, 965,
	47, 965,
	48, 965,
	49, 965,
	51, 965,
	52, 965,
	53, 965,
	54, 965,
	55, 965,
	59, 965,
	60, 965,
	61, 965,
	62, 965,
	64, 965,
	65, 965,
	66, 965,
	70, 965,
	71, 965,
	72, 965,
	73, 965,
	74, 965,
	75, 965,
	76, 965,
	79, 965,
	80, 965,
	81, 965,
	82, 965,
	84, 965,
	86, 965,
	87, 965,
	88, 965,
	90, 965,
	92, 965,
	93, 965,
	101, 965,
	102, 965,
	103, 965,
	104, 965,
	106, 965,
	107, 965,
	108, 965,
	110, 965,
	111, 965,
	112, 965,
	114, 965,
	115, 965,
	117, 965,
	120, 965,
	121, 965,
	122, 965,
	124, 965,
	126, 965,
	127, 965,
	129, 965,
	130, 965,
	131, 965,
	132, 965,
	133, 965,
	134, 965,
	135, 965,
	136, 965,
	137, 965,
	138, 965,
	139, 965,
	140, 965,
	141, 965,
	142, 965,
	150, 965,
	151, 965,
	152, 965,
	153, 965,
	157, 965,
	159, 965,
	163, 965,
	164, 965,
	165, 965,
	166, 965,
	167, 965,
	168, 965,
	170, 965,
	171, 965,
	173, 965,
	174, 965,
	176, 965,
	177, 965,
	178, 965,
	179, 965,
	180, 965,
	181, 965,
	182, 965,
	183, 965,
	184, 965,
	186, 965,
	187, 965,
	189, 965,
	190, 965,
	191, 965,
	192, 965,
	197, 965,
	198, 965,
	199, 965,
	202, 965,
	203, 965,
	204, 965,
	206, 965,
	208, 965,
	210, 965,
	212, 965,
	213, 965,
	214, 965,
	216, 965,
	220, 965,
	221, 965,
	222, 965,
	223, 965,
	224, 965,
	226, 965,
	227, 965,
	229, 965,
	230, 965,
	232, 965,
	233, 965,
	236, 965,
	237, 965,
	238, 965,
	241, 965,
	242, 965,
	243, 965,
	244, 965,
	246, 965,
	247, 965,
	248, 965,
	249, 965,
	250, 965,
	251, 965,
	252, 965,
	253, 965,
	254, 965,
	255, 965,
	256, 965,
	258, 965,
	260, 965,
	261, 965,
	262, 965,
	263, 965,
	264, 965,
	266, 965,
	270, 965,
	272, 965,
	273, 965,
	274, 965,
	275, 965,
	276, 965,
	279, 965,
	281, 965,
	283, 965,
	284, 965,
	285, 965,
	288, 965,
	289, 965,
	290, 965,
	292, 965,
	294, 965,
	295, 965,
	296, 965,
	297, 965,
	298, 965,
	299, 965,
	300, 965,
	301, 965,
	302, 965,
	303, 965,
	305, 965,
	306, 965,
	307, 965,
	308, 965,
	309, 965,
	310, 965,
	311, 965,
	312, 965,
	313, 965,
	315, 965,
	317, 965,
	318, 965,
	319, 965,
	320, 965,
	321, 965,
	322, 965,
	323, 965,
	324, 965,
	325, 965,
	326, 965,
	333, 965,
	335, 965,
	336, 965,
	337, 965,
	338, 965,
	339, 965,
	340, 965,
	341, 965,
	342, 965,
	344, 965,
	346, 965,
	347, 965,
	348, 965,
	349, 965,
	350, 965,
	351, 965,
	353, 965,
	354, 965,
	355, 965,
	356, 965,
	357, 965,
	358, 965,
	359, 965,
	360, 965,
	362, 965,
	363, 965,
	364, 965,
	365, 965,
	366, 965,
	367, 965,
	369, 965,
	370, 965,
	371, 965,
	372, 965,
	373, 965,
	375, 965,
	376, 965,
	377, 965,
	379, 965,
	381, 965,
	382, 965,
	383, 965,
	384, 965,
	385, 965,
	386, 965,
	387, 965,
	388, 965,
	389, 965,
	390, 965,
	391, 965,
	392, 965,
	393, 965,
	395, 965,
	396, 965,
	398, 965,
	400, 965,
	401, 965,
	402, 965,
	403, 965,
	404, 965,
	405, 965,
	406, 965,
	408, 965,
	409, 965,
	410, 965,
	411, 965,
	412, 965,
	414, 965,
	416, 965,
	417, 965,
	418, 965,
	419, 965,
	420, 965,
	422, 965,
	423, 965,
	424, 965,
	426, 965,
	427, 965,
	430, 965,
	431, 965,
	432, 965,
	433, 965,
	434, 965,
	435, 965,
	436, 965,
	438, 965,
	441, 965,
	442, 965,
	443, 965,
	444, 965,
	445, 965,
	446, 965,
	448, 965,
	449, 965,
	450, 965,
	455, 965,
	456, 965,
	457, 965,
	458, 965,
	459, 965,
	460, 965,
	-2, 0,
	-1, 1335,
	1, 372,
	482, 372,
	484, 372,
	486, 372,
	-2, 1112,
	-1, 1338,
	4, 2118,
	11, 2118,
	12, 2118,
	14, 2118,
	15, 2118,
	16, 2118,
	17, 2118,
	18, 2118,
	19, 2118,
	21, 2118,
	22, 2118,
	23, 2118,
	24, 2118,
	25, 2118,
	27, 2118,
	28, 2118,
	31, 2118,
	32, 2118,
	34, 2118,
	36, 2118,
	39, 2118,
	40, 2118,
	41, 2118,
	42, 2118,
	43, 2118,
	44, 2118,
	45, 2118,
	47, 2118,
	48, 2118,
	49, 2118,
	51, 2118,
	52, 2118,
	53, 2118,
	54, 2118,
	55, 2118,
	59, 2118,
	60, 2118,
	61, 2118,
	62, 2118,
	64, 2118,
	65, 2118,
	66, 2118,
	67, 2118,
	70, 2118,
	71, 2118,
	72, 2118,
	73, 2118,
	74, 2118,
	75, 2118,
	76, 2118,
	77, 2118,
	79, 2118,
	80, 2118,
	81, 2118,
	82, 2118,
	84, 2118,
	85, 2118,
	86, 2118,
	87, 2118,
	88, 2118,
	90, 2118,
	91, 2118,
	92, 2118,
	93, 2118,
	101, 2118,
	102, 2118,
	103, 2118,
	104, 2118,
	106, 2118,
	107, 2118,
	108, 2118,
	110, 2118,
	111, 2118,
	112, 2118,
	114, 2118,
	115, 2118,
	117, 2118,
	120, 2118,
	121, 2118,
	122, 2118,
	124, 2118,
	126, 2118,
	127, 2118,
	129, 2118,
	130, 2118,
	131, 2118,
	132, 2118,
	133, 2118,
	134, 2118,
	135, 2118,
	136, 2118,
	137, 2118,
	138, 2118,
	139, 2118,
	140, 2118,
	141, 2118,
	142, 2118,
	146, 2118,
	147, 2118,
	148, 2118,
	149, 2118,
	150, 2118,
	151, 2118,
	152, 2118,
	153, 2118,
	156, 2118,
	157, 2118,
	159, 2118,
	162, 2118,
	163, 2118,
	164, 2118,
	165, 2118,
	166, 2118,
	167, 2118,
	168, 2118,
	170, 2118,
	171, 2118,
	173, 2118,
	174, 2118,
	176, 2118,
	177, 2118,
	178, 2118,
	179, 2118,
	180, 2118,
	181, 2118,
	182, 2118,
	183, 2118,
	184, 2118,
	185, 2118,
	186, 2118,
	187, 2118,
	188, 2118,
	189, 2118,
	190, 2118,
	191, 2118,
	192, 2118,
	194, 2118,
	195, 2118,
	197, 2118,
	198, 2118,
	199, 2118,
	201, 2118,
	202, 2118,
	203, 2118,
	204, 2118,
	206, 2118,
	208, 2118,
	209, 2118,
	210, 2118,
	211, 2118,
	212, 2118,
	213, 2118,
	214, 2118,
	215, 2118,
	216, 2118,
	218, 2118,
	219, 2118,
	220, 2118,
	221, 2118,
	222, 2118,
	223, 2118,
	224, 2118,
	226, 2118,
	227, 2118,
	229, 2118,
	230, 2118,
	231, 2118,
	232, 2118,
	233, 2118,
	234, 2118,
	236, 2118,
	237, 2118,
	238, 2118,
	241, 2118,
	242, 2118,
	243, 2118,
	244, 2118,
	245, 2118,
	246, 2118,
	247, 2118,
	248, 2118,
	249, 2118,
	250, 2118,
	251, 2118,
	252, 2118,
	253, 2118,
	254, 2118,
	255, 2118,
	256, 2118,
	258, 2118,
	259, 2118,
	260, 2118,
	261, 2118,
	262, 2118,
	263, 2118,
	264, 2118,
	266, 2118,
	269, 2118,
	270, 2118,
	272, 2118,
	273, 2118,
	274, 2118,
	275, 2118,
	276, 2118,
	279, 2118,
	283, 2118,
	284, 2118,
	285, 2118,
	286, 2118,
	288, 2118,
	289, 2118,
	290, 2118,
	292, 2118,
	294, 2118,
	295, 2118,
	296, 2118,
	297, 2118,
	298, 2118,
	299, 2118,
	300, 2118,
	301, 2118,
	302, 2118,
	303, 2118,
	305, 2118,
	306, 2118,
	307, 2118,
	308, 2118,
	309, 2118,
	310, 2118,
	311, 2118,
	312, 2118,
	313, 2118,
	315, 2118,
	317, 2118,
	318, 2118,
	319, 2118,
	320, 2118,
	321, 2118,
	322, 2118,
	323, 2118,
	324, 2118,
	325, 2118,
	326, 2118,
	333, 2118,
	334, 2118,
	335, 2118,
	336, 2118,
	337, 2118,
	338, 2118,
	339, 2118,
	340, 2118,
	341, 2118,
	342, 2118,
	344, 2118,
	345, 2118,
	346, 2118,
	347, 2118,
	348, 2118,
	349, 2118,
	350, 2118,
	351, 2118,
	352, 2118,
	353, 2118,
	354, 2118,
	355, 2118,
	356, 2118,
	357, 2118,
	358, 2118,
	359, 2118,
	360, 2118,
	362, 2118,
	363, 2118,
	364, 2118,
	365, 2118,
	366, 2118,
	367, 2118,
	369, 2118,
	370, 2118,
	371, 2118,
	372, 2118,
	373, 2118,
	374, 2118,
	375, 2118,
	376, 2118,
	377, 2118,
	379, 2118,
	381, 2118,
	382, 2118,
	383, 2118,
	384, 2118,
	385, 2118,
	386, 2118,
	387, 2118,
	388, 2118,
	389, 2118,
	390, 2118,
	391, 2118,
	392, 2118,
	393, 2118,
	395, 2118,
	396, 2118,
	398, 2118,
	400, 2118,
	401, 2118,
	402, 2118,
	403, 2118,
	404, 2118,
	405, 2118,
	406, 2118,
	408, 2118,
	409, 2118,
	410, 2118,
	411, 2118,
	412, 2118,
	414, 2118,
	416, 2118,
	417, 2118,
	418, 2118,
	419, 2118,
	420, 2118,
	422, 2118,
	423, 2118,
	424, 2118,
	426, 2118,
	427, 2118,
	430, 2118,
	431, 2118,
	432, 2118,
	433, 2118,
	434, 2118,
	435, 2118,
	436, 2118,
	438, 2118,
	441, 2118,
	442, 2118,
	443, 2118,
	444, 2118,
	445, 2118,
	446, 2118,
	448, 2118,
	449, 2118,
	450, 2118,
	455, 2118,
	456, 2118,
	457, 2118,
	458, 2118,
	459, 2118,
	460, 2118,
	461, 2118,
	462, 2118,
	464, 2118,
	465, 2118,
	466, 2118,
	467, 2118,
	468, 2118,
	469, 2118,
	471, 2118,
	472, 2118,
	473, 2118,
	474, 2118,
	475, 2118,
	476, 2118,
	477, 2118,
	478, 2118,
	479, 2118,
	481, 2118,
	484, 2118,
	485, 2118,
	487, 2118,
	488, 2118,
	-2, 0,
	-1, 1343,
	161, 2017,
	413, 2017,
	466, 2017,
	485, 2017,
	-2, 0,
	-1, 1375,
	319, 654,
	367, 654,
	-2, 0,
	-1, 1399,
	1, 649,
	482, 649,
	484, 649,
	486, 649,
	-2, 0,
	-1, 1400,
	1, 674,
	482, 674,
	484, 674,
	486, 674,
	-2, 0,
	-1, 1401,
	1, 656,
	482, 656,
	484, 656,
	486, 656,
	-2, 0,
	-1, 1403,
	1, 660,
	482, 660,
	484, 660,
	486, 660,
	-2, 0,
	-1, 1430,
	1, 2066,
	482, 2066,
	484, 2066,
	485, 2066,
	486, 2066,
	-2, 702,
	-1, 1431,
	1, 2014,
	482, 2014,
	484, 2014,
	485, 2014,
	486, 2014,
	-2, 703,
	-1, 1446,
	1, 1022,
	486, 1022,
	-2, 1027,
	-1, 1449,
	145, 1150,
	158, 1150,
	235, 1150,
	277, 1150,
	-2, 1093,
	-1, 1544,
	128, 1114,
	145, 1114,
	158, 1114,
	205, 1114,
	235, 1114,
	277, 1114,
	287, 1114,
	428, 1114,
	-2, 1512,
	-1, 1604,
	484, 1662,
	-2, 0,
	-1, 1639,
	128, 1114,
	145, 1114,
	158, 1114,
	205, 1114,
	235, 1114,
	277, 1114,
	287, 1114,
	428, 1114,
	-2, 1229,
	-1, 1685,
	483, 1339,
	-2, 1327,
	-1, 1718,
	1, 499,
	486, 499,
	-2, 1027,
	-1, 1923,
	1, 651,
	482, 651,
	484, 651,
	486, 651,
	-2, 0,
	-1, 1924,
	1, 676,
	482, 676,
	484, 676,
	486, 676,
	-2, 0,
	-1, 1996,
	350, 1175,
	351, 1175,
	-2, 1372,
	-1, 2027,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1392,
	-1, 2028,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1393,
	-1, 2029,
	85, 0,
	218, 0,
	219, 0,
	468, 0,
	469, 0,
	-2, 1394,
	-1, 2030,
	85, 0,
	218, 0,
	219, 0,
	468, 0,
	469, 0,
	-2, 1395,
	-1, 2031,
	85, 0,
	218, 0,
	219, 0,
	468, 0,
	469, 0,
	-2, 1396,
	-1, 2032,
	85, 0,
	218, 0,
	219, 0,
	468, 0,
	469, 0,
	-2, 1397,
	-1, 2033,
	85, 0,
	218, 0,
	219, 0,
	468, 0,
	469, 0,
	-2, 1398,
	-1, 2034,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1399,
	-1, 2046,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1411,
	-1, 2047,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1412,
	-1, 2048,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1413,
	-1, 2051,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1418,
	-1, 2057,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1422,
	-1, 2059,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1430,
	-1, 2060,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1431,
	-1, 2061,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1432,
	-1, 2062,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1433,
	-1, 2174,
	5, 1805,
	161, 1673,
	483, 1802,
	-2, 1793,
	-1, 2175,
	161, 1674,
	-2, 2070,
	-1, 2176,
	161, 1675,
	-2, 1942,
	-1, 2177,
	161, 1676,
	-2, 1860,
	-1, 2178,
	161, 1677,
	-2, 1899,
	-1, 2179,
	161, 1678,
	-2, 1937,
	-1, 2180,
	161, 1679,
	-2, 2012,
	-1, 2181,
	161, 1680,
	-2, 1495,
	-1, 2250,
	1, 1230,
	2, 1230,
	91, 1230,
	128, 1230,
	145, 1230,
	158, 1230,
	162, 1230,
	172, 1230,
	175, 1230,
	201, 1230,
	205, 1230,
	215, 1230,
	231, 1230,
	235, 1230,
	259, 1230,
	277, 1230,
	281, 1230,
	287, 1230,
	343, 1230,
	345, 1230,
	428, 1230,
	439, 1230,
	452, 1230,
	453, 1230,
	454, 1230,
	463, 1230,
	482, 1230,
	484, 1230,
	486, 1230,
	488, 1230,
	-2, 1229,
	-1, 2263,
	483, 1774,
	-2, 1788,
	-1, 2286,
	483, 1338,
	-2, 1328,
	-1, 2388,
	1, 939,
	482, 939,
	484, 939,
	486, 939,
	-2, 1138,
	-1, 2544,
	282, 1178,
	-2, 2108,
	-1, 2545,
	282, 1179,
	-2, 2001,
	-1, 2549,
	350, 1739,
	351, 1739,
	-2, 1493,
	-1, 2550,
	350, 1743,
	351, 1743,
	-2, 1494,
	-1, 2551,
	350, 1740,
	351, 1740,
	-2, 1493,
	-1, 2552,
	350, 1744,
	351, 1744,
	-2, 1494,
	-1, 2565,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1420,
	-1, 2566,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1424,
	-1, 2572,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1426,
	-1, 2766,
	212, 1027,
	315, 1027,
	323, 1027,
	463, 1027,
	-2, 496,
	-1, 2865,
	1, 939,
	482, 939,
	484, 939,
	486, 939,
	-2, 1138,
	-1, 2956,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1428,
	-1, 2963,
	209, 0,
	211, 0,
	269, 0,
	-2, 1447,
	-1, 3029,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1476,
	-1, 3030,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1477,
	-1, 3031,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1478,
	-1, 3035,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1482,
	-1, 3036,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1483,
	-1, 3037,
	14, 0,
	15, 0,
	16, 0,
	464, 0,
	465, 0,
	466, 0,
	-2, 1484,
	-1, 3081,
	483, 1775,
	-2, 1789,
	-1, 3177,
	485, 2224,
	-2, 1071,
	-1, 3228,
	209, 0,
	211, 0,
	269, 0,
	-2, 1448,
	-1, 3231,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1451,
	-1, 3232,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1453,
	-1, 3406,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1452,
	-1, 3407,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	185, 0,
	188, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 1454,
	-1, 3417,
	209, 0,
	-2, 1485,
	-1, 3546,
	209, 0,
	-2, 1486,
	-1, 3681,
	44, 0,
	185, 0,
	234, 0,
	374, 0,
	461, 0,
	467, 0,
	-2, 2073,
}

const sqlPrivate = 57344

const sqlLast = 88864

var sqlAct = [...]int{

	220, 3583, 3449, 3477, 3814, 3446, 3680, 3691, 3567, 2696,
	3780, 3211, 3657, 3644, 2318, 3692, 2851, 3647, 3693, 3103,
	3435, 3734, 2442, 3338, 3484, 1024, 2697, 3628, 2995, 1211,
	1897, 3550, 3369, 849, 3364, 2014, 3679, 3395, 3293, 1195,
	2783, 3169, 3351, 2880, 1810, 3515, 3493, 2074, 3148, 3374,
	1769, 1884, 866, 1330, 2873, 2948, 2847, 3104, 2477, 2558,
	2875, 1083, 1458, 1645, 2431, 610, 3421, 578, 2405, 2719,
	2479, 2206, 2711, 2414, 2739, 1176, 1014, 702, 2702, 2682,
	2487, 2468, 3265, 2476, 2426, 610, 1674, 2428, 2470, 2443,
	2700, 2377, 3210, 1806, 2417, 2320, 1673, 840, 2243, 1805,
	3052, 2681, 1383, 1614, 3551, 1778, 1590, 2242, 1809, 2011,
	848, 147, 2087, 904, 2486, 1552, 893, 2593, 2240, 4,
	1184, 2007, 2379, 1256, 1801, 1882, 2389, 2354, 1794, 2415,
	897, 1754, 1067, 2745, 2116, 1756, 2107, 1446, 2542, 2224,
	2071, 3478, 1615, 1995, 1310, 1978, 2118, 1976, 2849, 1329,
	2245, 1744, 1351, 1336, 1326, 1839, 1634, 1320, 2436, 902,
	2203, 1261, 2480, 1056, 214, 35, 1005, 611, 1585, 612,
	1181, 546, 1197, 2110, 213, 1008, 900, 2310, 2232, 1624,
	2214, 2088, 2170, 1536, 987, 2160, 1459, 1460, 1977, 1979,
	147, 1022, 562, 1350, 532, 155, 572, 156, 554, 696,
	678, 606, 1838, 1208, 1334, 653, 1768, 2000, 2355, 878,
	549, 40, 39, 37, 28, 26, 24, 985, 1465, 1445,
	557, 1010, 768, 751, 2589, 1875, 2654, 2655, 3066, 615,
	3067, 3832, 1875, 2890, 1631, 2223, 1875, 1859, 3818, 618,
	63, 2698, 2223, 1875, 844, 1285, 3817, 3796, 1004, 615,
	2223, 3308, 3794, 3790, 3717, 64, 3308, 1815, 3718, 618,
	3715, 3713, 3710, 2764, 2223, 2223, 3711, 68, 3707, 1002,
	2216, 1873, 3708, 1064, 839, 1473, 1474, 2889, 1506, 1507,
	1508, 1516, 1517, 1518, 844, 899, 713, 3702, 90, 3677,
	3676, 1815, 2669, 1815, 1815, 1509, 1504, 3675, 3056, 1036,
	3672, 1890, 73, 1476, 1890, 3671, 3666, 1020, 1522, 1890,
	3308, 3664, 3642, 3622, 3616, 3308, 3308, 2278, 2223, 3615,
	3610, 3609, 3603, 2223, 3308, 3308, 1815, 1041, 3548, 2274,
	2223, 1475, 2278, 988, 988, 78, 3529, 991, 3526, 992,
	1815, 1495, 3308, 826, 3486, 825, 89, 2602, 3487, 1492,
	3466, 79, 86, 2603, 1815, 3465, 1064, 2189, 3623, 1815,
	2654, 2655, 1543, 1815, 3457, 3456, 3427, 1017, 1815, 3308,
	1815, 2660, 3408, 3393, 1037, 3382, 2278, 1890, 834, 2905,
	3335, 1905, 3532, 3326, 2223, 2654, 2655, 2223, 2672, 2673,
	2674, 3307, 3230, 3185, 3179, 3308, 2278, 2921, 2921, 3146,
	80, 989, 3076, 3147, 3074, 3226, 3077, 3056, 3075, 2215,
	1498, 1499, 1500, 1501, 3059, 2979, 3363, 2975, 2223, 1815,
	1481, 2223, 2920, 2912, 2695, 2693, 2921, 2913, 2223, 2223,
	1890, 3327, 2692, 1815, 2654, 2655, 2223, 2672, 2673, 2674,
	2913, 2368, 2309, 2654, 2655, 2223, 845, 1724, 1874, 1513,
	2905, 2669, 1523, 2645, 3225, 2411, 1773, 2646, 1503, 1505,
	2670, 2643, 2557, 1814, 2635, 2644, 2654, 2655, 2636, 2672,
	2673, 2674, 2307, 1519, 2633, 1520, 1016, 2604, 2223, 1610,
	2466, 2223, 1490, 1491, 1893, 2592, 2966, 2465, 1207, 1473,
	1474, 1893, 79, 2391, 3132, 2294, 2276, 1890, 1511, 2223,
	2669, 2951, 2277, 2272, 2265, 2660, 2278, 2223, 1815, 1496,
	1504, 1876, 2222, 2929, 1632, 81, 2223, 1476, 1876, 1402,
	1892, 1804, 1876, 2891, 1893, 1229, 2654, 2655, 1385, 1876,
	2660, 2259, 2669, 1521, 2258, 2257, 2256, 2255, 993, 990,
	188, 833, 2892, 3698, 832, 1475, 831, 830, 829, 828,
	1510, 824, 154, 84, 823, 85, 822, 1473, 1474, 2522,
	2889, 821, 820, 188, 819, 818, 817, 2671, 816, 815,
	814, 813, 812, 811, 188, 810, 749, 902, 190, 2660,
	748, 902, 701, 2675, 747, 1476, 123, 746, 2660, 745,
	1037, 744, 743, 742, 2670, 3281, 1086, 2215, 1502, 741,
	1086, 190, 1200, 740, 739, 738, 1200, 737, 736, 735,
	1066, 2660, 190, 1475, 1071, 734, 1497, 733, 1060, 2670,
	732, 731, 730, 189, 902, 729, 902, 728, 902, 727,
	726, 725, 2675, 182, 1481, 124, 724, 723, 1514, 2373,
	722, 183, 711, 710, 669, 630, 189, 629, 621, 158,
	620, 619, 1187, 1223, 1037, 1200, 3242, 189, 2456, 592,
	584, 583, 157, 3087, 2675, 1888, 947, 182, 2670, 1874,
	582, 2660, 1503, 1505, 3070, 183, 1971, 2670, 566, 210,
	209, 208, 207, 1217, 206, 157, 2665, 2663, 2664, 2656,
	2657, 2658, 2659, 2661, 2662, 1200, 157, 205, 204, 1200,
	2670, 2671, 1481, 1200, 1228, 203, 202, 201, 902, 200,
	847, 1054, 2439, 1200, 1084, 188, 902, 199, 1185, 198,
	2113, 197, 196, 1496, 195, 1512, 2671, 123, 1487, 1488,
	1494, 1515, 1493, 1489, 194, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 193, 192, 191, 2922, 3251, 2143,
	212, 2742, 3250, 190, 1543, 2615, 1200, 2598, 1203, 2395,
	2670, 1079, 2282, 1173, 1178, 2266, 2249, 1635, 1049, 2129,
	1593, 188, 902, 2127, 2422, 2671, 1592, 1752, 615, 1658,
	1563, 1210, 1213, 1209, 2671, 1593, 1073, 1026, 618, 1472,
	1216, 1592, 1221, 2114, 1227, 895, 1355, 1596, 189, 3678,
	2654, 2655, 3590, 1900, 1554, 1266, 1269, 2671, 182, 190,
	147, 147, 1591, 2654, 2655, 3541, 183, 3383, 3445, 1339,
	1341, 2663, 2664, 2656, 2657, 2658, 2659, 2661, 2662, 1272,
	1497, 3535, 1222, 3533, 1314, 1317, 3378, 157, 2666, 2667,
	2668, 1060, 3362, 3286, 1060, 2665, 2663, 2664, 2656, 2657,
	2658, 2659, 2661, 2662, 189, 902, 902, 902, 902, 902,
	902, 902, 3130, 1323, 182, 2115, 2112, 2671, 3264, 3263,
	3257, 1337, 183, 3256, 1349, 1899, 1412, 3255, 188, 3248,
	3247, 3246, 1354, 3241, 188, 3238, 902, 2666, 2667, 2668,
	3237, 3145, 902, 157, 2665, 2663, 2664, 2656, 2657, 2658,
	2659, 2661, 2662, 2665, 2663, 2664, 2656, 2657, 2658, 2659,
	2661, 2662, 3152, 3091, 3090, 876, 190, 1288, 3089, 2666,
	2667, 2668, 190, 1450, 2341, 3080, 2665, 2663, 2664, 2656,
	2657, 2658, 2659, 2661, 2662, 1555, 1403, 1553, 1001, 1850,
	3049, 3048, 3047, 1449, 2971, 2660, 2967, 1542, 2737, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 2660, 2916,
	1444, 189, 1820, 2689, 188, 2654, 2655, 189, 1404, 2424,
	2680, 182, 2653, 2650, 2117, 2649, 1360, 182, 2647, 183,
	1376, 2642, 2641, 1473, 1474, 183, 2640, 845, 2664, 2656,
	2657, 2658, 2659, 2661, 2662, 902, 902, 902, 2637, 1561,
	157, 902, 190, 2634, 2614, 2597, 157, 1554, 1022, 2590,
	1022, 1476, 188, 2467, 1612, 2250, 2100, 1472, 1471, 1447,
	1477, 1478, 1479, 1480, 1482, 1483, 3827, 1086, 1818, 1455,
	1454, 3789, 3788, 902, 2670, 3727, 610, 3725, 3377, 1475,
	1690, 610, 188, 3716, 826, 1025, 825, 189, 2997, 902,
	190, 3582, 3578, 1200, 3575, 1660, 188, 182, 1595, 1451,
	3574, 1468, 1469, 3573, 3566, 183, 1670, 3560, 902, 188,
	3530, 1713, 1621, 2111, 1086, 3514, 3513, 2077, 3501, 3498,
	190, 3462, 1666, 3441, 3419, 3403, 2438, 3402, 1642, 3390,
	3389, 3355, 1721, 3280, 190, 189, 1060, 2290, 3262, 1618,
	1619, 1750, 3200, 3197, 1668, 182, 1018, 190, 3121, 3120,
	2660, 1587, 1588, 183, 1715, 3107, 3151, 3106, 3062, 2962,
	1716, 1540, 147, 2923, 1020, 189, 1020, 2906, 1481, 2866,
	2831, 2423, 2810, 2786, 157, 182, 2785, 988, 2759, 189,
	2083, 2671, 2757, 183, 2694, 1661, 1665, 2619, 2618, 182,
	2613, 2581, 189, 1684, 2404, 1473, 1474, 183, 1599, 1598,
	1664, 1597, 182, 1594, 157, 1586, 1584, 1643, 2288, 2287,
	183, 2261, 2254, 2221, 845, 2125, 1657, 1649, 157, 1613,
	1608, 1607, 1606, 1476, 1017, 1640, 1017, 1605, 1604, 1718,
	1603, 157, 1753, 1602, 1601, 1600, 1581, 1901, 1662, 1580,
	615, 1579, 1578, 1577, 1611, 615, 1200, 1200, 1576, 1575,
	618, 1475, 1574, 1573, 1086, 618, 1572, 1571, 1570, 1569,
	1568, 1762, 1567, 1652, 1651, 1650, 1648, 1647, 1646, 1637,
	2734, 2142, 1791, 1473, 1474, 1793, 1556, 1669, 1798, 1541,
	1633, 1539, 1712, 1534, 1048, 1039, 2786, 1032, 1671, 1653,
	3552, 2128, 3358, 3430, 1504, 2126, 3282, 3234, 3086, 1811,
	3073, 1476, 3065, 2656, 2657, 2658, 2659, 2661, 2662, 2601,
	2280, 3329, 2252, 1746, 1741, 1736, 2656, 2657, 2658, 2659,
	2661, 2662, 3284, 3786, 3085, 861, 2654, 2655, 3536, 1475,
	3534, 1555, 2755, 1016, 1537, 1016, 1070, 2813, 845, 3444,
	1743, 3779, 3576, 1743, 2876, 1743, 1777, 3489, 3488, 3381,
	3328, 3068, 2908, 1068, 1576, 2907, 3494, 1719, 1061, 3155,
	1593, 1064, 1635, 2639, 1442, 3422, 1592, 2638, 1064, 1802,
	2563, 2343, 1816, 1065, 3119, 2853, 1843, 2852, 1898, 808,
	1565, 1200, 3485, 1200, 1384, 1200, 3703, 2359, 1179, 1069,
	1730, 1191, 3690, 1200, 1385, 1807, 1200, 3815, 3135, 1812,
	1773, 1375, 3123, 1848, 2927, 1064, 1856, 2698, 2999, 1200,
	1200, 1200, 615, 2286, 1413, 1210, 3699, 1209, 1481, 809,
	1576, 2607, 618, 2108, 1609, 2845, 1851, 1589, 1847, 610,
	1244, 3712, 3709, 2885, 1797, 1364, 3098, 3568, 1915, 3365,
	1055, 3640, 3557, 2789, 3114, 2474, 1268, 1268, 2435, 2838,
	3750, 1813, 2943, 3751, 3318, 1232, 1503, 1505, 3602, 1000,
	2768, 1062, 806, 2295, 804, 1903, 802, 3824, 1853, 1063,
	2658, 2659, 2661, 2662, 3475, 3700, 800, 797, 1864, 1957,
	1919, 3468, 1830, 1955, 1268, 3137, 1829, 3134, 1479, 1480,
	1482, 1483, 3133, 3095, 3094, 2612, 665, 2611, 2610, 1904,
	2609, 1242, 902, 2567, 902, 2375, 2367, 1496, 1410, 2366,
	2346, 902, 2273, 2058, 1690, 1690, 1086, 1562, 902, 902,
	902, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	902, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	902, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	902, 902, 902, 1337, 902, 1337, 902, 902, 902, 902,
	1975, 1862, 1988, 1866, 1867, 1858, 1731, 1061, 1288, 1909,
	1861, 1243, 1861, 1411, 791, 2313, 1448, 1206, 902, 2770,
	1049, 902, 902, 666, 2113, 1894, 1906, 1895, 2156, 2311,
	902, 1362, 2313, 615, 902, 1409, 902, 902, 843, 1908,
	2012, 2013, 2155, 618, 1086, 1070, 2311, 2016, 544, 1064,
	902, 902, 902, 902, 1497, 902, 902, 902, 902, 902,
	902, 902, 902, 3601, 2432, 1968, 1878, 1684, 1684, 1880,
	1937, 1357, 539, 1070, 2015, 1885, 1828, 1278, 1887, 1277,
	3401, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	1061, 1299, 2089, 2090, 902, 1999, 2756, 2114, 1069, 2812,
	1735, 1734, 1238, 1483, 1743, 1745, 1022, 2089, 2105, 845,
	1062, 845, 794, 1086, 1770, 842, 2928, 1969, 1063, 1974,
	1973, 1972, 1022, 2345, 1980, 1987, 1069, 3774, 1276, 1913,
	1275, 1251, 2302, 2151, 1930, 2540, 1965, 2264, 902, 1086,
	1766, 826, 1986, 2003, 826, 826, 2004, 2005, 1421, 2334,
	2555, 2104, 2173, 2173, 2187, 3669, 2089, 1986, 1967, 2207,
	2209, 2073, 2120, 1771, 1772, 2213, 2073, 3305, 1453, 2115,
	2112, 2934, 1358, 2333, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 1262, 1984, 2229, 1863, 1687, 1927, 2525, 2108,
	2933, 1767, 3110, 1062, 3301, 1970, 2281, 844, 1984, 2085,
	1642, 1063, 2519, 1200, 2237, 1738, 3775, 3696, 1047, 2262,
	2380, 3750, 3451, 2153, 590, 2117, 1922, 2102, 2154, 1260,
	3763, 2157, 1020, 2158, 2159, 3330, 2363, 1931, 3762, 1408,
	1425, 2251, 2271, 1086, 2662, 1653, 1377, 1029, 1020, 2322,
	3302, 988, 1721, 593, 2228, 1982, 2356, 2357, 1060, 2356,
	2357, 2356, 2357, 2767, 668, 667, 2554, 2263, 1064, 3798,
	1690, 1191, 1441, 147, 2182, 2169, 2198, 720, 2236, 3739,
	2241, 1027, 2275, 2247, 2248, 2211, 1385, 2081, 2117, 2219,
	2220, 2528, 1017, 3400, 2079, 1086, 2230, 2234, 2235, 1200,
	3314, 1595, 3216, 1373, 1985, 3777, 2314, 1640, 1017, 902,
	3215, 902, 1740, 2547, 2548, 3101, 1385, 589, 845, 1985,
	2882, 3810, 1363, 3453, 663, 1678, 662, 798, 845, 798,
	1923, 798, 845, 1240, 1773, 2988, 2344, 1399, 2293, 1473,
	1474, 799, 798, 1956, 1739, 2376, 2325, 1954, 841, 1964,
	2298, 1064, 2289, 3697, 598, 2364, 2349, 2408, 1587, 1588,
	1504, 2308, 540, 2300, 1361, 1983, 786, 1476, 2446, 3122,
	2883, 1966, 2382, 2348, 1030, 2824, 2292, 2296, 1924, 3569,
	1983, 1200, 1200, 1684, 1200, 1400, 2312, 2111, 838, 1623,
	1875, 2301, 2381, 2383, 2527, 1475, 1200, 1773, 1298, 2818,
	1764, 1016, 2358, 2360, 2361, 2362, 2299, 2488, 3297, 1237,
	2317, 2392, 3298, 1018, 2769, 1018, 2524, 1016, 1790, 541,
	845, 1775, 2336, 603, 2340, 2490, 2327, 2330, 2493, 2494,
	3695, 2386, 2882, 2347, 1262, 2462, 2834, 2499, 2500, 2501,
	1929, 3783, 902, 2800, 2117, 3620, 2365, 600, 695, 3111,
	1422, 1582, 3776, 2372, 2509, 3300, 2510, 542, 3312, 543,
	1627, 3738, 2753, 1764, 2985, 787, 2313, 2473, 3303, 615,
	3347, 3212, 1210, 2507, 2393, 2397, 3413, 2399, 1359, 618,
	2328, 2402, 902, 3397, 1481, 3759, 2412, 3652, 902, 902,
	2799, 2055, 2099, 147, 2526, 3581, 1533, 2617, 2233, 1630,
	2324, 1846, 2463, 2430, 3799, 2492, 2448, 2530, 2495, 2532,
	2496, 2441, 2452, 1625, 2453, 2437, 2454, 591, 2437, 795,
	588, 2504, 1503, 1505, 2246, 3357, 3452, 2569, 2459, 1628,
	844, 2511, 2072, 2513, 2460, 2515, 2986, 2464, 3720, 3206,
	2475, 1420, 3082, 902, 902, 3721, 1452, 2458, 2491, 902,
	595, 2523, 1764, 1423, 1042, 3217, 1337, 1626, 2945, 2538,
	1757, 1191, 902, 902, 1758, 786, 1926, 3584, 902, 902,
	3299, 2387, 599, 1496, 902, 3694, 721, 1028, 1387, 2713,
	1747, 1748, 3313, 902, 902, 902, 1046, 838, 1800, 902,
	2802, 2506, 3618, 3749, 2570, 1921, 3396, 602, 3747, 902,
	2512, 2069, 2514, 3598, 2516, 1757, 2517, 3811, 1799, 1758,
	2537, 2536, 3500, 597, 3737, 2323, 902, 3167, 2869, 2600,
	788, 2804, 3619, 1424, 2546, 2541, 2067, 1837, 2535, 2533,
	1687, 1687, 2053, 1999, 1795, 2056, 1620, 2556, 1040, 1035,
	3348, 2080, 531, 1629, 2455, 2117, 836, 3781, 786, 3150,
	594, 1792, 1463, 3260, 1462, 2595, 2596, 1771, 1772, 1759,
	2599, 1546, 3213, 1462, 787, 1551, 2002, 1457, 218, 1774,
	838, 1372, 1374, 1761, 2803, 3804, 1876, 1732, 2591, 2949,
	1497, 2052, 902, 902, 902, 1796, 2568, 2746, 604, 3459,
	3458, 902, 902, 902, 3556, 1627, 902, 3439, 1729, 596,
	3168, 3097, 2870, 3398, 1759, 2864, 902, 1022, 1086, 837,
	2781, 2329, 902, 2777, 902, 2416, 2406, 1857, 1761, 2705,
	2706, 1849, 1022, 2984, 3317, 1842, 1824, 3782, 3629, 2946,
	789, 3316, 1992, 2606, 1630, 1763, 3719, 2712, 1961, 2063,
	1086, 3305, 3170, 1462, 1461, 1725, 2225, 787, 2231, 1533,
	2064, 3038, 1022, 1461, 2065, 3784, 3585, 1086, 2070, 1678,
	1678, 2727, 3370, 2403, 1628, 1727, 1301, 2691, 3301, 1690,
	3483, 790, 3294, 1086, 853, 1757, 3481, 3440, 2792, 1758,
	1763, 1914, 2788, 2707, 902, 2743, 1463, 1728, 3292, 2350,
	717, 2787, 2717, 2751, 3296, 1463, 3064, 3218, 902, 2561,
	2715, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 2736, 1690,
	3261, 2763, 2539, 2227, 3302, 2774, 2775, 2765, 2226, 788,
	2710, 2054, 2709, 1020, 709, 902, 2704, 865, 2740, 2578,
	1060, 2771, 2790, 1461, 2716, 2794, 1764, 3803, 1020, 2725,
	1993, 1401, 2733, 2270, 2269, 2728, 2729, 2268, 2699, 3295,
	2741, 2686, 2687, 2688, 2576, 2754, 845, 1388, 2730, 2791,
	2714, 2267, 2796, 2797, 1270, 2778, 1086, 2410, 1020, 3219,
	842, 3562, 2806, 1284, 1759, 2744, 1271, 1200, 1629, 1779,
	1282, 1764, 1684, 1017, 3447, 2726, 1086, 2815, 1761, 3315,
	719, 2758, 2748, 2749, 2750, 2782, 1783, 2731, 1017, 2732,
	3039, 1200, 788, 3339, 2066, 2917, 1855, 2390, 3040, 2850,
	2840, 3756, 1200, 2068, 3479, 3586, 3637, 2773, 3632, 2582,
	2583, 3626, 1684, 2766, 2760, 2761, 1022, 2762, 1017, 789,
	2858, 2817, 2825, 2863, 2878, 2772, 1687, 2351, 2352, 3387,
	3266, 1762, 3563, 2488, 1780, 3053, 2124, 3758, 3714, 1439,
	1763, 1437, 2488, 2747, 1417, 1415, 1398, 2832, 2805, 3437,
	1665, 1396, 3577, 3418, 1200, 1200, 2811, 2573, 1762, 1394,
	790, 3448, 3297, 3259, 2820, 2887, 3298, 2821, 2839, 1760,
	2683, 2822, 2574, 2827, 2823, 1392, 2579, 2961, 2904, 2684,
	3633, 2835, 1016, 2807, 2808, 2833, 3438, 2809, 2898, 3386,
	1802, 715, 716, 2925, 2744, 2871, 2841, 1016, 1802, 2842,
	835, 2348, 789, 2924, 3564, 1086, 2879, 2648, 1086, 3300,
	1390, 1382, 2580, 2407, 1760, 2828, 2829, 2861, 2826, 2830,
	1179, 1018, 3303, 2374, 1784, 707, 708, 1016, 1380, 2677,
	2678, 2679, 1020, 2884, 1191, 2342, 1280, 1018, 902, 2942,
	2291, 1764, 2893, 790, 902, 902, 1659, 2915, 902, 902,
	902, 1656, 902, 2919, 1440, 1678, 147, 147, 1352, 2941,
	2940, 902, 1690, 2899, 622, 2902, 2903, 1457, 1283, 2939,
	902, 2886, 2521, 902, 1953, 1281, 2520, 1755, 2498, 1086,
	1981, 1963, 1785, 1786, 2877, 718, 1934, 1714, 902, 2721,
	1566, 1356, 1017, 1255, 1781, 2930, 1086, 2931, 1438, 2932,
	1436, 2123, 3689, 1416, 1414, 1397, 1690, 1690, 902, 902,
	1395, 902, 902, 902, 3334, 3325, 3625, 796, 1393, 1268,
	1268, 3368, 2575, 1185, 3299, 2936, 1084, 3290, 1782, 902,
	3166, 2577, 3160, 902, 1391, 1690, 1690, 902, 902, 902,
	902, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	902, 902, 902, 902, 902, 902, 3117, 902, 2964, 2947,
	2944, 3115, 1191, 3096, 902, 902, 1690, 2862, 2722, 1389,
	1381, 902, 2973, 2974, 2854, 1684, 2937, 2457, 2433, 902,
	2421, 2413, 2969, 2874, 1760, 2400, 1891, 1379, 1889, 1886,
	1022, 1022, 2012, 3003, 902, 1279, 1191, 2977, 1191, 2980,
	1881, 1016, 2996, 3735, 2895, 2896, 2897, 845, 1879, 1877,
	2900, 2720, 2901, 1868, 2993, 3002, 1787, 3000, 1821, 1684,
	1684, 2012, 3018, 1086, 3010, 2987, 2989, 2990, 3011, 1819,
	1952, 1808, 3069, 3015, 1623, 865, 2724, 1803, 1789, 865,
	2991, 3042, 3050, 1776, 3017, 801, 803, 805, 1684, 1684,
	1765, 902, 3046, 2981, 1170, 3507, 1466, 997, 1170, 2559,
	3751, 1667, 3660, 3009, 3043, 3392, 902, 902, 3060, 3061,
	3385, 3012, 3384, 3013, 3092, 623, 624, 2489, 1751, 1684,
	1234, 998, 2313, 1788, 2313, 147, 3057, 3058, 3509, 3055,
	2332, 902, 902, 3178, 3051, 1773, 2311, 1925, 2331, 2082,
	1434, 1435, 1322, 1854, 1951, 1627, 1020, 1020, 1950, 1321,
	3071, 3659, 902, 601, 1932, 1546, 2723, 3319, 3571, 1200,
	3072, 1378, 1200, 3543, 3267, 2353, 2335, 1470, 545, 3752,
	3745, 1690, 1722, 2369, 2371, 2337, 3624, 2339, 2560, 3594,
	3591, 3081, 3476, 3778, 1630, 3129, 3131, 2370, 1467, 910,
	2338, 3159, 3149, 3141, 3079, 2440, 1200, 2212, 1625, 3100,
	3128, 1717, 3124, 902, 1672, 2752, 1017, 1017, 3802, 2194,
	3593, 1022, 902, 999, 1628, 3140, 1543, 556, 3180, 1322,
	3156, 626, 625, 3136, 2446, 1322, 3088, 654, 1200, 1200,
	1200, 216, 694, 534, 535, 3172, 550, 534, 550, 560,
	565, 3157, 1626, 581, 1200, 3175, 2957, 2958, 587, 2348,
	1086, 1473, 1474, 1366, 216, 3171, 2488, 2782, 3158, 1365,
	3143, 3192, 3239, 1473, 1474, 1687, 2654, 2655, 627, 628,
	706, 2119, 1086, 3084, 216, 902, 902, 1473, 1474, 1476,
	2305, 902, 902, 1690, 1684, 3161, 902, 902, 2303, 902,
	2152, 3173, 3497, 902, 2168, 2164, 3174, 3204, 3235, 3181,
	3164, 3182, 2305, 2306, 902, 1687, 3176, 1475, 3188, 3193,
	3194, 2303, 2304, 3083, 3187, 1016, 1016, 3195, 3201, 1475,
	902, 3198, 3202, 1419, 2992, 3199, 1418, 1020, 1629, 1560,
	3220, 1559, 3821, 3791, 3019, 3020, 3021, 3022, 3023, 3024,
	3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034,
	3035, 3036, 3037, 3214, 3041, 3764, 3553, 3472, 3209, 3431,
	3233, 3429, 3354, 3221, 2162, 3283, 3203, 3184, 3144, 3142,
	3113, 3108, 534, 534, 2894, 2868, 2867, 1022, 2503, 3229,
	216, 2166, 2167, 2165, 2502, 1022, 3116, 1017, 3118, 1086,
	2450, 1086, 2425, 2401, 1678, 2284, 1684, 2283, 1022, 2084,
	1949, 1948, 1947, 1946, 1871, 1870, 1869, 1852, 1086, 1832,
	1831, 3205, 3272, 1827, 1826, 3258, 1191, 1825, 1823, 1822,
	1433, 1432, 1309, 1308, 1307, 1306, 1305, 902, 1304, 3287,
	3288, 1303, 1302, 1300, 1678, 2161, 2163, 1846, 1295, 1294,
	1293, 1292, 1291, 1250, 1249, 1248, 3310, 1247, 1246, 1245,
	3320, 1239, 1018, 1086, 3271, 3268, 3274, 3311, 1086, 3278,
	3269, 3270, 1233, 3273, 1231, 1230, 1077, 1018, 1076, 1075,
	3322, 3323, 3279, 1074, 2740, 3289, 1045, 1044, 3321, 980,
	3275, 1723, 3340, 807, 793, 3309, 3450, 1086, 3304, 3337,
	1427, 3186, 1200, 1020, 77, 1241, 1016, 1018, 641, 72,
	3112, 1020, 649, 3639, 2798, 2378, 1933, 1386, 1935, 3277,
	2735, 2253, 3617, 3243, 1020, 2616, 3549, 3412, 902, 2122,
	1564, 74, 886, 932, 3346, 1170, 3285, 1191, 1191, 3345,
	3333, 3372, 3291, 1086, 3099, 2478, 3343, 3388, 3341, 3342,
	1676, 1677, 3356, 852, 1089, 902, 902, 902, 3332, 3336,
	3391, 3371, 3359, 1017, 1733, 892, 1749, 3375, 3373, 1742,
	2285, 1017, 2172, 1086, 909, 906, 865, 1679, 1687, 1681,
	902, 902, 1170, 908, 1017, 3361, 907, 1680, 3366, 1583,
	902, 905, 1675, 1690, 3163, 3162, 2409, 902, 902, 2444,
	1287, 772, 1737, 2078, 3399, 2106, 2605, 2194, 3380, 1191,
	1557, 3404, 1086, 867, 888, 2103, 1038, 877, 2718, 2881,
	3078, 3376, 1687, 1687, 1991, 1086, 657, 2651, 2109, 1031,
	2195, 2188, 2184, 902, 2434, 1443, 1535, 2445, 1072, 902,
	870, 2076, 1548, 2585, 2001, 3349, 2888, 902, 2738, 1690,
	2279, 1687, 1687, 3656, 2006, 3360, 902, 1836, 996, 902,
	3434, 1084, 995, 3433, 3409, 902, 3425, 3426, 994, 3424,
	3428, 3646, 1016, 3643, 3196, 3379, 2848, 1726, 2297, 3432,
	1016, 1018, 1687, 1525, 2855, 882, 1190, 2194, 2194, 3420,
	2703, 3410, 3471, 1016, 2918, 3455, 3454, 1252, 3482, 1086,
	2850, 586, 1200, 3491, 3570, 894, 1684, 1678, 1524, 2385,
	2384, 3559, 3473, 1059, 1058, 1057, 2780, 3496, 3809, 3480,
	902, 902, 1170, 3109, 187, 3469, 2553, 1464, 1456, 184,
	3410, 186, 3495, 902, 902, 3461, 1033, 3508, 185, 3527,
	3528, 3504, 3490, 2015, 3512, 3350, 3126, 19, 3506, 902,
	1690, 1678, 1678, 18, 3531, 17, 94, 38, 3505, 3511,
	3510, 3503, 1684, 3525, 1043, 16, 122, 121, 120, 119,
	118, 581, 902, 3375, 117, 902, 116, 111, 115, 114,
	1678, 1678, 113, 3538, 112, 110, 109, 108, 3555, 107,
	3502, 106, 105, 902, 216, 104, 216, 216, 1182, 103,
	216, 102, 3554, 3565, 3539, 3540, 101, 2194, 2194, 2194,
	100, 1678, 3572, 216, 1212, 99, 98, 97, 96, 902,
	902, 95, 577, 574, 3580, 52, 51, 93, 1012, 902,
	92, 15, 902, 36, 1200, 13, 56, 1236, 57, 12,
	3542, 31, 32, 83, 1200, 1200, 3547, 1687, 3595, 1622,
	1254, 3597, 1259, 82, 30, 216, 216, 14, 1182, 29,
	3587, 1200, 27, 1684, 10, 3608, 8, 3495, 216, 3592,
	211, 3588, 3589, 3599, 902, 1297, 7, 3600, 33, 1644,
	3604, 11, 152, 151, 3605, 153, 150, 76, 216, 216,
	216, 149, 1182, 216, 3613, 148, 3614, 3606, 3607, 3634,
	3612, 581, 1086, 216, 216, 75, 902, 902, 25, 902,
	9, 144, 3654, 3492, 3611, 3645, 3648, 3154, 706, 71,
	146, 3636, 3463, 3464, 145, 143, 3635, 3658, 142, 141,
	69, 140, 139, 70, 138, 23, 5, 3641, 55, 6,
	3650, 3673, 3394, 1846, 3661, 3621, 2926, 3417, 3674, 902,
	902, 902, 87, 88, 34, 1018, 1018, 67, 66, 1687,
	3670, 3665, 65, 3668, 22, 54, 21, 177, 176, 175,
	3701, 902, 3579, 174, 169, 168, 1678, 3649, 173, 216,
	3653, 3706, 171, 3688, 1170, 3687, 3685, 3686, 170, 172,
	3442, 167, 179, 216, 3704, 3722, 178, 181, 165, 3726,
	161, 160, 164, 3724, 166, 163, 162, 3732, 851, 159,
	180, 62, 902, 137, 2446, 136, 135, 3723, 3736, 134,
	2015, 133, 3728, 132, 3524, 131, 61, 3731, 20, 2,
	1, 0, 3729, 3730, 0, 0, 3733, 3742, 3743, 3748,
	3744, 3746, 0, 0, 0, 0, 0, 0, 0, 0,
	3645, 0, 3755, 3648, 0, 3766, 902, 3767, 902, 3757,
	3754, 3761, 3753, 3658, 0, 3772, 0, 0, 3771, 3765,
	3516, 0, 1170, 0, 0, 3768, 3760, 3770, 1996, 0,
	3769, 0, 3517, 0, 0, 0, 3773, 3662, 1678, 0,
	3663, 3787, 3785, 0, 0, 0, 0, 3792, 0, 0,
	0, 0, 0, 3795, 0, 0, 3546, 3797, 3518, 902,
	902, 0, 0, 0, 0, 3800, 0, 902, 0, 902,
	902, 3793, 0, 3806, 0, 0, 0, 3812, 0, 3816,
	0, 0, 0, 3813, 0, 0, 1018, 0, 0, 0,
	0, 1170, 0, 0, 0, 0, 3820, 3819, 0, 0,
	0, 3823, 0, 0, 0, 0, 3826, 0, 902, 3828,
	0, 3829, 3520, 3831, 0, 0, 3833, 1170, 0, 0,
	3822, 0, 0, 0, 3825, 0, 0, 0, 3519, 0,
	0, 0, 0, 0, 2194, 2194, 534, 0, 0, 0,
	3807, 3808, 0, 0, 0, 3521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 216,
	0, 0, 0, 216, 0, 1846, 0, 0, 2190, 0,
	0, 0, 0, 0, 0, 1212, 0, 1182, 216, 3830,
	216, 0, 0, 0, 0, 216, 1212, 550, 0, 0,
	216, 1212, 0, 0, 0, 0, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1687,
	0, 1170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194,
	2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194,
	2194, 0, 2194, 0, 0, 0, 0, 0, 0, 0,
	2654, 2655, 1018, 2672, 2673, 2674, 0, 0, 0, 0,
	1018, 0, 0, 1170, 0, 1687, 0, 697, 0, 0,
	2965, 0, 0, 1018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 700, 699, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 2669, 0, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3522, 0, 0, 0, 0, 3523, 1678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 1687, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 851, 0, 0, 1189,
	851, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 1678, 2660, 0, 0, 89, 0,
	0, 216, 0, 79, 86, 216, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1214, 0, 1218, 0, 1224, 0, 216,
	0, 216, 1191, 216, 0, 0, 0, 534, 1473, 1474,
	0, 1506, 1507, 1508, 1516, 1517, 1518, 1289, 2675, 0,
	0, 1872, 80, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 1476, 1313, 1313, 1313,
	216, 1522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1347, 2670, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 1475, 1678, 0, 706, 0, 0,
	0, 0, 0, 0, 1495, 0, 216, 1348, 1182, 216,
	0, 0, 1492, 0, 0, 1353, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 216,
	0, 216, 0, 216, 0, 216, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 2543, 0, 1426, 0,
	0, 1958, 0, 0, 1959, 0, 1960, 81, 0, 0,
	0, 1405, 0, 1498, 1499, 1500, 1501, 216, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 2671, 0, 0, 0, 0, 0, 0, 565, 0,
	0, 0, 581, 0, 154, 84, 0, 85, 0, 0,
	0, 0, 1513, 0, 0, 1523, 0, 0, 0, 0,
	0, 1503, 1505, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 2190, 2190, 123, 0,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 0,
	0, 0, 0, 0, 1526, 1527, 1528, 1529, 1530, 1531,
	1532, 1511, 0, 0, 190, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 1170, 0, 0, 1473,
	1474, 0, 0, 0, 0, 1545, 0, 124, 0, 0,
	0, 1558, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 158, 0, 2666, 2667, 2668, 0, 1476, 1170, 189,
	2665, 2663, 2664, 2656, 2657, 2658, 2659, 2661, 2662, 182,
	0, 0, 0, 0, 0, 1170, 0, 183, 0, 0,
	1333, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 1170, 0, 0, 0, 1495, 0, 0, 698, 0,
	0, 0, 865, 1492, 0, 0, 2190, 2190, 2190, 0,
	534, 1502, 0, 0, 0, 0, 865, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 1497,
	0, 0, 0, 0, 534, 0, 0, 0, 0, 0,
	0, 216, 1654, 534, 1616, 1616, 1616, 0, 0, 0,
	0, 1514, 0, 0, 0, 216, 0, 1663, 0, 1189,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 2194, 0, 0, 0, 0,
	0, 0, 0, 0, 1170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1170, 0, 0, 0, 0, 0,
	0, 0, 1503, 1505, 550, 0, 0, 851, 2194, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1490, 1491, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 2321, 0, 0,
	0, 0, 0, 1496, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 2394, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1170, 2194, 0, 1170, 1212, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 1502, 2429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2321, 0, 534, 0, 0, 2449, 0,
	1497, 0, 0, 0, 216, 0, 0, 216, 0, 216,
	1834, 216, 0, 0, 1841, 0, 1182, 0, 216, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 2471, 706,
	0, 2321, 2321, 0, 2194, 2194, 0, 1170, 1289, 0,
	1860, 0, 1860, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1170, 0, 0, 0, 0, 216,
	1182, 216, 0, 0, 1212, 0, 1212, 0, 0, 1182,
	0, 1182, 0, 1182, 0, 0, 0, 0, 0, 1189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 216, 216, 216, 1182, 216,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2190, 2190, 1841, 1493, 1489, 1911, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 1928, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 1938, 0,
	1940, 0, 1942, 0, 1944, 0, 1945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1170, 0, 0, 0, 0, 1962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
	2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
	0, 2190, 0, 0, 0, 0, 0, 0, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1990, 0, 1994, 0, 0, 0, 0, 0, 0,
	2008, 0, 0, 0, 0, 0, 0, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 0, 2057, 0, 2059, 2060, 2061, 2062, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1192, 0, 0, 0, 1204, 2086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1545,
	0, 0, 0, 2101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 2131,
	2134, 2137, 2140, 0, 2144, 2145, 2146, 2147, 2148, 2149,
	2150, 216, 0, 0, 0, 1263, 534, 0, 1170, 0,
	0, 534, 0, 0, 534, 0, 0, 534, 534, 0,
	0, 0, 2186, 534, 2197, 2199, 2204, 0, 0, 0,
	1170, 216, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1212, 0, 0, 0, 0, 64, 0,
	0, 1473, 1474, 1345, 2260, 0, 0, 0, 0, 0,
	68, 1212, 0, 1204, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 1476,
	2321, 2321, 216, 0, 0, 0, 2321, 0, 0, 2784,
	0, 0, 0, 0, 0, 73, 0, 2321, 2784, 0,
	2321, 2784, 2784, 0, 0, 0, 1367, 1475, 0, 0,
	0, 0, 0, 0, 216, 216, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 216, 1182, 0, 89,
	0, 0, 0, 0, 79, 86, 0, 1170, 0, 1170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1170, 0, 0, 0,
	2844, 0, 0, 2846, 2321, 0, 0, 216, 0, 0,
	0, 216, 0, 1259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 1481, 0, 0, 0,
	2429, 0, 1189, 1182, 0, 216, 0, 0, 2321, 0,
	534, 1170, 0, 0, 0, 0, 1170, 2321, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 216, 0, 0,
	0, 0, 0, 0, 1503, 1505, 0, 0, 2396, 1841,
	2398, 0, 0, 0, 0, 1170, 2420, 0, 0, 0,
	0, 216, 2429, 0, 0, 2429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2451, 0, 0, 1313, 0, 1313, 0,
	1313, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 1170, 2935, 0, 0, 1182, 216, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 2497, 0, 0, 0, 0, 0, 0, 0,
	0, 1170, 2654, 2655, 0, 2672, 2673, 2674, 2505, 0,
	2508, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 84, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1170, 0, 0, 2529, 1189, 2531, 1189, 188, 2534, 0,
	0, 2518, 0, 1170, 0, 701, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 2998, 2669, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 190, 0, 865, 0, 2562,
	0, 0, 0, 0, 0, 0, 0, 1526, 1527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 0, 2190, 0, 0, 1170, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 2660, 183, 0,
	0, 0, 2565, 2566, 0, 0, 0, 0, 2572, 216,
	216, 0, 0, 0, 0, 0, 0, 2190, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 2586, 2587, 2676,
	130, 534, 534, 2101, 0, 0, 63, 0, 0, 0,
	0, 0, 2594, 0, 1477, 1478, 1479, 1480, 1482, 1483,
	2675, 64, 125, 0, 0, 0, 0, 0, 2608, 0,
	0, 0, 0, 68, 1212, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 2620, 0, 0, 0, 0,
	42, 0, 127, 0, 0, 0, 2670, 1204, 0, 0,
	911, 0, 0, 0, 0, 0, 41, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 0,
	44, 59, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 78, 217, 2190, 128, 0, 0, 0, 0, 0,
	0, 43, 89, 0, 0, 216, 0, 79, 86, 0,
	2204, 2204, 2204, 0, 216, 217, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 1616, 0, 0, 0, 216,
	0, 0, 0, 2708, 0, 217, 0, 0, 46, 0,
	1170, 0, 0, 0, 0, 865, 0, 0, 0, 2321,
	216, 0, 0, 2671, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 2471, 2471, 0, 0, 0,
	0, 706, 706, 2321, 0, 0, 2429, 2429, 0, 0,
	706, 2321, 0, 0, 0, 1896, 0, 0, 216, 0,
	0, 0, 0, 1204, 0, 0, 1907, 0, 0, 0,
	0, 2776, 0, 851, 0, 0, 0, 0, 0, 1916,
	1917, 1918, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2814, 2816, 2420, 0, 0, 0, 0,
	0, 0, 0, 0, 2801, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3244, 0, 0,
	0, 0, 0, 0, 0, 2666, 2667, 2668, 0, 0,
	0, 81, 2665, 2663, 2664, 2656, 2657, 2658, 2659, 2661,
	2662, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2856, 0, 0, 0,
	2860, 0, 60, 0, 0, 0, 0, 50, 154, 84,
	0, 85, 0, 48, 0, 0, 216, 129, 0, 0,
	0, 0, 1212, 49, 216, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 216, 53, 0,
	0, 0, 123, 0, 0, 1189, 1189, 0, 0, 0,
	0, 0, 126, 0, 2321, 2321, 2321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1212, 190, 0,
	2914, 0, 0, 0, 0, 2321, 0, 2784, 0, 0,
	1212, 1212, 216, 0, 0, 0, 0, 0, 1473, 1474,
	0, 124, 0, 216, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 0, 2321, 0, 1504,
	0, 3352, 0, 189, 0, 2938, 1476, 1189, 0, 0,
	216, 0, 0, 182, 0, 0, 0, 216, 0, 0,
	0, 183, 0, 0, 0, 2654, 2655, 0, 2672, 2673,
	2674, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	2950, 0, 157, 0, 1495, 3, 0, 0, 0, 0,
	1212, 0, 1492, 0, 0, 0, 0, 2008, 0, 0,
	0, 0, 0, 2952, 2953, 0, 0, 2956, 0, 0,
	0, 2959, 0, 0, 0, 0, 0, 0, 0, 0,
	2963, 0, 0, 1473, 1474, 0, 0, 0, 0, 2970,
	0, 2669, 2708, 0, 3224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 2982, 0, 0,
	0, 1476, 0, 1498, 1499, 1500, 1501, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 3004, 3005, 0,
	3006, 3007, 3008, 0, 0, 0, 0, 0, 0, 1475,
	2321, 0, 2784, 0, 0, 3436, 0, 0, 3014, 1495,
	0, 0, 3016, 216, 0, 0, 0, 1492, 0, 0,
	0, 1503, 1505, 0, 0, 0, 0, 0, 0, 0,
	2660, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	0, 0, 0, 3044, 3045, 1490, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3436, 3054, 2960,
	0, 0, 0, 0, 0, 2321, 0, 0, 0, 0,
	0, 0, 1496, 3063, 0, 3499, 0, 0, 1498, 1499,
	1500, 1501, 0, 2675, 0, 0, 0, 1212, 1481, 0,
	0, 0, 0, 0, 0, 217, 1090, 217, 217, 2388,
	1090, 217, 1090, 0, 0, 0, 1090, 0, 0, 0,
	216, 216, 0, 0, 217, 0, 0, 0, 0, 2670,
	0, 0, 0, 0, 0, 0, 1503, 1505, 0, 0,
	3093, 0, 2998, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3102, 3105, 3436, 0, 0,
	1490, 1491, 0, 0, 0, 1090, 217, 217, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 3125, 0, 0, 0, 0, 0, 1496, 0, 1497,
	0, 2461, 0, 0, 2420, 0, 0, 0, 0, 217,
	217, 217, 0, 3153, 217, 1090, 1204, 3352, 0, 1090,
	0, 0, 0, 1090, 217, 217, 0, 0, 3165, 0,
	216, 0, 0, 1090, 0, 0, 0, 0, 0, 2784,
	0, 0, 0, 0, 0, 0, 2671, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1616, 0, 1212, 0, 1212, 0, 0, 0,
	0, 3183, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 3207, 0, 0,
	3630, 0, 0, 0, 0, 0, 1212, 0, 0, 216,
	217, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 216, 2321, 0, 217, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 216, 1473,
	1474, 0, 0, 0, 3222, 3223, 0, 0, 0, 0,
	3227, 3228, 0, 0, 0, 3231, 3232, 0, 0, 0,
	1504, 0, 3236, 2998, 0, 0, 0, 1476, 2666, 2667,
	2668, 0, 0, 3240, 0, 2665, 2663, 2664, 2656, 2657,
	2658, 2659, 2661, 2662, 0, 0, 0, 0, 0, 3245,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 2321,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3436,
	1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2955, 1212, 0, 2321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 3324, 0, 0, 0, 0, 3105, 0, 0, 0,
	0, 0, 2420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 1505, 0, 0, 0, 0, 0, 2420,
	0, 0, 0, 1504, 0, 0, 3367, 0, 0, 0,
	1476, 0, 0, 0, 217, 0, 1490, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 217,
	217, 217, 0, 0, 0, 0, 217, 0, 1475, 0,
	0, 217, 0, 1496, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 1090, 0, 0, 1492, 3105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3405, 3406, 3407, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3415,
	3416, 0, 0, 215, 0, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 3423, 1481, 0, 0,
	0, 0, 1502, 0, 0, 0, 616, 0, 0, 0,
	0, 0, 3443, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 616, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 1505, 0, 3105, 0,
	0, 0, 0, 0, 0, 0, 3460, 2836, 0, 0,
	0, 0, 0, 0, 63, 3467, 0, 0, 851, 1490,
	1491, 0, 0, 0, 3474, 0, 0, 0, 0, 64,
	0, 2859, 0, 0, 0, 0, 1090, 1090, 217, 0,
	0, 68, 2865, 0, 1090, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3537,
	1189, 0, 0, 0, 0, 0, 73, 0, 0, 3105,
	3105, 0, 217, 0, 0, 0, 217, 0, 0, 0,
	0, 217, 1019, 0, 2910, 2911, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 78,
	217, 0, 217, 0, 217, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 79, 86, 0, 0, 0,
	0, 3558, 0, 0, 3561, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 3105, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3596,
	0, 1090, 0, 1090, 80, 1090, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 1090, 217, 3105, 0,
	217, 3105, 0, 0, 0, 0, 0, 0, 0, 1090,
	1090, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	217, 0, 217, 0, 217, 0, 217, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3655, 0, 0, 0, 887, 91, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 851, 3667, 0, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 0, 0, 0, 0, 0, 0, 0, 934, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 3684, 3684,
	3684, 0, 0, 0, 0, 0, 0, 1473, 1474, 0,
	0, 0, 0, 1516, 1517, 1518, 154, 84, 0, 85,
	3705, 0, 0, 0, 91, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 188, 0,
	1522, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3684, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 190, 0, 0, 0,
	0, 1492, 2654, 2655, 1090, 2672, 2673, 2674, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 846, 0, 0, 3105, 0, 3105, 0, 0,
	0, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 0, 1006, 0, 0, 0, 183,
	0, 0, 1498, 1499, 1500, 1501, 0, 0, 2669, 3138,
	0, 0, 1481, 1090, 0, 0, 0, 0, 3684, 3801,
	1342, 0, 0, 0, 0, 0, 3805, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 1090,
	0, 1513, 0, 0, 1523, 0, 215, 0, 215, 215,
	1503, 1505, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 616, 0, 0, 0, 0,
	0, 0, 0, 0, 1490, 1491, 0, 0, 3189, 3190,
	3191, 0, 0, 0, 0, 0, 0, 2660, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 1090, 0, 0, 0, 215, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	215, 215, 215, 0, 0, 215, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 215, 217, 0, 0,
	1473, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 2670, 0, 0, 0,
	0, 1504, 0, 0, 217, 1090, 0, 0, 1476, 1090,
	1502, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 1495, 0, 217, 0,
	1514, 215, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 217, 0,
	217, 0, 217, 0, 0, 0, 0, 0, 0, 217,
	217, 1090, 1090, 0, 1090, 0, 2571, 0, 0, 0,
	0, 0, 0, 2671, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 217, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	217, 0, 217, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0, 0,
	0, 0, 0, 1503, 1505, 217, 217, 217, 217, 0,
	217, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 1474, 0, 0, 0, 0, 1490, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 217, 0, 0, 0, 0, 0, 1476,
	0, 217, 0, 0, 1496, 2666, 2667, 2668, 0, 0,
	0, 0, 2665, 2663, 2664, 2656, 2657, 2658, 2659, 2661,
	2662, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 91,
	0, 91, 0, 91, 1023, 1492, 0, 0, 1023, 0,
	1023, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1638,
	0, 1019, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2564, 0, 0,
	215, 1638, 215, 1502, 0, 0, 0, 616, 0, 0,
	0, 0, 616, 1023, 0, 0, 1498, 1499, 1500, 1501,
	0, 1497, 0, 846, 91, 91, 1481, 0, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1023, 0, 0, 0, 1023, 63, 0,
	0, 1023, 0, 0, 1503, 1505, 0, 0, 0, 0,
	0, 1023, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1023, 1496, 0, 0, 1090, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	1090, 0, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 1090, 0, 79,
	86, 0, 0, 827, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	1544, 0, 0, 217, 1550, 0, 0, 0, 80, 0,
	0, 0, 1497, 215, 0, 0, 0, 215, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 217, 217, 0, 0,
	0, 215, 0, 215, 217, 215, 0, 0, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 1476, 1090, 0, 0,
	0, 0, 215, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 1090, 217, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 1495, 0, 0, 0, 215, 0,
	0, 215, 1636, 81, 1639, 0, 91, 0, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 215, 0, 0, 0, 0, 0, 217, 217, 0,
	616, 215, 0, 215, 0, 215, 1023, 215, 1023, 215,
	154, 84, 0, 85, 1090, 1090, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 188, 1498, 1499, 1500, 1501, 0, 1691, 215,
	701, 0, 0, 1481, 123, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 217, 1090, 217,
	190, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 158, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 1496, 183, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 0, 0, 0, 1340, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1023, 1023, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 609, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 1019, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 846, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1023,
	0, 1023, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 1023, 0, 0, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 1023, 1023, 1023,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 1090,
	0, 0, 1090, 0, 0, 0, 217, 0, 215, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 215, 0, 217, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 215, 1090, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 616, 0, 0, 0,
	827, 0, 0, 827, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 1090,
	1090, 0, 215, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 217,
	1090, 0, 1691, 1691, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 0, 2075, 215,
	0, 215, 1090, 215, 0, 0, 0, 0, 0, 0,
	215, 215, 0, 0, 846, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1544, 0, 0, 0, 1544, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 631, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 632, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 215, 215, 215,
	0, 215, 0, 215, 0, 0, 0, 633, 0, 651,
	1006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1639, 0, 0, 1090,
	0, 1090, 0, 634, 215, 0, 635, 0, 0, 0,
	0, 0, 215, 0, 1023, 0, 0, 0, 1090, 0,
	0, 1023, 0, 658, 0, 0, 0, 91, 0, 636,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	656, 0, 0, 0, 0, 0, 0, 1023, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	637, 0, 0, 1090, 217, 217, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	638, 0, 0, 639, 0, 0, 0, 0, 660, 0,
	0, 217, 603, 0, 0, 0, 0, 1090, 217, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 0, 0, 0,
	1087, 1023, 1201, 1090, 0, 0, 1201, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 0, 0, 659, 750,
	0, 786, 0, 0, 0, 0, 0, 642, 1691, 0,
	0, 0, 0, 1090, 91, 0, 91, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1023, 0, 1201, 0, 1023, 769, 755,
	0, 0, 0, 0, 0, 0, 640, 0, 0, 0,
	0, 0, 1090, 0, 91, 0, 643, 91, 1019, 0,
	0, 0, 756, 0, 0, 1090, 0, 759, 0, 0,
	0, 0, 792, 1019, 217, 1201, 0, 0, 644, 1201,
	766, 767, 0, 1201, 0, 0, 779, 91, 0, 0,
	0, 0, 0, 1201, 0, 0, 0, 0, 0, 0,
	787, 761, 0, 1638, 0, 0, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 0, 0, 1023,
	1023, 0, 1023, 0, 0, 645, 0, 0, 0, 0,
	0, 785, 0, 0, 1023, 0, 1201, 0, 0, 1090,
	0, 0, 1090, 0, 650, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 646, 0,
	0, 663, 0, 662, 0, 0, 647, 762, 0, 0,
	0, 217, 217, 0, 0, 754, 0, 0, 0, 648,
	0, 0, 0, 0, 655, 0, 215, 215, 215, 664,
	0, 661, 0, 763, 764, 1638, 0, 604, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	771, 770, 0, 0, 0, 0, 0, 0, 765, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 791, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	1088, 2075, 0, 215, 1088, 788, 1202, 0, 0, 0,
	1202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 1544, 0, 1090, 0, 0, 1019, 0, 0,
	0, 0, 0, 0, 1090, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 760, 215, 215,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 1202,
	0, 0, 0, 0, 758, 0, 0, 0, 783, 784,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 1090, 0, 781, 0, 0, 0, 0, 1202,
	0, 777, 217, 1202, 774, 0, 0, 1202, 0, 0,
	775, 0, 0, 752, 0, 789, 0, 1202, 215, 217,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 776, 0, 0, 0, 0, 773, 0, 0,
	0, 687, 0, 215, 0, 0, 790, 1087, 0, 0,
	1202, 1006, 0, 0, 778, 0, 609, 0, 0, 0,
	0, 609, 0, 0, 670, 0, 1006, 0, 0, 0,
	0, 0, 0, 1201, 0, 780, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 1023, 0, 0, 0,
	0, 0, 0, 0, 1087, 0, 671, 782, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 1691, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 91, 0, 0, 91, 0, 0, 675,
	0, 0, 0, 0, 0, 0, 0, 1691, 0, 0,
	0, 1019, 1019, 0, 0, 0, 0, 0, 0, 676,
	0, 0, 677, 0, 91, 91, 0, 0, 91, 0,
	0, 603, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1201, 1201, 0, 0,
	0, 0, 0, 0, 1087, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	1006, 0, 0, 846, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 91, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 679, 215, 0, 0, 0,
	0, 0, 1023, 1023, 215, 0, 0, 1202, 0, 0,
	0, 215, 0, 0, 0, 695, 0, 680, 0, 0,
	0, 1201, 0, 1201, 0, 1201, 0, 0, 1088, 0,
	0, 0, 1019, 1201, 0, 0, 1201, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 1201,
	1201, 1201, 681, 1023, 0, 682, 1023, 0, 0, 0,
	0, 689, 0, 0, 683, 0, 0, 0, 0, 609,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 684, 690, 0,
	0, 0, 0, 0, 0, 685, 0, 0, 0, 0,
	1691, 0, 0, 0, 0, 0, 0, 0, 686, 0,
	0, 0, 0, 693, 0, 0, 0, 1023, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 0, 0, 0, 1023, 0, 0, 688, 0, 0,
	0, 0, 0, 0, 1691, 1691, 1087, 0, 0, 0,
	1202, 1202, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1691, 1691, 0, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 1019, 0,
	0, 0, 0, 0, 1006, 1006, 1019, 0, 0, 0,
	0, 0, 0, 0, 1691, 0, 0, 0, 0, 1638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 215, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1202, 0, 1202, 0, 1202,
	0, 0, 215, 0, 0, 0, 0, 1202, 0, 215,
	1202, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1202, 1202, 1202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1023, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 1691,
	0, 0, 0, 0, 0, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1201, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1023,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 1087, 0, 0, 1023, 1023, 1023, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 1087, 0, 0, 0, 1201,
	0, 1691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 215, 0, 0, 0, 0, 0, 0,
	0, 1006, 0, 0, 0, 0, 0, 0, 0, 1006,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1201, 1201, 0, 1201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 1201, 1088, 0, 0,
	0, 0, 0, 1023, 0, 0, 0, 1023, 0, 1023,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 1202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 1202, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 1473, 1474,
	0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0,
	0, 1691, 0, 0, 0, 0, 0, 0, 1509, 1504,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	1023, 1522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 1202, 1202, 1691, 1202, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	1202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1023, 1087, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 1499, 1500, 1501, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 1473, 1474, 0,
	1506, 1507, 1508, 1516, 1517, 1518, 0, 1087, 1691, 0,
	0, 0, 1513, 0, 0, 1523, 0, 1509, 1504, 0,
	0, 1503, 1505, 1087, 0, 1476, 0, 0, 0, 0,
	1522, 91, 0, 0, 0, 0, 1519, 0, 1520, 0,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 1492, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 1521, 0, 0, 0,
	0, 0, 1023, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 1087, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 0, 1201, 0, 0,
	0, 0, 1498, 1499, 1500, 1501, 1087, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 91, 0, 0, 91,
	0, 1201, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 1502, 1201, 0, 0, 0, 0, 0, 0, 0,
	0, 1513, 0, 0, 1523, 0, 0, 0, 0, 1497,
	1503, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 1520, 0, 0,
	0, 1514, 0, 0, 1490, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 1201, 1201, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 1087, 0, 0, 1087, 0,
	0, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 1088, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0,
	0, 2629, 0, 0, 0, 2630, 0, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 0, 0, 0,
	1514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1202, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0, 0,
	2097, 0, 0, 0, 2098, 0, 0, 0, 0, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 1202, 1202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 1474, 0,
	1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1509, 1504, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 0, 1088,
	1522, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 1201,
	0, 1492, 1201, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 1201, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 1499, 1500, 1501, 0, 0, 1201, 1201,
	1201, 0, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1201, 0, 0, 0, 1473, 1474,
	1087, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0,
	0, 1513, 0, 0, 1523, 0, 0, 0, 1509, 1504,
	1503, 1505, 1087, 0, 0, 0, 1476, 0, 0, 0,
	0, 1522, 0, 0, 0, 1519, 0, 1520, 0, 0,
	0, 0, 0, 0, 1490, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 1496, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 1499, 1500, 1501, 0, 0, 1087,
	0, 1087, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1087, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 0, 1523, 0, 0, 1497, 0,
	0, 1503, 1505, 1202, 0, 0, 1202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 1520, 0,
	1514, 0, 0, 1087, 0, 1490, 1491, 0, 1087, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	1202, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	1509, 1504, 1496, 0, 0, 0, 0, 1087, 1476, 0,
	0, 0, 1201, 1522, 0, 0, 0, 0, 0, 0,
	0, 0, 1202, 1202, 1202, 0, 1521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 1202, 0,
	0, 0, 0, 1510, 1088, 0, 1495, 0, 0, 0,
	0, 0, 0, 1087, 1492, 0, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 1088, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0, 0,
	0, 0, 0, 1087, 3249, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 1087, 0, 0, 1481, 0, 0, 0, 0,
	0, 1514, 0, 0, 0, 1087, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 1513, 0, 0, 1523, 0, 1509,
	1504, 0, 0, 1503, 1505, 0, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 1088, 0, 1088, 0, 1490, 1491, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 1088, 1511, 0, 1495, 0, 0, 0, 1087,
	0, 0, 1201, 1492, 1496, 0, 0, 0, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 1521, 0,
	0, 0, 0, 0, 0, 2968, 0, 1088, 0, 0,
	0, 0, 1088, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 1088, 0, 0, 1481, 0, 1202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 0, 1523, 0, 0, 0,
	0, 1497, 1503, 1505, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 1514, 1201, 0, 1490, 1491, 0, 0,
	0, 0, 0, 0, 1201, 1201, 0, 1088, 0, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 1201, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 1087, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 2632, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 1088, 0, 0, 1202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 2631, 0, 1202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1202, 1202,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1202, 0, 0, 0, 225,
	226, 227, 228, 229, 1091, 230, 231, 1092, 1093, 1094,
	0, 1095, 480, 1096, 1097, 1098, 1099, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 1100, 238,
	239, 240, 241, 242, 1101, 1102, 1088, 243, 485, 486,
	487, 1103, 244, 245, 488, 1104, 1171, 1105, 246, 247,
	248, 249, 250, 251, 252, 0, 1106, 254, 255, 256,
	253, 1107, 257, 0, 258, 259, 260, 1108, 261, 964,
	262, 263, 1109, 1110, 1112, 1111, 1113, 1114, 1115, 264,
	265, 266, 267, 0, 268, 489, 490, 1116, 272, 269,
	270, 1117, 273, 271, 1118, 274, 1119, 1120, 275, 276,
	277, 1121, 278, 1122, 279, 280, 1123, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 1124, 222, 1125, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 1126, 297, 1127, 1128,
	965, 298, 299, 495, 496, 300, 301, 1129, 302, 497,
	1130, 498, 303, 1131, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 967, 309, 310, 1132, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 1133, 966,
	317, 502, 503, 1134, 504, 1135, 319, 968, 505, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 1136, 330, 329, 1137, 331, 506, 971,
	332, 333, 972, 1138, 334, 335, 336, 1139, 1140, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 1141, 224, 975, 359, 1142,
	507, 360, 508, 362, 363, 1143, 0, 364, 0, 1144,
	1145, 366, 367, 368, 1146, 1147, 369, 370, 509, 976,
	371, 977, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 1148, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 1149, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 1150, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 1151, 404, 978, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 1152,
	422, 423, 421, 424, 425, 426, 1153, 427, 411, 412,
	428, 429, 979, 430, 431, 517, 0, 432, 1154, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 1155, 444, 445, 0, 443, 1156, 446, 447,
	448, 449, 450, 287, 451, 1157, 452, 520, 521, 522,
	523, 1158, 459, 1159, 453, 454, 524, 455, 525, 1160,
	456, 457, 458, 0, 460, 461, 1161, 1162, 462, 463,
	464, 466, 467, 465, 468, 1163, 469, 1164, 0, 470,
	471, 472, 526, 527, 528, 1165, 474, 473, 529, 1166,
	1167, 1168, 1169, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 2238,
	0, 0, 0, 0, 0, 0, 0, 2239, 225, 226,
	227, 228, 229, 1091, 230, 231, 1092, 1093, 1094, 0,
	1095, 480, 1096, 1097, 1098, 1099, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 1100, 238, 239,
	240, 241, 242, 1101, 1102, 0, 243, 485, 486, 487,
	1103, 244, 245, 488, 1104, 1171, 1105, 246, 247, 248,
	249, 250, 251, 252, 0, 1106, 254, 255, 256, 253,
	1107, 257, 0, 258, 259, 260, 1108, 261, 964, 262,
	263, 1109, 1110, 1112, 1111, 1113, 1114, 1115, 264, 265,
	266, 267, 0, 268, 489, 490, 1116, 272, 269, 270,
	1117, 273, 271, 1118, 274, 1119, 1120, 275, 276, 277,
	1121, 278, 1122, 279, 280, 1123, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	1124, 222, 1125, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 1126, 297, 1127, 1128, 965,
	298, 299, 495, 496, 300, 301, 1129, 302, 497, 1130,
	498, 303, 1131, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 967, 309, 310, 1132, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 1133, 966, 317,
	502, 503, 1134, 504, 1135, 319, 968, 505, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 1136, 330, 329, 1137, 331, 506, 971, 332,
	333, 972, 1138, 334, 335, 336, 1139, 1140, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 1141, 224, 975, 359, 1142, 507,
	360, 508, 362, 363, 1143, 0, 364, 0, 1144, 1145,
	366, 367, 368, 1146, 1147, 369, 370, 509, 976, 371,
	977, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 1148, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 1149, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 1150, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	1151, 404, 978, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 1152, 422,
	423, 421, 424, 425, 426, 1153, 427, 411, 412, 428,
	429, 979, 430, 431, 517, 0, 432, 1154, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 1155, 444, 445, 0, 443, 1156, 446, 447, 448,
	449, 450, 287, 451, 1157, 452, 520, 521, 522, 523,
	1158, 459, 1159, 453, 454, 524, 455, 525, 1160, 456,
	457, 458, 0, 460, 461, 1161, 1162, 462, 463, 464,
	466, 467, 465, 468, 1163, 469, 1164, 0, 470, 471,
	472, 526, 527, 528, 1165, 474, 473, 529, 1166, 1167,
	1168, 1169, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 2976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2978, 225, 226, 227, 228, 229,
	1091, 230, 231, 1092, 1093, 1094, 0, 1095, 480, 1096,
	1097, 1098, 1099, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 1100, 238, 239, 240, 241, 242,
	1101, 1102, 0, 243, 485, 486, 487, 1103, 244, 245,
	488, 1104, 1171, 1105, 246, 247, 248, 249, 250, 251,
	252, 0, 1106, 254, 255, 256, 253, 1107, 257, 0,
	258, 259, 260, 1108, 261, 964, 262, 263, 1109, 1110,
	1112, 1111, 1113, 1114, 1115, 264, 265, 266, 267, 0,
	268, 489, 490, 1116, 272, 269, 270, 1117, 273, 271,
	1118, 274, 1119, 1120, 275, 276, 277, 1121, 278, 1122,
	279, 280, 1123, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 1124, 222, 1125,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 1126, 297, 1127, 1128, 965, 298, 299, 495,
	496, 300, 301, 1129, 302, 497, 1130, 498, 303, 1131,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 967,
	309, 310, 1132, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 1133, 966, 317, 502, 503, 1134,
	504, 1135, 319, 968, 505, 969, 320, 321, 322, 970,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 1136,
	330, 329, 1137, 331, 506, 971, 332, 333, 972, 1138,
	334, 335, 336, 1139, 1140, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 973, 353, 354, 357, 358, 356, 974,
	355, 1141, 224, 975, 359, 1142, 507, 360, 508, 362,
	363, 1143, 0, 364, 0, 1144, 1145, 366, 367, 368,
	1146, 1147, 369, 370, 509, 976, 371, 977, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 1148, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 1149, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 1150, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 1151, 404, 978,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 1152, 422, 423, 421, 424,
	425, 426, 1153, 427, 411, 412, 428, 429, 979, 430,
	431, 517, 0, 432, 1154, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 1155, 444,
	445, 0, 443, 1156, 446, 447, 448, 449, 450, 287,
	451, 1157, 452, 520, 521, 522, 523, 1158, 459, 1159,
	453, 454, 524, 455, 525, 1160, 456, 457, 458, 0,
	460, 461, 1161, 1162, 462, 463, 464, 466, 467, 465,
	468, 1163, 469, 1164, 0, 470, 471, 472, 526, 527,
	528, 1165, 474, 473, 529, 1166, 1167, 1168, 1169, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3276, 225, 226, 227, 228,
	229, 1091, 230, 231, 1092, 1093, 1094, 0, 1095, 480,
	1096, 1097, 1098, 1099, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 1100, 238, 239, 240, 241,
	242, 1101, 1102, 0, 243, 485, 486, 487, 1103, 244,
	245, 488, 1104, 1171, 1105, 246, 247, 248, 249, 250,
	251, 252, 0, 1106, 254, 255, 256, 253, 1107, 257,
	0, 258, 259, 260, 1108, 261, 964, 262, 263, 1109,
	1110, 1112, 1111, 1113, 1114, 1115, 264, 265, 266, 267,
	0, 268, 489, 490, 1116, 272, 269, 270, 1117, 273,
	271, 1118, 274, 1119, 1120, 275, 276, 277, 1121, 278,
	1122, 279, 280, 1123, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 1124, 222,
	1125, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 1126, 297, 1127, 1128, 965, 298, 299,
	495, 496, 300, 301, 1129, 302, 497, 1130, 498, 303,
	1131, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	967, 309, 310, 1132, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 1133, 966, 317, 502, 503,
	1134, 504, 1135, 319, 968, 505, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	1136, 330, 329, 1137, 331, 506, 971, 332, 333, 972,
	1138, 334, 335, 336, 1139, 1140, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 1141, 224, 975, 359, 1142, 507, 360, 508,
	362, 363, 1143, 0, 364, 0, 1144, 1145, 366, 367,
	368, 1146, 1147, 369, 370, 509, 976, 371, 977, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 1148,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 1149,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 1150, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 1151, 404,
	978, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 1152, 422, 423, 421,
	424, 425, 426, 1153, 427, 411, 412, 428, 429, 979,
	430, 431, 517, 0, 432, 1154, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 1155,
	444, 445, 0, 443, 1156, 446, 447, 448, 449, 450,
	287, 451, 1157, 452, 520, 521, 522, 523, 1158, 459,
	1159, 453, 454, 524, 455, 525, 1160, 456, 457, 458,
	0, 460, 461, 1161, 1162, 462, 463, 464, 466, 467,
	465, 468, 1163, 469, 1164, 0, 470, 471, 472, 526,
	527, 528, 1165, 474, 473, 529, 1166, 1167, 1168, 1169,
	475, 476, 530, 477, 478, 479, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3411, 0, 225, 226, 227, 228, 229, 1091, 230,
	231, 1092, 1093, 1094, 0, 1095, 480, 1096, 1097, 1098,
	1099, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 1100, 238, 239, 240, 241, 242, 1101, 1102,
	0, 243, 485, 486, 487, 1103, 244, 245, 488, 1104,
	1171, 1105, 246, 247, 248, 249, 250, 251, 252, 0,
	1106, 254, 255, 256, 253, 1107, 257, 0, 258, 259,
	260, 1108, 261, 964, 262, 263, 1109, 1110, 1112, 1111,
	1113, 1114, 1115, 264, 265, 266, 267, 0, 268, 489,
	490, 1116, 272, 269, 270, 1117, 273, 271, 1118, 274,
	1119, 1120, 275, 276, 277, 1121, 278, 1122, 279, 280,
	1123, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 1124, 222, 1125, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	1126, 297, 1127, 1128, 965, 298, 299, 495, 496, 300,
	301, 1129, 302, 497, 1130, 498, 303, 1131, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 967, 309, 310,
	1132, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 1133, 966, 317, 502, 503, 1134, 504, 1135,
	319, 968, 505, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 1136, 330, 329,
	1137, 331, 506, 971, 332, 333, 972, 1138, 334, 335,
	336, 1139, 1140, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 1141,
	224, 975, 359, 1142, 507, 360, 508, 362, 363, 1143,
	0, 364, 0, 1144, 1145, 366, 367, 368, 1146, 1147,
	369, 370, 509, 976, 371, 977, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 1148, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 1149, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 1150,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 1151, 404, 978, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 1152, 422, 423, 421, 424, 425, 426,
	1153, 427, 411, 412, 428, 429, 979, 430, 431, 517,
	0, 432, 1154, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 1155, 444, 445, 0,
	443, 1156, 446, 447, 448, 449, 450, 287, 451, 1157,
	452, 520, 521, 522, 523, 1158, 459, 1159, 453, 454,
	524, 455, 525, 1160, 456, 457, 458, 0, 460, 461,
	1161, 1162, 462, 463, 464, 466, 467, 465, 468, 1163,
	469, 1164, 0, 470, 471, 472, 526, 527, 528, 1165,
	474, 473, 529, 1166, 1167, 1168, 1169, 475, 476, 530,
	477, 478, 479, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3331, 0,
	225, 226, 227, 228, 229, 1091, 230, 231, 1092, 1093,
	1094, 0, 1095, 480, 1096, 1097, 1098, 1099, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 1100,
	238, 239, 240, 241, 242, 1101, 1102, 0, 243, 485,
	486, 487, 1103, 244, 245, 488, 1104, 1171, 1105, 246,
	247, 248, 249, 250, 251, 252, 0, 1106, 254, 255,
	256, 253, 1107, 257, 0, 258, 259, 260, 1108, 261,
	964, 262, 263, 1109, 1110, 1112, 1111, 1113, 1114, 1115,
	264, 265, 266, 267, 0, 268, 489, 490, 1116, 272,
	269, 270, 1117, 273, 271, 1118, 274, 1119, 1120, 275,
	276, 277, 1121, 278, 1122, 279, 280, 1123, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 1124, 222, 1125, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 1126, 297, 1127,
	1128, 965, 298, 299, 495, 496, 300, 301, 1129, 302,
	497, 1130, 498, 303, 1131, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 967, 309, 310, 1132, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 1133,
	966, 317, 502, 503, 1134, 504, 1135, 319, 968, 505,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 1136, 330, 329, 1137, 331, 506,
	971, 332, 333, 972, 1138, 334, 335, 336, 1139, 1140,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 1141, 224, 975, 359,
	1142, 507, 360, 508, 362, 363, 1143, 0, 364, 0,
	1144, 1145, 366, 367, 368, 1146, 1147, 369, 370, 509,
	976, 371, 977, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 1148, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 1149, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 1150, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 1151, 404, 978, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	1152, 422, 423, 421, 424, 425, 426, 1153, 427, 411,
	412, 428, 429, 979, 430, 431, 517, 0, 432, 1154,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 1155, 444, 445, 0, 443, 1156, 446,
	447, 448, 449, 450, 287, 451, 1157, 452, 520, 521,
	522, 523, 1158, 459, 1159, 453, 454, 524, 455, 525,
	1160, 456, 457, 458, 0, 460, 461, 1161, 1162, 462,
	463, 464, 466, 467, 465, 468, 1163, 469, 1164, 0,
	470, 471, 472, 526, 527, 528, 1165, 474, 473, 529,
	1166, 1167, 1168, 1169, 475, 476, 530, 477, 478, 479,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3208, 0, 225, 226, 227,
	228, 229, 1091, 230, 231, 1092, 1093, 1094, 0, 1095,
	480, 1096, 1097, 1098, 1099, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 1100, 238, 239, 240,
	241, 242, 1101, 1102, 0, 243, 485, 486, 487, 1103,
	244, 245, 488, 1104, 1171, 1105, 246, 247, 248, 249,
	250, 251, 252, 0, 1106, 254, 255, 256, 253, 1107,
	257, 0, 258, 259, 260, 1108, 261, 964, 262, 263,
	1109, 1110, 1112, 1111, 1113, 1114, 1115, 264, 265, 266,
	267, 0, 268, 489, 490, 1116, 272, 269, 270, 1117,
	273, 271, 1118, 274, 1119, 1120, 275, 276, 277, 1121,
	278, 1122, 279, 280, 1123, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 1124,
	222, 1125, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 1126, 297, 1127, 1128, 965, 298,
	299, 495, 496, 300, 301, 1129, 302, 497, 1130, 498,
	303, 1131, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 967, 309, 310, 1132, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 1133, 966, 317, 502,
	503, 1134, 504, 1135, 319, 968, 505, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 1136, 330, 329, 1137, 331, 506, 971, 332, 333,
	972, 1138, 334, 335, 336, 1139, 1140, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 1141, 224, 975, 359, 1142, 507, 360,
	508, 362, 363, 1143, 0, 364, 0, 1144, 1145, 366,
	367, 368, 1146, 1147, 369, 370, 509, 976, 371, 977,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	1148, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	1149, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 1150, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 1151,
	404, 978, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 1152, 422, 423,
	421, 424, 425, 426, 1153, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 1154, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	1155, 444, 445, 0, 443, 1156, 446, 447, 448, 449,
	450, 287, 451, 1157, 452, 520, 521, 522, 523, 1158,
	459, 1159, 453, 454, 524, 455, 525, 1160, 456, 457,
	458, 0, 460, 461, 1161, 1162, 462, 463, 464, 466,
	467, 465, 468, 1163, 469, 1164, 0, 470, 471, 472,
	526, 527, 528, 1165, 474, 473, 529, 1166, 1167, 1168,
	1169, 475, 476, 530, 477, 478, 479, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2994, 0, 225, 226, 227, 228, 229, 1091,
	230, 231, 1092, 1093, 1094, 0, 1095, 480, 1096, 1097,
	1098, 1099, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 1100, 238, 239, 240, 241, 242, 1101,
	1102, 0, 243, 485, 486, 487, 1103, 244, 245, 488,
	1104, 1171, 1105, 246, 247, 248, 249, 250, 251, 252,
	0, 1106, 254, 255, 256, 253, 1107, 257, 0, 258,
	259, 260, 1108, 261, 964, 262, 263, 1109, 1110, 1112,
	1111, 1113, 1114, 1115, 264, 265, 266, 267, 0, 268,
	489, 490, 1116, 272, 269, 270, 1117, 273, 271, 1118,
	274, 1119, 1120, 275, 276, 277, 1121, 278, 1122, 279,
	280, 1123, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 1124, 222, 1125, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 1126, 297, 1127, 1128, 965, 298, 299, 495, 496,
	300, 301, 1129, 302, 497, 1130, 498, 303, 1131, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 967, 309,
	310, 1132, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 1133, 966, 317, 502, 503, 1134, 504,
	1135, 319, 968, 505, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 1136, 330,
	329, 1137, 331, 506, 971, 332, 333, 972, 1138, 334,
	335, 336, 1139, 1140, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	1141, 224, 975, 359, 1142, 507, 360, 508, 362, 363,
	1143, 0, 364, 0, 1144, 1145, 366, 367, 368, 1146,
	1147, 369, 370, 509, 976, 371, 977, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 1148, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 1149, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	1150, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 1151, 404, 978, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 1152, 422, 423, 421, 424, 425,
	426, 1153, 427, 411, 412, 428, 429, 979, 430, 431,
	517, 0, 432, 1154, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 1155, 444, 445,
	0, 443, 1156, 446, 447, 448, 449, 450, 287, 451,
	1157, 452, 520, 521, 522, 523, 1158, 459, 1159, 453,
	454, 524, 455, 525, 1160, 456, 457, 458, 0, 460,
	461, 1161, 1162, 462, 463, 464, 466, 467, 465, 468,
	1163, 469, 1164, 0, 470, 471, 472, 526, 527, 528,
	1165, 474, 473, 529, 1166, 1167, 1168, 1169, 475, 476,
	530, 477, 478, 479, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2843,
	0, 225, 226, 227, 228, 229, 1091, 230, 231, 1092,
	1093, 1094, 0, 1095, 480, 1096, 1097, 1098, 1099, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	1100, 238, 239, 240, 241, 242, 1101, 1102, 0, 243,
	485, 486, 487, 1103, 244, 245, 488, 1104, 1171, 1105,
	246, 247, 248, 249, 250, 251, 252, 0, 1106, 254,
	255, 256, 253, 1107, 257, 0, 258, 259, 260, 1108,
	261, 964, 262, 263, 1109, 1110, 1112, 1111, 1113, 1114,
	1115, 264, 265, 266, 267, 0, 268, 489, 490, 1116,
	272, 269, 270, 1117, 273, 271, 1118, 274, 1119, 1120,
	275, 276, 277, 1121, 278, 1122, 279, 280, 1123, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 1124, 222, 1125, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 1126, 297,
	1127, 1128, 965, 298, 299, 495, 496, 300, 301, 1129,
	302, 497, 1130, 498, 303, 1131, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 967, 309, 310, 1132, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	1133, 966, 317, 502, 503, 1134, 504, 1135, 319, 968,
	505, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 1136, 330, 329, 1137, 331,
	506, 971, 332, 333, 972, 1138, 334, 335, 336, 1139,
	1140, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 1141, 224, 975,
	359, 1142, 507, 360, 508, 362, 363, 1143, 0, 364,
	0, 1144, 1145, 366, 367, 368, 1146, 1147, 369, 370,
	509, 976, 371, 977, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 1148, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 1149, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 1150, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 1151, 404, 978, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 1152, 422, 423, 421, 424, 425, 426, 1153, 427,
	411, 412, 428, 429, 979, 430, 431, 517, 0, 432,
	1154, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 1155, 444, 445, 0, 443, 1156,
	446, 447, 448, 449, 450, 287, 451, 1157, 452, 520,
	521, 522, 523, 1158, 459, 1159, 453, 454, 524, 455,
	525, 1160, 456, 457, 458, 0, 460, 461, 1161, 1162,
	462, 463, 464, 466, 467, 465, 468, 1163, 469, 1164,
	0, 470, 471, 472, 526, 527, 528, 1165, 474, 473,
	529, 1166, 1167, 1168, 1169, 475, 476, 530, 477, 478,
	479, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2121, 0, 225, 226,
	227, 228, 229, 1091, 230, 231, 1092, 1093, 1094, 0,
	1095, 480, 1096, 1097, 1098, 1099, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 1100, 238, 239,
	240, 241, 242, 1101, 1102, 0, 243, 485, 486, 487,
	1103, 244, 245, 488, 1104, 1171, 1105, 246, 247, 248,
	249, 250, 251, 252, 0, 1106, 254, 255, 256, 253,
	1107, 257, 0, 258, 259, 260, 1108, 261, 964, 262,
	263, 1109, 1110, 1112, 1111, 1113, 1114, 1115, 264, 265,
	266, 267, 0, 268, 489, 490, 1116, 272, 269, 270,
	1117, 273, 271, 1118, 274, 1119, 1120, 275, 276, 277,
	1121, 278, 1122, 279, 280, 1123, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	1124, 222, 1125, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 1126, 297, 1127, 1128, 965,
	298, 299, 495, 496, 300, 301, 1129, 302, 497, 1130,
	498, 303, 1131, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 967, 309, 310, 1132, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 1133, 966, 317,
	502, 503, 1134, 504, 1135, 319, 968, 505, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 1136, 330, 329, 1137, 331, 506, 971, 332,
	333, 972, 1138, 334, 335, 336, 1139, 1140, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 1141, 224, 975, 359, 1142, 507,
	360, 508, 362, 363, 1143, 0, 364, 0, 1144, 1145,
	366, 367, 368, 1146, 1147, 369, 370, 509, 976, 371,
	977, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 1148, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 1149, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 1150, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	1151, 404, 978, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 1152, 422,
	423, 421, 424, 425, 426, 1153, 427, 411, 412, 428,
	429, 979, 430, 431, 517, 0, 432, 1154, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 1155, 444, 445, 0, 443, 1156, 446, 447, 448,
	449, 450, 287, 451, 1157, 452, 520, 521, 522, 523,
	1158, 459, 1159, 453, 454, 524, 455, 525, 1160, 456,
	457, 458, 0, 460, 461, 1161, 1162, 462, 463, 464,
	466, 467, 465, 468, 1163, 469, 1164, 0, 470, 471,
	472, 526, 527, 528, 1165, 474, 473, 529, 1166, 1167,
	1168, 1169, 475, 476, 530, 477, 478, 479, 1183, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1817, 0, 0, 0, 225, 226, 227,
	228, 229, 1091, 230, 231, 1092, 1093, 1094, 0, 1095,
	480, 1096, 1097, 1098, 1099, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 1100, 238, 239, 240,
	241, 242, 1101, 1102, 0, 243, 485, 486, 487, 1103,
	244, 245, 488, 1104, 1171, 1105, 246, 247, 248, 249,
	250, 251, 252, 0, 1106, 254, 255, 256, 253, 1107,
	257, 0, 258, 259, 260, 1108, 261, 964, 262, 263,
	1109, 1110, 1112, 1111, 1113, 1114, 1115, 264, 265, 266,
	267, 0, 268, 489, 490, 1116, 272, 269, 270, 1117,
	273, 271, 1118, 274, 1119, 1120, 275, 276, 277, 1121,
	278, 1122, 279, 280, 1123, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 1124,
	222, 1125, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 1126, 297, 1127, 1128, 965, 298,
	299, 495, 496, 300, 301, 1129, 302, 497, 1130, 498,
	303, 1131, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 967, 309, 310, 1132, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 1133, 966, 317, 502,
	503, 1134, 504, 1135, 319, 968, 505, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 1136, 330, 329, 1137, 331, 506, 971, 332, 333,
	972, 1138, 334, 335, 336, 1139, 1140, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 1141, 224, 975, 359, 1142, 507, 360,
	508, 362, 363, 1143, 0, 364, 0, 1144, 1145, 366,
	367, 368, 1146, 1147, 369, 370, 509, 976, 371, 977,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	1148, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	1149, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 1150, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 1151,
	404, 978, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 1152, 422, 423,
	421, 424, 425, 426, 1153, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 1154, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	1155, 444, 445, 0, 443, 1156, 446, 447, 448, 449,
	450, 287, 451, 1157, 452, 520, 521, 522, 523, 1158,
	459, 1159, 453, 454, 524, 455, 525, 1160, 456, 457,
	458, 0, 460, 461, 1161, 1162, 462, 463, 464, 466,
	467, 465, 468, 1163, 469, 1164, 0, 470, 471, 472,
	526, 527, 528, 1165, 474, 473, 529, 1166, 1167, 1168,
	1169, 475, 476, 530, 477, 478, 479, 1082, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 1091, 230, 231, 1092, 1093, 1094, 0, 1095, 480,
	1096, 1097, 1098, 1099, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 1100, 238, 239, 240, 241,
	242, 1101, 1102, 0, 243, 485, 486, 487, 1103, 244,
	245, 488, 1104, 1171, 1105, 246, 247, 248, 249, 250,
	251, 252, 0, 1106, 254, 255, 256, 253, 1107, 257,
	0, 258, 259, 260, 1108, 261, 964, 262, 263, 1109,
	1110, 1112, 1111, 1113, 1114, 1115, 264, 265, 266, 267,
	0, 268, 489, 490, 1116, 272, 269, 270, 1117, 273,
	271, 1118, 274, 1119, 1120, 275, 276, 277, 1121, 278,
	1122, 279, 280, 1123, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 1124, 222,
	1125, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 1126, 297, 1127, 1128, 965, 298, 299,
	495, 496, 300, 301, 1129, 302, 497, 1130, 498, 303,
	1131, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	967, 309, 310, 1132, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 1133, 966, 317, 502, 503,
	1134, 504, 1135, 319, 968, 505, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	1136, 330, 329, 1137, 331, 506, 971, 332, 333, 972,
	1138, 334, 335, 336, 1139, 1140, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 1141, 224, 975, 359, 1142, 507, 360, 508,
	362, 363, 1143, 0, 364, 0, 1144, 1145, 366, 367,
	368, 1146, 1147, 369, 370, 509, 976, 371, 977, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 1148,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 1149,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 1150, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 1151, 404,
	978, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 1152, 422, 423, 421,
	424, 425, 426, 1153, 427, 411, 412, 428, 429, 979,
	430, 431, 517, 0, 432, 1154, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 1155,
	444, 445, 0, 443, 1156, 446, 447, 448, 449, 450,
	287, 451, 1157, 452, 520, 521, 522, 523, 1158, 459,
	1159, 453, 454, 524, 455, 525, 1160, 456, 457, 458,
	0, 460, 461, 1161, 1162, 462, 463, 464, 466, 467,
	465, 468, 1163, 469, 1164, 0, 470, 471, 472, 526,
	527, 528, 1165, 474, 473, 529, 1166, 1167, 1168, 1169,
	475, 476, 530, 477, 478, 479, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 1091, 230,
	231, 1092, 1093, 1094, 0, 1095, 480, 1096, 1097, 1098,
	1099, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 1100, 238, 239, 240, 241, 242, 1101, 1102,
	0, 243, 485, 486, 487, 1103, 244, 245, 488, 1104,
	1171, 1105, 246, 247, 248, 249, 250, 251, 252, 0,
	1106, 254, 255, 256, 253, 1107, 257, 0, 258, 259,
	260, 1108, 261, 964, 262, 263, 1109, 1110, 1112, 1111,
	1113, 1114, 1115, 264, 265, 266, 267, 0, 268, 489,
	490, 1116, 272, 269, 270, 1117, 273, 271, 1118, 274,
	1119, 1120, 275, 276, 277, 1121, 278, 1122, 279, 280,
	1123, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 1124, 222, 1125, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	1126, 297, 1127, 1128, 965, 298, 299, 495, 496, 300,
	301, 1129, 302, 497, 1130, 498, 303, 1131, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 967, 309, 310,
	1132, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 1133, 966, 317, 502, 503, 1134, 504, 1135,
	319, 968, 505, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 1136, 330, 329,
	1137, 331, 506, 971, 332, 333, 972, 1138, 334, 335,
	336, 1139, 1140, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 1141,
	224, 975, 359, 1142, 507, 360, 508, 362, 363, 1143,
	0, 364, 0, 1144, 1145, 366, 367, 368, 1146, 1147,
	369, 370, 509, 976, 371, 977, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 1148, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 1149, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 1150,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 1151, 404, 978, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 1152, 422, 423, 421, 424, 425, 426,
	1153, 427, 411, 412, 428, 429, 979, 430, 431, 517,
	0, 432, 1154, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 1155, 444, 445, 0,
	443, 1156, 446, 447, 448, 449, 450, 287, 451, 1157,
	452, 520, 521, 522, 523, 1158, 459, 1159, 453, 454,
	524, 455, 525, 1160, 456, 457, 458, 0, 460, 461,
	1161, 1162, 462, 463, 464, 466, 467, 465, 468, 1163,
	469, 1164, 0, 470, 471, 472, 526, 527, 528, 1165,
	474, 473, 529, 1166, 1167, 1168, 1169, 475, 476, 530,
	477, 478, 479, 2096, 0, 901, 873, 874, 875, 871,
	872, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 2093, 230, 231,
	0, 0, 0, 0, 0, 925, 889, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 938, 0, 945, 237,
	944, 0, 238, 239, 240, 241, 242, 891, 924, 858,
	243, 983, 984, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 948, 268, 942, 941,
	862, 272, 269, 270, 0, 273, 271, 0, 274, 2094,
	0, 275, 933, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 868, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 880, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 940, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 953, 954, 300, 301,
	0, 302, 962, 0, 890, 303, 0, 304, 305, 306,
	307, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 935, 936, 0, 896, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 859, 224,
	975, 359, 881, 929, 360, 943, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 939, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 869, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 937, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 982,
	438, 439, 440, 441, 959, 0, 444, 445, 857, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	949, 950, 951, 952, 0, 459, 0, 453, 454, 960,
	455, 961, 879, 456, 457, 458, 0, 460, 461, 0,
	863, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 946, 981, 2092, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 860, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 854, 855, 2095, 0, 0,
	0, 0, 0, 0, 885, 2091, 0, 847, 883, 901,
	873, 874, 875, 871, 872, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 925,
	889, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	938, 0, 945, 237, 944, 0, 238, 239, 240, 241,
	242, 891, 924, 858, 243, 983, 984, 487, 0, 244,
	245, 931, 0, 912, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 915,
	913, 914, 921, 917, 916, 920, 264, 265, 266, 267,
	948, 268, 942, 941, 862, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 933, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 868, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 955, 956, 880, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 940, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	953, 954, 300, 301, 0, 302, 962, 0, 890, 303,
	0, 304, 305, 306, 307, 308, 926, 927, 930, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 966, 317, 935, 936,
	0, 896, 0, 319, 968, 928, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 963, 971, 332, 333, 972,
	0, 334, 335, 336, 919, 918, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 859, 224, 975, 359, 881, 929, 360, 943,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 957,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 958, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 939,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 869, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 188, 422, 423, 421,
	424, 425, 426, 922, 427, 411, 412, 428, 429, 979,
	430, 431, 937, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 982, 438, 439, 440, 441, 959, 0,
	444, 445, 857, 443, 190, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 949, 950, 951, 952, 0, 459,
	0, 453, 454, 960, 455, 961, 879, 456, 457, 458,
	0, 460, 461, 0, 863, 462, 463, 464, 466, 467,
	465, 468, 923, 469, 0, 0, 470, 471, 472, 1338,
	946, 981, 0, 474, 473, 529, 0, 0, 0, 182,
	475, 476, 530, 477, 478, 479, 860, 183, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 854,
	855, 901, 873, 874, 875, 871, 872, 884, 1549, 1547,
	0, 0, 883, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 925, 889, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 938, 0, 945, 237, 944, 0, 238, 239,
	240, 241, 242, 891, 924, 858, 243, 983, 984, 487,
	0, 244, 245, 931, 0, 912, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 915, 913, 914, 921, 917, 916, 920, 264, 265,
	266, 267, 948, 268, 942, 941, 862, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 933, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 868, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 955, 956,
	880, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	940, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 953, 954, 300, 301, 0, 302, 962, 0,
	890, 303, 0, 304, 305, 306, 307, 308, 926, 927,
	930, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 966, 317,
	935, 936, 0, 896, 0, 319, 968, 928, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 963, 971, 332,
	333, 972, 0, 334, 335, 336, 919, 918, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 859, 224, 975, 359, 881, 929,
	360, 943, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 957, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 958, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 939, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 869, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 188, 422,
	423, 421, 424, 425, 426, 922, 427, 411, 412, 428,
	429, 979, 430, 431, 937, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 982, 438, 439, 440, 441,
	959, 0, 444, 445, 857, 443, 190, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 949, 950, 951, 952,
	0, 459, 0, 453, 454, 960, 455, 961, 879, 456,
	457, 458, 0, 460, 461, 0, 863, 462, 463, 464,
	466, 467, 465, 468, 923, 469, 0, 0, 470, 471,
	472, 1338, 946, 981, 0, 474, 473, 529, 0, 0,
	0, 182, 475, 476, 530, 477, 478, 479, 860, 183,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 854, 855, 901, 873, 874, 875, 871, 872, 884,
	1549, 2584, 0, 0, 883, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 925, 889, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 938, 0, 945, 237, 944, 0,
	238, 239, 240, 241, 242, 891, 924, 858, 243, 983,
	984, 487, 0, 244, 245, 931, 0, 912, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 915, 913, 914, 921, 917, 916, 920,
	264, 265, 266, 267, 948, 268, 942, 941, 862, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	933, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	868, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	955, 956, 880, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 940, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 953, 954, 300, 301, 0, 302,
	962, 0, 890, 303, 0, 304, 305, 306, 307, 308,
	926, 927, 930, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	966, 317, 935, 936, 0, 896, 0, 319, 968, 928,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 963,
	971, 332, 333, 972, 0, 334, 335, 336, 919, 918,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 859, 224, 975, 359,
	881, 929, 360, 943, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 957, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 958, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 939, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 869,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	188, 422, 423, 421, 424, 425, 426, 922, 427, 411,
	412, 428, 429, 979, 430, 431, 937, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 982, 438, 439,
	440, 441, 959, 0, 444, 445, 857, 443, 190, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 949, 950,
	951, 952, 0, 459, 0, 453, 454, 960, 455, 961,
	879, 456, 457, 458, 0, 460, 461, 0, 863, 462,
	463, 464, 466, 467, 465, 468, 923, 469, 0, 0,
	470, 471, 472, 1338, 946, 981, 0, 474, 473, 529,
	0, 0, 0, 182, 475, 476, 530, 477, 478, 479,
	860, 183, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 854, 855, 901, 873, 874, 875, 871,
	872, 884, 1549, 1547, 0, 0, 883, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 925, 889, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 938, 0, 945, 237,
	944, 2200, 238, 239, 240, 241, 242, 891, 924, 858,
	243, 983, 984, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 948, 268, 942, 941,
	862, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 933, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 868, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 880, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 940, 0, 0, 0, 296, 0,
	297, 0, 2205, 965, 298, 299, 953, 954, 300, 301,
	0, 302, 962, 0, 890, 303, 0, 304, 305, 306,
	307, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 935, 936, 0, 896, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 2201,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 859, 224,
	975, 359, 881, 929, 360, 943, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 939, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 869, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 937, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 982,
	438, 439, 440, 441, 959, 0, 444, 445, 857, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	949, 950, 951, 952, 0, 459, 2202, 453, 454, 960,
	455, 961, 879, 456, 457, 458, 0, 460, 461, 0,
	863, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 946, 981, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 860, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 854, 855, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 2141, 883, 901,
	873, 874, 875, 871, 872, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 925,
	889, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	938, 0, 945, 237, 944, 0, 238, 239, 240, 241,
	242, 891, 924, 858, 243, 983, 984, 487, 0, 244,
	245, 931, 0, 912, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 915,
	913, 914, 921, 917, 916, 920, 264, 265, 266, 267,
	948, 268, 942, 941, 862, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 933, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 868, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 955, 956, 880, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 940, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	953, 954, 300, 301, 0, 302, 962, 0, 890, 303,
	0, 304, 305, 306, 307, 308, 926, 927, 930, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 966, 317, 935, 936,
	0, 896, 0, 319, 968, 928, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 963, 971, 332, 333, 972,
	0, 334, 335, 336, 919, 918, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 859, 224, 975, 359, 881, 929, 360, 943,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 957,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 958, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 939,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 869, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 922, 427, 411, 412, 428, 429, 979,
	430, 431, 937, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 982, 438, 439, 440, 441, 959, 0,
	444, 445, 857, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 949, 950, 951, 952, 0, 459,
	0, 453, 454, 960, 455, 961, 879, 456, 457, 458,
	0, 460, 461, 0, 863, 462, 463, 464, 466, 467,
	465, 468, 923, 469, 0, 0, 470, 471, 472, 526,
	946, 981, 0, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 860, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 854,
	855, 0, 0, 0, 0, 0, 0, 0, 885, 2139,
	0, 2138, 883, 901, 873, 874, 875, 871, 872, 884,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 925, 889, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 938, 0, 945, 237, 944, 0,
	238, 239, 240, 241, 242, 891, 924, 858, 243, 983,
	984, 487, 0, 244, 245, 931, 0, 912, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 915, 913, 914, 921, 917, 916, 920,
	264, 265, 266, 267, 948, 268, 942, 941, 862, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	933, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	868, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	955, 956, 880, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 940, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 953, 954, 300, 301, 0, 302,
	962, 0, 890, 303, 0, 304, 305, 306, 307, 308,
	926, 927, 930, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	966, 317, 935, 936, 0, 896, 0, 319, 968, 928,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 963,
	971, 332, 333, 972, 0, 334, 335, 336, 919, 918,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 859, 224, 975, 359,
	881, 929, 360, 943, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 957, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 958, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 939, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 869,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 922, 427, 411,
	412, 428, 429, 979, 430, 431, 937, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 982, 438, 439,
	440, 441, 959, 0, 444, 445, 857, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 949, 950,
	951, 952, 0, 459, 0, 453, 454, 960, 455, 961,
	879, 456, 457, 458, 0, 460, 461, 0, 863, 462,
	463, 464, 466, 467, 465, 468, 923, 469, 0, 0,
	470, 471, 472, 526, 946, 981, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	860, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 854, 855, 0, 0, 0, 0, 0,
	0, 0, 885, 2136, 0, 2135, 883, 901, 873, 874,
	875, 871, 872, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 925, 889, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 938, 0,
	945, 237, 944, 0, 238, 239, 240, 241, 242, 891,
	924, 858, 243, 983, 984, 487, 0, 244, 245, 931,
	0, 912, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 964, 262, 263, 915, 913, 914,
	921, 917, 916, 920, 264, 265, 266, 267, 948, 268,
	942, 941, 862, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 933, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 868, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 955, 956, 880, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 940, 0, 0, 0,
	296, 0, 297, 0, 0, 965, 298, 299, 953, 954,
	300, 301, 0, 302, 962, 0, 890, 303, 0, 304,
	305, 306, 307, 308, 926, 927, 930, 361, 967, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 966, 317, 935, 936, 0, 896,
	0, 319, 968, 928, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 963, 971, 332, 333, 972, 0, 334,
	335, 336, 919, 918, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	859, 224, 975, 359, 881, 929, 360, 943, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 976, 371, 977, 957, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 958, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 939, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 978, 405,
	406, 407, 408, 869, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 922, 427, 411, 412, 428, 429, 979, 430, 431,
	937, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 982, 438, 439, 440, 441, 959, 0, 444, 445,
	857, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 949, 950, 951, 952, 0, 459, 0, 453,
	454, 960, 455, 961, 879, 456, 457, 458, 0, 460,
	461, 0, 863, 462, 463, 464, 466, 467, 465, 468,
	923, 469, 0, 0, 470, 471, 472, 526, 946, 981,
	0, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 860, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 854, 855, 0,
	0, 0, 0, 0, 0, 0, 885, 2133, 0, 2132,
	883, 901, 873, 874, 875, 871, 872, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 925, 889, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 938, 0, 945, 237, 944, 0, 238, 239,
	240, 241, 242, 891, 924, 858, 243, 983, 984, 487,
	0, 244, 245, 931, 0, 912, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 915, 913, 914, 921, 917, 916, 920, 264, 265,
	266, 267, 948, 268, 942, 941, 862, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 933, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 868, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 955, 956,
	880, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	940, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 953, 954, 300, 301, 0, 302, 962, 0,
	890, 303, 0, 304, 305, 306, 307, 308, 926, 927,
	930, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 966, 317,
	935, 936, 0, 896, 0, 319, 968, 928, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 963, 971, 332,
	333, 972, 0, 334, 335, 336, 919, 918, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 859, 224, 975, 359, 881, 929,
	360, 943, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 957, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 958, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 939, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 869, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 922, 427, 411, 412, 428,
	429, 979, 430, 431, 937, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 982, 438, 439, 440, 441,
	959, 0, 444, 445, 857, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 949, 950, 951, 952,
	0, 459, 0, 453, 454, 960, 455, 961, 879, 456,
	457, 458, 0, 460, 461, 0, 863, 462, 463, 464,
	466, 467, 465, 468, 923, 469, 0, 0, 470, 471,
	472, 526, 946, 981, 0, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 860, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 854, 855, 0, 0, 0, 0, 0, 0, 0,
	885, 2130, 0, 1407, 883, 901, 873, 874, 875, 871,
	872, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 925, 889, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 938, 0, 945, 237,
	944, 0, 238, 239, 240, 241, 242, 891, 924, 858,
	243, 983, 984, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 948, 268, 942, 941,
	862, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 933, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 868, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 880, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 940, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 953, 954, 300, 301,
	0, 302, 962, 0, 890, 303, 0, 304, 305, 306,
	307, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 935, 936, 0, 896, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 859, 224,
	975, 359, 881, 929, 360, 943, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 939, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 869, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 937, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 982,
	438, 439, 440, 441, 959, 0, 444, 445, 857, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	949, 950, 951, 952, 0, 459, 0, 453, 454, 960,
	455, 961, 879, 456, 457, 458, 0, 460, 461, 0,
	863, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 946, 981, 0, 474,
	473, 529, 1406, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 860, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 854, 855, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 850, 883, 901,
	873, 874, 875, 871, 872, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 925,
	889, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	938, 0, 945, 237, 944, 0, 238, 239, 240, 241,
	242, 891, 924, 858, 243, 983, 984, 487, 0, 244,
	245, 931, 0, 912, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 915,
	913, 914, 921, 917, 916, 920, 264, 265, 266, 267,
	948, 268, 942, 941, 862, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 933, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 868, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 955, 956, 880, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 940, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	953, 954, 300, 301, 0, 302, 962, 0, 890, 303,
	0, 304, 305, 306, 307, 308, 926, 927, 930, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 966, 317, 935, 936,
	0, 896, 0, 319, 968, 928, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 963, 971, 332, 333, 972,
	0, 334, 335, 336, 919, 918, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 859, 224, 975, 359, 881, 929, 360, 943,
	362, 363, 0, 0, 364, 0, 864, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 957,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 958, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 939,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 869, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 922, 427, 411, 412, 428, 429, 979,
	430, 431, 937, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 982, 438, 439, 440, 441, 959, 0,
	444, 445, 857, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 949, 950, 951, 952, 0, 459,
	0, 453, 454, 960, 455, 961, 879, 456, 457, 458,
	0, 460, 461, 0, 863, 462, 463, 464, 466, 467,
	465, 468, 923, 469, 0, 0, 470, 471, 472, 526,
	946, 981, 0, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 860, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 854,
	855, 901, 873, 874, 875, 871, 872, 884, 885, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 925, 889, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 938, 0, 945, 237, 944, 0, 238, 239,
	240, 241, 242, 891, 924, 858, 243, 983, 984, 487,
	0, 244, 245, 931, 0, 912, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 3651, 260, 0, 261, 964, 262,
	263, 915, 913, 914, 921, 917, 916, 920, 264, 265,
	266, 267, 948, 268, 942, 941, 862, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 933, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 868, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 955, 956,
	880, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	940, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 953, 954, 300, 301, 0, 302, 962, 0,
	890, 303, 0, 304, 305, 306, 307, 308, 926, 927,
	930, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 966, 317,
	935, 936, 0, 896, 0, 319, 968, 928, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 963, 971, 332,
	333, 972, 0, 334, 335, 336, 919, 918, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 859, 224, 975, 359, 881, 929,
	360, 943, 362, 363, 0, 0, 364, 0, 864, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 957, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 958, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 939, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 869, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 922, 427, 411, 412, 428,
	429, 979, 430, 431, 937, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 982, 438, 439, 440, 441,
	959, 0, 444, 445, 857, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 949, 950, 951, 952,
	0, 459, 0, 453, 454, 960, 455, 961, 879, 456,
	457, 458, 0, 460, 461, 0, 863, 462, 463, 464,
	466, 467, 465, 468, 923, 469, 0, 0, 470, 471,
	472, 526, 946, 981, 0, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 860, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 854, 855, 901, 873, 874, 875, 871, 872, 884,
	885, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 925, 889, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 938, 0, 945, 237, 944, 0,
	238, 239, 240, 241, 242, 891, 924, 858, 243, 983,
	984, 487, 0, 244, 245, 931, 0, 912, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 3470, 260, 0, 261,
	964, 262, 263, 915, 913, 914, 921, 917, 916, 920,
	264, 265, 266, 267, 948, 268, 942, 941, 862, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	933, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	868, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	955, 956, 880, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 940, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 953, 954, 300, 301, 0, 302,
	962, 0, 890, 303, 0, 304, 305, 306, 307, 308,
	926, 927, 930, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	966, 317, 935, 936, 0, 896, 0, 319, 968, 928,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 963,
	971, 332, 333, 972, 0, 334, 335, 336, 919, 918,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 859, 224, 975, 359,
	881, 929, 360, 943, 362, 363, 0, 0, 364, 0,
	864, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 957, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 958, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 939, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 869,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 922, 427, 411,
	412, 428, 429, 979, 430, 431, 937, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 982, 438, 439,
	440, 441, 959, 0, 444, 445, 857, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 949, 950,
	951, 952, 0, 459, 0, 453, 454, 960, 455, 961,
	879, 456, 457, 458, 0, 460, 461, 0, 863, 462,
	463, 464, 466, 467, 465, 468, 923, 469, 0, 0,
	470, 471, 472, 526, 946, 981, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	860, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 854, 855, 901, 873, 874, 875, 871,
	872, 884, 885, 0, 0, 0, 883, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 925, 889, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 938, 0, 945, 237,
	944, 0, 238, 239, 240, 241, 242, 891, 924, 858,
	243, 983, 984, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 948, 268, 942, 941,
	862, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 933, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 868, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 880, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 940, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 953, 954, 300, 301,
	0, 302, 962, 0, 890, 303, 0, 304, 305, 306,
	307, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 935, 936, 0, 896, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 859, 3177,
	975, 359, 881, 929, 360, 943, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 939, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 869, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 937, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 982,
	438, 439, 440, 441, 959, 0, 444, 445, 857, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	949, 950, 951, 952, 0, 459, 0, 453, 454, 960,
	455, 961, 879, 456, 457, 458, 0, 460, 461, 0,
	863, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 946, 981, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 860, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 854, 855, 1617, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 0, 883, 901,
	873, 874, 875, 871, 872, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 925,
	889, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	938, 0, 945, 237, 944, 0, 238, 239, 240, 241,
	242, 891, 924, 858, 243, 983, 984, 487, 0, 244,
	245, 931, 0, 912, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 915,
	913, 914, 921, 917, 916, 920, 264, 265, 266, 267,
	948, 268, 942, 941, 862, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 933, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 868, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 955, 956, 880, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 940, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	953, 954, 300, 301, 0, 302, 962, 0, 890, 303,
	0, 304, 305, 306, 307, 308, 926, 927, 930, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 966, 317, 935, 936,
	0, 896, 0, 319, 968, 928, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 963, 971, 332, 333, 972,
	0, 334, 335, 336, 919, 918, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 859, 224, 975, 359, 881, 929, 360, 943,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 957,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 958, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 939,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 869, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 922, 427, 411, 412, 428, 429, 979,
	430, 431, 937, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 982, 438, 439, 440, 441, 959, 0,
	444, 445, 857, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 949, 950, 951, 952, 0, 459,
	0, 453, 454, 960, 455, 961, 879, 456, 457, 458,
	0, 460, 461, 0, 863, 462, 463, 464, 466, 467,
	465, 468, 923, 469, 0, 0, 470, 471, 472, 526,
	946, 981, 2972, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 860, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 854,
	855, 901, 873, 874, 875, 871, 872, 884, 885, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 925, 889, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 938, 0, 945, 237, 944, 0, 238, 239,
	240, 241, 242, 891, 924, 858, 243, 983, 984, 487,
	0, 244, 245, 931, 0, 912, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 915, 913, 914, 921, 917, 916, 920, 264, 265,
	266, 267, 948, 268, 942, 941, 862, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 933, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 868, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 955, 956,
	880, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	940, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 953, 954, 300, 301, 0, 302, 962, 0,
	890, 303, 0, 304, 305, 306, 307, 308, 926, 927,
	930, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 2010, 315, 316, 318, 0, 966, 317,
	935, 936, 0, 896, 0, 319, 968, 928, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 963, 971, 332,
	333, 972, 0, 334, 335, 336, 919, 918, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 859, 224, 975, 359, 881, 929,
	360, 943, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 957, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 958, 382, 514, 383,
	384, 2009, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 939, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 869, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 922, 427, 411, 412, 428,
	429, 979, 430, 431, 937, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 982, 438, 439, 440, 441,
	959, 0, 444, 445, 857, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 949, 950, 951, 952,
	0, 459, 0, 453, 454, 960, 455, 961, 879, 456,
	457, 458, 0, 460, 461, 0, 863, 462, 463, 464,
	466, 467, 465, 468, 923, 469, 0, 0, 470, 471,
	472, 526, 946, 981, 0, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 860, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 854, 855, 901, 873, 874, 875, 871, 872, 884,
	885, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 925, 889, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 938, 0, 945, 237, 944, 0,
	238, 239, 240, 241, 242, 891, 924, 858, 243, 983,
	984, 487, 0, 244, 245, 931, 0, 912, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 915, 913, 914, 921, 917, 916, 920,
	264, 265, 266, 267, 948, 268, 942, 941, 862, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	933, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	868, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	955, 956, 880, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 940, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 953, 954, 300, 301, 0, 302,
	962, 0, 890, 303, 0, 304, 305, 306, 307, 308,
	926, 927, 930, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	966, 317, 935, 936, 0, 896, 0, 319, 968, 928,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 963,
	971, 332, 333, 972, 0, 334, 335, 336, 919, 918,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 859, 224, 975, 359,
	881, 929, 360, 943, 362, 363, 0, 0, 364, 0,
	864, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 957, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 958, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 939, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 869,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 922, 427, 411,
	412, 428, 429, 979, 430, 431, 937, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 982, 438, 439,
	440, 441, 959, 0, 444, 445, 857, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 949, 950,
	951, 952, 0, 459, 0, 453, 454, 960, 455, 961,
	879, 456, 457, 458, 0, 460, 461, 0, 863, 462,
	463, 464, 466, 467, 465, 468, 923, 469, 0, 0,
	470, 471, 472, 526, 946, 981, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	860, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 854, 855, 901, 873, 874, 875, 871,
	872, 884, 885, 0, 0, 0, 883, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 925, 889, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 938, 0, 945, 237,
	944, 0, 238, 239, 240, 241, 242, 891, 924, 858,
	243, 983, 984, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 948, 268, 942, 941,
	862, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 933, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 868, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 880, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 940, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 953, 954, 300, 301,
	0, 302, 962, 0, 890, 303, 0, 304, 305, 306,
	307, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 935, 936, 0, 896, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 859, 224,
	975, 359, 881, 929, 360, 943, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 939, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 869, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 937, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 982,
	438, 439, 440, 441, 959, 0, 444, 445, 857, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	949, 950, 951, 952, 0, 459, 0, 453, 454, 960,
	455, 961, 879, 456, 457, 458, 0, 460, 461, 0,
	863, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 946, 981, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 860, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 854, 855, 1617, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 0, 883, 901,
	873, 874, 875, 871, 872, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 925,
	889, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	938, 0, 945, 237, 944, 0, 238, 239, 240, 241,
	242, 891, 924, 858, 243, 983, 984, 487, 0, 244,
	245, 931, 0, 912, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 915,
	913, 914, 921, 917, 916, 920, 264, 265, 266, 267,
	948, 268, 942, 941, 862, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 933, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 868, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 955, 956, 880, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 940, 0,
	0, 0, 296, 0, 297, 0, 2205, 965, 298, 299,
	953, 954, 300, 301, 0, 302, 962, 0, 890, 303,
	0, 304, 305, 306, 307, 308, 926, 927, 930, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 966, 317, 935, 936,
	0, 896, 0, 319, 968, 928, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 963, 971, 332, 333, 972,
	0, 334, 335, 336, 919, 918, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 859, 224, 975, 359, 881, 929, 360, 943,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 957,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 958, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 939,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 869, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 922, 427, 411, 412, 428, 429, 979,
	430, 431, 937, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 982, 438, 439, 440, 441, 959, 0,
	444, 445, 857, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 949, 950, 951, 952, 0, 459,
	0, 453, 454, 960, 455, 961, 879, 456, 457, 458,
	0, 460, 461, 0, 863, 462, 463, 464, 466, 467,
	465, 468, 923, 469, 0, 0, 470, 471, 472, 526,
	946, 981, 0, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 860, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 854,
	855, 901, 873, 874, 875, 871, 872, 884, 885, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 925, 889, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 938, 0, 945, 237, 944, 0, 238, 239,
	240, 241, 242, 891, 924, 858, 243, 983, 984, 487,
	0, 244, 245, 931, 0, 912, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 915, 913, 914, 921, 917, 916, 920, 264, 265,
	266, 267, 948, 268, 942, 941, 862, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 933, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 868, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 955, 956,
	880, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	940, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 953, 954, 300, 301, 0, 302, 962, 0,
	890, 303, 0, 304, 305, 306, 307, 308, 926, 927,
	930, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 966, 317,
	935, 936, 0, 896, 0, 319, 968, 928, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 963, 971, 332,
	333, 972, 0, 334, 335, 336, 919, 918, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 859, 224, 975, 359, 881, 929,
	360, 943, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 957, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 958, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 939, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 869, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 922, 427, 411, 412, 428,
	429, 979, 430, 431, 937, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 982, 438, 439, 440, 441,
	959, 0, 444, 445, 857, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 949, 950, 951, 952,
	0, 459, 0, 453, 454, 960, 455, 961, 879, 456,
	457, 458, 0, 460, 461, 0, 863, 462, 463, 464,
	466, 467, 465, 468, 923, 469, 0, 0, 470, 471,
	472, 526, 946, 981, 0, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 860, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 854, 855, 0, 0, 0, 0, 0, 0, 0,
	885, 1547, 0, 2210, 883, 901, 873, 874, 875, 871,
	872, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 925, 889, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 938, 0, 945, 237,
	944, 0, 238, 239, 240, 241, 242, 891, 924, 858,
	243, 983, 984, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 948, 268, 942, 941,
	862, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 933, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 868, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 880, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 940, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 953, 954, 300, 301,
	0, 302, 962, 0, 890, 303, 0, 304, 305, 306,
	307, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 935, 936, 0, 896, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 859, 224,
	975, 359, 881, 929, 360, 943, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 939, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 869, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 937, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 982,
	438, 439, 440, 441, 959, 0, 444, 445, 857, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	949, 950, 951, 952, 0, 459, 0, 453, 454, 960,
	455, 961, 879, 456, 457, 458, 0, 460, 461, 0,
	863, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 946, 981, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 860, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 854, 855, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 2208, 883, 901,
	873, 874, 875, 871, 872, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 925,
	889, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	938, 0, 945, 237, 944, 0, 238, 239, 240, 241,
	242, 891, 924, 858, 243, 983, 984, 487, 0, 244,
	245, 931, 0, 912, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 915,
	913, 914, 921, 917, 916, 920, 264, 265, 266, 267,
	948, 268, 942, 941, 862, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 933, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 868, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 955, 956, 880, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 940, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	953, 954, 300, 301, 0, 302, 962, 0, 890, 303,
	0, 304, 305, 306, 307, 308, 926, 927, 930, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 966, 317, 935, 936,
	0, 896, 0, 319, 968, 928, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 963, 971, 332, 333, 972,
	0, 334, 335, 336, 919, 918, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 859, 224, 975, 359, 881, 929, 360, 943,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 957,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 958, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 939,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 869, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 922, 427, 411, 412, 428, 429, 979,
	430, 431, 937, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 982, 438, 439, 440, 441, 959, 0,
	444, 445, 857, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 949, 950, 951, 952, 0, 459,
	0, 453, 454, 960, 455, 961, 879, 456, 457, 458,
	0, 460, 461, 0, 863, 462, 463, 464, 466, 467,
	465, 468, 923, 469, 0, 0, 470, 471, 472, 526,
	946, 981, 0, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 860, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 854,
	855, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 2196, 883, 901, 873, 874, 875, 871, 872, 884,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 925, 889, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 938, 0, 945, 237, 944, 0,
	238, 239, 240, 241, 242, 891, 924, 858, 243, 983,
	984, 487, 0, 244, 245, 931, 0, 912, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 915, 913, 914, 921, 917, 916, 920,
	264, 265, 266, 267, 948, 268, 942, 941, 862, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	933, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	868, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	955, 956, 880, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 940, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 953, 954, 300, 301, 0, 302,
	962, 0, 890, 303, 0, 304, 305, 306, 307, 308,
	926, 927, 930, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	966, 317, 935, 936, 0, 896, 0, 319, 968, 928,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 963,
	971, 332, 333, 972, 0, 334, 335, 336, 919, 918,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 859, 224, 975, 359,
	881, 929, 360, 943, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 957, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 958, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 939, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 869,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 922, 427, 411,
	412, 428, 429, 979, 430, 431, 937, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 982, 438, 439,
	440, 441, 959, 0, 444, 445, 857, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 949, 950,
	951, 952, 0, 459, 0, 453, 454, 960, 455, 961,
	879, 456, 457, 458, 0, 460, 461, 0, 863, 462,
	463, 464, 466, 467, 465, 468, 923, 469, 0, 0,
	470, 471, 472, 526, 946, 981, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	860, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 854, 855, 0, 0, 0, 0, 0,
	0, 0, 885, 0, 0, 2185, 883, 901, 873, 874,
	875, 871, 872, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 925, 889, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 938, 0,
	945, 237, 944, 0, 238, 239, 240, 241, 242, 891,
	924, 858, 243, 983, 984, 487, 0, 244, 245, 931,
	0, 912, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 964, 262, 263, 915, 913, 914,
	921, 917, 916, 920, 264, 265, 266, 267, 948, 268,
	942, 941, 862, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 933, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 868, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 955, 956, 880, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 940, 0, 0, 0,
	296, 0, 297, 0, 0, 965, 298, 299, 953, 954,
	300, 301, 0, 302, 962, 0, 890, 303, 0, 304,
	305, 306, 307, 308, 926, 927, 930, 361, 967, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 966, 317, 935, 936, 0, 896,
	0, 319, 968, 928, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 963, 971, 332, 333, 972, 0, 334,
	335, 336, 919, 918, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	859, 224, 975, 359, 881, 929, 360, 943, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 976, 371, 977, 957, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 958, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 939, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 978, 405,
	406, 407, 408, 869, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 922, 427, 411, 412, 428, 429, 979, 430, 431,
	937, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 982, 438, 439, 440, 441, 959, 0, 444, 445,
	857, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 949, 950, 951, 952, 0, 459, 0, 453,
	454, 960, 455, 961, 879, 456, 457, 458, 0, 460,
	461, 0, 863, 462, 463, 464, 466, 467, 465, 468,
	923, 469, 0, 0, 470, 471, 472, 526, 946, 981,
	0, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 860, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 854, 855, 0,
	0, 0, 0, 0, 0, 0, 885, 0, 0, 2183,
	883, 2174, 2181, 874, 875, 871, 872, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 925, 889, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 938, 0, 945, 237, 944, 0, 238, 239,
	240, 241, 242, 891, 924, 858, 243, 983, 984, 487,
	0, 244, 245, 931, 0, 912, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 915, 913, 914, 921, 917, 916, 920, 264, 265,
	266, 267, 948, 2177, 942, 941, 862, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 933, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 868, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 955, 956,
	880, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	940, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 953, 954, 300, 301, 0, 302, 962, 0,
	890, 303, 0, 304, 305, 306, 2178, 308, 926, 927,
	930, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 966, 317,
	935, 936, 0, 896, 0, 319, 968, 928, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 963, 971, 332,
	333, 972, 0, 334, 335, 336, 919, 918, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 2179, 2176,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 859, 224, 975, 359, 881, 929,
	360, 943, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 957, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 958, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 939, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 869, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 2180, 0, 422,
	423, 421, 424, 425, 426, 922, 427, 411, 412, 428,
	429, 979, 430, 431, 937, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 982, 438, 439, 440, 441,
	959, 0, 444, 445, 857, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 949, 950, 951, 952,
	0, 459, 0, 453, 454, 960, 455, 961, 879, 456,
	457, 458, 0, 460, 461, 0, 863, 462, 463, 464,
	466, 467, 465, 468, 923, 469, 0, 0, 470, 471,
	472, 526, 946, 981, 0, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 2175, 479, 860, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 854, 855, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 2171, 883, 2174, 2181, 874, 875, 871,
	872, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 925, 889, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 938, 0, 945, 237,
	944, 0, 238, 239, 240, 241, 242, 891, 924, 858,
	243, 983, 984, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 948, 2177, 942, 941,
	862, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 933, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 868, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 880, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 940, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 953, 954, 300, 301,
	0, 302, 962, 0, 890, 303, 0, 304, 305, 306,
	2178, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 935, 936, 0, 896, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 2179, 2176, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 859, 224,
	975, 359, 881, 929, 360, 943, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 939, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 869, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 2180, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 937, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 982,
	438, 439, 440, 441, 959, 0, 444, 445, 857, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	949, 950, 951, 952, 0, 459, 0, 453, 454, 960,
	455, 961, 879, 456, 457, 458, 0, 460, 461, 0,
	863, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 946, 981, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	2175, 479, 860, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 854, 855, 901, 873, 874,
	875, 871, 872, 884, 885, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 925, 889, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 938, 0,
	945, 237, 944, 0, 238, 239, 240, 241, 242, 891,
	924, 858, 243, 983, 984, 487, 0, 244, 245, 931,
	0, 912, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 964, 262, 263, 915, 913, 914,
	921, 917, 916, 920, 264, 265, 266, 267, 948, 268,
	942, 941, 862, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 933, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 868, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 955, 956, 880, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 940, 0, 0, 0,
	296, 0, 297, 0, 0, 965, 298, 299, 953, 954,
	300, 301, 0, 302, 962, 0, 890, 303, 0, 304,
	305, 306, 307, 308, 926, 927, 930, 361, 967, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 966, 317, 935, 936, 0, 896,
	0, 319, 968, 928, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 963, 971, 332, 333, 972, 0, 334,
	335, 336, 919, 918, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	859, 224, 975, 359, 881, 929, 360, 943, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 976, 371, 977, 957, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 958, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 939, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 978, 405,
	406, 407, 408, 869, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 922, 427, 411, 412, 428, 429, 979, 430, 431,
	937, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 982, 438, 439, 440, 441, 959, 0, 444, 445,
	857, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 949, 950, 951, 952, 0, 459, 0, 453,
	454, 960, 455, 961, 879, 456, 457, 458, 0, 460,
	461, 0, 863, 462, 463, 464, 466, 467, 465, 468,
	923, 469, 0, 0, 470, 471, 472, 526, 946, 981,
	0, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 860, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 854, 855, 0,
	0, 0, 0, 0, 1555, 0, 885, 0, 0, 0,
	883, 901, 873, 874, 875, 871, 872, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 1989, 230, 231, 0, 0, 0, 0,
	0, 925, 889, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 938, 0, 945, 237, 944, 0, 238, 239,
	240, 241, 242, 891, 924, 858, 243, 983, 984, 487,
	0, 244, 245, 931, 0, 912, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 915, 913, 914, 921, 917, 916, 920, 264, 265,
	266, 267, 948, 268, 942, 941, 862, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 933, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 868, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 955, 956,
	880, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	940, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 953, 954, 300, 301, 0, 302, 962, 0,
	890, 303, 0, 304, 305, 306, 307, 308, 926, 927,
	930, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 966, 317,
	935, 936, 0, 896, 0, 319, 968, 928, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 963, 971, 332,
	333, 972, 0, 334, 335, 336, 919, 918, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 859, 224, 975, 359, 881, 929,
	360, 943, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 957, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 958, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 939, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 869, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 922, 427, 411, 412, 428,
	429, 979, 430, 431, 937, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 982, 438, 439, 440, 441,
	959, 0, 444, 445, 857, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 949, 950, 951, 952,
	0, 459, 0, 453, 454, 960, 455, 961, 879, 456,
	457, 458, 0, 460, 461, 0, 863, 462, 463, 464,
	466, 467, 465, 468, 923, 469, 0, 0, 470, 471,
	472, 526, 946, 981, 0, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 860, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 854, 855, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 1226, 883, 901, 873, 874, 875, 871,
	872, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 925, 889, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 938, 0, 945, 237,
	944, 0, 238, 239, 240, 241, 242, 891, 924, 858,
	243, 983, 984, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 948, 268, 942, 941,
	862, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 933, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 868, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 880, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 940, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 953, 954, 300, 301,
	0, 302, 962, 0, 890, 303, 0, 304, 305, 306,
	307, 308, 1225, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 935, 936, 0, 896, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 859, 224,
	975, 359, 881, 929, 360, 943, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 939, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 869, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 937, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 982,
	438, 439, 440, 441, 959, 0, 444, 445, 857, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	949, 950, 951, 952, 0, 459, 0, 453, 454, 960,
	455, 961, 879, 456, 457, 458, 0, 460, 461, 0,
	863, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 946, 981, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 860, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 854, 855, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 1220, 883, 901,
	873, 874, 875, 871, 872, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 925,
	889, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	938, 0, 945, 237, 944, 0, 238, 239, 240, 241,
	242, 891, 924, 858, 243, 983, 984, 487, 0, 244,
	245, 931, 0, 912, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 915,
	913, 914, 921, 917, 916, 920, 264, 265, 266, 267,
	948, 268, 942, 941, 862, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 933, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 868, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 955, 956, 880, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 940, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	953, 954, 300, 301, 0, 302, 962, 0, 890, 303,
	0, 304, 305, 306, 307, 308, 1219, 927, 930, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 966, 317, 935, 936,
	0, 896, 0, 319, 968, 928, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 963, 971, 332, 333, 972,
	0, 334, 335, 336, 919, 918, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 859, 224, 975, 359, 881, 929, 360, 943,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 957,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 958, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 939,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 869, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 922, 427, 411, 412, 428, 429, 979,
	430, 431, 937, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 982, 438, 439, 440, 441, 959, 0,
	444, 445, 857, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 949, 950, 951, 952, 0, 459,
	0, 453, 454, 960, 455, 961, 879, 456, 457, 458,
	0, 460, 461, 0, 863, 462, 463, 464, 466, 467,
	465, 468, 923, 469, 0, 0, 470, 471, 472, 526,
	946, 981, 0, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 860, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 854,
	855, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 1215, 883, 901, 873, 874, 875, 871, 872, 884,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 925, 889, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 938, 0, 945, 237, 944, 0,
	238, 239, 240, 241, 242, 891, 924, 858, 243, 983,
	984, 487, 0, 244, 245, 931, 0, 912, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 915, 913, 914, 921, 917, 916, 920,
	264, 265, 266, 267, 948, 268, 942, 941, 862, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	933, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	868, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	955, 956, 880, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 940, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 953, 954, 300, 301, 0, 302,
	962, 0, 890, 303, 0, 304, 305, 306, 307, 308,
	926, 927, 930, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	966, 317, 935, 936, 0, 896, 0, 319, 968, 928,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 963,
	971, 332, 333, 972, 0, 334, 335, 336, 919, 918,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 859, 224, 975, 359,
	881, 929, 360, 943, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 957, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 958, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 939, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 869,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 922, 427, 411,
	412, 428, 429, 979, 430, 431, 937, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 982, 438, 439,
	440, 441, 959, 0, 444, 445, 857, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 949, 950,
	951, 952, 0, 459, 0, 453, 454, 960, 455, 961,
	879, 456, 457, 458, 0, 460, 461, 0, 863, 462,
	463, 464, 466, 467, 465, 468, 923, 469, 0, 0,
	470, 471, 472, 526, 946, 981, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	860, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 854, 855, 901, 873, 874, 875, 871,
	872, 884, 885, 0, 0, 0, 883, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 925, 889, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 938, 0, 945, 237,
	944, 0, 238, 239, 240, 241, 242, 891, 924, 858,
	243, 983, 984, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 948, 268, 942, 941,
	862, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 933, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 868, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 880, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 940, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 953, 954, 300, 301,
	0, 302, 962, 0, 890, 303, 0, 304, 305, 306,
	307, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 935, 936, 0, 896, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 859, 224,
	975, 359, 881, 929, 360, 943, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 939, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 869, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 937, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 982,
	438, 439, 440, 441, 959, 0, 444, 445, 857, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	949, 950, 951, 952, 0, 459, 0, 453, 454, 960,
	455, 961, 879, 456, 457, 458, 0, 460, 461, 0,
	863, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 946, 981, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 860, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 854, 855, 901, 873, 874,
	875, 871, 872, 884, 885, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 925, 889, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 938, 0,
	945, 237, 944, 0, 238, 239, 240, 241, 242, 891,
	924, 858, 243, 983, 984, 487, 0, 244, 245, 931,
	0, 912, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 964, 262, 3683, 915, 913, 914,
	921, 917, 916, 920, 264, 265, 266, 267, 948, 268,
	942, 941, 862, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 933, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 868, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 955, 956, 880, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 940, 0, 0, 0,
	296, 0, 297, 0, 0, 965, 298, 299, 953, 954,
	300, 301, 0, 302, 962, 0, 890, 303, 0, 304,
	305, 306, 307, 308, 926, 927, 930, 361, 967, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 966, 317, 935, 936, 0, 896,
	0, 319, 968, 928, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 963, 971, 332, 333, 972, 0, 334,
	335, 336, 919, 918, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	859, 224, 975, 359, 881, 929, 360, 943, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 976, 371, 977, 957, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 958, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 939, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 978, 405,
	406, 407, 408, 869, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 922, 427, 411, 412, 428, 429, 979, 430, 431,
	937, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 982, 438, 439, 440, 441, 959, 0, 444, 445,
	857, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 949, 950, 951, 952, 0, 459, 0, 453,
	454, 960, 455, 961, 879, 456, 457, 458, 0, 3682,
	461, 0, 863, 462, 463, 464, 466, 467, 465, 468,
	923, 469, 0, 0, 470, 471, 472, 526, 946, 981,
	0, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 860, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 854, 855, 901,
	873, 874, 875, 871, 872, 884, 885, 0, 0, 0,
	883, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 925,
	889, 0, 0, 0, 232, 234, 233, 235, 236, 3681,
	938, 0, 945, 237, 944, 0, 238, 239, 240, 241,
	242, 891, 924, 858, 243, 983, 984, 487, 0, 244,
	245, 931, 0, 912, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 3683, 915,
	913, 914, 921, 917, 916, 920, 264, 265, 266, 267,
	948, 268, 942, 941, 862, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 933, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 868, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 955, 956, 880, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 940, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	953, 954, 300, 301, 0, 302, 962, 0, 890, 303,
	0, 304, 305, 306, 307, 308, 926, 927, 930, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 966, 317, 935, 936,
	0, 896, 0, 319, 968, 928, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 963, 971, 332, 333, 972,
	0, 334, 335, 336, 919, 918, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 859, 224, 975, 359, 881, 929, 360, 943,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 957,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 958, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 939,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 869, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 922, 427, 411, 412, 428, 429, 979,
	430, 431, 937, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 982, 438, 439, 440, 441, 959, 0,
	444, 445, 857, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 949, 950, 951, 952, 0, 459,
	0, 453, 454, 960, 455, 961, 879, 456, 457, 458,
	0, 3682, 461, 0, 863, 462, 463, 464, 466, 467,
	465, 468, 923, 469, 0, 0, 470, 471, 472, 526,
	946, 981, 0, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 860, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 854,
	855, 901, 873, 874, 875, 2551, 2552, 884, 885, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 925, 889, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 938, 0, 945, 237, 944, 0, 238, 239,
	240, 241, 242, 891, 924, 858, 243, 983, 984, 487,
	0, 244, 245, 931, 0, 912, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 915, 913, 914, 921, 917, 916, 920, 264, 265,
	266, 267, 948, 268, 942, 941, 862, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 933, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 868, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 955, 956,
	880, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	940, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 953, 954, 300, 301, 0, 302, 962, 0,
	890, 303, 0, 304, 305, 306, 307, 308, 926, 927,
	930, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 966, 317,
	935, 936, 0, 896, 0, 319, 968, 928, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 963, 971, 332,
	333, 972, 0, 334, 335, 336, 919, 918, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 859, 224, 975, 359, 881, 929,
	360, 943, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 957, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 958, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 939, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 869, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 922, 427, 411, 412, 428,
	429, 979, 430, 431, 937, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 982, 438, 439, 440, 441,
	959, 0, 444, 445, 857, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 949, 950, 951, 952,
	0, 459, 0, 453, 454, 960, 455, 961, 879, 456,
	457, 458, 0, 460, 461, 0, 863, 462, 463, 464,
	466, 467, 465, 468, 923, 469, 0, 0, 470, 471,
	472, 526, 946, 981, 0, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 860, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 854, 855, 901, 873, 874, 875, 2549, 2550, 884,
	885, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 925, 889, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 938, 0, 945, 237, 944, 0,
	238, 239, 240, 241, 242, 891, 924, 858, 243, 983,
	984, 487, 0, 244, 245, 931, 0, 912, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 915, 913, 914, 921, 917, 916, 920,
	264, 265, 266, 267, 948, 268, 942, 941, 862, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	933, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	868, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	955, 956, 880, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 940, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 953, 954, 300, 301, 0, 302,
	962, 0, 890, 303, 0, 304, 305, 306, 307, 308,
	926, 927, 930, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	966, 317, 935, 936, 0, 896, 0, 319, 968, 928,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 963,
	971, 332, 333, 972, 0, 334, 335, 336, 919, 918,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 859, 224, 975, 359,
	881, 929, 360, 943, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 957, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 958, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 939, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 869,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 922, 427, 411,
	412, 428, 429, 979, 430, 431, 937, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 982, 438, 439,
	440, 441, 959, 0, 444, 445, 857, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 949, 950,
	951, 952, 0, 459, 0, 453, 454, 960, 455, 961,
	879, 456, 457, 458, 0, 460, 461, 0, 863, 462,
	463, 464, 466, 467, 465, 468, 923, 469, 0, 0,
	470, 471, 472, 526, 946, 981, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	860, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 854, 855, 901, 873, 874, 875, 871,
	872, 884, 885, 0, 0, 0, 883, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 925, 889, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 938, 0, 945, 237,
	944, 0, 238, 239, 240, 241, 242, 891, 924, 858,
	243, 983, 984, 487, 0, 244, 245, 931, 0, 912,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 915, 913, 914, 921, 917,
	916, 920, 264, 265, 266, 267, 948, 268, 942, 941,
	862, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 933, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 868, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 955, 956, 880, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 940, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 953, 954, 300, 301,
	0, 302, 962, 0, 890, 303, 0, 304, 305, 306,
	307, 308, 926, 927, 930, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 966, 317, 935, 936, 0, 896, 0, 319,
	968, 928, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 963, 971, 332, 333, 972, 0, 334, 335, 336,
	919, 918, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 859, 224,
	975, 359, 881, 929, 360, 943, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 957, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	958, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 939, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 869, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 922,
	427, 411, 412, 428, 429, 979, 430, 431, 937, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 982,
	438, 439, 440, 441, 959, 0, 444, 445, 857, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	949, 950, 951, 952, 0, 459, 0, 453, 454, 960,
	455, 961, 879, 456, 457, 458, 0, 460, 461, 0,
	863, 462, 463, 464, 466, 467, 465, 468, 923, 469,
	0, 0, 470, 471, 472, 526, 946, 981, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 860, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 1997, 1998, 901, 873, 874,
	875, 871, 872, 884, 885, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 925, 889, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 938, 0,
	945, 237, 944, 0, 238, 239, 240, 241, 242, 891,
	924, 0, 243, 983, 984, 487, 0, 244, 245, 931,
	0, 912, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 964, 262, 263, 915, 913, 914,
	921, 917, 916, 920, 264, 265, 266, 267, 948, 268,
	942, 941, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 933, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 868, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 955, 956, 880, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 940, 0, 0, 0,
	296, 0, 297, 0, 0, 965, 298, 299, 953, 954,
	300, 301, 0, 302, 962, 0, 890, 303, 0, 304,
	305, 306, 307, 308, 926, 927, 930, 361, 967, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 966, 317, 935, 936, 0, 896,
	0, 319, 968, 928, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 963, 971, 332, 333, 972, 0, 334,
	335, 336, 919, 918, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	0, 224, 975, 359, 881, 929, 360, 943, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 976, 371, 977, 957, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 958, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 939, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 978, 405,
	406, 407, 408, 869, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 922, 427, 411, 412, 428, 429, 979, 430, 431,
	937, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 982, 438, 439, 440, 441, 959, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 949, 950, 951, 952, 0, 459, 0, 453,
	454, 960, 455, 961, 879, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	923, 469, 0, 0, 470, 471, 472, 526, 946, 981,
	0, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	2193, 0, 0, 0, 0, 0, 0, 2191, 2192, 901,
	873, 874, 875, 871, 872, 884, 885, 0, 0, 0,
	883, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 925,
	889, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	938, 0, 945, 237, 944, 0, 238, 239, 240, 241,
	242, 891, 924, 0, 243, 983, 984, 487, 0, 244,
	245, 931, 0, 912, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 915,
	913, 914, 921, 917, 916, 920, 264, 265, 266, 267,
	948, 268, 942, 941, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 933, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 868, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 955, 956, 880, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 940, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	953, 954, 300, 301, 0, 302, 962, 0, 890, 303,
	0, 304, 305, 306, 307, 308, 926, 927, 930, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 966, 317, 935, 936,
	0, 896, 0, 319, 968, 928, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 963, 971, 332, 333, 972,
	0, 334, 335, 336, 919, 918, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 0, 224, 975, 359, 881, 929, 360, 943,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 957,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 958, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 939,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 2544, 2545, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 922, 427, 411, 412, 428, 429, 979,
	430, 431, 937, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 982, 438, 439, 440, 441, 959, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 949, 950, 951, 952, 0, 459,
	0, 453, 454, 960, 455, 961, 879, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 923, 469, 0, 0, 470, 471, 472, 526,
	946, 981, 0, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 901, 873, 874, 875,
	871, 872, 884, 0, 0, 0, 0, 0, 0, 1747,
	1748, 0, 0, 225, 226, 227, 228, 229, 885, 230,
	231, 0, 883, 0, 0, 0, 925, 889, 0, 0,
	0, 232, 234, 233, 235, 236, 0, 938, 0, 945,
	237, 944, 0, 238, 239, 240, 241, 242, 891, 924,
	858, 243, 983, 984, 487, 0, 244, 245, 931, 0,
	912, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 3683, 915, 913, 914, 921,
	917, 916, 920, 264, 265, 266, 267, 948, 268, 942,
	941, 862, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 933, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 868, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 955, 956, 880, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 940, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 953, 954, 300,
	301, 0, 302, 962, 0, 890, 303, 0, 304, 305,
	306, 307, 308, 926, 927, 930, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 966, 317, 935, 936, 0, 896, 0,
	319, 0, 928, 0, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 963, 971, 332, 333, 0, 0, 334, 335,
	336, 919, 918, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 859,
	224, 0, 359, 881, 929, 360, 943, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 957, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 958, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 939, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 869, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	922, 427, 411, 412, 428, 429, 0, 430, 431, 937,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	982, 438, 439, 440, 441, 959, 0, 444, 445, 857,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 949, 950, 951, 952, 0, 459, 0, 453, 454,
	960, 455, 961, 879, 456, 457, 458, 0, 3682, 461,
	0, 863, 462, 463, 464, 466, 467, 465, 468, 923,
	469, 0, 0, 470, 471, 472, 526, 946, 981, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 901, 873, 874, 875, 871, 872, 884,
	0, 0, 0, 0, 0, 0, 854, 855, 0, 0,
	225, 226, 227, 228, 229, 885, 230, 231, 0, 883,
	0, 0, 0, 925, 889, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 938, 0, 945, 237, 944, 0,
	238, 239, 240, 241, 242, 0, 924, 0, 243, 983,
	984, 487, 0, 244, 245, 931, 0, 912, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 915, 913, 914, 921, 917, 916, 920,
	264, 265, 266, 267, 948, 268, 942, 941, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	933, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	955, 956, 880, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 940, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 953, 954, 300, 301, 0, 302,
	962, 0, 890, 303, 0, 304, 305, 306, 307, 308,
	926, 927, 930, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	966, 317, 935, 936, 0, 896, 0, 319, 968, 928,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 963,
	971, 332, 333, 972, 0, 334, 335, 336, 919, 918,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 0, 224, 975, 359,
	881, 929, 360, 943, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 957, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 958, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 939, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 869,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 922, 427, 411,
	412, 428, 429, 979, 430, 431, 937, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 982, 438, 439,
	440, 441, 959, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 949, 950,
	951, 952, 0, 459, 0, 453, 454, 960, 455, 961,
	879, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 923, 469, 0, 0,
	470, 471, 472, 526, 946, 981, 0, 474, 473, 529,
	0, 847, 0, 1021, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 885, 925, 0, 0, 883, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 924, 0, 243, 485,
	486, 487, 0, 244, 245, 931, 0, 912, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 915, 913, 914, 921, 917, 916, 920,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	955, 956, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 495, 496, 300, 301, 0, 302,
	962, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	926, 927, 930, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	966, 317, 502, 503, 0, 504, 0, 319, 968, 928,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 1007, 330, 329, 0, 331, 963,
	971, 332, 333, 972, 0, 334, 335, 336, 919, 918,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 0, 224, 975, 359,
	0, 929, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 1013, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 957, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 958, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 516,
	1015, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	188, 422, 423, 421, 424, 425, 426, 922, 427, 411,
	412, 428, 429, 979, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 959, 0, 444, 445, 0, 443, 190, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 960, 455, 961,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 923, 469, 0, 0,
	470, 471, 472, 1338, 527, 528, 0, 474, 473, 529,
	0, 1021, 0, 182, 475, 476, 530, 477, 478, 479,
	0, 183, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	1011, 925, 1641, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 924, 0, 243, 485, 486, 487,
	0, 244, 245, 931, 0, 912, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 964, 262,
	263, 915, 913, 914, 921, 917, 916, 920, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 955, 956,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 965,
	298, 299, 495, 496, 300, 301, 0, 302, 962, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 926, 927,
	930, 361, 967, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 966, 317,
	502, 503, 0, 504, 0, 319, 968, 928, 969, 320,
	321, 322, 970, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 1007, 330, 329, 0, 331, 963, 971, 332,
	333, 972, 0, 334, 335, 336, 919, 918, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 973, 353, 354, 357,
	358, 356, 974, 355, 0, 224, 975, 359, 0, 929,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 1013,
	366, 367, 368, 0, 0, 369, 370, 509, 976, 371,
	977, 957, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 958, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 978, 405, 406, 407, 408, 516, 1015, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 188, 422,
	423, 421, 424, 425, 426, 922, 427, 411, 412, 428,
	429, 979, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	959, 0, 444, 445, 0, 443, 190, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 960, 455, 961, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 923, 469, 0, 0, 470, 471,
	472, 1338, 527, 528, 0, 474, 473, 529, 0, 0,
	0, 182, 475, 476, 530, 477, 478, 479, 0, 183,
	0, 0, 2701, 0, 1021, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1011, 0,
	1641, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 925, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 924, 0, 243,
	485, 486, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 495, 496, 300, 301, 0,
	302, 962, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 502, 503, 0, 504, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 1007, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 0, 224, 975,
	359, 0, 929, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 1013, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	516, 1015, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 959, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 960, 455,
	961, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 0, 1003, 0, 1021, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 1011, 0, 1009, 925, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 924, 0, 243,
	485, 486, 487, 0, 244, 245, 931, 0, 912, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 915, 913, 914, 921, 917, 916,
	920, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 955, 956, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 495, 496, 300, 301, 0,
	302, 962, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 926, 927, 930, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 966, 317, 502, 503, 0, 504, 0, 319, 968,
	928, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 1007, 330, 329, 0, 331,
	963, 971, 332, 333, 972, 0, 334, 335, 336, 919,
	918, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 0, 224, 975,
	359, 0, 929, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 1013, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 957, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 958,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	516, 1015, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 922, 427,
	411, 412, 428, 429, 979, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 959, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 960, 455,
	961, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 923, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 0, 1021, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 1011, 925, 1009, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 924, 0, 243, 485, 486,
	487, 0, 244, 245, 931, 0, 912, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 964,
	262, 263, 915, 913, 914, 921, 917, 916, 920, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 955,
	956, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 495, 496, 300, 301, 0, 302, 962,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 926,
	927, 930, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 966,
	317, 502, 503, 0, 504, 0, 319, 968, 928, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 1007, 330, 329, 0, 331, 963, 971,
	332, 333, 972, 0, 334, 335, 336, 919, 918, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 0, 224, 975, 359, 0,
	929, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	1013, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 957, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 958, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 516, 1015,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 922, 427, 411, 412,
	428, 429, 979, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 959, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 960, 455, 961, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 923, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 0,
	1021, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 1011,
	925, 1009, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 924, 0, 243, 485, 486, 487, 0,
	244, 245, 931, 0, 912, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	915, 913, 914, 921, 917, 916, 920, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 955, 956, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 495, 496, 300, 301, 0, 302, 962, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 926, 927, 930,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 966, 317, 502,
	503, 0, 504, 0, 319, 968, 928, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 963, 971, 332, 333,
	972, 0, 334, 335, 336, 919, 918, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 0, 224, 975, 359, 0, 929, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	957, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 958, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 516, 1015, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 922, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 959,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 960, 455, 961, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 923, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 0, 847, 0,
	1199, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 1539,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 1171, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 966, 317, 502,
	503, 0, 504, 0, 319, 968, 505, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 971, 332, 333,
	972, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 0, 0, 975, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 188, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 190, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	1338, 527, 528, 0, 474, 473, 529, 0, 0, 0,
	182, 475, 476, 530, 477, 478, 479, 0, 183, 0,
	0, 1335, 0, 1199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 1171, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	966, 317, 502, 503, 0, 504, 0, 319, 968, 505,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	971, 332, 333, 972, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 0, 0, 975, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	188, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 979, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 190, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 1338, 527, 528, 0, 474, 473, 529,
	0, 0, 0, 182, 475, 476, 530, 477, 478, 479,
	0, 183, 0, 0, 0, 0, 1199, 1198, 0, 0,
	0, 0, 1196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	1171, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 966, 317, 502, 503, 0, 504, 0,
	319, 968, 505, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 971, 332, 333, 972, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 0,
	0, 975, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 979, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 1199, 1198, 0, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 2909, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 1171, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	966, 317, 502, 503, 0, 504, 0, 319, 968, 505,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	971, 332, 333, 972, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 0, 0, 975, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 979, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	1199, 1198, 0, 0, 0, 0, 1196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 1205, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 1171, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 966, 317, 502,
	503, 0, 504, 0, 319, 968, 505, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 971, 332, 333,
	972, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 0, 0, 975, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 1021, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 925, 0, 1344,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	924, 0, 243, 485, 486, 487, 0, 244, 245, 931,
	0, 912, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 964, 262, 263, 915, 913, 914,
	921, 917, 916, 920, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 955, 956, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 965, 298, 299, 495, 496,
	300, 301, 0, 302, 962, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 926, 927, 930, 361, 967, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 966, 317, 502, 503, 0, 504,
	0, 319, 968, 928, 969, 320, 321, 322, 970, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 963, 971, 332, 333, 972, 0, 334,
	335, 336, 919, 918, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 973, 353, 354, 357, 358, 356, 974, 355,
	0, 224, 975, 359, 0, 929, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 976, 371, 977, 957, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 958, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 978, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 922, 427, 411, 412, 428, 429, 979, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 959, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 960, 455, 961, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	923, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 847, 0, 219, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 188, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 190, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 1338, 527, 528, 0,
	474, 473, 529, 219, 0, 0, 182, 475, 476, 530,
	477, 478, 479, 0, 183, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 157, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	0, 1286, 0, 219, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 1655, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 219, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	1290, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	224, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 219,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 2857, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 224, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 1290, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 219,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 2447, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 0, 474, 473, 529, 219, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 2997, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 0, 714, 0, 608, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 1902, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 614, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 712, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	224, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 613, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 0, 607, 0, 608, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 617, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 614, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	224, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 613, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 605, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 1199, 1198, 0, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 0, 0, 0, 617, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 1171, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	966, 317, 502, 503, 0, 504, 0, 319, 968, 505,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	971, 332, 333, 972, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 0, 0, 975, 359,
	3139, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 979, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	1199, 1198, 0, 0, 0, 0, 1196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 1171, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 964, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 965, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 967, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 966, 317, 502,
	503, 0, 504, 0, 319, 968, 505, 969, 320, 321,
	322, 970, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 971, 332, 333,
	972, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 973, 353, 354, 357, 358,
	356, 974, 355, 0, 0, 975, 359, 2837, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 976, 371, 977,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 978, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	979, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 608, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 614, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 1936, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 613, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 608, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 617, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 614, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	224, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 613, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 1371, 0, 1199, 1198, 0, 0, 0,
	0, 1196, 0, 0, 0, 0, 0, 0, 617, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 1171,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 964, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 1370, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 965, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 967, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 966, 317, 502, 503, 0, 504, 0, 319,
	968, 505, 969, 320, 321, 322, 970, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 971, 332, 333, 972, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	973, 353, 354, 357, 358, 356, 974, 355, 0, 0,
	975, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 976, 371, 977, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 1369, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 978, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 1368, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 979, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 1332, 0, 1199, 1198, 0, 0, 0, 0,
	1196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 1171, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 964, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 965, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 1331, 500, 501, 361, 967, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 966, 317, 502, 503, 0, 504, 0, 319, 968,
	505, 969, 320, 321, 322, 970, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 971, 332, 333, 972, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 973,
	353, 354, 357, 358, 356, 974, 355, 0, 0, 975,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 976, 371, 977, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 978, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 979, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 1265, 0, 1199, 1198, 0, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 1171, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	964, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 965, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	1264, 500, 501, 361, 967, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	966, 317, 502, 503, 0, 504, 0, 319, 968, 505,
	969, 320, 321, 322, 970, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	971, 332, 333, 972, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 973, 353,
	354, 357, 358, 356, 974, 355, 0, 0, 975, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	976, 371, 977, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 978, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 979, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	1194, 0, 1199, 1198, 0, 0, 0, 0, 1196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 1171, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 964,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	965, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 1193,
	500, 501, 361, 967, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 966,
	317, 502, 503, 0, 504, 0, 319, 968, 505, 969,
	320, 321, 322, 970, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 971,
	332, 333, 972, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 973, 353, 354,
	357, 358, 356, 974, 355, 0, 0, 975, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 976,
	371, 977, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 978, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 979, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 1199,
	1198, 0, 0, 0, 0, 1196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 1171, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 966, 317, 502, 503,
	0, 504, 0, 319, 968, 505, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 971, 332, 333, 972,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 0, 0, 975, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 979,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 1199,
	1198, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 617, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 1171, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 1720, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 966, 317, 502, 503,
	0, 504, 0, 319, 968, 505, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 971, 332, 333, 972,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 0, 0, 975, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 979,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 0, 474, 473, 529, 1199, 1198, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	1171, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 964, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 965, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 967, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 966, 317, 502, 503, 0, 504, 0,
	319, 968, 505, 969, 320, 321, 322, 970, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 971, 332, 333, 972, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 973, 353, 354, 357, 358, 356, 974, 355, 0,
	0, 975, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 976, 371, 977, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 978, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 979, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 1199,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 1171, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 964, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 965, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	967, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 966, 317, 502, 503,
	0, 504, 0, 319, 968, 505, 969, 320, 321, 322,
	970, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 971, 332, 333, 972,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 973, 353, 354, 357, 358, 356,
	974, 355, 0, 0, 975, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 976, 371, 977, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	978, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 979,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 2322, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 2319, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 2326, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 2485, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 2325, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 2482, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 2484, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 2481, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 2324, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 2483, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 2322, 244, 245, 488, 0, 0,
	2316, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 2319, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	2326, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 2325, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 2315, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 2324, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	2323, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 1428, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 1431, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 1429,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 1430, 473,
	529, 1175, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	1177, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 1013, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	1172, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 1174,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	1013, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 1078,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 1080, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 224, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 1013,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 559, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	558, 229, 548, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 551, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 552, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 553, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 547, 0, 219,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 548, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 551, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 552, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 553, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 2819, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 224,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 1013, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 2419, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 2418, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 1912, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 219, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	224, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 1840, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 1845, 0, 219, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 1844, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 224,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 1833, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 1835, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 1328, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	1327, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	1319, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 1318,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 1316,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 1315, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 224, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 1312, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 1311, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 224, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 1267, 0, 219,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 224, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 0, 474, 473, 529, 1186, 0, 219, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 1188, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 224, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 219, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 224, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 551,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 552,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 553, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 219, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 1943, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	219, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 1941,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 224, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 1939, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 219, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 1883, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	224, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 705, 0, 219, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 704, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	703, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 219, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 2485, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 3344, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 0, 474, 473, 529, 538, 0, 219, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 537,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 536, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 219, 3353, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 219, 2472, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 3127,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 219, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 2244,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 219, 2472, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 2469, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 219, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 1920,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 1910, 0, 219, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 579, 0, 219, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 1052, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 1050, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 580,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 576, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 1053, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	575, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 579, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 569, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 580, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 576, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 1343, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 575,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 1325, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	1324, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	1274, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 1273,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 1258,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 1257, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 1253, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 1180, 0, 219,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 0, 474, 473, 529, 579, 0, 219, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 1052, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 243, 485, 486, 1050, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 580, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	576, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	1053, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 575, 521, 522, 523, 0, 459, 0,
	453, 1051, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 219, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 225, 226,
	227, 228, 229, 1034, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 585, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 579, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 569, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 567, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 568, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 580, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 570,
	409, 0, 410, 414, 415, 576, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 571, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 575, 521,
	522, 523, 0, 459, 0, 453, 573, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	563, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 564, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 561,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 555, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 533, 0, 219,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 2872, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 219, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 2795, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 219, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 2793, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 0, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 2779, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 0, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 219, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 2427, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	0, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	219, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	564, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 0, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 1865, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 0, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 0, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 219, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 1296, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 0,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 219,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 1235, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 0, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 986, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 0, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 0, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	0, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 0, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 0, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 0, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 1689, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 0, 1695,
	0, 1685, 237, 1701, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 243, 1710, 1711, 0, 0, 244, 245,
	0, 0, 1171, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 964, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 948,
	268, 1699, 1698, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 933, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 0, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 295, 1697, 0, 0,
	0, 296, 0, 297, 0, 0, 965, 298, 299, 1706,
	1707, 300, 301, 0, 302, 0, 0, 0, 303, 0,
	304, 305, 306, 307, 308, 0, 0, 0, 361, 967,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 966, 317, 1692, 1693, 0,
	1688, 0, 319, 968, 0, 969, 320, 321, 322, 970,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 0, 971, 332, 333, 972, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 973, 353, 354, 357, 358, 356, 974,
	355, 0, 0, 975, 359, 0, 0, 360, 1700, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 0, 976, 371, 977, 0, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 1682, 1683, 0, 382, 0, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 1696, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 978,
	405, 406, 407, 408, 0, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 979, 430,
	431, 1694, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 1709, 438, 439, 440, 441, 0, 0, 444,
	445, 0, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 1702, 1703, 1704, 1705, 0, 459, 0,
	453, 454, 0, 455, 0, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 0, 1686,
	1708, 0, 474, 473, 0, 0, 0, 0, 0, 475,
	476, 0, 477, 478, 479, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 1504, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 1474,
	0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 1509, 1504,
	0, 1495, 0, 0, 0, 0, 1476, 0, 0, 1492,
	0, 1522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 1499, 1500, 1501, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 0, 1523, 1498, 1499, 1500, 1501, 0, 1503, 1505,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 0, 1523, 0, 0, 1511, 0,
	0, 1503, 1505, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 1519, 0, 1520, 0,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 1509,
	1504, 1502, 0, 0, 0, 0, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 1514, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 2628, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0,
	0, 0, 0, 1513, 0, 2627, 1523, 0, 0, 0,
	0, 0, 1503, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	1509, 1504, 0, 1496, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 1513, 0, 0, 1523, 0, 1509,
	1504, 0, 0, 1503, 1505, 0, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 1492, 1496, 0, 0, 0, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1521, 0,
	0, 0, 0, 0, 0, 0, 2626, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 1473, 1474, 0, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 1509, 1504, 0, 0,
	0, 0, 0, 1513, 1476, 0, 1523, 0, 0, 1522,
	0, 1497, 1503, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 1475, 1514, 0, 0, 1490, 1491, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 1498, 1499, 1500, 1501, 0, 0, 0, 0, 0,
	1512, 1481, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 2098, 0, 0,
	1513, 0, 1502, 1523, 0, 0, 0, 0, 0, 1503,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 1519, 0, 1520, 0, 0, 0,
	0, 0, 0, 1490, 1491, 0, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 1502,
	0, 0, 3631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 1497, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 1504, 0, 0, 1514,
	0, 0, 0, 1476, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 1522, 0, 1512, 0, 0, 1487,
	1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 0, 0, 1475, 0, 3627,
	1498, 1499, 1500, 1501, 0, 0, 0, 1495, 0, 0,
	1481, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 0, 1523, 0, 0, 0, 0, 0, 1503, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 1523, 0,
	0, 0, 0, 1521, 1503, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	1510, 1520, 0, 0, 0, 0, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1509,
	1504, 0, 0, 0, 1502, 0, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 1495, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 1512, 0, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 0, 0, 0, 0, 3545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 0, 1513, 3544, 0, 1523, 0, 0, 0,
	0, 0, 1503, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	1509, 1504, 0, 1496, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 1513, 0, 0, 1523, 0, 1509,
	1504, 0, 0, 1503, 1505, 0, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 1492, 1496, 0, 0, 0, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1521, 0,
	0, 0, 3414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 1473, 1474, 0, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 1509, 1504, 0, 0,
	0, 0, 0, 1513, 1476, 0, 1523, 0, 0, 1522,
	0, 1497, 1503, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 1475, 1514, 0, 0, 1490, 1491, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 1498, 1499, 1500, 1501, 0, 0, 0, 0, 0,
	1512, 1481, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	0, 0, 0, 3306, 0, 0, 0, 0, 0, 0,
	1513, 0, 1502, 1523, 0, 0, 0, 0, 0, 1503,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 1519, 0, 1520, 0, 0, 0,
	0, 0, 0, 1490, 1491, 0, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 1502,
	0, 0, 3254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 1497, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 1504, 0, 0, 1514,
	0, 0, 0, 1476, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 1522, 0, 1512, 0, 0, 1487,
	1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 0, 0, 1475, 0, 3253,
	1498, 1499, 1500, 1501, 0, 0, 0, 1495, 0, 0,
	1481, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 0, 1523, 0, 0, 0, 0, 0, 1503, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 0, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 1523, 0,
	0, 0, 0, 1521, 1503, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	1510, 1520, 0, 0, 0, 0, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1509,
	1504, 0, 0, 0, 1502, 0, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 1495, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 1512, 0, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 0, 0, 0, 0, 3252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 0, 1513, 3001, 0, 1523, 0, 0, 0,
	0, 0, 1503, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	1509, 1504, 0, 1496, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 1522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 1498, 1499, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 0, 0, 0, 1513, 0, 0, 1523, 0, 1509,
	1504, 0, 0, 1503, 1505, 0, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 0, 1519, 0,
	1520, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 1492, 1496, 0, 0, 0, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 1521, 0,
	0, 0, 2624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 1473, 1474, 0, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 1509, 1504, 0, 0,
	0, 0, 0, 1513, 1476, 0, 1523, 0, 0, 1522,
	0, 1497, 1503, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 1475, 1514, 0, 0, 1490, 1491, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 1498, 1499, 1500, 1501, 0, 0, 0, 0, 0,
	1512, 1481, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0,
	1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0,
	0, 0, 0, 2623, 0, 0, 0, 0, 0, 0,
	1513, 0, 1502, 1523, 0, 0, 0, 0, 0, 1503,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 1519, 0, 1520, 0, 0, 0,
	0, 0, 0, 1490, 1491, 0, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 1502,
	0, 0, 2622, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 1497, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 1504, 0, 0, 1514,
	0, 0, 0, 1476, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 1504, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 1522, 0, 1512, 0, 0, 1487,
	1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 0, 0, 1475, 0, 2621,
	1498, 1499, 1500, 1501, 0, 0, 0, 1495, 0, 0,
	1481, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 0, 1523, 0, 0, 0, 0, 0, 1503, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 0, 0, 1498, 1499, 1500, 1501,
	0, 0, 0, 0, 0, 0, 1481, 3741, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 1523, 0,
	0, 0, 0, 1521, 1503, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	1510, 1520, 0, 0, 0, 0, 0, 0, 1490, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3740, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516, 1517,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 1504, 1502, 0, 0, 0, 2559, 0,
	1476, 0, 0, 0, 0, 1522, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 1514, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 1512, 1492, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 0, 0, 2588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2560, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 1499, 1500,
	1501, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493, 1489,
	0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483,
	0, 0, 0, 0, 0, 0, 1513, 0, 0, 1523,
	0, 0, 0, 0, 0, 1503, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 1520, 0, 0, 0, 0, 0, 0, 1490,
	1491, 0, 0, 1473, 1474, 0, 1506, 1507, 1508, 1516,
	1517, 1518, 0, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 1509, 1504, 0, 1496, 0, 0, 0,
	0, 1476, 0, 0, 0, 0, 1522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1521, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 1498, 1499,
	1500, 1501, 0, 0, 0, 0, 0, 0, 1481, 0,
	2684, 0, 0, 2683, 0, 1514, 0, 2218, 0, 0,
	0, 0, 0, 0, 1473, 1474, 0, 1506, 1507, 1508,
	1516, 1517, 1518, 0, 0, 0, 0, 1513, 0, 0,
	1523, 0, 0, 0, 1509, 1504, 1503, 1505, 0, 2217,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	0, 1519, 0, 1520, 0, 0, 0, 0, 0, 0,
	1490, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 1496, 1492, 0,
	0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515, 1493,
	1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480, 1482,
	1483, 1521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1498,
	1499, 1500, 1501, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 0,
	0, 1523, 0, 0, 1497, 0, 0, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 1520, 0, 1514, 0, 0, 0,
	0, 1490, 1491, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 0, 1509, 1504, 0, 1496, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1521, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 1512, 0, 0, 1487, 1488, 1494, 1515,
	1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 0, 0,
	1498, 1499, 1500, 1501, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 1473, 1474, 0, 1506, 1507, 1508,
	1516, 1517, 1518, 0, 0, 0, 0, 0, 0, 1513,
	0, 0, 1523, 0, 1509, 1504, 0, 0, 1503, 1505,
	0, 0, 1476, 0, 0, 0, 0, 1522, 0, 0,
	0, 0, 0, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 1511, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 1492, 1496,
	0, 0, 0, 0, 1512, 0, 0, 1487, 1488, 1494,
	1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479,
	1480, 1482, 1483, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1498,
	1499, 1500, 1501, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 0,
	0, 1523, 0, 0, 0, 0, 1497, 1503, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 1520, 0, 0, 0, 1514, 0,
	0, 1490, 1491, 0, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 0, 1509, 1504, 0, 1496, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1521, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 1512, 0, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 0, 0,
	1498, 1499, 1500, 1501, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 2690, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1474, 0, 1506,
	1507, 1508, 1516, 1517, 1518, 0, 0, 0, 0, 1513,
	0, 0, 1523, 0, 0, 0, 1509, 1504, 1503, 1505,
	2983, 2685, 0, 0, 1476, 0, 0, 0, 0, 1522,
	0, 0, 0, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 1511, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 1496,
	1492, 0, 0, 0, 1512, 0, 0, 1487, 1488, 1494,
	1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478, 1479,
	1480, 1482, 1483, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1498, 1499, 1500, 1501, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 1523, 0, 0, 1497, 0, 0, 1503,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 1520, 0, 1514, 0,
	0, 0, 0, 1490, 1491, 0, 0, 1473, 1474, 0,
	1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 1509, 1504, 0,
	1496, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	1522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 1512, 0, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 1498, 1499, 1500, 1501, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 1474,
	0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0,
	0, 1513, 0, 0, 1523, 0, 0, 0, 1509, 1504,
	1503, 1505, 0, 2625, 0, 0, 1476, 0, 0, 0,
	0, 1522, 0, 0, 0, 1519, 0, 1520, 0, 0,
	0, 0, 0, 0, 1490, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 1496, 1492, 0, 0, 0, 1512, 0, 0, 1487,
	1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 1483, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2652, 0, 0, 1498, 1499, 1500, 1501, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 0, 1523, 0, 0, 1497, 0,
	0, 1503, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 1520, 0,
	1514, 0, 0, 0, 0, 1490, 1491, 0, 0, 1473,
	1474, 0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 1509,
	1504, 0, 1496, 0, 0, 0, 0, 1476, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1521, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 1512, 0, 0,
	1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 1514, 0, 0, 0, 0, 0, 0, 1473, 1474,
	0, 1506, 1507, 1508, 1516, 1517, 1518, 0, 0, 0,
	0, 0, 0, 1513, 0, 0, 1523, 0, 1509, 1504,
	0, 0, 1503, 1505, 0, 0, 1476, 0, 0, 0,
	0, 1522, 0, 0, 0, 0, 0, 1519, 0, 1520,
	0, 0, 0, 0, 0, 0, 1490, 1491, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 1492, 1496, 0, 0, 0, 0, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1498, 1499, 1500, 1501, 0, 0, 0,
	0, 0, 0, 1481, 0, 1473, 1474, 0, 1506, 1507,
	1508, 1516, 1517, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 1513, 1476, 0, 1523, 0, 0, 1522, 0,
	1497, 1503, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 1520, 0,
	0, 1475, 1514, 0, 0, 1490, 1491, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 1499, 1500, 1501, 0, 0, 0, 0, 0, 1512,
	1481, 0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 1502, 1523, 0, 0, 0, 0, 0, 1503, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 1519, 0, 1520, 0, 0, 0, 0,
	0, 0, 1490, 1491, 0, 0, 0, 0, 0, 0,
	0, 1514, 0, 0, 0, 0, 0, 0, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 1487, 1488, 1494, 1515, 1493, 1489, 0, 1486, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1483, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 0, 1487, 1488,
	1494, 1515, 1493, 1489, 0, 1486, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 1483,
}
var sqlPact = [...]int{

	5579, -1000, -1000, -1000, -1000, -1000, -1000, 260, 259, 258,
	248, 238, 236, 235, 233, -1000, -1000, -1000, -1000, -1000,
	-1000, 231, -1000, -1000, 223, -1000, 221, 220, 219, 212,
	-1000, 211, 198, 196, -1000, -1000, -1000, -1000, 195, 194,
	193, 62737, 1871, 76135, 66293, 1566, 56475, 75686, 56026, 75237,
	74788, 192, -1000, 74339, 184, 175, 174, -1000, 73890, -1000,
	1631, -1000, 173, 1761, 47022, 165, 164, 162, 2582, 161,
	-1000, 159, -1000, 8650, 1341, -1000, 158, -1000, 9289, 3985,
	65401, 2332, 157, 156, 46572, 2298, 2398, -1000, -1000, 1728,
	-1000, -1000, 154, 151, 150, 145, 144, 143, 141, 139,
	136, -1000, 135, 134, 131, 129, 123, 122, 121, -1000,
	119, 118, 117, 113, 107, 106, 105, 103, 101, 98,
	94, 90, -1000, 8887, 1630, 1435, 1434, 1424, 1422, 1420,
	922, 89, 87, 86, 85, 84, 83, 82, -1000, 80,
	79, 78, 76, 75, 70, 68, 65, 202, 63, 62,
	61, 60, 58, 55, 2154, -1000, 1430, 708, 22835, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 81008, 76578, 53, -149, 52, -1000, 2775, 936,
	38920, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 562, -1000, -1000, -1000, 302, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1688, 764, -1000, -1000, -1000, 73447, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1868, -114, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 762, -1000, 1867, 166, 1780, -1000,
	-1000, -1000, -1000, -1000, 76578, -1000, -1000, 3155, 3154, 1726,
	761, 73004, -1000, 1398, -1000, 873, 25679, -1000, 1152, -1000,
	25679, 301, -1000, -1000, -1000, -1000, -1000, -1000, 3151, 3147,
	3146, 3144, -1000, -1000, 55577, 17115, 55128, 54679, 72555, 16656,
	62294, 50658, -1000, -1000, -1000, 41649, 1124, -1000, -1000, -1000,
	-1000, -1000, 0, 51558, 76578, -1000, 297, -1000, -1000, -1000,
	-1000, -1000, -1000, 32419, 681, 31935, 651, 31451, 523, -1000,
	-1000, -1000, 3143, 3142, 996, 3140, 2714, 80565, 1520, 3129,
	1506, 1108, 942, 3127, 3126, 3125, 3123, 3122, 3121, 1252,
	72106, 2455, 71657, 1377, 50199, 61845, 62737, 2178, 71208, 1247,
	1196, -1000, -1000, -1000, -1000, 2554, 2388, 2381, 43899, -1000,
	3120, 3119, 3118, 3117, 3116, 80122, 1509, 3111, 2053, 3110,
	3109, 3106, 3104, 3103, 3102, 3101, 3100, -1000, 61396, 60947,
	60498, 2827, 70759, 60049, 49740, -1000, -1000, -1000, 40729, 7791,
	6817, 70310, 42106, 62737, 62737, -1000, -1000, 32891, 179, -1000,
	-1000, -1000, 41649, 2417, -1000, 32891, 179, -1000, 76578, -1000,
	2453, 1589, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1872, 1393, 2931, 49281, 1811, 1296, 2776, 2546,
	2529, 1342, 2086, 2528, 2493, 2477, 2469, 2464, 1528, 2137,
	517, 22351, 1333, 1372, 2463, 2462, 3001, 1666, 1748, 54230,
	3099, 3098, 2741, 2459, 2457, 2413, -1000, -1000, -1000, -1000,
	1322, -1000, -1000, 57361, -1000, -1000, 1106, -1000, -1000, 1106,
	-1000, -1000, -1000, -1000, -1000, 1123, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1430, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2071, -1000, 1686, -1000, -1000,
	2019, 2750, 2750, 2750, 2795, 534, 533, -1000, 202, -1000,
	-1000, 88078, -1000, -1000, 32891, 32891, 32891, 32891, 32891, 32891,
	32891, 1713, -1000, 760, -1000, -1000, 813, -1000, 758, 638,
	-1000, -1000, -1000, -1000, -1000, -1000, 756, -1000, -1000, -1000,
	-1000, -1000, -1000, 2888, -1000, 19459, -1000, -1000, -1000, 454,
	753, 32891, -1000, -1000, 3006, 3004, 994, -1000, 295, 885,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2452, 739, 737, -1000, 736, 735, 734, 733,
	730, -1000, -1000, -1000, 729, 726, 725, 720, 719, 718,
	716, 713, -1000, 1650, -1000, -1000, -1000, -1000, -1000, -1000,
	683, 682, 682, 682, -1000, 938, -1000, -1000, -1000, 329,
	680, 314, 678, 676, 675, 712, 711, 710, 707, 705,
	704, 699, 698, 697, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	935, -1000, -1000, -1000, -1000, -9, 76578, -1000, 562, -9,
	-1000, -1000, 696, -1000, 26151, 26151, 26151, -1000, -1000, 1865,
	32891, -1000, 2663, -1000, 27, 27, 860, 39816, -1000, 38007,
	860, 354, 773, 43449, -1000, 2410, -1000, -1000, 693, 294,
	-1000, -1000, -1000, -1000, 2405, 76578, 17572, 76578, 62737, 62737,
	62737, 2664, 32891, -1000, -1000, 48822, 76578, 63180, 2848, 81894,
	48822, 76578, 2449, -1000, -1000, -1000, 76578, -1000, 32891, -1000,
	2845, 1315, 52005, 2812, -41, -1000, -1000, -1000, -1000, -1000,
	-1000, 2022, 2031, 1068, 1912, 1616, -1000, 25679, 2705, -1000,
	-1000, -1000, 292, 17572, -1000, -1000, -1000, -1000, -1000, 2262,
	2639, 1279, -1000, 1904, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1596, 2632, -1000, 2353, 2627, 1593, -1000,
	-1000, 1826, -1000, -1000, 2734, -1000, -1000, 1763, 2626, 34,
	-1000, -1000, 901, 2620, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 858, -1000, 51115, 41649, 51558, -25, -1000,
	-1000, -55, -1000, 16197, 88078, -1000, -1000, -1000, 88078, 897,
	-1000, -1000, 2618, -1000, 88078, 831, -1000, -1000, 2607, -1000,
	-1000, -1000, 3097, -1000, 3096, 1969, 3095, 3092, 3091, -1000,
	1433, 1642, 3088, -1000, 3087, -1000, -1000, -1000, -1000, -1000,
	-1000, 59600, 1856, -1000, -1000, 58702, -1000, 1968, -1000, -1000,
	59151, 940, -1000, 901, 1964, -1000, 903, -1000, -1000, 3085,
	2821, 2220, 901, 1960, -1000, -1000, -1000, -1000, -1000, 44785,
	-1000, 44785, -1000, 44785, -1000, 1336, -1000, 79679, 27, 27,
	2888, -1000, -1000, -1000, -1000, -1000, 2602, 3084, 3083, 3082,
	-1000, 76578, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	181, 2598, -1000, -1000, 181, 2597, -1000, 181, 2589, -1000,
	64952, -1000, -1000, 1845, 2578, -1000, 177, 2577, -1000, -1000,
	-58, 2575, -1000, -1000, 36, -1000, -1000, -1000, 936, -1000,
	40266, -1000, 40266, 69861, 51115, 884, 714, 46122, 88078, -1000,
	-107, -1000, 41649, 88078, -1000, 51115, 58702, -1000, 69412, 58259,
	-1000, -1000, 1250, 2075, -1000, -1000, -1000, 884, 51115, 51115,
	51115, -1000, 68963, -1000, -1000, 1734, 1521, 2737, 1705, 62737,
	-1000, 1551, -1000, -1000, -1000, 2763, 2448, -1000, 48379, 64509,
	-1000, 64066, -1000, 63623, -1000, 62737, -1000, 62737, -1000, 3081,
	3080, 3079, -1000, 3078, 2752, 88078, 2748, -1000, 2592, 1441,
	1437, 76578, -1000, -1000, 76578, -1000, 76578, -1000, -1000, -1000,
	-1000, -1000, 2015, -1000, -1000, -1000, -1000, 62737, -1000, -1000,
	-1000, -1000, -1000, -1000, 2443, -1000, 1460, -1000, 1482, -1000,
	1238, -1000, -1000, 188, -1000, -1000, -41, -1000, 79236, -1000,
	2019, -1000, 76578, -1000, 2028, 2429, 2442, 1442, 1885, 2108,
	-1000, 30967, 2090, 35251, 1901, 202, -1000, -1000, 202, 202,
	25207, -1000, -1000, 81894, 81894, 17572, 1158, 32891, 32891, 32891,
	32891, 32891, 32891, 32891, 32891, 32891, 32891, 32891, 32891, 32891,
	32891, 32891, 32891, 32891, 32891, 32891, 32891, 32891, 32891, 32891,
	32891, 32891, 32891, 32891, 32891, 32891, 32891, 32891, 32891, 32891,
	32891, 32891, 1957, 32891, 1060, 32891, 32891, 32891, 32891, 1993,
	-1000, -1000, 1648, 594, 1771, -1000, 2946, 2946, 2946, 546,
	546, 88384, 88384, 657, 3077, 813, -1000, 32891, -1000, 179,
	32891, 18031, -1000, -1000, 533, 10516, 1966, -1000, 532, 18515,
	-1000, -1000, -1000, 19459, 638, 30483, 32891, 932, 88078, -1000,
	-1000, 1438, 2943, 15740, 2470, 2284, 692, 771, 767, 21867,
	21383, 20899, 20415, 747, 32891, 32891, 32891, 32891, 32891, 32891,
	32891, 32891, -1000, -1000, 2962, -1000, 2943, -1000, -1000, -1000,
	-1000, 2943, 1153, 1139, 2943, -1000, 2943, 2943, 2808, 2808,
	30011, 29527, 29043, 35723, 28559, 32891, 19931, 28075, 27591, -1000,
	76578, -9, 2841, 32891, 109, -1000, 86753, -1000, 109, 109,
	690, 28, 88078, 2080, 2080, 39368, 2043, 1717, 1717, 1717,
	-1000, 860, 12058, 860, 68073, 1746, 860, 860, 281, 305,
	531, 37559, 2663, 68073, 790, 689, 51, 50, 49, -1000,
	-1000, 48, 45, -1000, -1000, 62737, 688, 18031, 17572, 1271,
	20, 280, 2162, 2148, 2145, -1000, 2144, 1401, 19, 1059,
	-125, -1000, 213, 18, -1000, 1235, 277, -1000, -1000, -1000,
	-1000, -1000, 3075, 3073, -1000, 924, 686, 685, 614, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 683, 682, 682,
	682, -1000, 329, 680, 314, 678, 676, 675, -1000, -1000,
	-1000, -1000, 2399, -55, 63180, 883, 11, 1006, -41, -1000,
	-1000, -1000, 52005, 1106, -1000, 1537, -1000, -1000, -1000, -1000,
	-1000, -1000, 1256, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	994, -1000, -1000, -1000, -1000, -1000, -1000, 2983, 2974, -16,
	-1000, -1000, 17572, -1000, -46, 1483, -1000, 53781, 1907, 2735,
	2727, 1324, -1000, 1285, 2794, 57361, 2816, 2831, 695, -1000,
	2394, -1000, -1000, 871, 1447, 1057, 57361, 2353, -1000, 81894,
	-1000, 2198, 2793, 1297, 1295, 1297, 1297, 1292, -1000, 57361,
	1056, -1000, 1053, -1000, -47, 2814, 2828, 410, -1000, 2382,
	1052, -1000, -1000, 62737, 17572, -1000, 1640, -1000, 51115, 2225,
	-1000, 9, 858, -25, 51558, 76578, 274, -1000, 32891, 179,
	32891, 179, -1000, -1000, 2574, -1000, -1000, -1000, 3071, 1619,
	2050, -1000, -1000, -1000, 671, 1959, 2372, 76578, 2170, -33,
	62737, -1000, 2570, 2353, 1958, -1000, -1000, 57810, -1000, 2569,
	648, 3070, -1000, 78793, -1000, 2744, 1182, 2567, 969, 603,
	2839, -1000, 603, 45228, -1000, 76578, -1000, -1000, 76578, -1000,
	-1000, -1000, 3068, -1000, 62737, -1000, -1000, 62737, -1000, 62737,
	-1000, 62737, 170, 2566, -1000, -1000, 76578, -1000, 62737, 62737,
	51115, 51115, 5106, 52895, 3, -4, 529, -1000, 68520, 76578,
	966, 53338, 76578, 2695, 884, 41649, -107, 884, 884, 858,
	-1000, 858, -1000, 62737, 2440, -1000, 884, 884, 884, -1000,
	-1000, -1000, -1000, 3062, 3056, -1000, -1000, -1000, 900, 62737,
	76578, 62737, -1000, -1000, 76578, -1000, 76578, -1000, 900, 76578,
	900, 76578, 900, 76578, -1000, -1000, -1000, -1000, -1000, -1000,
	179, 32891, 1356, -1000, 2438, -1000, 2434, -1000, 74, -1000,
	-1000, -1000, -1000, 1605, 62737, 62737, 62737, 62737, 76578, 62737,
	-1000, 57361, -1000, 2028, 2429, -1000, -1000, -1000, -1000, -1000,
	-1000, 1457, 1787, -1000, 2102, -1000, 1283, -1000, -1000, -1000,
	88078, 36195, -1000, -1000, 88078, 1473, -1000, 34779, 34307, -1000,
	-1000, 1400, 62737, 2175, -1000, 2175, -26, -1000, 86381, 2089,
	62737, -1000, -1000, -1000, -1000, -1000, 870, 972, 972, 1144,
	1144, 1144, 1144, 2920, 1838, 5140, 1222, 7136, 7136, 8007,
	8007, 8007, 8007, 8007, 7136, 478, 546, 546, 478, 478,
	478, 478, 478, 546, 546, 546, 7136, 7136, 7136, 88384,
	88237, 7630, 32891, 32891, 1050, 1643, 594, 7429, 32891, 4388,
	4388, 4388, 4388, -1000, 2221, -1000, -1000, -1000, -1000, 2371,
	668, 35723, 35723, -1000, -1000, -1000, -1000, 18987, 32891, -1000,
	-1000, -1000, -1000, 27107, -1000, -1000, 86004, -267, 525, -158,
	-3, -1000, 32891, 32891, 32891, 521, -1000, 272, 32891, 76578,
	-1000, 82899, 787, -135, -1000, -7, 1258, -1000, 32891, -1000,
	-1000, 1047, -1000, 1045, 1044, 1042, -1000, 667, 520, -1000,
	270, -1000, 1715, 665, 664, 32891, -1000, -1000, -1000, -1000,
	-1000, 85665, -1000, -1000, 85518, -1000, -1000, 85359, -1000, -1000,
	85148, -1000, -1000, -1000, 87867, 82688, 82387, 82344, 10357, 11558,
	11399, -10, 519, -20, 514, 867, 863, 502, 498, 497,
	-23, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -31,
	494, -1000, 2366, -158, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 491, -1000, 489, -1000, 87706, -158, 488, 5411,
	-1000, 35723, 35723, 35723, -1000, 486, -1000, 86592, -1000, 87495,
	26635, 26635, 26635, 479, 87334, 32891, -158, -52, -1000, -59,
	-1000, -1000, 661, -60, 915, 26151, 38470, 17572, -1000, 915,
	915, 32891, -1000, 32891, 2117, -1000, -1000, -1000, 2115, 1808,
	2080, 39368, -1000, -1000, -1000, -1000, 68073, -1000, 2888, 2572,
	-1000, 68073, -1000, -1000, 76578, 562, -1000, 68073, 68073, 17572,
	860, -1000, 860, 68073, 746, -1000, -1000, -1000, -1000, -1000,
	464, 42553, -3, 266, 884, -1000, 17572, 2192, 2192, 2192,
	2192, -1000, -1000, 76578, 2861, -1000, 1667, -1000, 81894, -1000,
	811, 1134, 17572, -1000, -1000, 655, -1000, 2943, 2943, -1000,
	2943, 76578, 102, 25679, -1000, 1106, -1000, -1000, 1346, -1000,
	1601, -1000, 1130, -1000, -1000, -1000, -1000, 25679, -1000, 2092,
	76578, 76578, 62737, -1000, -1000, 1956, 78350, 1953, 81894, 76578,
	-1000, -1000, 653, 650, 2081, 2072, 964, 76578, 76578, 2068,
	77907, 77464, 76578, 1677, 32891, 1863, 2047, 179, 179, -1000,
	-1000, 179, 649, 1180, 62737, 62737, 62737, 1574, -1000, -1000,
	-1000, -1000, -1000, 56918, -1000, -1000, 2960, 2952, -1000, 1297,
	-1000, -1000, -1000, 1297, 2353, 1550, 62737, 76578, 1674, 179,
	179, -1000, -1000, 179, 647, 17572, 1611, -1000, 1640, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 47936, 974, 901, 884,
	2355, -1000, 2225, -1000, -1000, 15283, 88078, -1000, 88078, -1000,
	76578, -1000, 937, 76578, 53338, 881, 2563, 44342, -55, 884,
	51115, 62737, -33, 76578, -1000, 2353, 2556, 562, 1948, -1000,
	-1000, 51115, 646, 3054, 3053, -1000, 1847, 1945, -1000, -1000,
	77021, 2579, 838, 76578, 915, 39368, 1599, -1000, 43002, 949,
	76578, 1487, 72, -1000, -1000, -1000, 57, 76578, -1000, 3052,
	-1000, -1000, 181, 181, 181, -1000, 62737, 62737, 1845, -1000,
	177, -1000, -58, -1000, -1000, 5106, 5106, 884, -38, 644,
	-1000, 849, 846, 41192, 51115, -61, -1000, -1000, -1000, -1000,
	-1000, 62737, 76578, 763, 2219, 76578, -62, -1000, 262, 640,
	-1000, -1000, 884, 2352, -1000, -1000, 910, -1000, 1237, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26, -55,
	-55, -1000, 900, -1000, 900, -1000, 900, -1000, 88078, -1000,
	1344, 1325, 76578, -1000, 17572, 76578, 62737, 17572, 62737, 2421,
	2401, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 979,
	-1000, 1473, 1786, -1000, 638, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1998, -1000, -40, 25207, 1916, -1000,
	-1000, 62737, 14, 32891, 32891, 6631, 6458, 32891, 35723, 35723,
	-1000, 32891, 6092, -1000, -1000, -1000, -1000, -1000, 2336, 636,
	32891, 81894, 3959, 455, -1000, 462, 11187, 478, -1000, 32891,
	-1000, 460, 24735, -1000, 86964, -43, -67, -1000, 12527, -158,
	-69, -1000, -1000, 810, -1000, 2648, -1000, 32891, 87123, 1981,
	1795, 1594, 1375, 2943, 2999, 14826, -1000, 45675, 916, 1753,
	84850, -1000, -1000, -1000, -1000, 81894, 81894, 32891, 32891, -1000,
	32891, 32891, 32891, -1000, -1000, -1000, 2943, 864, -1000, -1000,
	-1000, 864, -1000, -1000, 2943, -1000, 2943, -1000, 32891, -1000,
	-1000, 2329, 32891, -1000, 81894, 81894, 35723, 35723, 35723, 35723,
	35723, 35723, 35723, 35723, 35723, 35723, 35723, 35723, 35723, 35723,
	35723, 35723, 35723, 35723, 35723, 2143, 35723, 2935, 2935, 2935,
	-1000, 2341, 2329, 32891, 32891, 81894, 458, 457, 456, -1000,
	32891, -158, -1000, -1000, 5106, -1000, 2283, -1000, 32891, -1000,
	-190, -1000, 2663, -1000, -1000, 2283, 2283, -70, 88078, 39368,
	39368, -1000, 635, 32891, 2091, -1000, -1000, 780, -260, -1000,
	845, -1000, -1000, -1000, -1000, -1000, 562, -1000, -1000, -1000,
	189, 68073, 68073, 778, -1000, -80, -1000, -1000, -82, -1000,
	2838, 441, 17572, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -55, 1768, 2988, -1000, 2945, 803, 776, 178, 2943,
	434, 430, 429, -55, 76578, -1000, -41, -1000, -1000, -1000,
	32891, -1000, -1000, 2733, 1041, 1040, -1000, 2552, -1000, 1944,
	-1000, 955, -1000, 1696, -1000, 32891, 32891, 634, 632, 3049,
	1590, 3048, 965, 2550, 1845, 2545, 1845, -1000, -1000, 876,
	-1000, 88078, 626, 625, -1000, -46, 1466, 908, -1000, -1000,
	32891, 32891, 67630, -1000, 375, 2734, 7, -1000, 1039, -1000,
	-1000, -1000, -1000, 2353, 1034, -1000, -1000, -1000, 904, -1000,
	-1000, 32891, -1000, -47, 1032, -1000, -1000, -1000, 47479, -1000,
	-1000, 51115, 884, -1000, 3047, 62737, 3046, 407, -85, -48,
	81894, 2836, 1880, 633, 62737, 865, -1000, 2888, -1000, -1000,
	-1000, -1000, 62737, 2835, 2521, 901, 2975, -1000, -1000, 62737,
	2519, 1846, 1943, 2025, 838, 52452, -1000, 901, 1753, -81,
	-1000, 1487, 24251, 2731, -90, -1000, -1000, -1000, 915, 45228,
	39368, 32891, 3045, -91, -1000, -1000, -1000, -1000, -1000, 170,
	-1000, -1000, -1000, -1000, -1000, 67187, 67187, 51115, 51115, 51115,
	884, 76578, 76578, 53338, -1000, 620, 76578, 76578, 619, -1000,
	76578, 76578, 3044, 51115, -1000, 179, -1000, 1764, 62737, 14369,
	-1000, -1000, -1000, -1000, -1000, 900, -1000, -1000, 1682, 1897,
	1682, 1470, 1462, -1000, 1783, -1000, -1000, -1000, -1000, 2155,
	2742, 17572, 2932, 4388, 32891, 32891, 5987, 423, 374, 4388,
	32891, 32891, 81894, 4147, -92, 32891, 32891, -1000, 32891, 775,
	88078, 2973, 32891, 406, 401, -1000, -1000, -1000, 2934, -1000,
	-1000, -1000, 88078, 32891, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 399, -1000, 171, -1000, -1000, -1000, 81451, -1000, 32891,
	397, -1000, 396, 395, 11026, 264, 84774, 84435, 84288, 393,
	-1000, -1000, 389, 386, 88078, 2341, 88078, -1000, -1000, 954,
	954, 1275, 1275, 1275, 1275, 2935, 515, 789, 349, 215,
	215, 215, 432, 802, 802, 215, 215, 215, 2322, 2045,
	615, 6034, -1000, -1000, 88078, 88078, 385, -1000, -1000, -1000,
	-158, 384, 2275, 2792, 88078, -1000, 39368, 2275, 2275, -1000,
	-1000, 1808, 76578, 88078, 39368, -1000, 2572, -1000, 12994, -1000,
	17572, -1000, -1000, -1000, -1000, 2888, -1000, 42553, -1000, 610,
	-1000, 110, -1000, -1000, 774, 3043, 801, 17572, 359, -1000,
	-1000, -1000, -55, 88078, 76578, 76578, 76578, 2516, -1000, 2215,
	-1000, 964, 84129, -93, -1000, 86381, 32891, 76578, -1000, -1000,
	1701, 2132, 990, -1000, 2767, 76578, -1000, 76578, -1000, -1000,
	76578, 76578, 62737, 2498, -101, 88078, -57, -1000, 844, -1000,
	1269, -1000, 13912, 62737, 62737, 2497, -104, 17572, -1000, -1000,
	-58, -1000, -1000, 562, -1000, 2214, -1000, 65844, 1836, 179,
	-1000, 66740, 3040, 608, -1000, 1750, -1000, 770, 2353, 179,
	62737, -1000, 358, -72, -1000, 960, 17572, 62737, 2510, 2046,
	838, 52452, -1000, 1182, 2108, -1000, -79, -1000, 555, 179,
	1753, -1000, -81, 88078, -1000, 843, -1000, -1000, -109, -1000,
	-1000, 333, -1000, 2690, 2688, -1000, 2319, 32891, 607, 606,
	76578, 2683, -1000, -1000, -111, -1000, 1910, -1000, -1000, -1000,
	-1000, -1000, 17572, 1404, -1000, 604, 602, -1000, -1000, -1000,
	-1000, 2742, 4388, 4388, 32891, 32891, 32891, 4388, 4147, -112,
	-1000, 4388, 4388, -158, -1000, -1000, 86964, -1000, -1000, -1000,
	88078, -1000, 13455, 1687, -1000, 83918, -1000, -1000, -1000, 32891,
	32891, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35723,
	2312, 601, 81894, -1000, -1000, 872, 32891, 32891, 2663, 872,
	872, -1000, -118, -1000, -1000, -1000, 2888, 110, -1000, -1000,
	3039, 17572, 772, -1000, 3037, -1000, -1000, -1000, -1000, -1000,
	76578, -1000, 76578, -1000, 17572, 76578, 2325, 1936, -1000, -1000,
	2067, 600, 35723, 62737, 816, -1000, 2281, 1644, 32891, 1916,
	-119, -120, 1929, -1000, -1000, 1928, 32891, -1000, 81894, 598,
	1845, 1845, -129, -134, -1000, 32891, 1028, 76578, 23779, -1000,
	3035, 2734, -1000, -1000, 32891, 1021, -1000, 2826, 1674, 2236,
	-1000, -1000, -1000, -1000, 2066, -1000, -1000, 76578, 2060, 888,
	-140, -1000, 842, 841, -1000, 53338, 881, 902, -1000, -1000,
	-1000, 562, -1000, 2967, 596, 76578, 1841, 595, 17572, -1000,
	838, 52452, -1000, 2579, 1487, -1000, 2656, 76578, 2725, -1000,
	2108, 594, -1000, 884, 593, 592, 3668, 3668, -146, 32891,
	32891, -148, 587, 884, -106, -1000, 807, 805, -1000, -1000,
	62737, 62737, 32891, 32891, -1000, 4388, 4388, 4388, -1000, 331,
	-1000, -1000, 1753, 2791, -1000, 83620, 83544, 7211, 35723, 81894,
	-156, -1000, 76578, 88078, -158, -1000, -1000, -1000, 768, -1000,
	3034, -1000, -1000, 1651, -1000, -1000, -1000, 76578, 1937, -1000,
	963, 32891, 6034, 584, 32891, -1000, -1000, 2181, 2338, 2214,
	581, -1000, -1000, -1000, -1000, -1000, 958, 1562, -1000, -1000,
	88078, 2771, 32891, -1000, -1000, 580, 577, 88078, 571, 836,
	2311, -1000, -1000, -1000, 88078, 569, 179, 881, -1000, 1708,
	1836, 568, -1000, -1000, 1796, 2164, -1000, 66740, 37109, 37109,
	318, 2824, 902, -1000, 2881, -1000, 2823, -1000, 32891, -1000,
	62737, 32891, 1832, 52452, -1000, 2025, -1000, 1150, -162, 76578,
	1487, -1000, -1000, 51115, 51115, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 958, -163, -164, -1000,
	51115, -1000, 1910, -1000, 76578, -1000, 76578, -1000, -1000, -165,
	-170, -1000, 1781, 32891, -1000, -1000, 7211, -171, -1000, -130,
	-1000, 2820, -1000, -1000, -1000, -1000, 2505, 2255, 83205, 1992,
	76578, 83058, 2314, -1000, -1000, 1674, 76578, 2214, 2250, 62737,
	962, 17572, -172, 1682, 1682, 32891, 23307, 1700, 32891, -1000,
	1796, 62737, 76578, -1000, 2758, -1000, 2680, -1000, -1000, -1000,
	2214, 179, -1000, -1000, 179, -173, 960, -178, 62737, -1000,
	2046, 1306, -1000, 915, -1000, -1000, -179, -184, 1644, 958,
	-1000, -187, -1000, -194, -195, -1000, -1000, 315, 33835, 33835,
	33835, -158, -1000, 76578, 565, 2478, 898, -1000, 1804, 1565,
	59, 985, -1000, -1000, 2281, -197, -1000, 892, 562, -1000,
	32891, -1000, 958, -216, -1000, 948, -222, -1000, 947, -223,
	-1000, 2297, -1000, -224, -1000, 560, -230, -1000, -1000, 1933,
	-1000, 1674, 888, -1000, 958, 554, 1644, 552, -1000, 45228,
	-1000, 884, 884, 2214, 1644, 884, -1000, -1000, -1000, 2594,
	-1000, 36652, 1814, 1439, 86080, 2594, 2594, -1000, -1000, 76578,
	2802, -1000, 1827, 1822, 1298, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2801, 1992, 88078, 2214, -1000, 1682, 2233,
	-1000, 1682, 2296, -1000, 1698, -1000, 76578, -1000, 76578, 1397,
	1389, 3033, 881, 1796, 1644, 32891, 2214, 32891, -211, -1000,
	-1000, 1674, 2214, -1000, -1000, 1554, 2832, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 835, -1000, 2665, -1000, 977,
	1896, 1896, 817, 1804, -1000, -1000, 549, -1000, 548, -1000,
	-231, -1000, -1000, 3011, -1000, 1796, -1000, 2214, -232, 1674,
	-237, -1000, -1000, 1674, 1429, -1000, -1000, 1725, 33363, 32891,
	-1000, 2866, -1000, -1000, 2076, -1000, 32891, 2281, 32891, 32891,
	1776, -1000, -1000, 1674, 958, 905, 1644, -1000, -1000, -1000,
	-1000, 88078, -1000, -1000, -1000, 88078, -1000, -238, -246, -1000,
	-1000, -1000, 905, 1644, -1000, 3010, 2214, 1674, 1014, -1000,
	2214, -1000, 1674, -1000, 543, 1674, 905, 32891, 905, -1000,
	-253, -1000, 1674, -1000,
}
var sqlPgo = [...]int{

	0, 3700, 3699, 3698, 3696, 3695, 3693, 3691, 3689, 3686,
	3685, 3683, 3681, 3680, 3679, 3676, 3675, 3674, 3672, 3671,
	3670, 3668, 3667, 3666, 3662, 3661, 3659, 3658, 3652, 3648,
	3645, 3644, 3643, 3639, 3638, 3637, 3636, 3635, 3634, 3632,
	3628, 3627, 3624, 3623, 3622, 3616, 3612, 37, 3609, 3608,
	3606, 3605, 3604, 3603, 3602, 3601, 3600, 3599, 3598, 3595,
	3594, 3590, 3589, 3587, 3583, 46, 3581, 216, 3580, 3578,
	3575, 3565, 3561, 3557, 3556, 3555, 3553, 3552, 215, 3551,
	119, 3549, 3548, 3546, 3536, 3534, 214, 3532, 3529, 3527,
	3524, 3523, 3513, 3512, 3511, 152, 193, 3509, 165, 3508,
	3506, 3505, 3503, 3501, 3500, 3497, 3496, 3495, 3493, 196,
	3492, 213, 3491, 3488, 3487, 3486, 3485, 3480, 3476, 3471,
	3469, 3465, 3462, 3461, 3459, 3457, 3456, 3455, 3454, 3452,
	3449, 3448, 3447, 3446, 3444, 3440, 3439, 3438, 3437, 3436,
	223, 133, 3435, 3427, 212, 211, 3426, 3425, 3423, 3417,
	126, 88, 81, 30, 3416, 77, 42, 3415, 16, 288,
	197, 7084, 195, 3408, 3401, 3399, 189, 145, 3398, 187,
	3397, 3396, 3394, 3393, 59, 55, 135, 131, 124, 128,
	271, 3388, 3386, 64, 54, 41, 32, 3385, 3384, 3383,
	2869, 87, 3381, 210, 192, 122, 3380, 3379, 3378, 915,
	3375, 3374, 3371, 170, 91, 84, 14, 80, 3367, 104,
	20, 3364, 150, 40, 3360, 120, 61, 35, 6731, 3498,
	3356, 75, 149, 94, 750, 174, 164, 154, 123, 169,
	167, 130, 116, 3355, 237, 3354, 51, 125, 3353, 3348,
	3347, 56, 148, 68, 3346, 3344, 45, 1, 23, 3,
	141, 11, 92, 13, 3343, 17, 3341, 3338, 3332, 3328,
	25, 114, 3327, 117, 97, 3324, 19, 3323, 29, 171,
	3320, 180, 90, 3318, 3316, 203, 155, 144, 3314, 71,
	181, 3313, 3312, 3311, 3310, 3308, 103, 22, 89, 3307,
	3306, 100, 188, 147, 3305, 43, 3304, 129, 73, 105,
	218, 102, 178, 72, 179, 139, 182, 3302, 3301, 3300,
	160, 3299, 3298, 173, 134, 3297, 3296, 157, 222, 34,
	62, 186, 49, 143, 138, 3294, 158, 3291, 3290, 3289,
	219, 137, 163, 8, 2, 58, 83, 26, 9, 183,
	112, 234, 69, 3288, 3519, 357, 2284, 52, 3287, 101,
	79, 47, 82, 115, 209, 96, 3286, 3285, 1285, 3284,
	3283, 3280, 3276, 136, 3275, 3273, 3272, 98, 107, 156,
	3271, 121, 57, 12, 78, 248, 221, 74, 175, 166,
	245, 3270, 142, 3269, 44, 108, 3266, 153, 204, 3265,
	3264, 86, 3262, 795, 106, 3261, 168, 3259, 3257, 3256,
	3253, 3249, 3247, 3245, 666, 185, 109, 3244, 3242, 3240,
	208, 151, 3239, 207, 146, 127, 63, 33, 3236, 67,
	118, 3235, 113, 172, 39, 3234, 4450, 53, 0, 8544,
	7118, 5660, 8270, 3224, 2178, 3223, 3221, 3220, 162, 95,
	3219, 3216, 3215, 70, 3214, 48, 3212, 3209, 38, 3204,
	27, 7, 10, 18, 15, 285, 176, 3203, 3202, 76,
	93, 110, 3201, 217, 184, 3200, 3199, 3197, 66, 3196,
	31, 3195, 28, 3193, 3192, 36, 6, 21, 3191, 3190,
	201, 3188, 202, 3187, 3186, 2848, 99, 3185, 3184, 206,
	50, 3183, 205, 3182, 2833, 132, 177, 3180, 3179, 3178,
	3175, 200, 3174, 3170, 24, 3168, 5, 3166, 3164, 161,
	4, 2637, 3163, 3161, 60, 3159, 140,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 11, 11, 7, 7, 8,
	8, 8, 35, 35, 9, 9, 9, 10, 10, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 14, 14,
	25, 25, 15, 15, 27, 27, 16, 16, 28, 28,
	489, 489, 19, 30, 20, 31, 13, 490, 490, 490,
	490, 24, 21, 32, 22, 22, 22, 22, 22, 154,
	154, 154, 154, 18, 18, 26, 26, 177, 177, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 488, 488, 179, 179, 178, 173, 173, 491, 491,
	180, 180, 180, 182, 182, 36, 36, 36, 94, 94,
	94, 95, 95, 96, 96, 155, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 82, 82, 426, 426, 427,
	427, 150, 150, 151, 151, 151, 151, 152, 152, 153,
	153, 153, 50, 38, 38, 38, 38, 38, 38, 38,
	39, 39, 39, 39, 40, 40, 40, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 48, 48, 48, 48,
	141, 141, 51, 51, 51, 51, 51, 51, 51, 498,
	498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
	498, 498, 498, 498, 498, 498, 498, 498, 498, 499,
	499, 500, 500, 501, 501, 502, 502, 502, 502, 502,
	502, 502, 502, 502, 502, 502, 502, 502, 502, 502,
	502, 502, 502, 502, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 62, 62, 262, 262, 235, 235, 63, 63,
	63, 64, 64, 65, 65, 52, 52, 482, 482, 276,
	276, 386, 386, 67, 67, 296, 296, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	76, 76, 76, 77, 77, 77, 74, 74, 74, 72,
	72, 72, 71, 71, 71, 75, 75, 75, 227, 227,
	73, 73, 73, 277, 277, 78, 78, 78, 78, 78,
	78, 78, 78, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 388, 388,
	79, 79, 79, 356, 356, 83, 83, 83, 311, 311,
	84, 84, 84, 84, 84, 85, 85, 85, 85, 97,
	97, 97, 97, 485, 485, 269, 269, 193, 193, 193,
	193, 90, 90, 90, 90, 91, 91, 91, 92, 92,
	146, 146, 103, 103, 103, 103, 103, 102, 102, 102,
	102, 102, 102, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 46, 46, 47, 47, 47, 47, 47, 105,
	105, 495, 495, 107, 104, 104, 104, 106, 106, 106,
	106, 108, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 110, 419, 419, 285, 285, 417, 417, 435, 435,
	418, 418, 239, 239, 239, 239, 239, 240, 240, 240,
	425, 425, 425, 425, 425, 425, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	147, 147, 148, 149, 149, 149, 149, 130, 130, 130,
	140, 140, 140, 140, 140, 140, 140, 133, 133, 133,
	120, 120, 112, 112, 112, 112, 112, 116, 116, 116,
	116, 116, 116, 116, 116, 113, 113, 122, 122, 122,
	122, 122, 117, 117, 119, 119, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 114, 114, 114, 114, 124,
	124, 124, 124, 318, 318, 318, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 136, 136, 136, 136,
	136, 136, 370, 370, 131, 131, 131, 131, 135, 135,
	135, 135, 301, 301, 128, 128, 128, 129, 129, 129,
	134, 134, 132, 132, 137, 137, 137, 137, 115, 115,
	115, 503, 503, 503, 138, 138, 127, 127, 139, 139,
	139, 139, 139, 139, 139, 139, 126, 126, 126, 125,
	125, 125, 125, 118, 483, 483, 480, 480, 480, 480,
	480, 480, 480, 481, 481, 484, 484, 88, 88, 88,
	57, 57, 57, 58, 58, 158, 158, 158, 158, 247,
	247, 247, 247, 156, 156, 157, 157, 59, 59, 504,
	504, 504, 492, 492, 492, 493, 493, 493, 493, 493,
	493, 241, 241, 242, 242, 336, 336, 336, 336, 336,
	245, 245, 245, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 248, 248, 181, 181, 181, 251, 252, 252,
	249, 249, 250, 250, 250, 254, 254, 253, 256, 256,
	255, 335, 444, 444, 446, 446, 446, 446, 446, 446,
	446, 448, 448, 448, 448, 448, 448, 448, 448, 448,
	448, 448, 505, 442, 442, 442, 443, 438, 438, 439,
	439, 439, 439, 439, 243, 243, 244, 244, 244, 244,
	440, 441, 267, 267, 373, 445, 445, 447, 447, 449,
	506, 506, 506, 506, 506, 506, 507, 507, 507, 334,
	334, 333, 333, 260, 260, 450, 450, 450, 450, 451,
	451, 451, 451, 451, 454, 453, 452, 452, 452, 452,
	452, 61, 61, 61, 298, 298, 297, 297, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 143, 143, 196, 196, 56, 56, 56,
	12, 12, 12, 494, 494, 494, 60, 60, 60, 60,
	195, 195, 195, 195, 195, 195, 487, 487, 486, 486,
	197, 197, 509, 509, 66, 66, 66, 66, 66, 66,
	66, 389, 389, 390, 390, 55, 55, 55, 55, 55,
	510, 510, 319, 319, 317, 317, 316, 316, 266, 266,
	372, 201, 201, 174, 174, 174, 23, 17, 17, 33,
	33, 34, 34, 29, 29, 496, 496, 497, 497, 89,
	89, 93, 93, 93, 101, 101, 142, 142, 142, 142,
	142, 142, 142, 37, 37, 37, 37, 49, 49, 49,
	49, 99, 512, 512, 512, 100, 100, 100, 511, 511,
	194, 194, 330, 330, 331, 331, 513, 513, 332, 332,
	332, 332, 188, 187, 189, 189, 54, 54, 54, 183,
	183, 184, 184, 185, 185, 186, 186, 514, 514, 86,
	86, 86, 145, 145, 234, 234, 234, 326, 326, 326,
	261, 261, 207, 207, 329, 329, 327, 327, 327, 327,
	295, 295, 295, 144, 144, 274, 274, 287, 287, 288,
	288, 383, 383, 289, 98, 98, 161, 161, 159, 159,
	159, 159, 159, 159, 159, 159, 166, 166, 167, 167,
	168, 168, 169, 170, 170, 170, 170, 278, 278, 171,
	171, 171, 160, 160, 160, 162, 162, 162, 162, 162,
	162, 162, 165, 165, 165, 165, 172, 172, 172, 164,
	164, 461, 461, 461, 463, 463, 464, 460, 460, 462,
	462, 508, 508, 300, 300, 300, 258, 259, 257, 257,
	264, 264, 263, 265, 265, 371, 371, 371, 175, 175,
	175, 292, 292, 292, 292, 293, 293, 322, 322, 320,
	320, 320, 320, 321, 321, 323, 323, 323, 324, 324,
	325, 325, 291, 291, 352, 352, 163, 163, 163, 271,
	271, 271, 272, 272, 342, 342, 342, 342, 342, 342,
	343, 343, 341, 341, 341, 341, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 375, 376, 376, 273, 273,
	377, 328, 328, 478, 478, 478, 479, 479, 369, 369,
	378, 378, 378, 378, 378, 378, 367, 367, 368, 368,
	384, 385, 385, 304, 304, 304, 304, 302, 302, 305,
	305, 305, 305, 303, 303, 379, 379, 379, 379, 294,
	294, 380, 380, 380, 380, 381, 337, 338, 338, 391,
	391, 391, 391, 406, 270, 270, 270, 270, 270, 437,
	436, 436, 392, 392, 392, 392, 392, 392, 392, 392,
	405, 405, 405, 405, 405, 405, 405, 405, 407, 407,
	407, 407, 407, 407, 393, 393, 393, 393, 393, 396,
	396, 396, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 397, 397, 402, 402, 403, 403, 403,
	398, 399, 404, 404, 404, 404, 515, 515, 409, 409,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 394,
	394, 394, 401, 401, 401, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 312, 312,
	314, 314, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 346,
	346, 346, 346, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 455, 455,
	455, 455, 455, 455, 455, 455, 348, 348, 458, 458,
	459, 459, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 465, 465, 466, 466, 468, 468, 469, 469, 470,
	471, 471, 471, 472, 473, 473, 467, 467, 474, 474,
	474, 474, 475, 475, 476, 476, 476, 476, 476, 477,
	477, 477, 477, 477, 358, 358, 359, 359, 365, 365,
	365, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 198, 198, 198,
	198, 198, 283, 283, 281, 281, 281, 284, 284, 282,
	282, 280, 280, 279, 279, 355, 355, 353, 353, 357,
	357, 306, 306, 408, 408, 408, 408, 408, 408, 408,
	408, 307, 307, 307, 315, 308, 308, 309, 309, 309,
	309, 309, 349, 350, 310, 310, 310, 351, 351, 360,
	364, 364, 363, 362, 362, 361, 361, 339, 339, 340,
	340, 290, 290, 516, 516, 286, 286, 382, 382, 382,
	382, 237, 237, 275, 275, 236, 236, 229, 229, 230,
	230, 230, 230, 268, 268, 366, 366, 410, 410, 411,
	411, 412, 412, 413, 413, 414, 415, 416, 354, 354,
	217, 216, 204, 205, 215, 214, 213, 203, 206, 210,
	211, 212, 208, 209, 223, 222, 221, 228, 219, 220,
	387, 202, 231, 231, 232, 232, 232, 233, 233, 233,
	233, 199, 199, 200, 200, 224, 224, 225, 226, 226,
	218, 218, 218, 190, 190, 190, 191, 191, 192, 192,
	424, 424, 421, 421, 421, 422, 422, 422, 423, 423,
	423, 423, 420, 420, 420, 420, 420, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 429, 429, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 431, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 434, 434,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 4, 6, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 9, 6, 9, 6, 5, 6, 5,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 4, 7, 7, 9, 8, 9, 5,
	3, 5, 7, 4, 12, 4, 12, 1, 3, 5,
	5, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 4, 10, 3, 6, 4, 3, 1,
	3, 2, 1, 1, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 0, 6, 7, 2, 5, 6,
	2, 1, 3, 1, 3, 1, 6, 4, 9, 7,
	12, 12, 12, 9, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 6, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 6, 6,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 2, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 9, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 5,
	7, 3, 4, 6, 3, 4, 6, 3, 1, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 3,
	6, 6, 3, 1, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 5, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 3, 3, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 2, 1, 3, 3, 3, 3, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 4, 5, 5, 5, 3, 4, 4, 3,
	4, 4, 3, 4, 4, 5, 3, 5, 5, 5,
	7, 3, 3, 3, 4, 3, 5, 3, 6, 5,
	6, 3, 5, 6, 3, 4, 3, 4, 3, 3,
	4, 4, 5, 0, 1, 1, 3, 2, 4, 3,
	3, 5, 4, 3, 5, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 3, 4, 4, 5, 7, 5,
	3, 3, 2, 0, 4, 2, 3, 4, 2, 3,
	3, 3, 3, 3, 4, 3, 3, 3, 3, 4,
	3, 1, 1, 1, 2, 3, 2, 3, 6, 6,
	7, 9, 7, 9, 3, 4, 10, 10, 3, 5,
	5, 5, 3, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	3, 6, 3, 11, 14, 0, 2, 4, 3, 0,
	4, 5, 4, 3, 3, 1, 3, 10, 13, 0,
	2, 3, 1, 1, 0, 1, 2, 2, 2, 2,
	1, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	3, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 8, 4, 2, 5, 5,
	5, 2, 1, 9, 10, 6, 5, 3, 1, 5,
	8, 7, 11, 3, 3, 0, 2, 4, 3, 3,
	1, 5, 1, 3, 1, 2, 0, 1, 2, 2,
	0, 1, 3, 3, 2, 2, 1, 1, 1, 4,
	0, 6, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 5, 8, 4, 1, 0, 1, 2, 2, 1,
	2, 3, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 1, 4, 2, 2, 2, 4, 7, 3,
	4, 6, 3, 1, 1, 1, 8, 10, 11, 5,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 3, 0, 1, 8, 3, 6, 6, 5, 3,
	4, 1, 0, 1, 3, 16, 19, 15, 18, 4,
	0, 2, 2, 0, 1, 0, 1, 0, 1, 3,
	3, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 4, 2, 1, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 1, 2,
	4, 4, 2, 3, 5, 5, 1, 3, 1, 0,
	1, 2, 3, 2, 4, 2, 3, 0, 2, 0,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 5, 1, 0,
	1, 0, 3, 1, 3, 3, 4, 5, 2, 2,
	0, 2, 2, 1, 1, 1, 0, 1, 0, 2,
	2, 5, 4, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 1, 1,
	1, 3, 2, 4, 4, 0, 4, 4, 3, 4,
	1, 5, 3, 4, 5, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 5, 6, 4, 6, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 1,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 2, 2, 1, 0, 2,
	5, 7, 2, 1, 2, 4, 3, 5, 0, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 6, 6, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 3, 0, 5, 4, 1, 2, 1,
	4, 1, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 2, 5, 1, 4, 2, 5, 1, 4, 3,
	3, 0, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 6, 1,
	1, 1, 1, 1, 1, 2, 1, 5, 5, 6,
	3, 1, 1, 1, 2, 2, 2, 4, 3, 5,
	6, 8, 6, 5, 4, 3, 2, 2, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 8, 6, 4,
	6, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	4, 3, 3, 4, 3, 3, 4, 3, 3, 4,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 3, 3,
	3, 0, 1, 4, 2, 2, 2, 2, 2, 3,
	2, 2, 3, 0, 4, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 1, 2, 3, 2, 3, 2,
	3, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 1, 1, 1, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 486, -80, -50, -48, -83, -84, -68,
	-85, -79, -97, -101, -89, -103, -142, -147, -148, -149,
	-3, -36, -38, -51, -67, -69, -78, -87, -86, -88,
	-90, -94, -93, -82, -42, -98, -102, -111, -143, -144,
	-145, 87, 71, 132, 111, 117, 169, 312, 344, 354,
	338, -106, -107, 369, -37, -49, -100, -99, 64, 112,
	333, -4, -12, 27, 42, -39, -40, -41, 54, -56,
	-53, -62, -498, 89, -462, -70, -73, -502, 122, 138,
	187, 302, -91, -92, 340, 342, 139, -44, -43, 133,
	-159, -161, -104, -105, -146, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	-127, -132, -128, -129, -130, -131, -133, -134, -135, -136,
	-137, -138, -139, 373, 422, 43, 383, 73, 125, 348,
	21, -5, -6, -7, -8, -9, -10, -11, -52, -54,
	-55, -57, -58, -59, -66, -60, -61, -461, -71, -72,
	-74, -76, -77, -75, 339, -162, -160, 483, 436, -14,
	-19, -20, -15, -16, -18, -21, -17, -25, -30, -31,
	-27, -28, -26, -29, -32, -33, -34, -35, -23, -24,
	-13, -22, 454, 462, -165, -163, -164, -172, 361, 444,
	399, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, -219, -224, -225, -226, -218, -190, -431, -434, 4,
	-428, -432, 144, 196, 268, 21, 22, 23, 24, 25,
	27, 28, 39, 41, 40, 42, 43, 48, 51, 52,
	53, 54, 55, 59, 64, 65, 70, 71, 72, 73,
	74, 75, 76, 82, 79, 80, 81, 84, 86, 87,
	88, 90, 92, 93, 101, 102, 103, 104, 106, 111,
	112, 115, 110, 114, 117, 120, 121, 122, 124, 126,
	127, 129, 130, 132, 133, 136, 134, 405, 135, 137,
	138, 139, 140, 150, 151, 152, 157, 159, 163, 164,
	167, 168, 170, 174, 176, 177, 178, 179, 180, 186,
	187, 189, 190, 191, 192, 197, 198, 202, 199, 208,
	212, 213, 214, 216, 220, 221, 222, 223, 224, 227,
	226, 229, 232, 233, 236, 237, 238, 241, 242, 243,
	244, 246, 247, 250, 248, 251, 249, 253, 254, 255,
	252, 258, 256, 260, 261, 266, 264, 262, 263, 270,
	273, 184, 275, 276, 279, 296, 283, 284, 285, 288,
	289, 292, 295, 297, 298, 299, 300, 301, 302, 303,
	305, 306, 310, 312, 313, 315, 317, 318, 319, 320,
	321, 322, 323, 325, 326, 333, 338, 335, 336, 337,
	339, 340, 341, 342, 344, 346, 347, 348, 349, 351,
	353, 370, 371, 385, 354, 355, 356, 357, 358, 359,
	360, 364, 362, 363, 365, 366, 367, 369, 372, 373,
	375, 376, 379, 381, 382, 383, 384, 386, 389, 390,
	391, 392, 387, 398, 395, 396, 400, 401, 402, 403,
	404, 406, 408, 416, 417, 419, 422, 423, 424, 414,
	426, 427, 430, 431, 432, 435, 433, 434, 436, 438,
	441, 442, 443, 449, 448, 455, 456, 458, 459, 460,
	34, 44, 45, 47, 49, 60, 61, 62, 66, 107,
	108, 131, 141, 142, 153, 165, 166, 171, 173, 181,
	182, 183, 203, 204, 206, 210, 230, 272, 274, 290,
	294, 307, 308, 309, 311, 324, 350, 377, 388, 393,
	409, 410, 411, 412, 418, 420, 444, 445, 446, 450,
	457, 281, -212, 2, -190, -190, 312, 26, 2, 26,
	306, 363, 401, 403, 2, -485, -269, 2, 26, -193,
	-190, 89, 169, 361, -212, 2, -485, -269, 24, 2,
	-190, 2, -194, 2, 354, -190, 486, 84, 238, 65,
	350, 366, -109, 417, -108, 409, 356, -110, -419, 2,
	258, -190, 486, 486, 486, 26, -202, -190, 399, 196,
	103, 396, 486, 2, 399, 299, 448, 362, 103, 321,
	196, -494, 346, 172, 437, 413, -480, 2, 4, -432,
	-428, -230, -229, 399, 103, -226, -218, 476, -225, 486,
	486, 486, 2, 213, 214, 320, 319, 366, 367, 486,
	486, 2, 25, 57, 83, 86, 109, 140, 160, 163,
	286, -499, 247, 296, 318, 365, 398, 406, 419, -493,
	384, 59, 356, -492, -494, 424, 120, -316, 103, 238,
	168, 431, 403, 401, 429, 115, 202, 434, 433, 486,
	25, 57, 68, 86, 120, 140, 160, 163, -501, 296,
	318, 353, 356, 365, 398, 406, 419, 2, 448, 362,
	399, 196, 103, 424, -494, 316, -80, 2, 483, 30,
	29, 369, -155, 399, 207, 2, -190, 213, 214, 2,
	486, 486, 161, -480, 2, 213, 214, 2, 207, 2,
	59, 358, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	2, -140, 366, 384, 178, 42, 65, 26, 317, 70,
	300, 104, 170, 196, 197, 221, 83, 84, -318, 41,
	214, 213, -370, 400, 357, 363, 395, 354, 417, 89,
	438, 347, 460, 321, 322, 134, 4, 103, 258, 368,
	409, 238, 75, -508, 2, 399, -511, 2, 417, 417,
	2, -511, 2, -511, 2, -511, 2, -512, 417, 457,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, -160, -162, -161, 486, 486,
	486, 486, 486, 486, -140, 366, 2, 65, 26, -263,
	-264, 428, 205, 128, 287, -159, -161, 2, -461, -417,
	2, -344, -435, -346, 474, 475, 467, 397, 58, 267,
	461, -358, 109, 429, 281, -434, -347, -360, 131, 350,
	-284, 8, 9, 5, 6, 7, -199, -348, -354, 421,
	143, 271, -233, 487, 10, 483, -458, -161, -359, 35,
	173, 56, -421, -232, -200, -393, 206, -231, -218, -455,
	-456, 4, -428, -429, -422, -395, -403, -399, -400, -407,
	-190, -431, 68, 95, 96, 94, 99, 98, 240, 239,
	100, 97, 368, 437, 57, 34, 181, 182, 210, 272,
	183, 66, -457, 121, -430, 203, 204, 377, 45, 324,
	153, 108, 107, 274, 49, 47, 445, -404, 105, 409,
	410, 411, 412, 165, 166, 141, 142, 294, 309, 393,
	418, 420, 171, 230, 91, 162, 201, 185, 209, 211,
	215, 231, 234, 259, 265, 269, 291, 293, 345, 374,
	-515, 446, 388, 60, 61, -463, 325, -464, -212, -463,
	486, 486, 488, 486, -257, -258, -259, 2, 26, 118,
	483, 2, -374, 2, -375, -379, -161, 225, -378, 483,
	-376, 481, -219, 282, -459, 351, -455, -456, -199, -218,
	-232, 4, -428, -430, -260, 483, 485, 103, 399, 69,
	196, -311, 483, -190, 26, 281, 413, 488, -356, 483,
	281, 161, 284, -190, 2, 2, 370, 2, 483, -109,
	62, 417, 40, 366, -331, 2, -332, -187, -188, -189,
	-384, 212, 315, 323, 463, 460, -417, -495, 161, 466,
	413, -417, -285, 485, 2, 2, 2, 2, 2, -379,
	181, -219, 2, -216, -420, 4, -428, -432, -429, -433,
	-431, 26, 29, 30, 31, 33, 35, 36, 37, 38,
	50, 56, 57, 63, 67, 69, 78, 83, 89, 94,
	95, 97, 96, 98, 99, 100, 109, 113, 116, 118,
	119, 123, 125, 128, 143, 145, 158, 160, 161, 169,
	172, 175, 188, 200, 205, 207, 225, 228, 235, 239,
	240, 267, 271, 277, 281, 282, 286, 287, 304, 314,
	327, 343, 361, 368, 380, 394, 399, 407, 413, 415,
	421, 428, 429, 437, 439, 447, 451, 452, 453, 454,
	-434, 68, 2, -379, 181, 2, -221, 181, -379, -224,
	2, -203, -190, 2, -215, -420, 2, -236, 181, -219,
	-220, -224, -426, 181, 2, -424, 10, -423, 5, 4,
	-428, -432, -429, -95, -426, 483, 413, 488, -275, -229,
	-230, -268, -190, 485, -344, 2, -98, 2, -344, 181,
	2, -98, 181, 2, -344, 181, 2, -98, 181, 2,
	2, 2, 419, 2, 86, 181, -190, 399, 102, 2,
	337, -500, 353, 423, 448, 2, 2, 2, 2, 2,
	2, 399, -208, 2, -190, 158, -228, 181, 2, -190,
	362, -509, 325, -426, 181, 2, -222, 2, -224, -222,
	196, 208, -203, 181, 2, 403, 401, 403, 401, 161,
	2, 207, 2, 207, 2, -380, 2, -381, -375, -219,
	481, 2, 2, 2, 2, 2, 181, -190, 399, 102,
	2, 223, 2, 2, 2, 2, 2, 2, 2, 2,
	-277, 181, 2, -219, -277, 181, 2, -277, 181, 2,
	-317, 2, 78, -203, 181, 2, -227, 181, 2, -222,
	-427, 181, 2, -426, -388, 2, -387, -423, 444, -80,
	483, -80, 483, 366, 483, -426, -219, -219, -344, -98,
	-96, -95, 161, -344, -98, -155, 158, 2, 103, 399,
	-140, 2, 158, 439, 2, 8, 2, -426, 357, 322,
	150, 2, 370, 2, 371, 65, -318, 460, 65, 161,
	2, 161, 2, -301, 2, 454, -483, 2, 281, 161,
	2, 161, 2, 161, 2, 161, 2, 161, 2, 319,
	367, 214, 2, -98, 451, -344, 451, 2, 416, 222,
	135, 161, -301, 2, 161, 2, 161, 2, 5, 2,
	385, 2, 212, 315, 385, 2, -219, -503, 2, 399,
	448, 362, 2, 2, 79, 80, 161, 2, 161, 2,
	161, 460, 2, -294, -379, -330, -331, -330, 413, -263,
	-264, -140, 370, 2, -166, -292, -168, 158, -320, -321,
	-169, 235, 145, 277, -170, -300, 26, 118, -300, -300,
	52, 484, 484, 11, 12, 67, 39, 474, 475, 476,
	477, 156, 478, 479, 472, 473, 471, 464, 465, 469,
	218, 219, 85, 468, 466, 77, 245, 352, 146, 147,
	148, 149, 334, 194, 32, 195, 14, 15, 16, 31,
	286, 234, 461, 185, 374, 467, 17, 18, 19, 209,
	211, 269, 44, 188, -198, -238, -344, -344, -344, -344,
	-344, -344, -344, 293, 483, -290, -339, 481, -161, 483,
	483, 483, -416, 8, -161, -344, -358, 484, -282, 483,
	-161, -358, -353, 483, 350, 481, 483, -361, -344, 5,
	5, 5, 483, 485, -465, 455, 158, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 311, -397, 483, -396, 483, -396, -396, 449,
	-394, 483, 462, 456, 483, -394, 483, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 449,
	488, -463, -260, 483, -286, -382, -344, 476, -286, -286,
	281, -279, -344, 91, -304, 215, 259, 162, 231, 345,
	201, -341, 487, -341, -369, 462, -161, -376, -218, -161,
	-378, 483, -374, -369, -81, -416, -67, -78, -86, -98,
	-111, -144, -145, 476, -219, 483, 161, 483, 485, 161,
	-268, -420, -203, -219, -231, -232, -236, 117, -279, -480,
	-268, -193, 36, -355, -391, -392, -437, -436, -393, -402,
	-398, -401, 307, 308, -422, 47, 445, -404, 206, 4,
	-428, -430, 203, 204, 377, 45, 324, 153, 108, 107,
	274, 49, 409, 410, 411, 412, 165, 166, 446, 388,
	60, 61, -480, -268, 158, -419, -279, 36, -331, 2,
	109, -424, 40, -513, 488, 233, -240, 244, 266, 177,
	282, 458, 275, -425, 5, 4, -354, -366, 109, 238,
	206, -410, -412, 8, -411, 9, -413, 474, 475, -418,
	-417, 93, 485, -420, -177, 335, -176, 23, 27, 122,
	442, 136, -250, 198, 299, 131, 381, 432, -489, -490,
	355, 404, 405, 81, 275, 335, 131, -297, -299, 36,
	101, 261, 295, 53, 191, 249, 250, 383, 450, 131,
	335, -490, 335, -490, -179, 381, 432, -489, -490, 355,
	335, -178, -250, 131, 487, -486, -460, 454, 131, -385,
	-384, -427, -95, -275, 488, 488, -420, 476, 131, 131,
	131, 131, 2, 2, 267, 2, 2, 2, 163, -492,
	-501, 2, 2, 2, -219, 181, -262, 281, -482, -276,
	399, -219, 267, -221, 181, 2, -224, 448, -486, 267,
	36, 483, 2, -317, 2, 196, -460, 267, -380, -234,
	-219, -375, -234, 369, -212, 36, -341, -341, 131, 2,
	2, 2, -190, -180, 488, 55, 341, 131, -180, 131,
	-180, 131, -237, 181, -236, -180, 131, -180, 488, 131,
	488, 131, 484, 488, -388, -388, -426, -153, 454, 161,
	89, 483, 483, -155, -385, 488, -96, -426, -482, -203,
	2, -219, 2, 399, 216, -153, -426, -426, -426, -419,
	26, 371, 2, 319, 367, 80, 371, 2, -219, 399,
	103, 196, 71, -484, 158, -481, 346, -480, -219, 103,
	-219, 103, -219, 103, -219, -219, 2, 2, 2, 2,
	76, 76, 158, 2, 416, 2, 416, 2, -190, -190,
	-190, 233, -219, 158, 399, 196, 399, 196, 103, 399,
	-180, 488, -194, -166, -292, -419, -293, -292, -167, -166,
	-169, 158, 323, 433, 261, 372, 220, -321, -320, 26,
	-344, -325, 152, 260, -344, -323, -346, 474, 475, -411,
	-413, -278, 275, -160, -160, -160, -265, -371, -344, 314,
	196, -406, -391, -391, -217, -420, 409, -344, -344, -344,
	-344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
	-344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
	-344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
	-344, -344, 234, 185, 374, 44, 188, -344, 413, -344,
	-344, -344, -344, 256, 267, 271, 421, 143, 430, 118,
	275, -516, 394, 38, -351, -161, -283, 483, -365, 33,
	380, 26, -358, 483, 2, -339, -344, -340, -280, -279,
	-279, 484, 447, 26, 118, 476, 2, 484, 488, 36,
	484, -344, -280, -357, -353, -279, -364, -363, 451, -312,
	-313, 459, 252, 106, 179, 251, -314, 360, -414, 8,
	-420, 476, -466, 151, 172, 483, 484, 2, 484, 2,
	484, -344, 2, 484, -344, 2, 484, -344, 2, 484,
	-344, 2, 484, 2, -344, -344, -344, -344, -344, -344,
	-344, -279, 8, -414, -414, 409, 409, -414, -414, -414,
	-405, 307, 236, 308, 167, 255, 253, 254, 166, -405,
	-306, 2, -408, -279, 4, 459, 252, 106, 179, 251,
	360, 5, -306, 2, -307, 2, -344, -279, -308, -345,
	-346, 474, 475, 467, -358, -309, 2, -344, -280, -344,
	50, 228, 415, -310, -344, 161, -279, -279, 2, -279,
	2, -464, 36, -279, -271, 488, 161, 36, 4, -271,
	-271, 483, 484, 488, -305, 176, 248, 243, -305, -374,
	-304, 215, -302, 291, -302, -302, -369, -204, 481, 489,
	-420, -369, -368, -367, 36, -212, 288, -369, -369, 485,
	484, -368, 482, -478, 483, 486, 486, 486, 486, 486,
	-219, 483, -279, -420, 386, 484, 485, 209, 209, 209,
	209, 351, 484, 413, 454, -80, 283, 484, 488, -270,
	35, 481, 485, 2, 2, -409, 449, 483, 483, -313,
	483, 161, -269, -495, 484, 417, -332, -239, 323, 379,
	336, 364, 396, 8, 9, 8, 9, 488, -420, 488,
	-496, 83, 413, 69, -335, 181, 69, -438, -206, 83,
	-439, -190, 63, 429, 314, 160, 129, -496, 83, 314,
	-496, 83, 83, 369, 384, 52, -379, 39, 39, 26,
	-98, 229, 161, 460, 399, 196, 413, -379, -299, -391,
	101, 249, 250, 52, -415, -410, 474, 475, -415, 52,
	-415, -415, -415, 454, -221, -379, 413, 413, 488, 39,
	39, 26, -98, 229, 161, 413, -236, -204, -487, -195,
	90, 262, 242, 263, -196, -197, 301, 441, -426, -150,
	192, 484, -385, -229, -190, 485, -344, -98, -344, -98,
	131, 2, -509, 223, 483, -243, 267, 161, -268, -386,
	207, 488, -276, 131, -298, -297, 267, -223, 181, 2,
	-219, 131, 126, 483, 321, 2, -205, 181, -191, -190,
	-317, -183, 402, 131, -296, 439, -326, -98, 483, 109,
	36, -326, -287, -288, -383, -289, -206, 483, -212, -190,
	2, -219, -277, -277, -277, -180, 488, 131, -203, -222,
	-227, -426, -427, -80, -387, 484, 484, 484, -152, 285,
	-151, -190, 5, -155, 439, -242, -336, -335, -442, -443,
	-438, 234, 196, 429, 208, 144, -261, -207, -206, 102,
	-153, -95, -385, -153, -153, -385, -385, -219, 158, -153,
	-153, -153, 2, 2, -301, -219, -203, -236, -219, -268,
	-268, -301, -203, -301, -203, -301, -203, -98, -344, 366,
	158, 158, 485, -301, 321, 103, 399, 299, 196, -219,
	-236, -219, -236, -203, -219, -379, -293, -167, 282, 220,
	372, -323, -324, -346, 350, 351, -324, 350, 351, 8,
	9, 8, 9, -171, 376, 270, -277, 488, -174, 37,
	116, 220, -219, 460, 127, -344, -344, 413, -516, 394,
	-351, 127, -344, 256, 271, 421, 143, 430, 118, 275,
	161, 483, -345, -345, 484, -281, -344, -344, 482, 491,
	484, -264, 488, -263, -344, -279, -279, 484, 485, -279,
	-268, 482, 482, 488, 484, -362, -363, 123, -344, 413,
	413, 413, 413, 483, 484, 485, -471, 292, 483, 483,
	-344, 484, 484, 484, 484, 36, 488, 488, 488, 484,
	488, 488, 488, 484, 484, 484, 488, 484, 460, 460,
	484, 484, 484, 484, 488, 484, 488, 484, 161, 484,
	484, -315, 304, 484, 11, 12, 474, 475, 476, 477,
	156, 478, 479, 472, 473, 471, 464, 465, 466, 77,
	245, 352, 14, 15, 16, 209, 188, -345, -345, -345,
	484, -349, -350, 161, 158, 36, -310, -310, -310, 484,
	161, -279, 484, 484, 483, 484, -338, -337, 452, -382,
	-272, 2, -374, -214, -420, -338, -338, -279, -344, 215,
	215, -303, 439, 281, -305, -374, -368, -416, -343, -342,
	159, 37, 116, 264, 184, -368, -212, -260, -368, -368,
	-420, -369, -369, -367, 484, -479, -416, 484, -273, -377,
	-459, -264, 485, -153, -420, -141, 5, 271, -141, -141,
	-141, -268, 24, 305, -391, 481, 482, 8, -420, 483,
	-414, -414, -414, -268, 161, -417, -331, 427, 74, 323,
	409, -417, -176, 335, -206, -206, -219, 267, -335, 181,
	-182, 267, -391, -213, -190, 483, 483, 220, 220, 439,
	-206, -213, 220, 181, -206, 181, -213, -213, -488, 323,
	276, -344, 237, 321, 268, -177, 335, -98, -98, -98,
	483, -495, 439, 117, -219, -236, -219, -223, 335, 265,
	-231, -415, -415, -297, 335, -221, -203, -178, -98, -98,
	-98, 483, -204, -179, 335, -195, -426, 271, 435, -486,
	-153, 161, -150, 476, -190, 448, -190, -241, -244, -242,
	-206, -158, 456, 454, 131, -235, -219, 481, -153, -426,
	-219, -228, 131, -260, 267, -426, 483, 2, 2, 281,
	267, -205, 181, -184, 124, -514, 466, -203, -338, -272,
	-295, -329, 343, 281, -261, 444, -212, -295, -274, 488,
	161, 466, 485, -261, 2, -180, -180, -180, -236, -237,
	-180, -180, -80, -80, -153, 488, 483, 466, 466, 483,
	-426, -426, 484, 488, -219, -205, 196, 196, -211, -191,
	484, 488, 485, 483, -153, 161, -45, 454, 399, 487,
	-301, -301, -301, 366, 366, -190, -215, -203, -219, -216,
	-236, 158, 158, 433, -324, 282, 241, -371, -175, 273,
	-219, 487, -344, -344, 127, 127, -344, -345, -345, -344,
	127, 161, 483, -344, -355, 31, 31, 484, 488, -340,
	-344, 484, 447, -264, -264, 484, 476, -420, 487, 484,
	-353, 125, -344, 407, 252, 179, 251, -314, 251, -314,
	-314, -414, 5, -420, 476, -472, -209, 483, -190, 452,
	-263, 484, -406, -391, -344, -344, -344, -344, -344, -414,
	-394, -394, -414, -414, -344, -349, -344, -406, -391, -345,
	-345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
	-345, -345, -345, -345, -345, -345, -345, -345, 118, 267,
	275, -345, -350, -349, -344, -344, -391, 484, 484, 484,
	-279, -80, -291, 172, -344, -385, 488, -291, -291, 484,
	-374, -374, 483, -344, 215, 482, 488, 490, 466, -260,
	485, -367, -368, 482, 484, 488, 484, 488, -328, 36,
	484, -420, 284, 5, 8, 481, 482, 485, -414, 484,
	484, 484, -268, -344, 413, 413, 131, 267, 441, -444,
	-439, 129, -344, -266, -372, -344, 483, 483, 2, -173,
	122, 369, -497, 2, 439, 131, -180, 131, -180, 458,
	483, 483, 413, 454, -279, -344, -154, 109, -419, -490,
	487, -490, 487, 413, 413, 454, -279, 413, -426, 271,
	-427, -153, 2, -223, 2, 484, 484, 488, -445, 36,
	279, 483, 279, -219, -63, 454, -384, -416, -221, 36,
	131, -486, -389, -390, 5, -219, 131, 281, 267, -185,
	227, -514, -424, -460, -264, -295, -286, 268, 82, 484,
	-338, -288, -272, -344, 2, 484, -180, -151, -152, -426,
	-426, -426, -153, -155, -155, -336, -245, 483, -205, -191,
	483, -155, -207, 2, -427, -98, 285, -219, 476, -301,
	-252, -251, 299, 275, -252, 350, 350, 282, 152, 224,
	-174, -204, -344, -344, 127, 31, 31, -344, -344, -355,
	484, -344, -344, -279, 482, 5, -344, 484, 484, 8,
	-344, 484, 485, -473, -190, -344, 484, 484, 484, 488,
	488, 484, 484, 484, 484, 484, 484, 484, -350, 161,
	118, 275, 483, 484, 484, -352, 175, 52, -374, -352,
	-352, -303, -268, -374, -342, -204, 481, -420, -416, -377,
	483, 485, 482, 2, 481, -420, 484, -206, -206, -335,
	131, -446, 83, -448, 67, 144, 89, 267, 271, 429,
	314, 63, 109, 327, -505, 36, 484, 484, 488, -174,
	-266, -268, 267, 391, 109, 267, 109, 102, 424, 70,
	-206, -213, -268, -268, -219, 137, 484, 488, 466, 2,
	476, 476, -223, -221, 137, 484, -204, -260, -248, 199,
	-206, -443, -440, -441, 314, -447, -449, 144, 314, -98,
	-157, -156, -190, 5, 2, 483, -243, 285, 482, -298,
	-98, -223, 484, 488, -319, 439, -204, -219, 131, -186,
	226, -514, -424, -183, -322, -320, -327, 483, 281, -98,
	-264, 466, 484, 484, 102, 102, 190, 130, -266, 483,
	483, -268, 102, 484, -46, -47, 196, 83, 303, -216,
	399, 196, 483, 483, -174, -344, -344, -344, 484, -264,
	-420, 476, -467, 299, 484, -344, -344, -345, 161, 483,
	-355, -468, 453, -344, -279, -468, -468, 484, -416, 2,
	481, 2, -335, -213, -217, -210, -190, 144, 181, 271,
	220, 483, -345, -219, 483, 2, -506, 113, 200, -334,
	-507, 88, 392, 189, -372, -175, 484, 484, 271, 271,
	-344, -391, 483, -180, -180, 484, 484, -344, 413, -419,
	87, -417, 2, -490, -344, 413, 36, -249, -250, 188,
	-445, 220, -210, 220, -504, 454, 484, 488, 466, 466,
	-241, -158, -64, -65, 414, -384, -260, 5, 483, -190,
	281, 483, -204, -514, -424, -184, -295, 119, -268, 83,
	-322, -351, -153, 483, 483, -246, 72, 84, 110, 180,
	164, 197, 384, 389, 26, -246, 484, -266, -266, 484,
	483, -153, 488, 26, 483, 26, 483, -219, -236, -279,
	-279, 484, -264, 52, 484, 484, -345, -355, 484, -469,
	-470, -209, 482, 2, -448, -210, 267, 439, -344, -192,
	483, -344, 200, 114, 186, -248, 483, -333, 439, 327,
	-201, 67, -266, 483, 483, 483, 466, 161, 483, -98,
	-158, 297, 483, -247, 281, 102, 261, -156, -347, -347,
	484, 36, -65, 9, 36, -266, -219, -266, 281, -424,
	-185, 433, 268, 484, -213, -295, -427, -427, -333, 484,
	484, -427, -47, -268, -268, 484, 484, -474, 321, 351,
	174, -279, 484, 488, 36, 131, 176, 484, -450, 246,
	-190, 484, 114, 186, -249, -268, -248, 176, -219, -491,
	439, -217, 484, -254, -253, -251, -256, -255, -251, -279,
	-417, 87, 297, -279, -247, -219, -267, -373, -206, 73,
	102, -248, -98, -98, 484, -319, 484, -219, -186, 369,
	-337, 484, 484, -334, -333, 484, 484, 484, 484, -475,
	-476, 44, 426, 93, -344, -475, -475, -470, -472, 144,
	454, -451, -454, -453, 281, 375, 162, 298, 484, 391,
	450, -506, 484, 454, -260, -344, -333, 484, 488, 444,
	484, 488, 444, 484, 161, 484, 483, 484, 488, 313,
	115, 122, -249, -504, -333, 483, -334, 483, -287, -153,
	-153, -248, -334, -153, -477, 129, -476, 310, 157, 350,
	310, 157, -477, -477, -210, 48, -453, 281, -454, 281,
	433, 115, 48, -450, -248, -253, 188, -255, 161, 297,
	-268, -373, 351, 351, 2, -158, -247, -334, -266, -248,
	-266, -338, -249, -248, 93, 172, 408, 261, 31, 466,
	-452, 261, 341, 55, 369, -452, 466, -451, 483, 483,
	484, 2, -247, -248, 484, -249, 484, -249, 350, 289,
	-476, -344, 22, 271, 109, -344, -506, -279, -279, -181,
	55, 341, -249, -333, -510, 452, -334, 484, 484, -510,
	-334, 2, -248, -249, 413, -248, -249, 483, -249, -510,
	-279, -510, 484, -249,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 25, 26,
	373, 374, 376, 377, 378, 380, 381, 383, 385, 387,
	389, 390, 392, 394, 396, 397, 398, 399, 400, 402,
	404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 462, 464, 0, 996, 998, 1000, 1002, 0, 592,
	0, 28, 29, 0, 0, 193, 195, 197, 0, 222,
	224, 225, 227, -2, 0, 323, 324, 326, -2, -2,
	0, 0, 451, 453, 0, 0, 0, 473, 474, 0,
	1084, -2, 467, 469, 471, 536, 538, 540, 542, 544,
	546, 548, 549, 551, 553, 555, 557, 559, 561, 563,
	564, 566, 568, 570, 572, 574, 576, 578, 580, 582,
	584, 586, 588, -2, -2, -2, 0, -2, -2, -2,
	1014, 32, 34, 36, 38, 40, 42, 44, 274, 275,
	277, 279, 281, 283, 286, 288, 290, 1139, 328, 330,
	332, 334, 336, 338, 0, -2, 1151, 0, 0, 46,
	47, 48, 49, 50, 51, 52, 53, 69, 70, 71,
	72, 73, 74, 75, 76, 57, 59, 60, 64, 65,
	67, 55, 0, 0, 1115, 1117, 1119, 1121, -2, 0,
	0, 7, 9, 11, 13, 15, 17, 19, 21, 375,
	379, 382, 384, 386, 388, 391, 393, 395, 401, 403,
	405, 874, 1768, 1785, 1786, 1787, 1790, 1791, 1792, 1793,
	1794, 1795, 2142, 2223, 2224, 1817, 1818, 1819, 1820, 1821,
	1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
	1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
	1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
	1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
	1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
	2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
	2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061,
	2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
	2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121,
	2122, 0, 429, 427, 1761, 430, 1975, 432, 434, 317,
	318, 319, 320, 321, 322, 0, 444, 438, 443, 445,
	447, 448, 449, 450, 424, 422, 0, 444, 1820, 442,
	994, 995, 989, 990, 2006, 1021, 463, -2, -2, -2,
	2108, -2, 495, -2, 502, 2112, 2008, 507, 0, 509,
	-2, 512, 997, 999, 1001, 590, 591, 1771, 0, 0,
	0, 0, 30, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 924, 925, 0, 0, 157, -2, -2,
	-2, -2, 0, 0, 1858, 1729, 1787, 1732, 1727, 194,
	196, 198, 199, 0, 0, 0, 0, 0, 0, 223,
	226, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 770, 762, 763, 966, 0, 0, 0, 0, 325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	0, -2, 0, 0, 0, 253, 365, 366, 0, 1140,
	1140, 0, 0, 0, 0, 174, 165, 0, 0, 739,
	452, 454, 0, 0, 160, 0, 0, 993, 0, 176,
	0, 0, 468, 470, 472, 537, 539, 541, 543, 545,
	547, 550, 552, 554, 556, 558, 560, 562, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, 585, 587,
	589, 597, 0, 0, 0, 0, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, -2, -2, -2, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 0, 600, 602, 603, 604,
	0, 655, 672, 0, 914, 1141, 1023, 1004, 1018, 1023,
	1006, 1007, 1008, 1009, 1010, 1015, 1017, 1011, 1012, 1013,
	33, 35, 37, 39, 41, 43, 45, 276, 278, 280,
	282, 284, 287, 289, 291, -2, 1113, 1114, 329, 331,
	333, 335, 337, 339, 455, 0, 457, 0, 601, -2,
	0, 1145, 1145, 1145, 0, 0, 1114, 1112, 0, 460,
	461, 516, 517, 1372, 0, 0, 0, 0, 0, 0,
	0, 1626, 1458, 0, 518, -2, 1489, 1491, 2083, 2108,
	1625, 1493, 1494, 1495, 1496, 1497, 0, 1499, 1500, 1501,
	1502, 1503, 1504, 0, 1506, 0, 1511, 1512, 1513, 0,
	2090, 1706, 1781, -2, 0, 0, 2096, 1777, 0, 1592,
	1529, -2, -2, 1804, 1783, 1304, 1305, 1306, 1307, 1308,
	-2, -2, 2125, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
	1540, 1541, 1542, 1543, 0, 2072, 2091, 2092, 2097, 2099,
	2093, 2080, 1554, 1868, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1331, 1340, -2,
	-2, -2, -2, -2, -2, 2084, 2085, 2102, 2105, 2111,
	2116, 2117, 2089, 2098, 2126, 2127, 2128, 2129, 2130, 2131,
	2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
	1332, -2, -2, -2, -2, 1131, 1985, 1134, 874, 1132,
	1116, 1118, 0, 1120, 0, 0, 0, 1125, 1148, 1146,
	0, 1187, 1129, 1130, 1205, 1205, 1229, 0, 1210, 0,
	1229, 1140, 1255, 0, 1216, 2001, 1530, 1531, 0, 1787,
	1782, -2, -2, 2123, 0, 0, 0, 0, 0, 0,
	0, 425, 0, 431, 433, 0, 0, 0, 0, 0,
	0, 0, 0, 1020, 465, 466, 0, 490, 0, 494,
	2079, -2, 1826, 2017, -2, 498, 1024, 1028, 1029, 1030,
	1031, 0, 0, 0, 0, 0, 504, 0, 0, 491,
	492, 510, 513, 0, 593, 594, 595, 596, 54, 0,
	2091, 1255, 56, 0, 1751, 1812, 1813, 1814, 1815, 1816,
	2124, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151,
	2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
	2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
	2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
	2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
	2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201,
	2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211,
	2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
	2222, 2125, 58, 0, 2091, 61, 0, 2091, 0, -2,
	66, 0, 1757, 68, 0, 1754, 77, 0, 2091, 0,
	1726, -2, -2, 2091, 922, 177, 178, 1800, 1801, 1808,
	1809, 1810, 1811, 1242, 161, 0, 0, 0, 731, 1723,
	1728, 732, 1733, 0, 200, 201, 202, 203, 204, 2091,
	206, 207, 0, 209, 210, 2091, 212, 213, 0, 215,
	229, 230, 0, 232, 0, 2091, 0, 0, 0, 238,
	-2, 254, 0, 251, 0, 242, 243, 245, 246, 247,
	248, 0, 295, 293, 1762, 0, 740, 2091, 742, 1767,
	0, 0, 943, -2, 2091, 919, 949, 945, 1765, 0,
	-2, 0, 1138, 2091, 1038, 766, 767, 768, 769, 0,
	314, 0, 1051, 0, 1053, 0, 1074, 1261, 1205, 1205,
	0, 255, 256, 257, 258, 259, 2091, 0, 0, 0,
	264, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	152, 2091, 342, 363, 152, 2091, 345, 152, 2091, 348,
	0, 351, 964, 152, 2091, 354, 152, 2091, 357, 358,
	360, 2091, 362, 179, 0, -2, 418, 1770, -2, 368,
	0, 369, 0, -2, 0, 191, 0, 0, 737, 738,
	1242, 163, 0, 991, 992, 0, 0, 475, 0, 0,
	598, 599, 0, 0, 609, 610, 611, 191, 2009, 1983,
	1885, 616, 0, 619, 622, -2, 0, 0, 0, 0,
	626, 0, 631, 632, 633, 0, 736, 635, 0, 0,
	637, 0, 641, 0, 644, 0, 646, 0, 648, -2,
	-2, -2, 659, -2, 0, 663, 0, 665, 0, 0,
	0, 0, 680, 681, 0, 686, 0, 689, 690, 691,
	692, 693, 0, 695, 696, 697, 698, 0, 700, 701,
	-2, -2, 705, 707, 0, 714, 0, 718, 0, 722,
	0, 605, 606, 152, 1259, 1003, -2, 1005, 0, -2,
	0, 456, 0, 459, 1166, 1099, 1096, 0, 1163, 1164,
	1100, 0, 0, 0, 1107, 0, 1143, 1144, 0, 0,
	0, 1086, 1087, 0, 0, 0, 0, 1631, 1632, 1633,
	1634, 1635, 1636, 1639, 1640, 1637, 1638, 1641, 1642, 0,
	0, 0, 0, 0, 1643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1644, 1645, 1646, 0,
	0, 1648, 0, 1650, 0, 0, 0, 0, 0, 0,
	1437, 1439, 1714, 0, 0, 1647, 1377, 1378, 1379, 1380,
	1381, 1416, 1417, 0, 0, 1490, 1711, 1710, 1492, 0,
	1662, 0, 1505, 1747, -2, 0, 1626, 1657, 0, 0,
	1514, 1515, 1516, 0, 0, 1662, 0, 0, 1705, 1526,
	1527, 1369, 0, 0, 1594, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 1317, 0, 1319, 0, 1320, 1321, 1328,
	1341, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	0, 0, 0, 1686, -2, 0, 0, 0, 0, 1333,
	0, 1133, 0, 0, 1191, 1715, 1719, 1720, 1191, 1191,
	0, 0, 1663, 1252, 1252, 0, 0, 1248, 1248, 1248,
	1246, 1229, 0, 1229, 1239, 0, 1229, 1229, 0, -2,
	1210, 0, 0, 1239, 0, 1223, 406, 408, 410, 412,
	413, 414, 416, 1256, 1257, 0, 0, 0, 0, 0,
	0, 1788, 0, 0, 0, 1773, 0, 0, 0, 0,
	436, 446, 1140, 0, 1665, 1278, 1282, 1283, 1284, 1285,
	1286, 1287, 0, 0, 1279, -2, 1329, 1331, 1352, 1805,
	1806, 1807, 1312, 1313, 1314, 1315, 1316, 1324, 1311, 1311,
	1311, 1322, 1351, 1343, 1351, 1347, 1298, 1299, 1334, 1335,
	1336, 1337, 0, 440, 0, 0, 0, 0, -2, 500,
	505, 506, 0, 0, 1026, 0, 1032, 527, 528, 529,
	1034, 1035, 0, 503, 530, 531, 532, 533, 534, 535,
	0, 1735, 1736, 1737, 1738, 1741, 1742, 0, 0, 501,
	520, 508, 0, 514, 78, 986, 117, 0, 986, 986,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 102,
	113, 90, 91, 0, 0, 0, 0, 62, 896, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 912, 0,
	0, 101, 0, 96, 80, 0, 0, 0, 103, 115,
	0, 143, 145, 0, 0, 920, 0, 1137, 0, 182,
	1241, 0, 1242, 730, 0, 0, 1788, 1731, 0, 0,
	0, 0, 231, 233, 0, 235, 236, 237, 0, 942,
	0, 244, 241, 285, 845, 2091, 0, 0, 312, 307,
	0, 309, 0, 895, 2091, 893, 1766, 0, 917, 0,
	0, 0, 950, 1797, 959, 965, 1040, 0, 316, 0,
	1054, 1056, 0, 0, 1262, 0, 1264, 1265, 0, 261,
	262, 263, 0, 340, 0, 150, 151, 0, 343, 0,
	346, 0, 152, 2091, 1721, 352, 0, 355, 0, 0,
	0, 0, 1140, 0, 0, 0, 0, 167, 0, 0,
	0, 0, 0, 0, 191, 0, 1242, 191, 191, 1242,
	477, 1242, 479, 0, 0, 612, 191, 191, 191, 617,
	618, 620, 621, -2, -2, 715, 623, 624, 683, 0,
	0, 0, 682, 634, 0, 724, 1997, 734, 683, 1858,
	683, 1858, 683, 1858, 645, 647, 650, 675, 658, 662,
	0, 0, 0, 667, 0, 669, 0, 671, 683, 684,
	687, 694, 699, 0, 0, 0, 0, 0, 0, 0,
	913, 0, 1016, 1166, 1099, 458, 1090, 1165, 1091, 1098,
	1101, 0, 0, 1103, 0, 1105, 0, 1161, 1162, 1169,
	1170, 0, 1180, 1181, 1173, 0, -2, 0, 0, 1176,
	1177, 1109, 0, 1126, 1127, 1128, 1152, 1153, 975, 0,
	2223, 1373, 1273, 1374, 1375, 1750, 0, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, -2, -2, -2,
	-2, -2, -2, -2, -2, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, -2, -2, -2, 1414,
	1415, -2, 1649, 1651, 0, 1714, 0, -2, 0, -2,
	-2, -2, -2, 1434, 0, 1436, 1441, 1443, 1445, 0,
	0, 0, 0, 1713, 1455, 1697, 1698, 0, 0, 1628,
	1629, 1630, 1440, 0, 1459, 1712, 1709, 0, 0, 1661,
	1151, 1518, 0, 0, 0, 0, 1525, 1510, 1659, 0,
	1658, 0, 0, 0, 1669, 0, 1704, 1700, 0, 1748,
	1368, 1355, 1356, 1357, 1358, 1359, 1360, 1370, 0, 1745,
	1774, 1780, 1602, 0, 0, 0, 1555, 1556, 1557, 1558,
	1559, 0, 1561, 1562, 0, 1564, 1565, 0, 1567, 1568,
	0, 1570, 1571, 1572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 0,
	0, 1574, 0, 1672, -2, -2, -2, -2, -2, -2,
	-2, -2, 0, 1576, 0, 1578, 1663, 1683, 0, 0,
	1460, 0, 0, 0, 1626, 0, 1581, 1663, 1691, 0,
	0, 0, 0, 0, 1663, 0, 1696, 0, 1588, 0,
	1590, 1135, 0, 0, 1268, 0, 0, 0, 1718, 1268,
	1268, 0, 1186, 0, 0, 1249, 1250, 1251, 0, 0,
	1252, 0, 1243, 1247, 1244, 1245, 1239, 1202, 0, 0,
	1752, 1239, 1208, 1238, 0, 874, 1228, 1239, 1239, 0,
	-2, 1212, 1229, 0, 0, 407, 409, 411, 415, 417,
	0, 0, 1151, -2, 191, 873, 0, 0, 0, 0,
	0, 426, 428, 0, 0, 420, 0, 423, 0, 1269,
	1272, 0, 0, 1288, 1289, 0, -2, 0, 0, 1353,
	0, 0, 0, 0, 493, 0, 1025, 1033, 0, 524,
	0, 526, 0, 1739, 1743, 1740, 1744, 0, 515, 0,
	0, 0, 0, 985, 121, 2091, 0, 154, 0, 0,
	838, 1758, 0, 0, 0, 0, 1873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	92, 0, 0, 0, 0, 0, 0, 0, 897, 898,
	900, 907, 909, 0, 903, 1746, 0, 0, 904, 0,
	906, 908, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 93, 0, 0, 0, 0, 1725, 938, 936,
	930, 931, 932, 933, 934, 935, 0, 0, -2, 191,
	0, 162, 182, 1724, 1734, 0, 205, 208, 211, 214,
	0, 239, 0, 0, 772, 745, 0, 0, 294, 191,
	0, 0, 308, 0, 891, 894, 0, 874, 2091, 929,
	1764, 0, 0, 0, 0, 948, 0, 2091, 1753, 1796,
	1797, 1042, 1048, 0, 1268, 0, 1072, 1057, 0, 0,
	0, 1072, 1076, 1077, 1079, 1080, 0, 0, 1263, 0,
	265, 364, 152, 152, 152, 349, 0, 0, 152, 359,
	152, 180, 361, 367, 419, 1140, 1140, 191, 189, 1960,
	187, 184, 186, 0, 0, 0, 773, 775, 776, 777,
	778, 0, 1797, 0, 1911, 1797, 0, 1060, 1062, 0,
	158, 164, 191, 0, 306, 476, 481, 607, 0, 613,
	614, 615, 652, 677, 625, 627, 628, 629, 0, 735,
	733, 636, 683, 639, 683, 642, 683, 661, 664, 666,
	0, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	0, 719, 720, 721, 723, 1260, 1094, 1095, 1097, 0,
	1106, 0, 0, 1175, -2, -2, 1174, 1178, 1179, -2,
	-2, -2, -2, 1102, 0, 1111, 1108, 0, 1160, 973,
	974, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1456, 0, -2, 1435, 1438, 1442, 1444, 1446, 0, 0,
	0, 0, 0, 0, 1652, 0, 1654, 1457, 1707, 1710,
	1624, 0, 0, 1150, 1151, 1151, 0, 1524, 0, 1660,
	0, 1667, 1668, 0, 1517, 0, 1701, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 0, 0,
	0, 1560, 1563, 1566, 1569, 0, 0, 0, 0, 1549,
	0, 0, 0, 1553, 1323, 1309, 0, 1351, 1349, 1350,
	1344, 1351, 1348, 1301, 0, 1300, 0, 1573, 0, 1575,
	1577, 0, 0, 1579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1463, 1464, 1465,
	1580, 1689, 1690, 0, 0, 0, 0, 0, 0, 1586,
	0, 1695, 1587, 1589, 1140, 1188, 1183, 1267, 0, 1716,
	1242, 1190, 1192, 1717, 1755, 1183, 1183, 0, 1664, 0,
	0, 1233, 0, 0, 0, 1235, 1206, 0, 0, 1200,
	0, 1196, 1197, 1198, 1199, 1207, 874, 1237, 1209, 1213,
	1774, 0, 1239, 0, 1224, 0, 1226, 1258, 0, 1218,
	1221, 0, 0, 192, 1789, 216, 220, 221, 217, 218,
	219, 435, 0, 0, 1666, 0, 1274, 0, 1280, 0,
	0, 0, 0, 439, 0, 489, -2, 522, 523, 525,
	0, 521, 118, 986, 0, 0, 977, 0, 123, 2091,
	132, 0, 813, 0, 1756, 0, 0, 0, 0, 0,
	988, 0, 0, 2091, 152, 2091, 152, 135, 138, 0,
	142, 140, 0, 0, 804, 79, 986, 82, 86, 94,
	0, 0, 0, 100, 0, 0, 0, 979, 0, 901,
	902, 905, 911, 63, 0, 981, 976, 144, 84, 88,
	95, 0, 983, 81, 0, 937, 915, 916, 0, 921,
	155, 0, 191, 1730, 0, 0, 0, 0, 0, 771,
	856, 0, 0, 0, 0, 300, 296, 0, 305, 311,
	310, 741, 0, 0, 0, -2, 952, 946, 947, 0,
	0, 0, 2091, 1044, 1048, 0, 1047, 1138, 1151, 315,
	1049, 1072, 0, 0, 0, 1059, 1055, 1052, 1268, 0,
	0, 0, 0, 0, 260, 341, 344, 347, 1722, 152,
	353, 356, 370, 371, 166, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 782, 0, 1797, 1797, 0, 1760,
	0, 0, 0, 0, 159, 0, 478, 0, 0, 0,
	638, 640, 643, 668, 670, 683, 708, 709, 799, 0,
	799, 0, 0, 1104, 0, 1172, 1110, 1154, 1155, 0,
	975, 0, 1376, 1419, 0, 0, -2, 0, 0, 1423,
	0, 0, 0, -2, 0, 0, 0, 1653, 1655, 0,
	1709, 1519, 0, 0, 0, 1523, 1507, 1508, 0, 1627,
	1670, 1699, 1703, 0, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 0, 1749, 1775, 1779, 1600, 1601, 1605, 1763, 0,
	0, 1532, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 1346, 0, 0, 1671, 1682, 1684, 1461, 1462, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, -2,
	-2, -2, 1479, 1480, 1481, -2, -2, -2, 0, 0,
	0, 1685, 1687, 1688, 1692, 1693, 0, 1583, 1584, 1585,
	1694, 0, 1185, 0, 1266, 1189, 0, 1185, 1185, 1147,
	1231, 0, 0, 1254, 0, 1203, 0, 1204, 0, 1236,
	0, 1211, 1214, 1215, 1225, 0, 1217, 0, 1220, 0,
	1519, -2, 437, 421, 0, 0, 1276, 0, 0, 1326,
	1330, 1354, 441, 1240, 0, 0, 0, 0, 153, 811,
	837, 0, 0, 0, 968, 975, 0, 0, 843, 125,
	0, 0, 0, 133, 0, 0, 130, 0, 137, 141,
	0, 0, 0, 0, 0, 97, 98, 99, 0, 104,
	0, 105, 0, 0, 0, 0, 0, 0, 940, 941,
	181, 156, 234, 874, 240, 793, 844, 0, 846, 0,
	746, 0, 0, 845, 292, 0, 299, 0, 895, 0,
	0, 918, 0, 951, 953, 963, 0, 0, 0, 1046,
	1048, 0, 1039, 1040, 1168, 1050, 1070, -2, 1069, 0,
	1151, 1078, 1075, 1081, 1082, 0, 350, 188, 0, 183,
	185, 0, 169, 0, 0, 774, 779, 0, 0, 0,
	0, 0, 1061, 1063, 0, 175, 0, 608, 630, 678,
	710, 798, 0, 0, 712, 0, 0, 1171, 1158, 1159,
	1156, 975, 1421, 1425, 0, 0, 0, 1427, -2, 0,
	1449, -2, -2, 1656, 1708, 1498, 1151, 1520, 1522, 1509,
	1702, 1371, 0, 1607, 1604, 0, 1591, 1544, 1545, 0,
	0, 1548, 1550, 1551, 1552, 1310, 1303, 1302, 1681, 0,
	0, 0, 0, 1582, 1136, 1596, 0, 0, 1193, 1596,
	1596, 1232, 0, 1234, 1201, 1194, 0, 1775, 1227, 1219,
	0, 0, 1270, 1275, 0, 1281, 1325, 119, 120, 122,
	0, 812, 0, 815, 0, 0, 0, 0, 822, 823,
	0, 0, 0, 0, 0, 832, 860, 870, 0, 1160,
	0, 0, 0, 127, 147, 0, 0, 987, 0, 0,
	152, 152, 0, 0, 978, 0, 0, 0, 0, 107,
	0, 0, 980, 982, 0, 0, 984, 0, 801, 0,
	856, 848, 849, 850, 0, 855, 857, 0, 0, 759,
	0, 755, 0, 0, 748, 772, 745, 0, 297, 892,
	926, 874, 944, 0, 0, 0, 0, 0, 0, 1036,
	1048, 0, 1041, 1042, 1072, 1167, 0, 0, 0, 1058,
	1168, 0, 190, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 480, 482, 0, 0, 488, 797,
	0, 0, 0, 0, 1157, 1429, -2, -2, 1450, 0,
	1776, 1778, 1151, 0, 1593, 0, 0, -2, 0, 0,
	0, 1122, 0, 1184, 1182, 1123, 1124, 1253, 0, 1222,
	0, 1277, 124, 0, 816, 817, 1759, 819, 0, 821,
	824, 0, 827, 1799, 0, 831, 839, 861, 0, 793,
	0, 866, 867, 868, 969, 970, 872, 0, 126, 128,
	146, 972, 0, 129, 136, 0, 0, 83, 0, 0,
	1851, 110, 108, 106, 85, 0, 0, 745, 800, 0,
	847, 0, 858, 859, 749, 0, 747, 0, 0, 0,
	0, 0, 298, 301, 0, 304, 0, 954, 0, 962,
	0, 0, 0, 0, 1043, 1044, 313, 0, 0, 0,
	1072, 1083, 168, 0, 0, 780, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 781, 872, 0, 0, 836,
	0, 173, 0, 484, 0, 486, 0, 711, 713, 0,
	0, 1521, 1611, 0, 1546, 1547, -2, 0, 1487, 1595,
	1597, 0, 1195, 1271, 814, 818, 0, 0, 0, 878,
	0, 0, 0, 864, 865, 801, 0, 793, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 927,
	749, 0, 0, 757, 0, 760, 0, 756, 753, 754,
	793, 0, 302, 303, 0, 0, 963, 0, 0, 1045,
	1046, 0, 1065, 1066, 1068, 1073, 0, 0, 870, 872,
	835, 0, 483, 0, 0, 716, 717, 0, 0, 0,
	0, 1606, 1488, 0, 0, 0, 0, 826, 883, 0,
	0, 0, 862, 863, 860, 0, 841, 0, 874, 131,
	0, 971, 872, 0, 805, 0, 0, 808, 0, 0,
	111, 1851, 109, 0, 743, 0, 0, 852, 854, 0,
	761, 801, 759, 928, 872, 0, 870, 0, 1037, 0,
	1067, 191, 191, 793, 870, 191, 485, 487, 1603, 1623,
	1612, -2, 2052, 1855, 0, 1623, 1623, 1598, 1599, 0,
	0, 828, 879, 880, 0, 875, 876, 877, 1798, 829,
	830, 840, 869, 0, 878, 148, 793, 802, 0, 0,
	803, 0, 0, 114, 0, 116, 0, 851, 0, 0,
	0, 0, 745, 749, 870, 0, 793, 0, 1268, 170,
	171, 801, 793, 172, 1608, 0, 0, 1614, 1615, 1616,
	1617, 1618, 1609, 1610, 820, 0, 881, 0, 882, 0,
	0, 0, 0, 883, 134, 806, 0, 809, 0, 112,
	0, 853, 750, 0, 752, 749, 758, 793, 0, 801,
	0, 1064, 833, 801, 0, 1620, 1621, 0, 0, 0,
	884, 0, 887, 888, 0, 885, 0, 860, 0, 0,
	796, 751, 744, 801, 872, 960, 870, 834, 1619, 1622,
	1613, 825, 886, 889, 890, 871, 842, 0, 0, 792,
	794, 795, 960, 870, 957, 0, 793, 801, 0, 955,
	793, 961, 801, 807, 0, 801, 960, 0, 960, 958,
	0, 956, 801, 810,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 472, 3, 478, 473, 3,
	483, 484, 476, 474, 488, 475, 485, 477, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 491, 3,
	464, 466, 465, 469, 487, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 481, 3, 482, 479, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 489, 471, 490, 467,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 468, 57807, 470, 57808, 480, 57809, 486,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1151
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1156
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1160
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1161
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1162
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1163
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1164
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1165
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1166
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1167
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1174
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1184
		{
			return helpWith(sqllex, "ALTER")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1187
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1189
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1190
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1191
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1192
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1193
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1247
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1273
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1284
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1299
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1303
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1307
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1321
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1340
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1372
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1376
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1380
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1386
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1396
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1405
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1416
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1426
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1434
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1444
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1458
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1469
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1476
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1488
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1495
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1503
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1508
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1512
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1523
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1531
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1542
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1552
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1562
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1571
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1582
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1588
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1596
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1614
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1619
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1640
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1686
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1701
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1710
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1722
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1732
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1739
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1743
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1751
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1758
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1767
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1781
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1788
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1797
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1801
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1823
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1833
		{
			sqlVAL.union.val = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1854
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1884
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1888
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1891
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1918
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1921
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1925
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1929
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1935
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1945
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1982
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1987
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1991
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1997
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2002
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2007
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2012
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2017
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2021
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2037
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2040
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2044
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2048
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2056
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2066
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2070
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2080
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2084
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2088
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2094
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2104
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2108
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = nil
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2118
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2132
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2133
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2135
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2145
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2168
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2177
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2187
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2191
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2204
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2213
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2221
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2223
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2227
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2230
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2234
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2242
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2255
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2261
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2266
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2278
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2280
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2281
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2282
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2287
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2288
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2289
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2300
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2301
		{
			return unimplemented(sqllex, "create server")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2302
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2304
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2307
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2308
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2311
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2312
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2315
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2316
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2319
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2320
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2321
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2322
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2323
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2324
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2325
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2326
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2327
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2329
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2331
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2332
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2333
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2334
		{
			return unimplemented(sqllex, "drop server")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2335
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2336
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2337
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2341
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2342
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2343
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2344
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2345
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2347
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2348
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2349
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2350
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2360
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2368
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2372
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2376
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2382
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2386
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2395
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2402
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2408
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2414
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2418
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2429
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2441
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2457
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2471
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2477
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2481
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2488
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2492
		{

			sqlVAL.union.val = nil
		}
	case 313:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2516
		{
			return helpWith(sqllex, "DELETE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2519
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2520
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2531
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2532
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2533
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2534
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2535
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2544
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2545
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "DROP")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2549
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2550
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2551
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2552
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2553
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2554
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2562
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2569
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2584
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2592
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2596
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2599
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2607
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2616
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2624
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2632
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2640
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2647
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2655
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[3].union.unresolvedObjectNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2663
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[5].union.unresolvedObjectNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2670
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2675
		{
			sqlVAL.union.val = []*tree.UnresolvedObjectName{sqlDollar[1].union.unresolvedObjectName()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedObjectNames(), sqlDollar[3].union.unresolvedObjectName())
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2690
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2694
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2697
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2701
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2706
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2729
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2736
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2738
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2746
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2754
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2762
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2770
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2785
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2788
		{
			return helpWith(sqllex, "DELETE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2790
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2792
		{
			return helpWith(sqllex, "INSERT")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2793
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2795
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2796
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2797
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2800
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2805
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2806
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2807
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2812
		{
			return helpWith(sqllex, "DELETE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2813
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2814
		{
			return helpWith(sqllex, "INSERT")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2820
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2821
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2825
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2839
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2847
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2855
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2859
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2863
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2873
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2880
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2892
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2896
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2906
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2910
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2914
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2921
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2941
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2949
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2952
		{
			return helpWith(sqllex, "GRANT")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2976
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2980
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2983
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2988
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2992
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3002
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3020
		{
			return helpWith(sqllex, "RESET")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3021
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3029
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3033
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3036
		{
			return helpWith(sqllex, "RESET")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3044
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3047
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3061
		{
			return helpWith(sqllex, "USE")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3065
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3066
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3067
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3068
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3072
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3074
		{
			return helpWith(sqllex, "USE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3090
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3105
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3108
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3126
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3134
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3138
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3142
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3148
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3162
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3166
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3170
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3174
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3185
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3188
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3198
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3218
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3223
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3240
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3243
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3245
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3252
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3271
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3278
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3283
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3288
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3293
		{
			return unimplemented(sqllex, "set from current")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3294
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3302
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3307
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3324
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3335
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3356
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3366
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3370
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3378
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3382
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3388
		{
			sqlVAL.union.val = tree.Low
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3392
		{
			sqlVAL.union.val = tree.Normal
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3396
		{
			sqlVAL.union.val = tree.High
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3407
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3411
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3415
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3420
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3424
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3437
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3438
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3439
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3440
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3441
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3444
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3445
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3446
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3447
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3448
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3449
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3450
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3452
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3453
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3454
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3455
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3456
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3458
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3459
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3460
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3461
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3462
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SHOW")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3470
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3471
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3474
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3478
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3483
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3493
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3505
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.str = "client_encoding"
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3519
		{
			sqlVAL.str = "timezone"
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3520
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3534
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3538
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3542
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3553
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3586
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3595
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3603
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3620
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3625
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3627
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3631
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3634
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3642
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3645
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3657
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3661
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3665
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3668
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3676
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3679
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3692
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3700
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3708
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3711
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3713
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3717
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3721
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3724
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3726
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3730
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3733
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3741
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3744
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3746
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3749
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3757
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3760
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3762
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3765
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3769
		{
			sqlVAL.union.val = true
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3771
		{
			sqlVAL.union.val = true
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3773
		{
			sqlVAL.union.val = false
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3783
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3790
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3791
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3793
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3797
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3800
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3802
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3810
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3818
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3827
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3830
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3832
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3835
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3837
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3841
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3844
		{
			sqlVAL.union.val = true
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3845
		{
			sqlVAL.union.val = false
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3853
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3856
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3858
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3861
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3869
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3879
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3889
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3892
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3895
		{
			sqlVAL.union.val = true
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3896
		{
			sqlVAL.union.val = false
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3903
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3907
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3910
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3917
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3921
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3924
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3931
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3935
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3942
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3945
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3953
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3958
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3963
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3967
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3975
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3979
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3983
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3996
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3999
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4007
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4010
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4014
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4018
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4022
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4030
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4038
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4045
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4052
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4056
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4067
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4075
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4081
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4090
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4095
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4099
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4102
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4106
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4113
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4118
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4238
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4242
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4246
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4285
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4289
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4307
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4330
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4339
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4342
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4350
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4356
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4362
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4401
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4416
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = nil
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4437
		{

			sqlVAL.union.val = nil
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4443
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4448
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4458
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4463
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4468
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4495
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4508
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4522
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4523
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4524
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4542
		{
			sqlVAL.union.val = true
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = true
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = false
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = true
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4549
		{
			sqlVAL.union.val = true
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4550
		{
			sqlVAL.union.val = true
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4551
		{
			sqlVAL.union.val = true
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4552
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4557
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4563
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4573
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4579
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4583
		{
			sqlVAL.union.val = &tree.LikeTableDef{
				Name:    sqlDollar[2].union.unresolvedObjectName().ToTableName(),
				Options: sqlDollar[3].union.likeTableOptionList(),
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), sqlDollar[3].union.likeTableOption())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4596
		{
			opt := sqlDollar[3].union.likeTableOption()
			opt.Excluded = true
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), opt)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4602
		{
			sqlVAL.union.val = []tree.LikeTableOption(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4607
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding comments")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4608
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptConstraints}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptDefaults}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4610
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding identity")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4611
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptGenerated}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptIndexes}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4613
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding statistics")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4614
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding storage")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4615
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptAll}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4620
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4629
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4636
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4641
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4646
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4659
		{
			sqlVAL.str = ""
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4679
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4686
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4692
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4702
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4712
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4722
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4736
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, types.IsSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4747
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4757
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4761
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4765
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4803
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4807
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4811
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4815
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4822
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4830
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4840
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4844
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4848
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4855
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4861
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4885
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4907
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4918
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4924
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4935
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4947
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4958
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4969
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4975
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4985
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5000
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5007
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5013
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5024
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5034
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5044
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5050
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5054
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5065
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5066
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5067
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5068
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5069
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5070
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5088
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5092
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5104
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5110
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5114
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5134
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5138
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5142
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5146
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5159
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5163
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5167
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5171
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5183
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5191
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5195
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5199
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 891:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5226
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5235
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5243
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5250
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5254
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5258
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5259
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5269
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5272
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5274
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5276
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5278
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5279
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5281
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5282
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5284
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5286
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5297
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5301
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5315
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5319
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5322
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5330
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5334
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5337
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5343
		{
			sqlVAL.union.val = true
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5347
		{

			sqlVAL.union.val = true
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = false
		}
	case 926:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5362
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
				Replace:     false,
			}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5376
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[8].union.nameList(),
				AsSource:    sqlDollar[10].union.slct(),
				Temporary:   sqlDollar[4].union.persistenceType(),
				IfNotExists: false,
				Replace:     true,
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5388
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
				Replace:     false,
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5399
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5403
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5411
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5415
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5423
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5433
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5437
		{
			sqlVAL.union.val = nil
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5443
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5447
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5452
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5453
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5463
		{
			sqlVAL.union.val = &tree.CreateType{
				TypeName:   sqlDollar[3].union.unresolvedObjectName(),
				Variety:    tree.Enum,
				EnumLabels: sqlDollar[7].union.strs(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5470
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5472
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5474
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5476
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5478
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5480
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.union.val = sqlDollar[1].union.strs()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = []string(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5494
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5498
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5516
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5532
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5549
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5564
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5579
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5582
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5583
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5587
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = false
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5608
		{
			sqlVAL.union.val = true
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5612
		{
			sqlVAL.union.val = false
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5618
		{
			sqlVAL.union.val = true
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.union.val = false
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5641
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5664
		{
			sqlVAL.str = ""
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5668
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5672
		{
			sqlVAL.union.val = tree.Descending
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5676
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5682
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5688
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5694
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5702
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5708
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5716
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5722
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5730
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5734
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5739
		{
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5740
		{
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5743
		{
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5744
		{
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5755
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5765
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5774
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5777
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5785
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5788
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5792
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5793
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5794
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5813
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5815
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5818
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5828
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5831
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5833
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5836
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5840
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5845
		{
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5846
		{
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5847
		{
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5857
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5861
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5864
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5867
		{
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5868
		{
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5872
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5882
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5886
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5892
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5896
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5909
		{
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5911
		{
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5915
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5920
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5924
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5928
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5940
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5946
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5950
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5960
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5970
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5980
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5984
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5988
		{
			sqlVAL.str = ""
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5994
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.str = ""
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6004
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6008
		{
			sqlVAL.str = ""
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6018
		{
			sqlVAL.str = ""
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6023
		{
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6024
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6036
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6043
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6050
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6061
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6068
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6072
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6081
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6086
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6092
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6096
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6106
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6130
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6134
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6144
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6147
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6148
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6156
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6161
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6182
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6194
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6200
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6206
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6210
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6223
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6226
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6273
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6279
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6298
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6310
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6326
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6332
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6335
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6336
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6340
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6350
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6359
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6361
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6362
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6365
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6366
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6369
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6370
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6371
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6376
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6411
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6412
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6413
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6435
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6462
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6474
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6496
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6511
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6518
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6534
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6539
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6545
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6555
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6563
		{
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6564
		{
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6568
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6572
		{
			sqlVAL.union.val = nil
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6577
		{
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6578
		{
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6582
		{
			sqlVAL.union.val = true
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6586
		{
			sqlVAL.union.val = false
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6590
		{
			sqlVAL.union.val = false
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6596
		{
			sqlVAL.union.val = true
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6607
		{
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6608
		{
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6612
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6616
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6638
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6659
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6664
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6676
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6680
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6684
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6693
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6714
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6718
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6722
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6726
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6740
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6744
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6752
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6759
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6781
		{
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6782
		{
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6785
		{
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6786
		{
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6839
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6841
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6856
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6864
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6878
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6883
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6888
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6899
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6911
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6930
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6969
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6979
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7014
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7025
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7055
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7076
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7088
		{
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7090
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = nil
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = true
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = false
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.str = tree.AstFull
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.str = tree.AstRight
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.str = tree.AstInner
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7207
		{
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7208
		{
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.str = tree.AstHash
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.str = ""
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7254
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7258
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7270
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7275
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7289
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7293
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7305
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7315
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7325
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7344
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7357
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7365
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7366
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7384
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7386
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7394
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7407
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7411
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7417
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else if sqlDollar[1].str == "serial" {
				switch sqllex.(*lexer).nakedIntType.Width() {
				case 32:
					sqlVAL.union.val = &types.Serial4Type
				default:
					sqlVAL.union.val = &types.Serial8Type
				}
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error(fmt.Sprintf("type %q does not exist", sqlDollar[1].str))
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7453
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7460
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "point")
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7461
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "polygon")
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = geopb.Shape_Point
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = geopb.Shape_LineString
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7466
		{
			sqlVAL.union.val = geopb.Shape_Polygon
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7467
		{
			sqlVAL.union.val = geopb.Shape_GeometryCollection
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = geopb.Shape_MultiPolygon
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = geopb.Shape_MultiLineString
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7470
		{
			sqlVAL.union.val = geopb.Shape_MultiPoint
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7471
		{
			sqlVAL.union.val = geopb.Shape_Geometry
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7474
		{
			sqlVAL.union.val = types.Geography
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7475
		{
			sqlVAL.union.val = types.Geometry
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.DefaultGeometrySRID)
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.DefaultGeographySRID)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7511
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7519
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7527
		{
			sqlVAL.union.val = nil
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = types.Int2
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = types.Int
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = types.Float4
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = types.Float
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7562
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7570
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7578
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = types.Bool
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7592
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = types.Float
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7611
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7617
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7639
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = types.String
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = true
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = false
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = types.Date
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7688
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7696
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7710
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7719
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7727
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7740
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7744
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = true
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = false
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = false
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7760
		{
			sqlVAL.union.val = types.Interval
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7764
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7768
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7779
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7787
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7795
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7803
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7811
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7819
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7825
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7834
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7852
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7867
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = nil
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7897
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7957
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnarySqrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryCbrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8014
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8066
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8070
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8074
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8078
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8082
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8110
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8114
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8178
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8209
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8239
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8247
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8251
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8255
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8259
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8267
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8271
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8275
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8297
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8357
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8361
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8373
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8377
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8397
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8401
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8405
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8409
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8413
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8417
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8431
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8475
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8483
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8487
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8491
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8496
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8502
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8506
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8510
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8514
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8522
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8531
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8546
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8557
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8565
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8569
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8576
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8587
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8588
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8590
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8596
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8600
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8603
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8612
		{
			name := sqlDollar[1].union.unresolvedName()
			if name.NumParts == 1 {
				typName := name.Parts[0]

				if typName == "char" {
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: types.MakeQChar(0), SyntaxMode: tree.CastPrepend}
				} else if typName == "serial" {
					switch sqllex.(*lexer).nakedIntType.Width() {
					case 32:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial4Type, SyntaxMode: tree.CastPrepend}
					default:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial8Type, SyntaxMode: tree.CastPrepend}
					}
				} else {
					typ, ok, unimp := types.TypeForNonKeywordTypeName(typName)
					if !ok {
						switch unimp {
						case 0:

							sqllex.Error(fmt.Sprintf("type %q does not exist", typName))
							return 1
						case -1:
							return unimplemented(sqllex, "type name "+typName)
						default:
							return unimplementedWithIssueDetail(sqllex, unimp, typName)
						}
					}
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: typ, SyntaxMode: tree.CastPrepend}
				}
			} else {
				return unimplemented(sqllex, "generic-type-name prepended casts")
			}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8653
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8666
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8673
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8682
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8683
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8702
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8706
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8710
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8714
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8718
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8722
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8728
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8732
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8736
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8740
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8744
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8760
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8764
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8772
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8776
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8783
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8786
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8788
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8791
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8793
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8797
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8800
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8806
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8809
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8811
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8815
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8818
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8820
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8824
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8827
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8829
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8832
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8834
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8837
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8839
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8842
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8847
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8849
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8853
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8856
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8857
		{
			return unimplemented(sqllex, "treat")
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8859
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8863
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8867
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8871
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8875
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8878
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8880
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8883
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8888
		{
			return unimplemented(sqllex, "within group")
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8889
		{
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8893
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8897
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8904
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8908
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8914
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8924
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8932
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8936
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8940
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8947
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8967
		{
			sqlVAL.str = ""
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8973
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8977
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8983
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8991
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8999
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9007
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9013
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9026
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9054
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9058
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9062
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9066
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9073
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9082
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9086
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9090
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9094
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9099
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9112
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9116
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9123
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9135
		{
			sqlVAL.union.val = tree.Any
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9139
		{
			sqlVAL.union.val = tree.Some
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9143
		{
			sqlVAL.union.val = tree.All
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9148
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9149
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9150
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9151
		{
			sqlVAL.union.val = tree.Div
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9152
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9153
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9154
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9155
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9156
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9157
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9158
		{
			sqlVAL.union.val = tree.LT
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9159
		{
			sqlVAL.union.val = tree.GT
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9160
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9161
		{
			sqlVAL.union.val = tree.LE
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9162
		{
			sqlVAL.union.val = tree.GE
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9163
		{
			sqlVAL.union.val = tree.NE
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9167
		{
			sqlVAL.union.val = tree.Like
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9168
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9169
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9170
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9193
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9197
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9203
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9207
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9211
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9222
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9226
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9232
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9236
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9243
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9249
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9253
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9259
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9269
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9273
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9279
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9289
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9293
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9316
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9320
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9324
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9330
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9337
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9341
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9358
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9362
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9366
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9370
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9374
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9380
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9386
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9392
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9396
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9400
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9406
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9418
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9425
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9435
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9441
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9445
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9452
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9458
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9462
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9469
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9475
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9479
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9484
		{
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9485
		{
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9489
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9499
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9508
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9512
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9516
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9524
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9534
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9557
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9565
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.ObjectName)
			name.ObjectName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9588
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9597
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9601
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9605
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9609
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9615
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9619
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9634
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9638
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9650
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9654
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9663
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9674
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9683
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9691
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9703
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9804
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9811
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9815
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1776:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9819
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1778:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9833
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9837
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9841
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9854
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9863
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9881
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9894
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9901
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9926
		{
			sqlVAL.str = ""
		}
	case 1798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9932
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9936
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
