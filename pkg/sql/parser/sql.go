// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*scanner).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*scanner).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9214

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	446, 28,
	-2, 960,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	176, 796,
	193, 796,
	207, 228,
	279, 228,
	287, 652,
	314, 228,
	323, 652,
	360, 652,
	384, 228,
	407, 652,
	-2, 0,
	-1, 76,
	207, 232,
	-2, 0,
	-1, 77,
	105, 960,
	182, 960,
	393, 960,
	394, 960,
	-2, 0,
	-1, 88,
	118, 934,
	132, 934,
	190, 934,
	218, 934,
	247, 934,
	256, 934,
	389, 934,
	-2, 921,
	-1, 116,
	123, 576,
	206, 576,
	377, 576,
	-2, 0,
	-1, 117,
	4, 962,
	21, 962,
	22, 962,
	23, 962,
	24, 962,
	25, 962,
	27, 962,
	32, 962,
	37, 962,
	38, 962,
	39, 962,
	40, 962,
	41, 962,
	42, 962,
	43, 962,
	44, 962,
	45, 962,
	46, 962,
	48, 962,
	49, 962,
	50, 962,
	51, 962,
	52, 962,
	53, 962,
	56, 962,
	57, 962,
	58, 962,
	59, 962,
	61, 962,
	62, 962,
	66, 962,
	67, 962,
	68, 962,
	69, 962,
	70, 962,
	72, 962,
	73, 962,
	74, 962,
	75, 962,
	77, 962,
	79, 962,
	80, 962,
	81, 962,
	84, 962,
	85, 962,
	93, 962,
	94, 962,
	95, 962,
	96, 962,
	97, 962,
	98, 962,
	99, 962,
	100, 962,
	102, 962,
	104, 962,
	105, 962,
	107, 962,
	110, 962,
	111, 962,
	112, 962,
	114, 962,
	116, 962,
	117, 962,
	119, 962,
	120, 962,
	121, 962,
	122, 962,
	123, 962,
	124, 962,
	125, 962,
	126, 962,
	127, 962,
	128, 962,
	129, 962,
	131, 962,
	137, 962,
	138, 962,
	139, 962,
	140, 962,
	141, 962,
	142, 962,
	144, 962,
	146, 962,
	150, 962,
	151, 962,
	153, 962,
	154, 962,
	156, 962,
	157, 962,
	159, 962,
	160, 962,
	161, 962,
	162, 962,
	163, 962,
	164, 962,
	165, 962,
	166, 962,
	167, 962,
	168, 962,
	171, 962,
	172, 962,
	176, 962,
	177, 962,
	178, 962,
	179, 962,
	182, 962,
	183, 962,
	184, 962,
	185, 962,
	186, 962,
	187, 962,
	188, 962,
	189, 962,
	191, 962,
	193, 962,
	196, 962,
	197, 962,
	198, 962,
	200, 962,
	201, 962,
	204, 962,
	205, 962,
	206, 962,
	207, 962,
	209, 962,
	210, 962,
	212, 962,
	213, 962,
	215, 962,
	216, 962,
	219, 962,
	220, 962,
	223, 962,
	225, 962,
	226, 962,
	227, 962,
	228, 962,
	229, 962,
	230, 962,
	231, 962,
	232, 962,
	233, 962,
	235, 962,
	236, 962,
	237, 962,
	238, 962,
	240, 962,
	243, 962,
	244, 962,
	245, 962,
	246, 962,
	248, 962,
	249, 962,
	250, 962,
	252, 962,
	253, 962,
	254, 962,
	257, 962,
	258, 962,
	260, 962,
	262, 962,
	263, 962,
	264, 962,
	265, 962,
	266, 962,
	267, 962,
	268, 962,
	269, 962,
	270, 962,
	272, 962,
	273, 962,
	274, 962,
	275, 962,
	276, 962,
	278, 962,
	280, 962,
	281, 962,
	282, 962,
	283, 962,
	284, 962,
	285, 962,
	286, 962,
	287, 962,
	288, 962,
	290, 962,
	291, 962,
	292, 962,
	293, 962,
	294, 962,
	296, 962,
	297, 962,
	298, 962,
	299, 962,
	300, 962,
	301, 962,
	302, 962,
	303, 962,
	305, 962,
	307, 962,
	308, 962,
	309, 962,
	310, 962,
	311, 962,
	312, 962,
	314, 962,
	315, 962,
	316, 962,
	317, 962,
	318, 962,
	319, 962,
	320, 962,
	321, 962,
	323, 962,
	324, 962,
	325, 962,
	326, 962,
	327, 962,
	328, 962,
	329, 962,
	330, 962,
	331, 962,
	332, 962,
	334, 962,
	335, 962,
	336, 962,
	337, 962,
	339, 962,
	340, 962,
	341, 962,
	342, 962,
	344, 962,
	345, 962,
	346, 962,
	347, 962,
	348, 962,
	349, 962,
	350, 962,
	351, 962,
	352, 962,
	353, 962,
	354, 962,
	355, 962,
	357, 962,
	358, 962,
	359, 962,
	361, 962,
	362, 962,
	363, 962,
	364, 962,
	365, 962,
	366, 962,
	367, 962,
	368, 962,
	369, 962,
	371, 962,
	372, 962,
	373, 962,
	374, 962,
	377, 962,
	378, 962,
	379, 962,
	380, 962,
	381, 962,
	383, 962,
	384, 962,
	385, 962,
	387, 962,
	388, 962,
	391, 962,
	392, 962,
	393, 962,
	394, 962,
	395, 962,
	397, 962,
	399, 962,
	400, 962,
	401, 962,
	402, 962,
	403, 962,
	404, 962,
	405, 962,
	407, 962,
	408, 962,
	409, 962,
	414, 962,
	415, 962,
	416, 962,
	417, 962,
	418, 962,
	419, 962,
	-2, 0,
	-1, 118,
	1, 853,
	196, 853,
	278, 853,
	285, 853,
	445, 853,
	446, 853,
	-2, 0,
	-1, 120,
	1, 853,
	445, 853,
	446, 853,
	-2, 0,
	-1, 121,
	1, 853,
	445, 853,
	446, 853,
	-2, 0,
	-1, 122,
	1, 857,
	445, 857,
	446, 857,
	-2, 0,
	-1, 146,
	118, 933,
	132, 933,
	190, 933,
	218, 933,
	247, 933,
	256, 933,
	389, 933,
	-2, 930,
	-1, 176,
	4, 969,
	5, 969,
	6, 969,
	7, 969,
	8, 969,
	9, 969,
	10, 969,
	21, 969,
	22, 969,
	23, 969,
	24, 969,
	25, 969,
	27, 969,
	32, 969,
	33, 969,
	37, 969,
	38, 969,
	39, 969,
	40, 969,
	41, 969,
	42, 969,
	43, 969,
	44, 969,
	45, 969,
	46, 969,
	48, 969,
	49, 969,
	50, 969,
	51, 969,
	52, 969,
	53, 969,
	54, 969,
	55, 969,
	56, 969,
	57, 969,
	58, 969,
	59, 969,
	61, 969,
	62, 969,
	64, 969,
	66, 969,
	67, 969,
	68, 969,
	69, 969,
	70, 969,
	72, 969,
	73, 969,
	74, 969,
	75, 969,
	77, 969,
	79, 969,
	80, 969,
	81, 969,
	83, 969,
	84, 969,
	85, 969,
	86, 969,
	87, 969,
	88, 969,
	89, 969,
	90, 969,
	91, 969,
	92, 969,
	93, 969,
	94, 969,
	95, 969,
	96, 969,
	97, 969,
	98, 969,
	99, 969,
	100, 969,
	101, 969,
	102, 969,
	104, 969,
	105, 969,
	107, 969,
	110, 969,
	111, 969,
	112, 969,
	114, 969,
	116, 969,
	117, 969,
	119, 969,
	120, 969,
	121, 969,
	122, 969,
	123, 969,
	124, 969,
	125, 969,
	126, 969,
	127, 969,
	128, 969,
	129, 969,
	130, 969,
	131, 969,
	137, 969,
	138, 969,
	139, 969,
	140, 969,
	141, 969,
	142, 969,
	144, 969,
	146, 969,
	149, 969,
	150, 969,
	151, 969,
	153, 969,
	154, 969,
	156, 969,
	157, 969,
	159, 969,
	160, 969,
	161, 969,
	162, 969,
	163, 969,
	164, 969,
	165, 969,
	166, 969,
	167, 969,
	168, 969,
	169, 969,
	171, 969,
	172, 969,
	176, 969,
	177, 969,
	178, 969,
	179, 969,
	181, 969,
	182, 969,
	183, 969,
	184, 969,
	185, 969,
	186, 969,
	187, 969,
	188, 969,
	189, 969,
	191, 969,
	193, 969,
	194, 969,
	195, 969,
	196, 969,
	197, 969,
	198, 969,
	199, 969,
	200, 969,
	201, 969,
	204, 969,
	205, 969,
	206, 969,
	207, 969,
	209, 969,
	210, 969,
	212, 969,
	213, 969,
	214, 969,
	215, 969,
	216, 969,
	217, 969,
	219, 969,
	220, 969,
	223, 969,
	225, 969,
	226, 969,
	227, 969,
	228, 969,
	229, 969,
	230, 969,
	231, 969,
	232, 969,
	233, 969,
	234, 969,
	235, 969,
	236, 969,
	237, 969,
	238, 969,
	239, 969,
	240, 969,
	241, 969,
	242, 969,
	243, 969,
	244, 969,
	245, 969,
	246, 969,
	248, 969,
	249, 969,
	250, 969,
	253, 969,
	254, 969,
	257, 969,
	258, 969,
	259, 969,
	260, 969,
	261, 969,
	262, 969,
	263, 969,
	264, 969,
	265, 969,
	266, 969,
	267, 969,
	268, 969,
	269, 969,
	270, 969,
	272, 969,
	273, 969,
	274, 969,
	275, 969,
	276, 969,
	278, 969,
	280, 969,
	281, 969,
	282, 969,
	283, 969,
	284, 969,
	285, 969,
	286, 969,
	287, 969,
	288, 969,
	290, 969,
	291, 969,
	292, 969,
	293, 969,
	294, 969,
	296, 969,
	297, 969,
	298, 969,
	299, 969,
	300, 969,
	301, 969,
	302, 969,
	303, 969,
	305, 969,
	306, 969,
	307, 969,
	308, 969,
	309, 969,
	310, 969,
	311, 969,
	312, 969,
	314, 969,
	315, 969,
	316, 969,
	317, 969,
	318, 969,
	319, 969,
	320, 969,
	321, 969,
	323, 969,
	324, 969,
	325, 969,
	326, 969,
	327, 969,
	328, 969,
	329, 969,
	330, 969,
	331, 969,
	332, 969,
	333, 969,
	334, 969,
	335, 969,
	336, 969,
	337, 969,
	338, 969,
	339, 969,
	340, 969,
	341, 969,
	342, 969,
	344, 969,
	345, 969,
	346, 969,
	347, 969,
	348, 969,
	349, 969,
	350, 969,
	351, 969,
	352, 969,
	353, 969,
	354, 969,
	355, 969,
	357, 969,
	358, 969,
	359, 969,
	361, 969,
	362, 969,
	363, 969,
	364, 969,
	365, 969,
	366, 969,
	367, 969,
	368, 969,
	369, 969,
	371, 969,
	372, 969,
	373, 969,
	374, 969,
	377, 969,
	378, 969,
	379, 969,
	380, 969,
	381, 969,
	382, 969,
	383, 969,
	384, 969,
	385, 969,
	387, 969,
	388, 969,
	390, 969,
	391, 969,
	392, 969,
	393, 969,
	394, 969,
	395, 969,
	396, 969,
	397, 969,
	399, 969,
	400, 969,
	401, 969,
	402, 969,
	403, 969,
	404, 969,
	405, 969,
	407, 969,
	408, 969,
	409, 969,
	414, 969,
	415, 969,
	416, 969,
	417, 969,
	418, 969,
	419, 969,
	420, 969,
	428, 969,
	433, 969,
	434, 969,
	435, 969,
	442, 969,
	448, 969,
	-2, 0,
	-1, 179,
	1, 28,
	446, 28,
	-2, 960,
	-1, 537,
	148, 1625,
	375, 1625,
	425, 1625,
	444, 1625,
	-2, 0,
	-1, 538,
	148, 1701,
	375, 1701,
	425, 1701,
	444, 1701,
	-2, 0,
	-1, 539,
	148, 1615,
	375, 1615,
	425, 1615,
	444, 1615,
	-2, 0,
	-1, 541,
	148, 1783,
	375, 1783,
	425, 1783,
	444, 1783,
	-2, 0,
	-1, 543,
	148, 1811,
	375, 1811,
	425, 1811,
	444, 1811,
	-2, 0,
	-1, 550,
	148, 1709,
	375, 1709,
	425, 1709,
	444, 1709,
	-2, 451,
	-1, 567,
	444, 1575,
	447, 1575,
	-2, 621,
	-1, 568,
	444, 1577,
	447, 1577,
	-2, 622,
	-1, 569,
	444, 1576,
	447, 1576,
	-2, 623,
	-1, 570,
	447, 1524,
	-2, 624,
	-1, 714,
	1, 549,
	441, 549,
	443, 549,
	445, 549,
	446, 549,
	-2, 0,
	-1, 715,
	1, 620,
	145, 620,
	441, 620,
	443, 620,
	445, 620,
	446, 620,
	-2, 0,
	-1, 721,
	1, 563,
	441, 563,
	443, 563,
	445, 563,
	446, 563,
	-2, 0,
	-1, 723,
	1, 567,
	441, 567,
	443, 567,
	445, 567,
	446, 567,
	-2, 0,
	-1, 725,
	1, 577,
	441, 577,
	443, 577,
	445, 577,
	446, 577,
	-2, 0,
	-1, 726,
	1, 586,
	441, 586,
	443, 586,
	445, 586,
	446, 586,
	-2, 0,
	-1, 727,
	1, 588,
	441, 588,
	443, 588,
	445, 588,
	446, 588,
	-2, 0,
	-1, 731,
	1, 602,
	441, 602,
	443, 602,
	445, 602,
	446, 602,
	-2, 0,
	-1, 732,
	1, 604,
	441, 604,
	443, 604,
	445, 604,
	446, 604,
	-2, 0,
	-1, 775,
	132, 973,
	218, 973,
	247, 973,
	-2, 930,
	-1, 790,
	132, 972,
	218, 972,
	247, 972,
	-2, 930,
	-1, 814,
	444, 1574,
	-2, 459,
	-1, 843,
	442, 1566,
	-2, 1557,
	-1, 849,
	5, 1098,
	-2, 1606,
	-1, 850,
	5, 1099,
	-2, 1610,
	-1, 851,
	5, 1100,
	-2, 1609,
	-1, 852,
	5, 1101,
	-2, 1809,
	-1, 853,
	5, 1102,
	-2, 1711,
	-1, 854,
	5, 1103,
	-2, 1775,
	-1, 855,
	5, 1104,
	-2, 1777,
	-1, 856,
	5, 1105,
	-2, 1788,
	-1, 857,
	5, 1106,
	-2, 1778,
	-1, 858,
	5, 1107,
	-2, 1779,
	-1, 859,
	5, 1108,
	-2, 1605,
	-1, 860,
	5, 1109,
	-2, 1822,
	-1, 861,
	5, 1110,
	-2, 1676,
	-1, 862,
	5, 1111,
	-2, 1718,
	-1, 863,
	5, 1112,
	-2, 1720,
	-1, 864,
	5, 1113,
	-2, 1680,
	-1, 865,
	5, 1114,
	442, 1584,
	-2, 1575,
	-1, 866,
	5, 1170,
	442, 1170,
	-2, 1857,
	-1, 871,
	442, 1585,
	-2, 1576,
	-1, 873,
	5, 1118,
	-2, 1855,
	-1, 874,
	5, 1119,
	-2, 1856,
	-1, 875,
	5, 1120,
	-2, 1679,
	-1, 876,
	5, 1121,
	-2, 1868,
	-1, 877,
	5, 1122,
	-2, 1681,
	-1, 878,
	5, 1123,
	-2, 1682,
	-1, 879,
	5, 1124,
	-2, 1683,
	-1, 880,
	5, 1125,
	-2, 1837,
	-1, 881,
	5, 1126,
	-2, 1866,
	-1, 882,
	5, 1127,
	-2, 1660,
	-1, 883,
	5, 1128,
	-2, 1661,
	-1, 884,
	5, 1142,
	-2, 1849,
	-1, 886,
	5, 1117,
	-2, 1845,
	-1, 887,
	5, 1117,
	-2, 1844,
	-1, 888,
	5, 1117,
	-2, 1861,
	-1, 889,
	5, 1134,
	-2, 1839,
	-1, 890,
	5, 1135,
	-2, 1607,
	-1, 891,
	5, 1145,
	-2, 1838,
	-1, 892,
	5, 1147,
	-2, 1877,
	-1, 894,
	5, 1158,
	-2, 1635,
	-1, 895,
	5, 1169,
	-2, 1870,
	-1, 896,
	5, 1161,
	-2, 1871,
	-1, 897,
	5, 1169,
	-2, 1872,
	-1, 898,
	5, 1165,
	-2, 1873,
	-1, 899,
	5, 1085,
	-2, 1689,
	-1, 900,
	5, 1086,
	-2, 1690,
	-1, 901,
	444, 1572,
	-2, 1556,
	-1, 902,
	442, 1897,
	-2, 1573,
	-1, 922,
	5, 1153,
	-2, 1798,
	-1, 939,
	5, 1152,
	-2, 1878,
	-1, 949,
	5, 1154,
	408, 1154,
	-2, 1840,
	-1, 950,
	5, 1155,
	408, 1155,
	-2, 1841,
	-1, 986,
	442, 1584,
	-2, 1575,
	-1, 1015,
	148, 1811,
	375, 1811,
	425, 1811,
	444, 1811,
	-2, 0,
	-1, 1016,
	196, 865,
	278, 865,
	285, 865,
	-2, 439,
	-1, 1134,
	296, 1554,
	435, 1554,
	-2, 1553,
	-1, 1190,
	287, 652,
	407, 652,
	-2, 227,
	-1, 1210,
	268, 958,
	-2, 769,
	-1, 1219,
	251, 1579,
	-2, 0,
	-1, 1283,
	1, 330,
	441, 330,
	443, 330,
	445, 330,
	446, 330,
	-2, 932,
	-1, 1286,
	4, 1876,
	11, 1876,
	12, 1876,
	14, 1876,
	15, 1876,
	16, 1876,
	17, 1876,
	18, 1876,
	19, 1876,
	21, 1876,
	22, 1876,
	23, 1876,
	24, 1876,
	25, 1876,
	27, 1876,
	30, 1876,
	32, 1876,
	34, 1876,
	37, 1876,
	38, 1876,
	39, 1876,
	40, 1876,
	41, 1876,
	42, 1876,
	43, 1876,
	44, 1876,
	45, 1876,
	46, 1876,
	48, 1876,
	49, 1876,
	50, 1876,
	51, 1876,
	52, 1876,
	53, 1876,
	56, 1876,
	57, 1876,
	58, 1876,
	59, 1876,
	61, 1876,
	62, 1876,
	63, 1876,
	66, 1876,
	67, 1876,
	68, 1876,
	69, 1876,
	70, 1876,
	71, 1876,
	72, 1876,
	73, 1876,
	74, 1876,
	75, 1876,
	77, 1876,
	78, 1876,
	79, 1876,
	80, 1876,
	81, 1876,
	83, 1876,
	84, 1876,
	85, 1876,
	93, 1876,
	94, 1876,
	95, 1876,
	96, 1876,
	97, 1876,
	98, 1876,
	99, 1876,
	100, 1876,
	102, 1876,
	104, 1876,
	105, 1876,
	107, 1876,
	110, 1876,
	111, 1876,
	112, 1876,
	114, 1876,
	116, 1876,
	117, 1876,
	119, 1876,
	120, 1876,
	121, 1876,
	122, 1876,
	123, 1876,
	124, 1876,
	125, 1876,
	126, 1876,
	127, 1876,
	128, 1876,
	129, 1876,
	133, 1876,
	134, 1876,
	135, 1876,
	136, 1876,
	137, 1876,
	138, 1876,
	139, 1876,
	140, 1876,
	141, 1876,
	142, 1876,
	143, 1876,
	144, 1876,
	146, 1876,
	149, 1876,
	150, 1876,
	151, 1876,
	153, 1876,
	154, 1876,
	156, 1876,
	157, 1876,
	159, 1876,
	160, 1876,
	161, 1876,
	162, 1876,
	163, 1876,
	164, 1876,
	165, 1876,
	166, 1876,
	167, 1876,
	168, 1876,
	169, 1876,
	170, 1876,
	171, 1876,
	172, 1876,
	173, 1876,
	174, 1876,
	175, 1876,
	177, 1876,
	178, 1876,
	179, 1876,
	181, 1876,
	182, 1876,
	183, 1876,
	184, 1876,
	185, 1876,
	186, 1876,
	187, 1876,
	188, 1876,
	189, 1876,
	191, 1876,
	193, 1876,
	194, 1876,
	195, 1876,
	196, 1876,
	197, 1876,
	198, 1876,
	199, 1876,
	200, 1876,
	201, 1876,
	202, 1876,
	203, 1876,
	204, 1876,
	205, 1876,
	206, 1876,
	207, 1876,
	209, 1876,
	210, 1876,
	212, 1876,
	213, 1876,
	214, 1876,
	215, 1876,
	216, 1876,
	217, 1876,
	219, 1876,
	220, 1876,
	223, 1876,
	224, 1876,
	225, 1876,
	226, 1876,
	227, 1876,
	228, 1876,
	229, 1876,
	230, 1876,
	231, 1876,
	232, 1876,
	233, 1876,
	234, 1876,
	235, 1876,
	236, 1876,
	237, 1876,
	238, 1876,
	241, 1876,
	243, 1876,
	244, 1876,
	245, 1876,
	246, 1876,
	248, 1876,
	249, 1876,
	250, 1876,
	253, 1876,
	254, 1876,
	255, 1876,
	257, 1876,
	258, 1876,
	260, 1876,
	262, 1876,
	263, 1876,
	264, 1876,
	265, 1876,
	266, 1876,
	267, 1876,
	268, 1876,
	269, 1876,
	270, 1876,
	272, 1876,
	273, 1876,
	274, 1876,
	275, 1876,
	276, 1876,
	278, 1876,
	280, 1876,
	281, 1876,
	282, 1876,
	283, 1876,
	284, 1876,
	285, 1876,
	286, 1876,
	287, 1876,
	288, 1876,
	290, 1876,
	291, 1876,
	292, 1876,
	293, 1876,
	294, 1876,
	295, 1876,
	296, 1876,
	297, 1876,
	298, 1876,
	299, 1876,
	300, 1876,
	301, 1876,
	302, 1876,
	303, 1876,
	305, 1876,
	306, 1876,
	307, 1876,
	308, 1876,
	309, 1876,
	310, 1876,
	311, 1876,
	312, 1876,
	313, 1876,
	314, 1876,
	315, 1876,
	316, 1876,
	317, 1876,
	318, 1876,
	319, 1876,
	320, 1876,
	321, 1876,
	323, 1876,
	324, 1876,
	325, 1876,
	326, 1876,
	327, 1876,
	328, 1876,
	329, 1876,
	330, 1876,
	331, 1876,
	332, 1876,
	334, 1876,
	335, 1876,
	336, 1876,
	337, 1876,
	338, 1876,
	339, 1876,
	340, 1876,
	341, 1876,
	342, 1876,
	344, 1876,
	345, 1876,
	346, 1876,
	347, 1876,
	348, 1876,
	349, 1876,
	350, 1876,
	351, 1876,
	352, 1876,
	353, 1876,
	354, 1876,
	355, 1876,
	357, 1876,
	358, 1876,
	359, 1876,
	361, 1876,
	362, 1876,
	363, 1876,
	364, 1876,
	365, 1876,
	366, 1876,
	367, 1876,
	368, 1876,
	369, 1876,
	371, 1876,
	372, 1876,
	373, 1876,
	374, 1876,
	377, 1876,
	378, 1876,
	379, 1876,
	380, 1876,
	381, 1876,
	383, 1876,
	384, 1876,
	385, 1876,
	387, 1876,
	388, 1876,
	391, 1876,
	392, 1876,
	393, 1876,
	394, 1876,
	395, 1876,
	397, 1876,
	399, 1876,
	400, 1876,
	401, 1876,
	402, 1876,
	403, 1876,
	404, 1876,
	405, 1876,
	407, 1876,
	408, 1876,
	409, 1876,
	414, 1876,
	415, 1876,
	416, 1876,
	417, 1876,
	418, 1876,
	419, 1876,
	420, 1876,
	421, 1876,
	423, 1876,
	424, 1876,
	425, 1876,
	426, 1876,
	427, 1876,
	428, 1876,
	430, 1876,
	431, 1876,
	432, 1876,
	433, 1876,
	434, 1876,
	435, 1876,
	436, 1876,
	437, 1876,
	438, 1876,
	440, 1876,
	443, 1876,
	444, 1876,
	447, 1876,
	448, 1876,
	-2, 0,
	-1, 1289,
	148, 1783,
	375, 1783,
	425, 1783,
	444, 1783,
	-2, 0,
	-1, 1358,
	1, 1829,
	441, 1829,
	443, 1829,
	444, 1829,
	445, 1829,
	446, 1829,
	-2, 600,
	-1, 1359,
	1, 1781,
	441, 1781,
	443, 1781,
	444, 1781,
	445, 1781,
	446, 1781,
	-2, 601,
	-1, 1372,
	196, 865,
	278, 865,
	285, 865,
	-2, 860,
	-1, 1377,
	132, 972,
	218, 972,
	247, 972,
	-2, 930,
	-1, 1470,
	118, 934,
	132, 934,
	190, 934,
	218, 934,
	247, 934,
	256, 934,
	389, 934,
	-2, 1326,
	-1, 1523,
	443, 1459,
	-2, 0,
	-1, 1558,
	118, 934,
	132, 934,
	190, 934,
	218, 934,
	247, 934,
	256, 934,
	389, 934,
	-2, 1042,
	-1, 1611,
	442, 1157,
	-2, 1145,
	-1, 1650,
	196, 865,
	278, 865,
	285, 865,
	-2, 441,
	-1, 1900,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1206,
	-1, 1901,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1207,
	-1, 1902,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1208,
	-1, 1903,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1209,
	-1, 1904,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1210,
	-1, 1905,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1211,
	-1, 1906,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1212,
	-1, 1907,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1213,
	-1, 1919,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1225,
	-1, 1920,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1226,
	-1, 1921,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1227,
	-1, 1924,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1232,
	-1, 1930,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1236,
	-1, 1932,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1244,
	-1, 1933,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1245,
	-1, 1934,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1246,
	-1, 1935,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1247,
	-1, 2028,
	5, 1114,
	148, 1470,
	442, 1584,
	-2, 1575,
	-1, 2029,
	148, 1471,
	-2, 1833,
	-1, 2030,
	148, 1472,
	-2, 1708,
	-1, 2031,
	148, 1473,
	-2, 1636,
	-1, 2032,
	148, 1474,
	-2, 1670,
	-1, 2033,
	148, 1475,
	-2, 1706,
	-1, 2034,
	148, 1476,
	-2, 1774,
	-1, 2102,
	1, 1043,
	83, 1043,
	118, 1043,
	132, 1043,
	145, 1043,
	149, 1043,
	155, 1043,
	158, 1043,
	181, 1043,
	190, 1043,
	199, 1043,
	214, 1043,
	218, 1043,
	234, 1043,
	247, 1043,
	251, 1043,
	256, 1043,
	304, 1043,
	306, 1043,
	389, 1043,
	398, 1043,
	411, 1043,
	412, 1043,
	413, 1043,
	422, 1043,
	441, 1043,
	443, 1043,
	445, 1043,
	446, 1043,
	447, 1043,
	-2, 1042,
	-1, 2107,
	442, 1558,
	-2, 1570,
	-1, 2126,
	442, 1156,
	-2, 1146,
	-1, 2337,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1234,
	-1, 2338,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1238,
	-1, 2344,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1240,
	-1, 2520,
	196, 865,
	278, 865,
	285, 865,
	-2, 438,
	-1, 2591,
	443, 1529,
	447, 1529,
	-2, 1545,
	-1, 2603,
	268, 958,
	-2, 769,
	-1, 2680,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1242,
	-1, 2687,
	194, 0,
	195, 0,
	241, 0,
	-2, 1261,
	-1, 2750,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1290,
	-1, 2751,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1291,
	-1, 2752,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1292,
	-1, 2756,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1296,
	-1, 2757,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1297,
	-1, 2758,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1298,
	-1, 2800,
	442, 1559,
	-2, 1571,
	-1, 2879,
	444, 1979,
	-2, 907,
	-1, 2921,
	194, 0,
	195, 0,
	241, 0,
	-2, 1262,
	-1, 2924,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1265,
	-1, 2925,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1267,
	-1, 3067,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1266,
	-1, 3068,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1268,
	-1, 3078,
	194, 0,
	-2, 1299,
	-1, 3168,
	194, 0,
	-2, 1300,
	-1, 3274,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1836,
}

const sqlPrivate = 57344

const sqlLast = 66593

var sqlAct = [...]int{

	871, 3106, 3273, 3283, 2592, 3344, 2250, 3249, 3247, 1570,
	3284, 3233, 3109, 3246, 3285, 3095, 3172, 3134, 2718, 2818,
	2251, 2259, 3036, 3059, 3272, 1887, 988, 3131, 800, 1138,
	2870, 1947, 2094, 2865, 2980, 828, 1385, 2875, 2528, 1581,
	209, 2612, 209, 209, 2365, 2363, 209, 209, 209, 209,
	209, 3354, 2589, 209, 2819, 1275, 2059, 791, 2614, 2291,
	1814, 569, 2620, 548, 3022, 979, 1039, 3082, 2154, 2330,
	2247, 2625, 2208, 1582, 2228, 1343, 2090, 2497, 1131, 209,
	2225, 2486, 201, 569, 2446, 2956, 1775, 665, 2282, 2290,
	1551, 2284, 2462, 1553, 1793, 1772, 2260, 1532, 1765, 1764,
	1693, 1702, 2473, 2156, 2773, 1478, 799, 139, 2445, 2147,
	1884, 1960, 2095, 3173, 1150, 1880, 87, 5, 1496, 2326,
	2624, 867, 1720, 1978, 2226, 1726, 1027, 1679, 1681, 1372,
	3132, 1561, 1147, 2097, 2502, 1944, 2209, 1990, 1533, 2186,
	788, 1271, 1140, 2590, 1258, 1284, 1268, 2253, 1761, 971,
	1204, 33, 2294, 1491, 203, 1972, 2082, 570, 1018, 571,
	974, 1542, 2067, 202, 953, 2024, 516, 2185, 1459, 1386,
	2056, 209, 209, 1961, 532, 500, 1468, 146, 1384, 565,
	524, 542, 1781, 1234, 139, 1282, 641, 1158, 610, 827,
	1692, 519, 790, 976, 1390, 660, 951, 1371, 706, 1216,
	2361, 1398, 1399, 147, 2252, 1795, 1795, 1441, 1442, 1443,
	2789, 1815, 1795, 2790, 527, 574, 1552, 3382, 3373, 3372,
	2210, 2076, 2076, 2076, 577, 3353, 2675, 1401, 3340, 1733,
	1447, 3338, 2994, 2210, 3304, 2994, 2076, 574, 2076, 3303,
	2631, 2632, 795, 2076, 3300, 1807, 577, 3297, 3301, 795,
	3294, 3298, 3270, 1400, 1733, 3269, 1733, 2598, 2776, 1733,
	3266, 1420, 674, 3265, 1807, 796, 2256, 1807, 1398, 1399,
	870, 1431, 1432, 1433, 1441, 1442, 1443, 3228, 3219, 3218,
	3212, 2119, 2994, 2994, 1733, 3206, 139, 1434, 3204, 2994,
	2518, 3170, 2994, 2203, 1401, 2119, 3156, 1447, 3153, 3123,
	1733, 3229, 2994, 1733, 954, 954, 1729, 3122, 3115, 3114,
	968, 1733, 1733, 2994, 1179, 3088, 3157, 776, 3069, 1733,
	1400, 1807, 2119, 1423, 1424, 1425, 1426, 3050, 1420, 2776,
	3018, 2644, 3012, 1406, 2076, 1417, 2076, 2069, 2993, 1005,
	2418, 2419, 2994, 775, 783, 2923, 2889, 2881, 2795, 2119,
	2882, 2882, 2796, 2785, 2779, 2380, 1000, 2786, 2076, 1438,
	1448, 2381, 843, 1428, 1429, 1430, 2068, 2711, 955, 1398,
	1399, 1733, 2651, 2459, 2457, 2456, 2652, 2076, 2076, 2076,
	2410, 2393, 2382, 2280, 2076, 2394, 2076, 1811, 869, 2116,
	1423, 1424, 1425, 1426, 2132, 1401, 3013, 2118, 2076, 1733,
	1406, 2119, 2113, 176, 2109, 2075, 2076, 1436, 1733, 2076,
	957, 1810, 958, 2652, 1421, 1811, 2418, 2419, 2200, 2145,
	1653, 1400, 2644, 1733, 2234, 2329, 1438, 1448, 1001, 1732,
	1428, 1429, 1430, 2076, 2143, 176, 1528, 1157, 179, 2173,
	2364, 178, 959, 2633, 1398, 1399, 1345, 956, 782, 982,
	781, 1444, 1445, 780, 1796, 1796, 779, 1672, 778, 1415,
	1416, 1796, 2634, 1469, 774, 773, 772, 771, 770, 769,
	1401, 768, 2424, 178, 1436, 767, 2433, 2311, 1178, 766,
	765, 1421, 764, 763, 177, 1427, 661, 176, 704, 703,
	702, 701, 700, 699, 170, 698, 1400, 697, 1446, 696,
	695, 1406, 171, 1422, 694, 209, 1173, 693, 692, 691,
	690, 59, 1435, 663, 209, 689, 177, 1398, 1399, 688,
	687, 686, 60, 148, 685, 178, 170, 684, 1439, 1975,
	683, 1428, 1429, 1430, 171, 209, 64, 682, 3290, 681,
	2631, 985, 209, 1401, 2418, 2419, 680, 673, 2424, 176,
	672, 632, 1427, 2434, 2971, 148, 1733, 631, 209, 1042,
	209, 209, 1143, 209, 1042, 209, 70, 981, 177, 1400,
	1422, 590, 589, 209, 209, 1026, 1406, 588, 170, 1031,
	580, 579, 1421, 1161, 578, 555, 171, 178, 554, 1001,
	553, 552, 1976, 536, 199, 1439, 76, 2015, 209, 1803,
	1794, 998, 198, 197, 2935, 86, 1860, 2255, 196, 77,
	1437, 195, 209, 194, 1143, 1143, 209, 209, 1440, 209,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 2434,
	177, 209, 193, 192, 176, 2240, 2068, 191, 1001, 209,
	170, 190, 2435, 1134, 189, 188, 187, 78, 171, 1406,
	186, 185, 893, 209, 209, 209, 209, 209, 1143, 1143,
	1977, 1974, 184, 1143, 183, 209, 1143, 209, 182, 148,
	1172, 1422, 178, 1016, 181, 180, 2424, 1437, 2418, 2419,
	1412, 1413, 1419, 1418, 1414, 1440, 2883, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 1398, 1399, 1217, 1217,
	2945, 1480, 2793, 2093, 2944, 2500, 1153, 1035, 2387, 1128,
	1133, 1143, 2376, 2213, 1279, 177, 2418, 2419, 2435, 2110,
	1499, 1554, 1401, 1013, 2101, 170, 1498, 574, 1677, 1568,
	1160, 209, 1159, 171, 176, 1166, 577, 1171, 1817, 1177,
	1485, 2013, 2011, 1397, 2009, 209, 1163, 1502, 1400, 1398,
	1399, 1221, 1979, 79, 148, 1033, 3271, 2434, 2007, 990,
	209, 2428, 2420, 2421, 2422, 2423, 2425, 2426, 3202, 3163,
	139, 3105, 178, 3160, 3051, 1401, 1499, 1167, 825, 796,
	2973, 1287, 1498, 2955, 145, 82, 798, 83, 2954, 1272,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 3158, 1262, 1265,
	2942, 1400, 2241, 1497, 1816, 1285, 176, 2941, 2940, 2939,
	2424, 2933, 2932, 3044, 2931, 177, 1218, 2930, 664, 2855,
	1377, 116, 1294, 2808, 2807, 2805, 176, 2799, 1406, 1297,
	1481, 2770, 1479, 1378, 2769, 2429, 2427, 2428, 2420, 2421,
	2422, 2423, 2425, 2426, 178, 2768, 2435, 2695, 2424, 1973,
	1398, 1399, 2691, 2495, 148, 1480, 2453, 2444, 1428, 1429,
	1430, 2417, 2655, 2414, 178, 2413, 2411, 117, 1404, 1405,
	1407, 1408, 2400, 2124, 967, 2399, 1401, 2398, 2395, 149,
	2392, 1406, 1673, 2187, 2370, 2369, 2362, 177, 2281, 2102,
	1983, 2325, 3175, 1397, 1370, 1769, 1738, 170, 2479, 1736,
	1467, 1396, 1400, 3380, 3352, 171, 1301, 177, 3351, 1421,
	1420, 1428, 1429, 1430, 3305, 989, 1376, 170, 2720, 3261,
	3259, 3197, 3195, 3192, 3191, 171, 662, 3187, 3181, 2434,
	3152, 1383, 3151, 1950, 1375, 3101, 3080, 3056, 3055, 1402,
	1403, 1404, 1405, 1407, 1408, 3034, 148, 3031, 1373, 3026,
	2970, 2953, 796, 209, 2903, 2900, 2917, 983, 2834, 2833,
	2822, 2239, 1421, 2429, 2427, 2428, 2420, 2421, 2422, 2423,
	2425, 2426, 1423, 1424, 1425, 1426, 2821, 776, 2781, 209,
	2686, 1530, 1406, 1379, 2645, 2606, 1956, 2578, 1393, 1394,
	209, 1042, 209, 209, 2418, 2419, 2559, 2538, 1422, 1143,
	569, 209, 209, 775, 3043, 569, 209, 2537, 2514, 2512,
	1578, 209, 1428, 1429, 1430, 1645, 1501, 2458, 2435, 2391,
	2390, 2375, 2353, 1539, 2222, 1503, 1500, 1492, 1398, 1399,
	1489, 1398, 1399, 2128, 1042, 2127, 2105, 2972, 2014, 1588,
	2087, 1493, 1494, 2074, 2005, 1463, 1567, 1531, 1527, 1526,
	1525, 1422, 1575, 1524, 1401, 1523, 1675, 1401, 1522, 1536,
	1537, 1668, 1521, 1421, 1520, 1519, 1517, 1516, 1515, 1648,
	1562, 1514, 1513, 1512, 1647, 2418, 2419, 139, 1511, 1510,
	1400, 1509, 1508, 1400, 1507, 1506, 954, 1505, 1550, 1482,
	1464, 1462, 796, 1457, 1012, 1003, 995, 176, 1818, 2927,
	2042, 2804, 2422, 2423, 2425, 2426, 176, 2788, 2121, 2784,
	2379, 2088, 1481, 2510, 1573, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 2418, 2419, 2424, 1460, 2538, 1563,
	1030, 2562, 1697, 1672, 1427, 178, 1559, 3196, 2420, 2421,
	2422, 2423, 2425, 2426, 178, 1650, 2615, 1549, 3049, 1529,
	826, 3014, 1422, 1028, 574, 2791, 1672, 1143, 209, 574,
	1406, 2647, 2646, 577, 1042, 1671, 1687, 1556, 577, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 1316, 177, 1577,
	1029, 1672, 2012, 2010, 1644, 2008, 2210, 177, 170, 3161,
	1428, 1429, 1430, 1579, 1499, 1554, 171, 170, 1368, 2006,
	1498, 2397, 2396, 209, 209, 171, 2335, 2424, 2175, 1025,
	209, 3104, 2832, 3159, 761, 1664, 1487, 148, 1659, 1512,
	209, 2189, 1512, 2594, 1815, 2593, 148, 3135, 1345, 209,
	1766, 209, 2661, 209, 2573, 1715, 3083, 209, 3355, 2252,
	1344, 1421, 2722, 2385, 982, 1991, 982, 2587, 1717, 209,
	3291, 1719, 762, 1975, 1723, 2126, 1701, 1518, 1495, 1758,
	1194, 3302, 1040, 3299, 2814, 556, 2627, 1151, 1305, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 3243, 2866,
	2288, 3328, 1754, 3211, 1727, 2522, 1757, 3329, 2434, 1143,
	209, 1143, 3004, 1663, 1662, 2158, 1143, 1672, 1669, 794,
	209, 209, 1182, 1770, 755, 2133, 3292, 1849, 757, 753,
	1143, 1143, 574, 209, 966, 1160, 1976, 1159, 3377, 209,
	1778, 577, 794, 1192, 569, 209, 789, 209, 1787, 209,
	1422, 209, 627, 209, 751, 748, 985, 1466, 985, 3129,
	1847, 3021, 3126, 209, 1722, 1731, 3125, 209, 3124, 2848,
	2845, 1819, 2844, 2811, 2810, 1574, 209, 1798, 562, 2374,
	1800, 2373, 981, 1802, 981, 2372, 2371, 1805, 1682, 2339,
	1785, 793, 1683, 2205, 1694, 209, 1828, 2435, 1748, 1747,
	1030, 209, 2161, 1660, 1977, 1974, 1342, 2199, 1682, 2196,
	1666, 2177, 1683, 1193, 793, 2149, 2115, 1703, 1340, 1030,
	1931, 1042, 1691, 1374, 1156, 796, 2837, 2001, 2000, 628,
	1889, 1303, 1780, 2248, 1707, 1783, 2420, 2421, 2422, 2423,
	2425, 2426, 2561, 1867, 1298, 1695, 1696, 1227, 993, 1226,
	1029, 1285, 1820, 1857, 1588, 1588, 3210, 795, 1225, 564,
	1224, 745, 2511, 3064, 1864, 2662, 1746, 622, 2149, 1029,
	1402, 1403, 1404, 1405, 1407, 1408, 1704, 1684, 1408, 2148,
	795, 1246, 1188, 1682, 1859, 2176, 2350, 1683, 512, 1686,
	1858, 1013, 1885, 1886, 1812, 1205, 1979, 1684, 574, 1824,
	1614, 1339, 1942, 2108, 2851, 2168, 1042, 577, 2348, 1686,
	1831, 992, 507, 1563, 2824, 2427, 2428, 2420, 2421, 2422,
	2423, 2425, 2426, 1838, 1940, 3000, 1946, 1946, 3111, 1667,
	3263, 1203, 2160, 1381, 2167, 2122, 621, 1299, 1862, 1011,
	1962, 1963, 2664, 1688, 1784, 1865, 1954, 1708, 2663, 209,
	558, 1952, 2308, 1979, 1335, 1317, 3287, 2705, 1962, 1988,
	1991, 679, 1313, 1688, 2327, 2328, 563, 3226, 1202, 1861,
	804, 2426, 1684, 1042, 209, 1866, 1353, 1863, 1673, 2187,
	2702, 2193, 3320, 209, 1686, 2622, 209, 1190, 776, 1042,
	792, 776, 776, 1973, 2023, 3328, 2027, 2027, 2040, 796,
	1962, 1673, 2187, 2060, 2062, 1336, 560, 1987, 2066, 2345,
	1709, 1710, 796, 792, 1876, 2103, 796, 1877, 1878, 1705,
	2346, 1689, 1205, 2351, 2521, 1936, 1673, 2187, 2570, 2565,
	2623, 3367, 1689, 1937, 1714, 1367, 1938, 1856, 1688, 1943,
	630, 629, 2136, 557, 2106, 2159, 1706, 1958, 2703, 1979,
	2581, 1699, 1689, 1697, 2138, 2418, 2419, 2114, 2436, 2437,
	2438, 2556, 3188, 2998, 1490, 2089, 2523, 209, 1795, 2099,
	2100, 1345, 1338, 3288, 2919, 1985, 1613, 2550, 620, 561,
	619, 1680, 954, 2622, 1304, 659, 2139, 3319, 2846, 1998,
	559, 2236, 1689, 3224, 2197, 2079, 2909, 796, 1042, 2137,
	749, 759, 1848, 209, 758, 749, 2035, 139, 623, 1651,
	3074, 209, 1982, 2064, 1571, 2433, 2549, 2051, 2117, 2072,
	2073, 209, 3225, 2084, 2085, 2835, 2080, 1689, 1697, 1711,
	750, 749, 3199, 1456, 209, 1846, 2825, 1143, 2389, 2083,
	1979, 1559, 1673, 1670, 2552, 2098, 3289, 1245, 1187, 209,
	1042, 795, 2904, 209, 209, 1541, 2802, 1678, 508, 1588,
	2347, 2314, 2150, 1006, 2123, 2554, 1685, 2911, 3286, 2349,
	1350, 1389, 983, 3327, 983, 1501, 1939, 2999, 2146, 209,
	209, 3325, 2857, 209, 581, 1941, 1685, 2424, 2759, 2231,
	1017, 1322, 1712, 3141, 2131, 3033, 2610, 2180, 209, 2223,
	1022, 3112, 1300, 1493, 1494, 209, 991, 209, 2553, 209,
	509, 3347, 2194, 2162, 2164, 209, 1134, 3318, 209, 746,
	209, 1545, 209, 2179, 209, 209, 2207, 209, 1143, 1143,
	1143, 2134, 1143, 2130, 982, 2243, 209, 209, 2439, 209,
	1759, 1314, 2317, 1538, 1830, 209, 2341, 1945, 510, 1004,
	511, 982, 1351, 1548, 3061, 2153, 209, 1928, 209, 999,
	2170, 1685, 499, 1953, 2172, 2306, 1380, 2307, 2434, 2951,
	2178, 1543, 1010, 2263, 1388, 1718, 2910, 209, 209, 209,
	3368, 209, 1023, 2195, 2276, 2277, 1546, 1734, 2584, 1024,
	2206, 1698, 1315, 2245, 2202, 1312, 2188, 2190, 2191, 2192,
	2300, 3362, 1541, 1022, 209, 3117, 1544, 574, 3178, 2215,
	1160, 2217, 2211, 2302, 2813, 2303, 577, 1796, 2220, 2760,
	736, 1689, 1352, 2475, 2287, 2761, 985, 2503, 3116, 3099,
	2611, 2235, 785, 2316, 736, 2991, 2534, 139, 3003, 1456,
	2265, 2530, 787, 985, 2244, 3002, 2312, 2227, 2278, 2313,
	1725, 2258, 981, 2254, 3060, 2254, 787, 2435, 1545, 2274,
	1387, 2988, 2269, 2224, 2270, 2272, 2271, 901, 1545, 981,
	1724, 2273, 1658, 1540, 1285, 1779, 2301, 2279, 1547, 582,
	583, 2342, 2289, 1768, 1022, 1023, 1926, 1929, 1767, 1389,
	1548, 786, 1024, 1742, 3345, 2487, 2701, 1872, 1721, 3200,
	1548, 3234, 2989, 209, 1388, 2871, 2952, 205, 2081, 502,
	503, 737, 2378, 520, 502, 520, 530, 535, 1543, 2319,
	551, 1695, 1696, 1546, 2322, 737, 2315, 2181, 205, 3037,
	2321, 2324, 1853, 1546, 1925, 1302, 1656, 736, 1654, 2221,
	1323, 1248, 3361, 2367, 2368, 3100, 668, 2540, 3062, 2539,
	205, 1657, 2333, 1544, 1825, 2476, 2078, 2112, 2377, 787,
	3346, 2077, 2111, 585, 584, 2233, 1023, 2430, 2431, 2432,
	2474, 1613, 1613, 1024, 2429, 2427, 2428, 2420, 2421, 2422,
	2423, 2425, 2426, 3001, 2340, 678, 2488, 796, 1219, 1233,
	1387, 1042, 3348, 1873, 2460, 3183, 1231, 793, 3023, 2467,
	2468, 2656, 671, 514, 3107, 1220, 3332, 209, 1777, 3,
	209, 3133, 2583, 586, 587, 1547, 2957, 209, 2774, 3097,
	209, 209, 1042, 802, 1888, 1547, 1996, 1365, 737, 3334,
	3237, 1042, 3079, 2950, 2850, 2455, 209, 2447, 502, 502,
	2984, 3201, 2483, 2985, 2490, 2507, 205, 2384, 3184, 738,
	209, 2469, 2491, 2492, 3098, 1927, 2685, 1347, 1333, 2517,
	1331, 2182, 2183, 738, 2504, 1329, 1327, 209, 209, 209,
	2506, 2412, 2499, 209, 1585, 1588, 209, 1325, 2987, 2352,
	2519, 3108, 2204, 209, 209, 209, 209, 209, 3238, 2174,
	2990, 2498, 2524, 2129, 1319, 1569, 1566, 209, 209, 1366,
	1295, 1229, 2482, 2448, 789, 209, 3185, 1845, 2310, 1992,
	1588, 2309, 2305, 2509, 2536, 1855, 2494, 209, 1143, 2478,
	209, 2464, 2542, 1835, 2546, 2547, 1042, 2461, 3282, 2471,
	2472, 1646, 2531, 2477, 1042, 1504, 2527, 1209, 3231, 209,
	1995, 2977, 209, 209, 2450, 2451, 2452, 2869, 2535, 739,
	2489, 2541, 2830, 2544, 1143, 209, 2828, 1143, 1143, 1143,
	2812, 784, 2609, 739, 209, 2596, 738, 2505, 2595, 747,
	209, 2249, 2564, 1364, 2713, 2597, 209, 3329, 209, 1232,
	676, 677, 2613, 2520, 2481, 209, 1230, 740, 2484, 987,
	2238, 2986, 2107, 513, 2525, 2571, 1687, 669, 670, 1757,
	2237, 740, 2579, 1346, 1332, 2218, 1330, 1809, 1143, 1143,
	1808, 1328, 1326, 2599, 1806, 2618, 209, 209, 2555, 1804,
	209, 1687, 2560, 1324, 2515, 2516, 2566, 1801, 2617, 1799,
	1797, 1788, 209, 1739, 1042, 209, 209, 1042, 209, 2569,
	1318, 2629, 983, 2557, 2626, 2558, 2575, 1228, 2179, 2580,
	1844, 1727, 2574, 2626, 209, 1737, 1728, 1727, 1716, 983,
	982, 1713, 2643, 1700, 1690, 3145, 739, 1391, 982, 982,
	963, 2331, 982, 2576, 3255, 2577, 1613, 2567, 3053, 3052,
	1676, 2568, 2659, 1184, 2637, 2638, 2639, 2149, 2640, 2641,
	752, 754, 796, 3147, 964, 2166, 982, 1042, 2165, 2880,
	1697, 2144, 2616, 2669, 740, 2635, 2658, 139, 1042, 1588,
	209, 2628, 2654, 2688, 2149, 1362, 1363, 1832, 2642, 1851,
	3190, 1398, 1399, 3165, 2958, 2163, 2184, 2169, 1398, 1399,
	1395, 2201, 2697, 2698, 2699, 515, 2171, 3230, 3203, 2861,
	2856, 2798, 2332, 2257, 3343, 2065, 1649, 1401, 2666, 1392,
	1580, 2508, 985, 3360, 2418, 2419, 2723, 1469, 1588, 1588,
	985, 985, 2803, 2671, 985, 2673, 2708, 2667, 1398, 1399,
	2141, 2140, 996, 1400, 1588, 1588, 965, 2141, 981, 2670,
	1400, 668, 2513, 526, 2142, 1307, 981, 981, 985, 2004,
	981, 1306, 2003, 2693, 2002, 1999, 1885, 2729, 1997, 1970,
	2928, 1349, 1007, 209, 1348, 1588, 2700, 2712, 1467, 551,
	1465, 3369, 1885, 2739, 981, 209, 2704, 2706, 2707, 3091,
	802, 1042, 3047, 2719, 802, 205, 3025, 205, 205, 2899,
	1148, 2771, 205, 2728, 2725, 2787, 2792, 2888, 2726, 209,
	205, 1162, 2864, 2767, 2736, 2854, 2853, 2852, 2809, 2738,
	2763, 2827, 2636, 2607, 2605, 2775, 1164, 2267, 1168, 2242,
	1174, 2219, 1957, 1791, 1790, 1186, 1789, 1574, 1771, 1585,
	1585, 1750, 1749, 1745, 1744, 2764, 1743, 1741, 1740, 1208,
	1382, 1361, 209, 205, 205, 139, 1148, 1360, 1341, 1337,
	1334, 2724, 2777, 2778, 1320, 2780, 2772, 1257, 205, 1256,
	1255, 1254, 1253, 1252, 1251, 1250, 1244, 1249, 1247, 1242,
	1241, 1240, 1239, 1238, 1201, 209, 209, 209, 1200, 209,
	205, 205, 205, 205, 1148, 1199, 1198, 2794, 2783, 1197,
	1042, 209, 551, 1196, 205, 1143, 2838, 1195, 1189, 1183,
	1181, 1180, 1009, 1293, 1008, 2842, 938, 848, 1652, 760,
	1296, 614, 209, 744, 3110, 2847, 1355, 2884, 75, 2829,
	2816, 2831, 1191, 2849, 2873, 209, 209, 1143, 1143, 1143,
	601, 209, 209, 209, 2876, 69, 209, 209, 2801, 2826,
	3242, 734, 2548, 209, 2843, 1834, 2836, 1321, 1760, 1836,
	2480, 2179, 2872, 2086, 3223, 2860, 1042, 2908, 205, 1757,
	2936, 2388, 3171, 3073, 2877, 1994, 2867, 1486, 71, 836,
	921, 2806, 205, 2978, 2815, 2293, 2292, 803, 1045, 1661,
	2263, 842, 1674, 2863, 2125, 2026, 1584, 535, 845, 1586,
	2895, 847, 846, 1587, 1488, 2874, 844, 1583, 2232, 2261,
	2878, 209, 1588, 1236, 724, 2886, 2922, 1665, 2885, 1951,
	1989, 2383, 1483, 816, 2891, 838, 2890, 1986, 2896, 2897,
	1002, 2906, 2898, 2902, 2913, 815, 2485, 982, 2621, 2926,
	2797, 2901, 2914, 3042, 1871, 2323, 1868, 617, 2415, 1451,
	1452, 1453, 1454, 1455, 2464, 1971, 994, 2048, 2041, 2037,
	1369, 1458, 1613, 2262, 2466, 1032, 819, 1949, 1474, 2357,
	2496, 2630, 209, 2120, 1879, 962, 961, 960, 3248, 1471,
	3245, 2962, 1042, 2907, 1042, 1484, 1655, 2135, 1450, 832,
	2465, 2657, 1206, 3189, 1449, 2493, 756, 1613, 3180, 1021,
	810, 209, 209, 209, 2501, 1020, 1019, 2533, 3366, 2823,
	175, 2949, 172, 209, 174, 173, 2840, 2582, 91, 209,
	38, 209, 2997, 37, 209, 209, 209, 209, 209, 985,
	36, 2996, 18, 3007, 3008, 209, 209, 1143, 983, 1042,
	2975, 1143, 115, 114, 1585, 113, 983, 983, 112, 111,
	983, 110, 2498, 2960, 2961, 981, 109, 209, 2966, 3006,
	1042, 2965, 2976, 1143, 2969, 2963, 3011, 108, 107, 2974,
	106, 105, 104, 209, 983, 103, 3027, 102, 101, 100,
	2995, 99, 98, 97, 96, 95, 94, 3005, 93, 92,
	502, 35, 3039, 982, 209, 3010, 3020, 547, 2959, 544,
	1042, 51, 50, 3057, 1534, 1534, 1534, 2501, 90, 3015,
	3054, 205, 89, 205, 3016, 3019, 205, 17, 1757, 2618,
	3038, 34, 15, 55, 56, 3030, 1042, 1162, 3041, 205,
	1875, 3028, 3048, 14, 30, 3040, 3035, 205, 1162, 520,
	31, 2626, 205, 1162, 3046, 81, 80, 29, 551, 16,
	28, 26, 27, 2964, 12, 9, 8, 11, 13, 25,
	144, 143, 1042, 74, 142, 3070, 3063, 73, 209, 141,
	209, 802, 1042, 209, 3065, 140, 72, 24, 10, 1588,
	23, 209, 136, 3081, 68, 985, 138, 137, 65, 135,
	134, 66, 133, 132, 67, 131, 1613, 3094, 3024, 22,
	6, 54, 7, 3029, 209, 3085, 3058, 1151, 3093, 2660,
	1040, 981, 84, 85, 32, 63, 62, 209, 3086, 3087,
	61, 21, 3137, 3045, 209, 53, 20, 3092, 166, 1143,
	1588, 165, 164, 3128, 209, 2354, 2355, 982, 163, 3113,
	159, 3138, 158, 3146, 3140, 1613, 1613, 3089, 162, 160,
	161, 157, 130, 168, 167, 209, 155, 982, 3143, 152,
	151, 1613, 1613, 2043, 154, 3154, 3155, 3127, 3119, 3136,
	2710, 3149, 3144, 156, 209, 2876, 3148, 153, 150, 169,
	209, 2716, 129, 58, 128, 127, 3142, 126, 209, 125,
	3120, 3121, 1613, 124, 57, 205, 19, 2, 1, 0,
	0, 0, 3150, 3177, 0, 0, 1588, 0, 2618, 0,
	3169, 0, 3174, 0, 0, 209, 209, 0, 3176, 0,
	0, 3164, 0, 0, 0, 0, 3198, 0, 0, 985,
	0, 0, 209, 1143, 3090, 2441, 2442, 2443, 209, 0,
	205, 205, 1143, 1143, 0, 0, 0, 205, 0, 985,
	209, 0, 209, 0, 3194, 981, 3217, 1776, 0, 3221,
	0, 3222, 3208, 3205, 3186, 3209, 205, 0, 205, 0,
	205, 3220, 209, 0, 502, 981, 3213, 0, 209, 209,
	0, 1042, 0, 3193, 0, 0, 1792, 3240, 0, 0,
	209, 3250, 0, 0, 2800, 0, 0, 3215, 3216, 0,
	0, 3214, 0, 0, 3239, 0, 3244, 3258, 0, 3260,
	0, 0, 3227, 0, 1278, 3252, 0, 0, 0, 0,
	209, 3268, 3262, 3264, 0, 0, 0, 551, 0, 0,
	0, 3293, 0, 0, 0, 0, 3280, 1148, 205, 3281,
	3278, 3279, 3251, 0, 3253, 983, 0, 0, 0, 0,
	551, 0, 0, 0, 209, 0, 205, 3256, 3295, 0,
	1585, 205, 205, 0, 205, 3307, 205, 3317, 205, 3309,
	205, 3311, 3267, 209, 3306, 3312, 0, 0, 0, 0,
	1850, 0, 0, 0, 1852, 3315, 3326, 0, 3323, 3324,
	0, 0, 0, 205, 0, 1585, 209, 3330, 0, 3333,
	3250, 3336, 3331, 0, 0, 3335, 0, 0, 0, 3341,
	0, 0, 535, 3308, 0, 3310, 3313, 3314, 551, 0,
	0, 0, 2263, 3316, 3350, 3349, 3337, 0, 3339, 1613,
	0, 1869, 0, 1874, 3342, 0, 3359, 0, 0, 1881,
	0, 3356, 3363, 3358, 0, 3257, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 3357, 1930, 0, 1932, 1933, 1934, 1935, 3374, 3375,
	3376, 0, 0, 0, 0, 0, 0, 0, 3364, 3365,
	3383, 983, 0, 0, 1959, 0, 0, 0, 0, 0,
	0, 3370, 0, 3371, 0, 0, 3378, 3379, 0, 1471,
	0, 0, 0, 1984, 0, 0, 0, 3381, 0, 0,
	0, 2681, 2682, 0, 0, 0, 2418, 2419, 0, 2436,
	2437, 2438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 0, 0, 0, 0, 2039, 502, 2050, 2052, 2057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 2043, 2043, 2968, 0, 0,
	0, 502, 0, 0, 1585, 0, 2433, 0, 205, 0,
	502, 0, 0, 205, 0, 0, 0, 0, 2991, 0,
	0, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748,
	2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758,
	0, 2762, 0, 0, 2988, 0, 0, 2981, 0, 0,
	0, 0, 0, 1585, 1585, 983, 0, 0, 0, 0,
	2979, 0, 0, 0, 0, 0, 2983, 0, 0, 1585,
	1585, 0, 0, 0, 0, 983, 0, 0, 2424, 0,
	0, 0, 0, 0, 0, 2989, 0, 0, 0, 0,
	0, 0, 0, 0, 520, 2043, 2043, 2043, 0, 0,
	1585, 0, 0, 0, 0, 2440, 1613, 0, 0, 0,
	0, 0, 0, 1040, 0, 2982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2439,
	2157, 0, 0, 0, 0, 0, 0, 0, 205, 3071,
	0, 0, 0, 0, 0, 0, 1472, 0, 205, 0,
	1477, 0, 0, 0, 0, 0, 0, 1613, 0, 2434,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3071, 205, 0, 0, 0,
	205, 2212, 0, 0, 0, 1888, 0, 0, 0, 0,
	2214, 0, 2216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 1162, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2984, 0, 1776, 2985, 0, 0, 0,
	0, 0, 2157, 1613, 502, 0, 2266, 0, 0, 0,
	1469, 0, 205, 0, 0, 205, 0, 205, 2435, 205,
	0, 205, 205, 0, 1148, 0, 0, 0, 0, 59,
	0, 2987, 0, 2285, 668, 0, 2157, 0, 0, 0,
	60, 0, 205, 2990, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 64, 1162, 1136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 205, 205, 0, 205, 0,
	0, 0, 0, 0, 70, 2418, 2419, 0, 2436, 2437,
	2438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 1585, 1210, 1213,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 77, 2430, 2431,
	2432, 0, 0, 0, 0, 2429, 2427, 2428, 2420, 2421,
	2422, 2423, 2425, 2426, 2986, 2433, 0, 0, 0, 2337,
	2338, 0, 0, 0, 0, 2344, 0, 0, 0, 0,
	1291, 2043, 2043, 0, 1888, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 2358, 2359, 0, 0, 0, 0,
	1984, 0, 0, 0, 0, 0, 0, 0, 0, 2366,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1162, 0, 0, 0, 0, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2386, 0, 2424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 2401,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
	2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
	0, 2043, 0, 651, 0, 0, 0, 0, 204, 0,
	0, 79, 0, 0, 0, 0, 0, 2057, 2057, 2057,
	0, 0, 0, 0, 0, 0, 633, 205, 0, 575,
	0, 0, 1534, 0, 0, 205, 205, 0, 2434, 205,
	2470, 0, 145, 82, 502, 83, 0, 502, 0, 0,
	0, 575, 0, 0, 502, 0, 634, 502, 502, 0,
	0, 3078, 0, 205, 176, 635, 0, 0, 0, 0,
	0, 0, 0, 1162, 0, 0, 664, 0, 0, 116,
	636, 0, 0, 0, 0, 0, 0, 1162, 0, 0,
	0, 0, 0, 0, 0, 802, 656, 0, 0, 0,
	3102, 0, 178, 0, 205, 2157, 2529, 802, 0, 0,
	2157, 637, 0, 2529, 1585, 0, 0, 0, 0, 0,
	2157, 2529, 2157, 2529, 2529, 117, 0, 2435, 638, 0,
	0, 0, 2551, 0, 205, 205, 0, 149, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 984, 639, 0,
	0, 640, 0, 0, 205, 170, 0, 1148, 0, 902,
	0, 0, 0, 171, 0, 1585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2586, 655, 0, 2588,
	2591, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	3168, 0, 205, 0, 0, 0, 0, 0, 0, 206,
	0, 205, 0, 0, 0, 0, 0, 1148, 0, 0,
	0, 0, 0, 2157, 0, 502, 2619, 0, 0, 0,
	206, 0, 2157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1576, 0, 0, 0, 2430, 2431, 2432,
	0, 1585, 206, 0, 2429, 2427, 2428, 2420, 2421, 2422,
	2423, 2425, 2426, 205, 1776, 0, 0, 1776, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 2665,
	0, 0, 1148, 205, 0, 205, 0, 1955, 0, 0,
	659, 643, 0, 0, 0, 0, 0, 0, 0, 2672,
	0, 205, 0, 1881, 0, 0, 1472, 0, 0, 2676,
	2677, 0, 0, 2680, 0, 0, 0, 2683, 658, 0,
	0, 0, 0, 0, 0, 644, 2687, 0, 645, 0,
	0, 0, 0, 0, 653, 2694, 0, 0, 2470, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2047, 0, 0, 0, 2721, 0, 2714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	647, 654, 0, 0, 0, 0, 0, 0, 2730, 2731,
	648, 2732, 2733, 2734, 0, 0, 2735, 0, 0, 0,
	2737, 650, 0, 0, 0, 0, 649, 0, 0, 0,
	0, 1730, 0, 0, 0, 59, 0, 657, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 652, 0,
	0, 2765, 2766, 210, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 2418, 2419, 0, 2436, 2437, 2438, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 2782,
	502, 0, 2918, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 0, 1162, 0, 0, 0,
	76, 0, 0, 2433, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 77, 0, 0, 568, 0, 0, 0,
	0, 2817, 2820, 0, 0, 0, 0, 0, 0, 0,
	0, 2043, 0, 0, 0, 0, 0, 0, 0, 551,
	0, 0, 0, 0, 2839, 1813, 204, 0, 204, 204,
	0, 78, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 575, 0, 0, 1826, 1827, 0, 0, 0, 0,
	2043, 0, 2858, 205, 205, 2424, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 204, 1534, 0, 0, 2157,
	205, 0, 0, 0, 0, 0, 0, 2887, 0, 204,
	0, 0, 2285, 2285, 0, 0, 2439, 0, 668, 668,
	2157, 0, 0, 1776, 1776, 0, 0, 0, 0, 0,
	205, 204, 204, 204, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 2434, 79, 0, 0,
	2043, 0, 2915, 2916, 0, 0, 0, 0, 2920, 2921,
	0, 0, 0, 2924, 2925, 0, 0, 0, 0, 0,
	2929, 0, 0, 0, 0, 0, 0, 0, 145, 82,
	0, 83, 0, 0, 0, 0, 0, 0, 2937, 2934,
	0, 0, 0, 0, 0, 0, 2938, 0, 2418, 2419,
	176, 2436, 2437, 2438, 0, 0, 0, 0, 0, 204,
	0, 0, 664, 0, 0, 116, 0, 2690, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 206, 1047, 206,
	206, 1047, 0, 1047, 206, 2435, 0, 0, 178, 0,
	0, 0, 206, 0, 205, 0, 0, 0, 0, 1162,
	0, 0, 0, 0, 0, 0, 0, 0, 2433, 0,
	0, 117, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 2047, 2047, 0, 2157, 2529,
	2157, 177, 0, 1047, 1047, 206, 206, 0, 0, 0,
	1162, 170, 0, 0, 0, 2820, 2157, 0, 2529, 171,
	206, 1162, 1162, 205, 2157, 2529, 0, 0, 0, 0,
	0, 0, 205, 205, 0, 0, 0, 0, 0, 0,
	148, 0, 206, 206, 206, 206, 0, 1047, 1047, 0,
	2424, 0, 1047, 0, 3032, 1047, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 2430, 2431, 2432, 0, 0,
	2157, 0, 2429, 2427, 2428, 2420, 2421, 2422, 2423, 2425,
	2426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1162, 0, 0, 2820, 2047, 2047, 2047, 0, 0,
	1047, 2439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3066, 3067, 3068, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2434, 0, 0, 206, 0, 0, 3076, 3077, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3084, 0, 0, 0, 0, 0, 1398, 1399, 0,
	0, 0, 0, 0, 0, 2157, 0, 2529, 872, 0,
	3096, 0, 1557, 0, 984, 0, 0, 204, 205, 0,
	0, 2198, 0, 1401, 0, 0, 0, 0, 2820, 0,
	204, 1557, 0, 0, 0, 0, 3118, 0, 575, 0,
	0, 551, 1043, 575, 0, 1144, 0, 1043, 802, 1400,
	0, 0, 0, 0, 2591, 3130, 0, 1420, 0, 0,
	2435, 205, 0, 0, 0, 2820, 0, 0, 2820, 0,
	0, 1162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2820,
	2820, 0, 205, 0, 0, 0, 0, 1144, 1144, 0,
	0, 0, 0, 2684, 0, 0, 0, 0, 0, 0,
	0, 2721, 2275, 0, 0, 0, 0, 502, 0, 1423,
	1424, 1425, 1426, 0, 0, 3096, 0, 0, 0, 1406,
	0, 0, 0, 0, 0, 3179, 0, 0, 3182, 0,
	0, 1144, 1144, 0, 0, 0, 1144, 0, 0, 1144,
	0, 0, 2157, 2529, 0, 0, 0, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 0, 0, 0, 205,
	2430, 2431, 2432, 0, 0, 2529, 0, 2429, 2427, 2428,
	2420, 2421, 2422, 2423, 2425, 2426, 0, 1162, 0, 1162,
	0, 0, 0, 0, 1144, 0, 575, 0, 0, 0,
	0, 0, 0, 0, 837, 88, 0, 0, 206, 3235,
	1421, 0, 0, 0, 0, 1162, 205, 0, 0, 0,
	1047, 206, 206, 0, 0, 0, 0, 205, 1047, 206,
	802, 2047, 2047, 0, 206, 0, 0, 0, 0, 0,
	0, 204, 204, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 2721, 3277, 3277,
	3277, 0, 0, 1047, 0, 0, 0, 204, 0, 204,
	0, 204, 0, 0, 0, 0, 0, 3296, 0, 0,
	0, 1427, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 2157, 0, 2820, 0, 2820, 0, 0, 207, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 3277, 0,
	3096, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
	2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
	0, 2047, 0, 1162, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 777, 0, 0, 0, 0, 0,
	0, 0, 0, 797, 0, 59, 0, 204, 0, 0,
	0, 0, 575, 204, 0, 204, 60, 204, 0, 204,
	0, 204, 0, 0, 0, 0, 0, 3277, 0, 0,
	64, 0, 0, 972, 88, 0, 1047, 206, 0, 0,
	0, 0, 0, 1047, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 0, 0, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0, 0,
	0, 0, 206, 206, 0, 0, 0, 0, 0, 206,
	76, 0, 0, 0, 0, 0, 0, 0, 814, 86,
	0, 0, 0, 77, 0, 0, 0, 0, 206, 0,
	206, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 0, 1144, 568, 0, 0, 0, 0, 568, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1043, 1047, 0,
	1047, 0, 0, 0, 0, 1047, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 2600, 1047,
	1047, 2602, 2603, 2604, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 206, 206, 0, 206, 0, 206, 0,
	206, 0, 206, 0, 0, 0, 0, 1044, 0, 0,
	1145, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 984, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 2649, 2650, 0, 0, 0, 79, 0, 984,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1145, 1145, 0, 0, 0, 0, 145, 82,
	1047, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	1144, 0, 0, 0, 0, 0, 0, 1043, 0, 0,
	176, 0, 0, 1398, 1399, 0, 0, 0, 0, 0,
	0, 0, 664, 0, 0, 116, 1145, 1145, 0, 0,
	0, 1145, 0, 0, 1145, 0, 0, 0, 0, 1401,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1400, 0, 0, 0, 0,
	0, 117, 0, 1420, 0, 1047, 0, 0, 0, 1145,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 204,
	0, 177, 0, 200, 0, 0, 0, 0, 0, 204,
	0, 170, 0, 0, 0, 0, 0, 0, 0, 171,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 2679,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	1288, 575, 1144, 0, 1144, 1423, 1424, 1425, 1426, 1144,
	0, 0, 1047, 0, 0, 1406, 0, 0, 88, 0,
	88, 0, 88, 1144, 1144, 206, 0, 204, 1047, 0,
	0, 204, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 1428, 1429, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 204, 0, 204, 0,
	204, 2047, 204, 204, 0, 814, 0, 0, 0, 814,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 0, 1126, 204, 0, 0, 1421, 797, 88, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	2047, 0, 88, 0, 1043, 0, 0, 1398, 1399, 0,
	0, 0, 0, 0, 0, 204, 204, 204, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 1401, 0, 0, 0, 0, 0, 0,
	206, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 1427, 0, 1400,
	0, 0, 0, 206, 0, 0, 1047, 1420, 0, 0,
	0, 2892, 2893, 2894, 0, 1422, 0, 0, 206, 1047,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 1043,
	2047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 206, 2678, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 777, 0, 0, 1145, 0, 1423,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 0, 1406,
	0, 0, 1461, 0, 206, 0, 0, 206, 0, 206,
	0, 206, 0, 206, 206, 0, 1043, 1047, 1047, 1047,
	1470, 1047, 1044, 0, 1476, 0, 0, 0, 0, 1428,
	1429, 1430, 1043, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 2418, 2419, 0, 2436, 2437, 2438, 0, 0,
	0, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 2689, 0, 0, 0, 0, 206, 206, 206, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 984, 0,
	0, 0, 0, 206, 1398, 1399, 984, 984, 0, 0,
	984, 0, 2433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1401, 0, 0, 0, 1557, 0, 0, 0, 0, 0,
	0, 3017, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1043, 0, 0, 0, 1145, 1400, 0, 0, 0,
	0, 1427, 1044, 0, 1420, 88, 0, 0, 1555, 0,
	1558, 0, 0, 0, 0, 204, 0, 0, 0, 1422,
	0, 0, 0, 0, 2424, 0, 0, 0, 0, 0,
	1144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 204, 204, 0, 0, 0,
	2343, 0, 0, 1557, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 1423, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 2439, 1406, 0, 0, 0,
	0, 1037, 0, 0, 0, 0, 0, 0, 1155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 2434, 1428, 1429, 1430, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 1126,
	0, 1144, 1144, 1144, 0, 1144, 0, 1145, 0, 1145,
	1047, 0, 0, 0, 1145, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 0, 0, 0, 1145, 1145,
	0, 0, 0, 0, 1237, 0, 814, 1421, 0, 0,
	0, 1047, 1126, 0, 204, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 1261, 1261, 1261, 1155,
	0, 0, 0, 0, 204, 0, 204, 0, 0, 0,
	1292, 0, 0, 0, 2435, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 206, 206, 0, 1044,
	0, 0, 0, 0, 206, 0, 1422, 0, 0, 0,
	0, 0, 0, 0, 1354, 0, 206, 1047, 0, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 1047, 206, 0, 1047, 1047, 1047, 0,
	0, 0, 0, 206, 2430, 2431, 2432, 0, 0, 0,
	0, 2429, 2427, 2428, 2420, 2421, 2422, 2423, 2425, 2426,
	0, 0, 0, 797, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 1047, 1047, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 0, 1047, 0, 206, 1047, 206, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 1044, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 2418, 2419, 1043, 2436, 2437, 2438, 0,
	0, 0, 0, 0, 1043, 777, 0, 0, 777, 777,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 1398, 1399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 204, 0, 204, 0, 0,
	0, 0, 0, 2433, 1401, 0, 0, 0, 0, 204,
	0, 0, 0, 1948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 797, 0, 0,
	1400, 984, 1564, 0, 0, 0, 0, 0, 1420, 0,
	1470, 1144, 0, 0, 1470, 1572, 1044, 0, 0, 1043,
	0, 0, 0, 0, 0, 0, 0, 1043, 0, 1126,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2424, 0, 1144, 0, 0,
	1144, 1144, 1144, 0, 2336, 1145, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	1423, 1424, 1425, 1426, 0, 0, 0, 0, 972, 0,
	1406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1558, 2439, 0, 0, 0,
	0, 1144, 1144, 0, 0, 0, 0, 0, 0, 0,
	1428, 1429, 1430, 0, 1126, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2434, 1043, 0, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 1145, 1145, 1145, 0,
	1145, 0, 0, 0, 0, 206, 206, 0, 206, 0,
	0, 1421, 0, 0, 0, 1557, 0, 0, 0, 1047,
	206, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 0, 0, 0,
	1043, 0, 0, 0, 0, 0, 0, 1126, 0, 123,
	0, 1043, 0, 0, 204, 59, 1047, 1047, 1047, 0,
	0, 0, 0, 204, 204, 2435, 60, 118, 0, 0,
	0, 0, 206, 0, 0, 0, 1752, 88, 0, 0,
	64, 0, 1427, 1763, 0, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 120, 0, 0, 0,
	1422, 0, 1237, 0, 1782, 0, 1782, 88, 39, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 88, 0, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	76, 0, 0, 121, 0, 0, 0, 0, 41, 86,
	0, 0, 0, 77, 44, 0, 1126, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 88, 0, 88, 0,
	0, 0, 0, 0, 1822, 2430, 2431, 2432, 0, 0,
	45, 0, 2429, 2427, 2428, 2420, 2421, 2422, 2423, 2425,
	2426, 78, 1833, 0, 0, 88, 0, 0, 1839, 0,
	1840, 1047, 1841, 1047, 1842, 0, 1843, 0, 1126, 204,
	0, 0, 0, 0, 0, 0, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0, 1854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 204, 0, 206, 206, 1047, 0, 1047, 1044,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 1144, 1047,
	0, 0, 1047, 204, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 0, 0, 0, 0, 79, 0, 1044,
	0, 0, 0, 0, 46, 0, 0, 0, 0, 0,
	1144, 1144, 1144, 0, 1948, 0, 0, 0, 0, 1047,
	0, 0, 0, 0, 0, 0, 0, 49, 145, 82,
	0, 83, 0, 47, 0, 1470, 0, 122, 0, 1043,
	0, 0, 0, 48, 0, 1047, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 52, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 1145, 0, 178, 0,
	0, 1047, 0, 0, 1044, 0, 0, 0, 0, 0,
	206, 0, 1044, 0, 0, 0, 0, 204, 0, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 1145, 149, 0, 1145, 1145, 1145, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 2104,
	0, 170, 0, 206, 0, 0, 0, 0, 1047, 171,
	0, 0, 0, 0, 972, 1043, 0, 1043, 0, 0,
	0, 0, 972, 972, 0, 0, 972, 0, 0, 0,
	148, 0, 0, 4, 206, 0, 1145, 1145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 0, 0, 0,
	0, 0, 1044, 0, 0, 1044, 0, 0, 0, 0,
	1144, 0, 1043, 0, 1144, 0, 0, 0, 0, 0,
	1401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 1144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1400, 0, 0, 1126,
	0, 206, 1047, 0, 1420, 0, 88, 0, 88, 0,
	0, 1047, 1047, 0, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 1044, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 88, 0, 88, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 1043,
	1047, 0, 1155, 0, 0, 0, 0, 0, 0, 206,
	814, 0, 0, 0, 0, 0, 1423, 1424, 1425, 1426,
	0, 0, 814, 0, 0, 0, 1406, 0, 0, 0,
	0, 0, 2230, 0, 0, 1043, 1763, 0, 0, 0,
	797, 0, 0, 0, 0, 1043, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1428, 1429, 1430, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 2268, 0,
	0, 1261, 0, 1261, 0, 1261, 0, 1155, 1155, 0,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 1044,
	0, 0, 1126, 0, 0, 0, 0, 0, 2304, 0,
	0, 0, 1144, 0, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	2318, 1155, 2320, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1401, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2334, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 1427, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 1126, 1422, 0, 1044, 0,
	0, 0, 0, 1145, 0, 0, 1144, 0, 0, 0,
	0, 0, 0, 0, 0, 1144, 1144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1145, 1145, 1145, 1423, 1424,
	1425, 1426, 0, 88, 0, 0, 0, 0, 1406, 0,
	0, 0, 0, 0, 1043, 1126, 0, 0, 0, 0,
	0, 972, 0, 0, 1044, 0, 1126, 0, 0, 0,
	0, 0, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 1436, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1126,
	1044, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 1422, 0,
	2526, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1145, 0, 1044, 0, 1145,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	2563, 2230, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 1145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2601, 0,
	0, 0, 0, 0, 0, 0, 0, 2608, 0, 0,
	0, 0, 0, 0, 1044, 1437, 0, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 0, 0, 2406, 0,
	0, 0, 2407, 0, 1126, 0, 0, 0, 0, 0,
	1044, 972, 0, 0, 0, 0, 0, 0, 0, 2653,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 2668,
	0, 1155, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 1401, 2674, 0, 1447,
	0, 0, 0, 0, 0, 705, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1145, 0, 0,
	0, 0, 1400, 0, 0, 0, 0, 0, 0, 712,
	1420, 88, 0, 0, 0, 0, 88, 1417, 0, 0,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	1126, 0, 1126, 0, 711, 0, 0, 0, 0, 713,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 719,
	720, 0, 0, 0, 0, 730, 0, 0, 0, 0,
	0, 0, 1423, 1424, 1425, 1426, 0, 0, 737, 714,
	0, 0, 1406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 1145, 0, 0, 0, 735, 0, 0, 1438, 1448,
	1145, 1145, 1428, 1429, 1430, 0, 0, 0, 1126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 715, 0, 0, 0,
	0, 1415, 1416, 709, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 1436, 0, 1126, 716,
	717, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 723, 0, 0, 1126, 0, 0, 0, 718, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 722, 1948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 0, 0, 1427, 0, 0, 0, 0, 2859,
	0, 0, 2862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 2868, 0, 0, 0, 0, 0,
	0, 0, 0, 814, 721, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 732, 0, 1401, 0, 0, 1447, 0, 0, 0,
	0, 727, 0, 0, 0, 0, 2905, 0, 0, 0,
	0, 0, 0, 0, 707, 725, 739, 0, 0, 1400,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	708, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 726, 0, 0, 0, 742, 743,
	0, 0, 0, 0, 740, 0, 0, 0, 88, 1437,
	0, 729, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0,
	731, 0, 1980, 0, 0, 0, 1981, 0, 0, 1423,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 0, 1406,
	0, 0, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1610, 0, 1438, 1448, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1415, 1416,
	1622, 1604, 1611, 1594, 1632, 1631, 0, 0, 1596, 1595,
	0, 0, 0, 1436, 0, 0, 1642, 1643, 0, 3009,
	1421, 0, 0, 0, 0, 0, 0, 0, 2230, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 1633, 0, 1629, 1628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1627, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 1626,
	1624, 1625, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1606, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 0, 1615, 1609, 1617, 1619, 1620, 1621, 1616, 0,
	1614, 0, 0, 0, 0, 0, 0, 0, 0, 1638,
	1639, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1630, 0, 0, 0, 1607, 0, 1608,
	0, 0, 0, 0, 0, 0, 1437, 3139, 0, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0, 0,
	0, 0, 0, 2943, 0, 1623, 0, 0, 3162, 1591,
	1589, 1590, 1593, 1592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1599, 1600, 1602, 1603, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1618,
	1601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1641, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3207, 0, 0, 1597, 0,
	1634, 1635, 1636, 1637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1605, 0,
	0, 0, 0, 1612, 1640, 0, 0, 1041, 0, 0,
	0, 0, 3241, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3254, 214, 215, 216, 217, 218, 1048,
	219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	1057, 226, 227, 228, 229, 230, 231, 1058, 1059, 232,
	458, 459, 460, 1060, 233, 461, 1061, 1046, 1062, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 1063,
	243, 0, 244, 245, 246, 1064, 923, 247, 248, 1065,
	1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252,
	253, 254, 462, 463, 1072, 255, 1073, 257, 256, 1074,
	258, 1075, 1076, 259, 260, 261, 1077, 262, 1078, 263,
	264, 1079, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 1080, 211, 1081, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 1082, 281,
	1083, 1084, 924, 282, 283, 1085, 284, 468, 1086, 469,
	285, 1087, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 1088, 476, 294, 0, 0, 0, 212,
	293, 295, 302, 1089, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 1090, 475, 1091, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 1092, 314, 313, 1093, 315, 477, 930, 316, 317,
	931, 1094, 318, 319, 1095, 1096, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 1097, 213, 933, 1098, 478, 479, 334, 335,
	1099, 336, 337, 338, 1100, 1101, 340, 341, 1102, 1103,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 1104, 351, 482, 352, 483, 353,
	1105, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 1106, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 1107, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 1108, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 1109, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 1110, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 1111,
	419, 420, 418, 1112, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 1113, 488, 489, 490, 491, 1114, 1115,
	428, 429, 492, 430, 493, 1116, 431, 432, 433, 0,
	434, 435, 1117, 1118, 436, 437, 438, 439, 441, 1119,
	442, 1120, 440, 443, 444, 445, 494, 495, 496, 1121,
	447, 446, 497, 1122, 1123, 1124, 1125, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1041, 0, 0, 0,
	0, 0, 0, 2091, 0, 0, 0, 0, 0, 0,
	0, 0, 2092, 214, 215, 216, 217, 218, 1048, 219,
	1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 1057,
	226, 227, 228, 229, 230, 231, 1058, 1059, 232, 458,
	459, 460, 1060, 233, 461, 1061, 1046, 1062, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1063, 243,
	0, 244, 245, 246, 1064, 923, 247, 248, 1065, 1066,
	1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252, 253,
	254, 462, 463, 1072, 255, 1073, 257, 256, 1074, 258,
	1075, 1076, 259, 260, 261, 1077, 262, 1078, 263, 264,
	1079, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 1080, 211, 1081, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 1082, 281, 1083,
	1084, 924, 282, 283, 1085, 284, 468, 1086, 469, 285,
	1087, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 1088, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 1089, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 1090, 475, 1091, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	1092, 314, 313, 1093, 315, 477, 930, 316, 317, 931,
	1094, 318, 319, 1095, 1096, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 1097, 213, 933, 1098, 478, 479, 334, 335, 1099,
	336, 337, 338, 1100, 1101, 340, 341, 1102, 1103, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 1104, 351, 482, 352, 483, 353, 1105,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 1106, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 1107, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 1108, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 1109, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 1110, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 1111, 419,
	420, 418, 1112, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 1113, 488, 489, 490, 491, 1114, 1115, 428,
	429, 492, 430, 493, 1116, 431, 432, 433, 0, 434,
	435, 1117, 1118, 436, 437, 438, 439, 441, 1119, 442,
	1120, 440, 443, 444, 445, 494, 495, 496, 1121, 447,
	446, 497, 1122, 1123, 1124, 1125, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2967, 214, 215, 216, 217, 218, 1048, 219,
	1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 1057,
	226, 227, 228, 229, 230, 231, 1058, 1059, 232, 458,
	459, 460, 1060, 233, 461, 1061, 1046, 1062, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1063, 243,
	0, 244, 245, 246, 1064, 923, 247, 248, 1065, 1066,
	1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252, 253,
	254, 462, 463, 1072, 255, 1073, 257, 256, 1074, 258,
	1075, 1076, 259, 260, 261, 1077, 262, 1078, 263, 264,
	1079, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 1080, 211, 1081, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 1082, 281, 1083,
	1084, 924, 282, 283, 1085, 284, 468, 1086, 469, 285,
	1087, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 1088, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 1089, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 1090, 475, 1091, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	1092, 314, 313, 1093, 315, 477, 930, 316, 317, 931,
	1094, 318, 319, 1095, 1096, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 1097, 213, 933, 1098, 478, 479, 334, 335, 1099,
	336, 337, 338, 1100, 1101, 340, 341, 1102, 1103, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 1104, 351, 482, 352, 483, 353, 1105,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 1106, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 1107, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 1108, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 1109, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 1110, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 1111, 419,
	420, 418, 1112, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 1113, 488, 489, 490, 491, 1114, 1115, 428,
	429, 492, 430, 493, 1116, 431, 432, 433, 0, 434,
	435, 1117, 1118, 436, 437, 438, 439, 441, 1119, 442,
	1120, 440, 443, 444, 445, 494, 495, 496, 1121, 447,
	446, 497, 1122, 1123, 1124, 1125, 448, 449, 498, 450,
	451, 452, 1041, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3072, 0, 214,
	215, 216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052,
	453, 1053, 1054, 1055, 1056, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 1057, 226, 227, 228, 229,
	230, 231, 1058, 1059, 232, 458, 459, 460, 1060, 233,
	461, 1061, 1046, 1062, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1063, 243, 0, 244, 245, 246,
	1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070,
	1071, 249, 250, 251, 252, 253, 254, 462, 463, 1072,
	255, 1073, 257, 256, 1074, 258, 1075, 1076, 259, 260,
	261, 1077, 262, 1078, 263, 264, 1079, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 1080, 211,
	1081, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 1082, 281, 1083, 1084, 924, 282, 283,
	1085, 284, 468, 1086, 469, 285, 1087, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 926, 1088, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 1089, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 1090, 475,
	1091, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 1092, 314, 313, 1093,
	315, 477, 930, 316, 317, 931, 1094, 318, 319, 1095,
	1096, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 1097, 213, 933,
	1098, 478, 479, 334, 335, 1099, 336, 337, 338, 1100,
	1101, 340, 341, 1102, 1103, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 1104,
	351, 482, 352, 483, 353, 1105, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 1106, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1107, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1108, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1109, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 1110, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 1111, 419, 420, 418, 1112, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 1113, 488,
	489, 490, 491, 1114, 1115, 428, 429, 492, 430, 493,
	1116, 431, 432, 433, 0, 434, 435, 1117, 1118, 436,
	437, 438, 439, 441, 1119, 442, 1120, 440, 443, 444,
	445, 494, 495, 496, 1121, 447, 446, 497, 1122, 1123,
	1124, 1125, 448, 449, 498, 450, 451, 452, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2717, 0, 214, 215, 216, 217, 218,
	1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055,
	1056, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 1057, 226, 227, 228, 229, 230, 231, 1058, 1059,
	232, 458, 459, 460, 1060, 233, 461, 1061, 1046, 1062,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1063, 243, 0, 244, 245, 246, 1064, 923, 247, 248,
	1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251,
	252, 253, 254, 462, 463, 1072, 255, 1073, 257, 256,
	1074, 258, 1075, 1076, 259, 260, 261, 1077, 262, 1078,
	263, 264, 1079, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 1080, 211, 1081, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 1082,
	281, 1083, 1084, 924, 282, 283, 1085, 284, 468, 1086,
	469, 285, 1087, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 1088, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 1089, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 1090, 475, 1091, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 1092, 314, 313, 1093, 315, 477, 930, 316,
	317, 931, 1094, 318, 319, 1095, 1096, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 1097, 213, 933, 1098, 478, 479, 334,
	335, 1099, 336, 337, 338, 1100, 1101, 340, 341, 1102,
	1103, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 1104, 351, 482, 352, 483,
	353, 1105, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 1106, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 1107, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 1108, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 1109, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 1110, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	1111, 419, 420, 418, 1112, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 1113, 488, 489, 490, 491, 1114,
	1115, 428, 429, 492, 430, 493, 1116, 431, 432, 433,
	0, 434, 435, 1117, 1118, 436, 437, 438, 439, 441,
	1119, 442, 1120, 440, 443, 444, 445, 494, 495, 496,
	1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448, 449,
	498, 450, 451, 452, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2709,
	0, 214, 215, 216, 217, 218, 1048, 219, 1049, 1050,
	1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 1057, 226, 227,
	228, 229, 230, 231, 1058, 1059, 232, 458, 459, 460,
	1060, 233, 461, 1061, 1046, 1062, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1063, 243, 0, 244,
	245, 246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067,
	1069, 1070, 1071, 249, 250, 251, 252, 253, 254, 462,
	463, 1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076,
	259, 260, 261, 1077, 262, 1078, 263, 264, 1079, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	1080, 211, 1081, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 1082, 281, 1083, 1084, 924,
	282, 283, 1085, 284, 468, 1086, 469, 285, 1087, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 926,
	1088, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	1089, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	1090, 475, 1091, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 1092, 314,
	313, 1093, 315, 477, 930, 316, 317, 931, 1094, 318,
	319, 1095, 1096, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 1097,
	213, 933, 1098, 478, 479, 334, 335, 1099, 336, 337,
	338, 1100, 1101, 340, 341, 1102, 1103, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 1104, 351, 482, 352, 483, 353, 1105, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 1106,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 1107, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 1108, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 1109, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 1110, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 1111, 419, 420, 418,
	1112, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	1113, 488, 489, 490, 491, 1114, 1115, 428, 429, 492,
	430, 493, 1116, 431, 432, 433, 0, 434, 435, 1117,
	1118, 436, 437, 438, 439, 441, 1119, 442, 1120, 440,
	443, 444, 445, 494, 495, 496, 1121, 447, 446, 497,
	1122, 1123, 1124, 1125, 448, 449, 498, 450, 451, 452,
	1041, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2585, 0, 214, 215, 216,
	217, 218, 1048, 219, 1049, 1050, 1051, 1052, 453, 1053,
	1054, 1055, 1056, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 1057, 226, 227, 228, 229, 230, 231,
	1058, 1059, 232, 458, 459, 460, 1060, 233, 461, 1061,
	1046, 1062, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 1063, 243, 0, 244, 245, 246, 1064, 923,
	247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249,
	250, 251, 252, 253, 254, 462, 463, 1072, 255, 1073,
	257, 256, 1074, 258, 1075, 1076, 259, 260, 261, 1077,
	262, 1078, 263, 264, 1079, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 1080, 211, 1081, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 1082, 281, 1083, 1084, 924, 282, 283, 1085, 284,
	468, 1086, 469, 285, 1087, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 926, 1088, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 1089, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 1090, 475, 1091, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 1092, 314, 313, 1093, 315, 477,
	930, 316, 317, 931, 1094, 318, 319, 1095, 1096, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 1097, 213, 933, 1098, 478,
	479, 334, 335, 1099, 336, 337, 338, 1100, 1101, 340,
	341, 1102, 1103, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 1104, 351, 482,
	352, 483, 353, 1105, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 1106, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1107, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1108, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1109,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 1110,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 1111, 419, 420, 418, 1112, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 1113, 488, 489, 490,
	491, 1114, 1115, 428, 429, 492, 430, 493, 1116, 431,
	432, 433, 0, 434, 435, 1117, 1118, 436, 437, 438,
	439, 441, 1119, 442, 1120, 440, 443, 444, 445, 494,
	495, 496, 1121, 447, 446, 497, 1122, 1123, 1124, 1125,
	448, 449, 498, 450, 451, 452, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1993, 0, 214, 215, 216, 217, 218, 1048, 219,
	1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 1057,
	226, 227, 228, 229, 230, 231, 1058, 1059, 232, 458,
	459, 460, 1060, 233, 461, 1061, 1046, 1062, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1063, 243,
	0, 244, 245, 246, 1064, 923, 247, 248, 1065, 1066,
	1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252, 253,
	254, 462, 463, 1072, 255, 1073, 257, 256, 1074, 258,
	1075, 1076, 259, 260, 261, 1077, 262, 1078, 263, 264,
	1079, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 1080, 211, 1081, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 1082, 281, 1083,
	1084, 924, 282, 283, 1085, 284, 468, 1086, 469, 285,
	1087, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 1088, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 1089, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 1090, 475, 1091, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	1092, 314, 313, 1093, 315, 477, 930, 316, 317, 931,
	1094, 318, 319, 1095, 1096, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 1097, 213, 933, 1098, 478, 479, 334, 335, 1099,
	336, 337, 338, 1100, 1101, 340, 341, 1102, 1103, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 1104, 351, 482, 352, 483, 353, 1105,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 1106, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 1107, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 1108, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 1109, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 1110, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 1111, 419,
	420, 418, 1112, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 1113, 488, 489, 490, 491, 1114, 1115, 428,
	429, 492, 430, 493, 1116, 431, 432, 433, 0, 434,
	435, 1117, 1118, 436, 437, 438, 439, 441, 1119, 442,
	1120, 440, 443, 444, 445, 494, 495, 496, 1121, 447,
	446, 497, 1122, 1123, 1124, 1125, 448, 449, 498, 450,
	451, 452, 1149, 0, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1735, 0, 0,
	0, 214, 215, 216, 217, 218, 1048, 219, 1049, 1050,
	1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 1057, 226, 227,
	228, 229, 230, 231, 1058, 1059, 232, 458, 459, 460,
	1060, 233, 461, 1061, 1046, 1062, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1063, 243, 0, 244,
	245, 246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067,
	1069, 1070, 1071, 249, 250, 251, 252, 253, 254, 462,
	463, 1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076,
	259, 260, 261, 1077, 262, 1078, 263, 264, 1079, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	1080, 211, 1081, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 1082, 281, 1083, 1084, 924,
	282, 283, 1085, 284, 468, 1086, 469, 285, 1087, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 926,
	1088, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	1089, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	1090, 475, 1091, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 1092, 314,
	313, 1093, 315, 477, 930, 316, 317, 931, 1094, 318,
	319, 1095, 1096, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 1097,
	213, 933, 1098, 478, 479, 334, 335, 1099, 336, 337,
	338, 1100, 1101, 340, 341, 1102, 1103, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 1104, 351, 482, 352, 483, 353, 1105, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 1106,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 1107, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 1108, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 1109, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 1110, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 1111, 419, 420, 418,
	1112, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	1113, 488, 489, 490, 491, 1114, 1115, 428, 429, 492,
	430, 493, 1116, 431, 432, 433, 0, 434, 435, 1117,
	1118, 436, 437, 438, 439, 441, 1119, 442, 1120, 440,
	443, 444, 445, 494, 495, 496, 1121, 447, 446, 497,
	1122, 1123, 1124, 1125, 448, 449, 498, 450, 451, 452,
	1038, 0, 1041, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052,
	453, 1053, 1054, 1055, 1056, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 1057, 226, 227, 228, 229,
	230, 231, 1058, 1059, 232, 458, 459, 460, 1060, 233,
	461, 1061, 1046, 1062, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1063, 243, 0, 244, 245, 246,
	1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070,
	1071, 249, 250, 251, 252, 253, 254, 462, 463, 1072,
	255, 1073, 257, 256, 1074, 258, 1075, 1076, 259, 260,
	261, 1077, 262, 1078, 263, 264, 1079, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 1080, 211,
	1081, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 1082, 281, 1083, 1084, 924, 282, 283,
	1085, 284, 468, 1086, 469, 285, 1087, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 926, 1088, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 1089, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 1090, 475,
	1091, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 1092, 314, 313, 1093,
	315, 477, 930, 316, 317, 931, 1094, 318, 319, 1095,
	1096, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 1097, 213, 933,
	1098, 478, 479, 334, 335, 1099, 336, 337, 338, 1100,
	1101, 340, 341, 1102, 1103, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 1104,
	351, 482, 352, 483, 353, 1105, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 1106, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1107, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1108, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1109, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 1110, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 1111, 419, 420, 418, 1112, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 1113, 488,
	489, 490, 491, 1114, 1115, 428, 429, 492, 430, 493,
	1116, 431, 432, 433, 0, 434, 435, 1117, 1118, 436,
	437, 438, 439, 441, 1119, 442, 1120, 440, 443, 444,
	445, 494, 495, 496, 1121, 447, 446, 497, 1122, 1123,
	1124, 1125, 448, 449, 498, 450, 451, 452, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055,
	1056, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 1057, 226, 227, 228, 229, 230, 231, 1058, 1059,
	232, 458, 459, 460, 1060, 233, 461, 1061, 1046, 1062,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1063, 243, 0, 244, 245, 246, 1064, 923, 247, 248,
	1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251,
	252, 253, 254, 462, 463, 1072, 255, 1073, 257, 256,
	1074, 258, 1075, 1076, 259, 260, 261, 1077, 262, 1078,
	263, 264, 1079, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 1080, 211, 1081, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 1082,
	281, 1083, 1084, 924, 282, 283, 1085, 284, 468, 1086,
	469, 285, 1087, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 1088, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 1089, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 1090, 475, 1091, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 1092, 314, 313, 1093, 315, 477, 930, 316,
	317, 931, 1094, 318, 319, 1095, 1096, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 1097, 213, 933, 1098, 478, 479, 334,
	335, 1099, 336, 337, 338, 1100, 1101, 340, 341, 1102,
	1103, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 1104, 351, 482, 352, 483,
	353, 1105, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 1106, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 1107, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 1108, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 1109, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 1110, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	1111, 419, 420, 418, 1112, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 1113, 488, 489, 490, 491, 1114,
	1115, 428, 429, 492, 430, 493, 1116, 431, 432, 433,
	0, 434, 435, 1117, 1118, 436, 437, 438, 439, 441,
	1119, 442, 1120, 440, 443, 444, 445, 494, 495, 496,
	1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448, 449,
	498, 450, 451, 452, 1969, 0, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 1966, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	1967, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 1965, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 1968, 0, 0,
	0, 0, 0, 0, 835, 1964, 0, 0, 0, 798,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 176,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 178, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	1286, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	170, 448, 449, 498, 450, 451, 452, 809, 171, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 865, 822, 823, 824, 820, 821, 834, 1475,
	1473, 0, 0, 0, 0, 833, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	176, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 178, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 1286, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 170, 448, 449, 498, 450, 451, 452, 809, 171,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 865, 822, 823, 824, 820, 821, 834,
	1475, 2356, 0, 0, 0, 0, 833, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 454,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 176, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 178,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 428, 429, 945, 430,
	946, 829, 431, 432, 433, 0, 434, 435, 0, 812,
	436, 437, 438, 439, 441, 912, 442, 0, 860, 443,
	444, 445, 1286, 892, 939, 0, 447, 446, 497, 0,
	0, 0, 170, 448, 449, 498, 450, 451, 452, 809,
	171, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 865, 822, 823, 824, 820, 821,
	834, 1475, 1473, 0, 0, 0, 0, 833, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 2053, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 2058, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 2054, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 2055, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 801, 833, 865,
	822, 823, 824, 820, 821, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 813, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 434, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	865, 822, 823, 824, 820, 821, 834, 835, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 813, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 865, 822, 823, 824, 820, 821, 834, 835, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 2879, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 1535, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 833, 865, 822, 823, 824,
	820, 821, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 2696, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 865, 822, 823,
	824, 820, 821, 834, 835, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 1883,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	1882, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 865, 822,
	823, 824, 820, 821, 834, 835, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 454, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 434, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 809, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 1535,
	0, 0, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 0, 833, 865, 822, 823, 824, 820, 821, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 454,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 2058, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 428, 429, 945, 430,
	946, 829, 431, 432, 433, 0, 434, 435, 0, 812,
	436, 437, 438, 439, 441, 912, 442, 0, 860, 443,
	444, 445, 494, 892, 939, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 809,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 865, 822, 823, 824, 820, 821,
	834, 835, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 0, 0, 0, 0, 0,
	0, 0, 835, 1473, 0, 0, 0, 2063, 833, 865,
	822, 823, 824, 820, 821, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 434, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 2061, 833, 865, 822, 823, 824, 820, 821,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 2049, 833, 865,
	822, 823, 824, 820, 821, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 434, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 2038, 833, 865, 822, 823, 824, 820, 821,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 2036, 833, 2028,
	822, 823, 824, 820, 821, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 2031, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 2032, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 2033, 2030, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 2034, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 434, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 2029, 452, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 2025, 833, 2028, 822, 823, 824, 820, 821,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 2031, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 2032, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 2033,
	2030, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 2034, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 2029, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 865, 822, 823, 824, 820,
	821, 834, 835, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 0, 0, 0, 0,
	0, 1481, 0, 835, 0, 0, 0, 0, 0, 833,
	865, 822, 823, 824, 820, 821, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 1870, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 1176, 833, 865, 822, 823, 824, 820,
	821, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 1175, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 1170, 833,
	865, 822, 823, 824, 820, 821, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1169, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 809, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 1165, 833, 865, 822, 823, 824, 820,
	821, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 865, 822, 823, 824,
	820, 821, 834, 835, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 865, 822, 823,
	824, 820, 821, 834, 835, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 3276, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	3275, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 865, 822,
	823, 824, 820, 821, 834, 835, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 3274, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 3276,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 3275, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 809, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 865,
	822, 823, 824, 820, 821, 834, 835, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 0, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 2046, 0, 0, 0, 0, 2044, 2045,
	865, 822, 823, 824, 820, 821, 834, 835, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 0, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 3276, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 0, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	0, 0, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 0, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 0, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 3275, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 494,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	798, 0, 986, 0, 0, 0, 0, 0, 0, 805,
	806, 0, 0, 0, 0, 0, 0, 0, 835, 214,
	215, 216, 217, 218, 833, 219, 0, 0, 0, 0,
	914, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 913, 232, 458, 459, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 973, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 213, 933,
	0, 918, 479, 334, 335, 0, 336, 337, 338, 0,
	978, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	980, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	176, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 944, 0, 419, 420, 418, 178, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 945, 430, 946,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 912, 442, 0, 440, 443, 444,
	445, 1286, 495, 496, 0, 447, 446, 497, 986, 0,
	0, 170, 448, 449, 498, 450, 451, 452, 0, 171,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 0, 970, 0,
	1560, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 913,
	232, 458, 459, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 973, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 213, 933, 0, 918, 479, 334,
	335, 0, 336, 337, 338, 0, 978, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 980, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 176, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 944,
	0, 419, 420, 418, 178, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 945, 430, 946, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	912, 442, 0, 440, 443, 444, 445, 1286, 495, 496,
	0, 447, 446, 497, 0, 0, 0, 170, 448, 449,
	498, 450, 451, 452, 0, 171, 0, 0, 2463, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 1560, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 913, 232, 458, 459, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 973, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 213, 933, 0, 918,
	479, 334, 335, 0, 336, 337, 338, 0, 978, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 980, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 944, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 945, 430, 946, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 912, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 969, 0, 986,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 970, 914, 975, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	913, 232, 458, 459, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 973, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 213, 933, 0, 918, 479,
	334, 335, 0, 336, 337, 338, 0, 978, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 980, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 945, 430, 946, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 912, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 986, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 0, 970, 0, 975, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 913, 232, 458, 459,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 973,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 213, 933, 0, 918, 479, 334, 335, 0, 336,
	337, 338, 0, 978, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 485, 980, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	945, 430, 946, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 912, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 986, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	0, 970, 0, 975, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 913, 232, 458, 459, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 213, 933, 0,
	918, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 485, 980,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 945, 430, 946, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 912, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 798, 0, 1142,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 1462,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 1046,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 926, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 0, 933, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 176, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 178, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 1286, 495,
	496, 0, 447, 446, 497, 1283, 0, 1142, 170, 448,
	449, 498, 450, 451, 452, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 148, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 1046, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 0, 933, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 176, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 178, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 1286, 495, 496, 0,
	447, 446, 497, 0, 0, 0, 170, 448, 449, 498,
	450, 451, 452, 0, 171, 0, 0, 0, 0, 1142,
	1141, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 1046,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 926, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 0, 933, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 1142, 1141, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 2648, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 1046, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	926, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 0, 933, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 986, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	0, 0, 0, 1290, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 913, 232, 458, 459, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 0, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 294,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 927, 928, 304, 305, 306, 929, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 932, 330, 331, 333, 332, 0, 213, 933, 0,
	918, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 945, 430, 946, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 912, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 798, 0, 208,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 176, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 178, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 1286, 495,
	496, 0, 447, 446, 497, 208, 0, 0, 170, 448,
	449, 498, 450, 451, 452, 0, 171, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 148, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 208, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 453,
	0, 0, 0, 1565, 220, 221, 222, 454, 455, 223,
	456, 224, 225, 457, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 458, 459, 460, 0, 233, 461,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 462, 463, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 464, 265, 266, 268,
	271, 267, 272, 273, 274, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 467, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 468, 0, 469, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 470, 471, 472, 0, 0, 476, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	473, 298, 297, 299, 300, 301, 474, 0, 475, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	477, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 329,
	327, 0, 330, 331, 333, 332, 0, 0, 0, 0,
	478, 479, 334, 335, 0, 336, 337, 338, 0, 0,
	340, 341, 0, 0, 342, 480, 0, 343, 0, 481,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 208, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 2264,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 675, 0, 567, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 2720, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 573, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 213, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 572, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 566, 0, 567, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 576, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 573, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	572, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 567, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 576, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 573, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 1837,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 572, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 567, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 576, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 573,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 572, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 576,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1311, 0, 1142, 1141,
	0, 0, 0, 0, 1139, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 1046, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 1310, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 0, 933, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 1309, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 1281, 0, 1142, 1141, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 1046, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1280, 471,
	472, 926, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 0, 933, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 1277, 0, 1142, 1141, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 1046, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1276, 471, 472, 926,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 0,
	0, 933, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	1215, 0, 1142, 1141, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 1046, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1214, 471, 472, 926, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 0, 933,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 1212, 0,
	1142, 1141, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	1046, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1211, 471, 472, 926, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 0, 933, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1135, 0, 1142, 1141,
	0, 0, 0, 0, 1139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 1046, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1137, 471, 472, 926, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 0, 933, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 1142, 1141, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 1046, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 926,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 0,
	0, 933, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1142, 1141, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	1046, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 926, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 0, 933, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 1142, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 1046, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 926, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 0, 933,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	2158, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 2155, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 2299, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 2161, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 2296, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 2298, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 2295, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 2160, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	2297, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 2158, 233, 461, 0, 0, 2152, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 2155, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 2161,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 2151, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 2160,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 2159, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1356, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 1359, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	1357, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 1358, 446, 497,
	1130, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1132, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	978, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1127, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1129, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 978, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1034, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1036, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 978, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 529, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 528, 218, 518, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 521, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 522, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 523, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 517, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 518, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 521, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 522, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 523, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 978, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 2229, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1823, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	1762, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1756, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1755, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1751, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1753, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1270, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1269, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1267, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1266, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1264, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1263, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1260, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1259, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1235, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1152, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1154, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	521, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	522, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	523, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 667, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 666, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 506, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	505, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	504, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	2096, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 208, 2286, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 2841, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 208, 2286, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 2283, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 1829, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1821, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	549, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 1014, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 550, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 546, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 545,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1774, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1773, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 549, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 539, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 550, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 546, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 1289, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 545, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1274, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1273, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1223, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1222, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1207, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1146, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 549, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 1014, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 550, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 546, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 545, 489, 490, 491, 0,
	0, 428, 1015, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 997, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 549, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 539, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 537, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 538, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 550, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 540, 381, 0, 382, 386,
	387, 546, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 541, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 545, 489, 490, 491, 0,
	0, 428, 543, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 533, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 534, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 531, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	525, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 501, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 2545, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 2543, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	2532, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 2246, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 534, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 1786, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 0, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1243, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1185, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 952, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 0, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 0, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 0, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	0, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1401, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 1401,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1423, 1424, 1425, 1426, 0, 1400, 0, 0, 0, 0,
	1406, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 1448, 0, 0,
	1428, 1429, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 0, 0, 0, 1423, 1424, 1425, 1426, 0,
	0, 0, 0, 0, 1436, 1406, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 1427, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	1439, 0, 0, 0, 0, 1401, 0, 1437, 1447, 0,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0,
	0, 1400, 0, 0, 2692, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414,
	1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 1423, 1424, 1425, 1426, 0, 1400, 0, 0, 2409,
	0, 1406, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 1423, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 1436, 1406, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 1427, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 1439, 0, 0, 0, 0, 1401, 0, 1437, 1447,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	0, 0, 1400, 0, 0, 2408, 0, 0, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 1398, 1399, 0, 1431, 1432,
	1433, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418,
	1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 1423, 1424, 1425, 1426, 0, 1400, 0, 0,
	2405, 0, 1406, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 1448,
	0, 0, 1428, 1429, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 0, 0, 0, 1423, 1424, 1425,
	1426, 0, 0, 0, 0, 0, 1436, 1406, 0, 0,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 1427, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 1439, 0, 0, 0, 0, 1401, 0, 1437,
	1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0,
	0, 0, 0, 1400, 0, 0, 2404, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419,
	1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 1423, 1424, 1425, 1426, 0, 1400, 0,
	0, 2403, 0, 1406, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	1448, 0, 0, 1428, 1429, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 1415, 1416, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 1436, 1406, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 1427, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 1439, 0, 0, 0, 0, 1401, 0,
	1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0,
	0, 0, 0, 0, 1400, 0, 0, 1981, 0, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426, 3236, 1400,
	0, 0, 0, 0, 1406, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 0, 0, 0, 1423,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 1436, 1406,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 1438, 1448, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 1427, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 1439, 0, 0, 0, 0, 1401,
	0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	0, 0, 0, 0, 3232, 1400, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1401, 0, 1437, 1447, 0, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426, 3167,
	1400, 0, 0, 0, 0, 1406, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	1423, 1424, 1425, 1426, 0, 0, 0, 0, 0, 1436,
	1406, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 1438, 1448, 0, 0,
	1428, 1429, 1430, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 1427, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 1439, 0, 0, 0, 0,
	1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414,
	1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 0, 0, 0, 0, 3166, 1400, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 1401, 0, 1437, 1447, 0,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 1423, 1424, 1425, 1426,
	3075, 1400, 0, 0, 0, 0, 1406, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 0, 0,
	0, 1423, 1424, 1425, 1426, 0, 0, 0, 0, 0,
	1436, 1406, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 1427, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 1398, 1399, 0, 1431, 1432,
	1433, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 1439, 0, 0, 0,
	0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418,
	1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 0, 0, 0, 0, 2992, 1400, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 1401, 0, 1437, 1447,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 1423, 1424, 1425,
	1426, 2948, 1400, 0, 0, 0, 0, 1406, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 0,
	0, 0, 1423, 1424, 1425, 1426, 0, 0, 0, 0,
	0, 1436, 1406, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 1438, 1448,
	0, 0, 1428, 1429, 1430, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 1427,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 1439, 0, 0,
	0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413, 1419,
	1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 0, 0, 0, 0, 2947, 1400, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 1401, 0, 1437,
	1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 1423, 1424,
	1425, 1426, 2946, 1400, 0, 0, 0, 0, 1406, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 1423, 1424, 1425, 1426, 0, 0, 0,
	0, 0, 1436, 1406, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 1438,
	1448, 0, 0, 1428, 1429, 1430, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 1415, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	1427, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1398, 1399, 0,
	1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 1439, 0,
	0, 0, 0, 1401, 0, 1437, 1447, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 0, 0, 2912, 1400,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1401, 0,
	1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0,
	1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 1423,
	1424, 1425, 1426, 2727, 1400, 0, 0, 0, 0, 1406,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1448, 0, 0, 1428,
	1429, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 0, 0, 0, 1423, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 1436, 1406, 3322, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 1427, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 1439,
	0, 0, 2331, 0, 1401, 0, 1437, 1447, 0, 1412,
	1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402,
	1403, 1404, 1405, 1407, 1408, 0, 0, 2360, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 2332, 0, 0, 0, 0, 0, 1401,
	0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	1423, 1424, 1425, 1426, 0, 1400, 0, 0, 0, 0,
	1406, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 1448, 0, 0,
	1428, 1429, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 0, 0, 0, 1423, 1424, 1425, 1426, 0,
	0, 0, 0, 0, 1436, 1406, 0, 2448, 0, 0,
	2447, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 1427, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2071, 0, 0, 1422, 0, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	1439, 0, 2070, 0, 0, 1401, 0, 1437, 1447, 0,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0,
	0, 1400, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 1431, 1432, 1433,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	1401, 0, 1437, 1447, 0, 1412, 1413, 1419, 1418, 1414,
	1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 1423, 1424, 1425, 1426, 0, 1400, 0, 0, 0,
	0, 1406, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 1448, 0,
	0, 1428, 1429, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 1423, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 1436, 1406, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 1438, 1448, 0, 0, 1428, 1429, 1430, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 1427, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 795,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	1398, 1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 1439, 0, 0, 0, 0, 1401, 0, 1437, 1447,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	0, 0, 1400, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 1412, 1413, 1419, 1418,
	1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405,
	1407, 1408, 1423, 1424, 1425, 1426, 0, 0, 0, 0,
	0, 0, 1406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 1438, 1448,
	0, 0, 1428, 1429, 1430, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1401, 0, 0, 1447, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 1436, 0, 1420, 0,
	0, 0, 0, 1421, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1423, 1424, 1425, 1426, 0, 0, 0, 0, 0, 0,
	1406, 0, 0, 0, 1427, 2454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 1438, 1448, 0, 0,
	1428, 1429, 1430, 0, 0, 1398, 1399, 0, 1431, 1432,
	1433, 1441, 1442, 1443, 0, 0, 0, 1439, 0, 0,
	0, 1444, 1445, 0, 1434, 0, 0, 0, 2449, 1415,
	1416, 1401, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 2715,
	0, 1421, 0, 0, 0, 0, 0, 1400, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 1446, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411,
	1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 1423, 1424, 1425,
	1426, 0, 0, 0, 0, 0, 0, 1406, 0, 0,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441, 1442,
	1443, 0, 0, 1438, 1448, 1439, 0, 1428, 1429, 1430,
	0, 1434, 0, 0, 0, 0, 0, 0, 1401, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 0,
	0, 0, 0, 0, 1400, 0, 0, 0, 0, 0,
	0, 1436, 1420, 0, 0, 0, 0, 0, 1421, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 1435,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0,
	0, 0, 0, 0, 1423, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 0, 1406, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	1438, 1448, 0, 0, 1428, 1429, 1430, 0, 0, 1398,
	1399, 0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0,
	0, 0, 1439, 0, 0, 1444, 1445, 0, 1434, 0,
	0, 0, 2402, 1415, 1416, 1401, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 1400, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1446, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2416, 0, 1437, 0, 0, 1412, 1413, 1419,
	1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 0, 0, 0, 1427, 0, 0, 0,
	0, 1423, 1424, 1425, 1426, 0, 0, 0, 0, 0,
	0, 1406, 0, 0, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 1431,
	1432, 1433, 1441, 1442, 1443, 0, 0, 1438, 1448, 1439,
	0, 1428, 1429, 1430, 0, 1434, 0, 0, 0, 0,
	0, 0, 1401, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 0, 0, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 1436, 1420, 0, 0, 0,
	0, 0, 1421, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 1435, 1412, 1413, 1419, 1418, 1414, 1440,
	0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407, 1408,
	0, 0, 0, 0, 0, 0, 0, 0, 1423, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 0, 1406, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 1438, 1448, 0, 0, 1428, 1429,
	1430, 0, 0, 1398, 1399, 0, 1431, 1432, 1433, 1441,
	1442, 1443, 0, 0, 0, 0, 1439, 0, 0, 1444,
	1445, 0, 1434, 0, 0, 0, 0, 1415, 1416, 1401,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 1400, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 1446, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409,
	1410, 1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0,
	1427, 0, 0, 0, 0, 1423, 1424, 1425, 1426, 0,
	0, 0, 0, 0, 0, 1406, 0, 0, 1422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 1431, 1432, 1433, 1441, 1442, 1443, 0, 0, 0,
	0, 1438, 1448, 1439, 0, 1428, 1429, 1430, 0, 0,
	0, 0, 0, 0, 1401, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 0, 1420, 1436,
	0, 0, 0, 0, 0, 1417, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 1412, 1413,
	1419, 1418, 1414, 1440, 0, 1411, 1409, 1410, 1402, 1403,
	1404, 1405, 1407, 1408, 0, 0, 0, 0, 0, 0,
	1423, 1424, 1425, 1426, 0, 0, 0, 0, 0, 0,
	1406, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 1438, 1448, 0, 0,
	1428, 1429, 1430, 0, 0, 1398, 1399, 0, 1431, 1432,
	1433, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1439, 1444, 1445, 0, 0, 0, 0, 0, 0, 1415,
	1416, 1401, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 1400, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 1446, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 1437, 0, 0, 1412, 1413, 1419, 1418, 1414,
	1440, 0, 1411, 1409, 1410, 1402, 1403, 1404, 1405, 1407,
	1408, 0, 1427, 0, 0, 0, 0, 1423, 1424, 1425,
	1426, 593, 612, 0, 0, 0, 0, 1406, 0, 0,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 594, 0, 0, 595, 0, 0, 0, 0,
	0, 0, 0, 1438, 1448, 1439, 0, 1428, 1429, 1430,
	0, 618, 0, 0, 0, 0, 0, 596, 0, 0,
	0, 0, 0, 0, 0, 0, 616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 0, 598, 0, 0, 599, 622, 0, 0,
	0, 625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	1412, 1413, 1419, 1418, 1414, 1440, 0, 1411, 1409, 1410,
	1402, 1403, 1404, 1405, 1407, 1408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 621, 0, 0, 0,
	0, 0, 602, 0, 0, 0, 0, 1422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 1439, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 1412, 1413, 1419,
	1418, 1414, 1440, 611, 1411, 1409, 1410, 1402, 1403, 1404,
	1405, 1407, 1408, 0, 0, 607, 0, 0, 620, 0,
	619, 0, 0, 0, 0, 608, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 0, 0, 0,
	0, 615, 0, 0, 0, 0, 626, 0, 623, 0,
	0, 0, 613,
}
var sqlPact = [...]int{

	6768, -1000, -8, -1000, -1000, -1000, -1000, -1000, 230, 229,
	223, 219, 217, 206, 205, 201, 200, -1000, -1000, -1000,
	199, -1000, -1000, 196, -1000, 192, 188, 187, 168, -1000,
	166, 163, -1000, -1000, -1000, -1000, 158, 157, 149, 46106,
	1591, 55456, 47324, 1466, 2081, 40820, 55048, 40412, 54640, 54232,
	148, -1000, 53824, 146, 145, 143, -1000, -1000, 140, 1263,
	32630, 139, 136, 135, 1762, 132, 127, -1000, 126, -1000,
	66196, 1227, -1000, 112, 106, -1000, 3991, 484, 46916, 2080,
	105, 102, 32221, 2063, -1000, -1000, 1222, -1000, -1000, 101,
	94, 92, 85, 82, 79, 76, 75, 74, -1000, 70,
	65, 64, 63, 62, 59, 55, 54, 52, 50, 48,
	47, 46, 45, 44, 43, -1000, 7953, 1439, 1333, 1332,
	1307, 1302, 1306, 836, 38, 37, 35, 34, 30, 26,
	-1000, -1000, 24, 23, 22, 21, -1000, 20, 19, 412,
	13, 11, 8, 5, 3, 1910, 2039, 1204, 784, 15575,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	59476, 55858, 2, -35, -3, -1000, 2348, 872, 27315, 6768,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	473, -1000, -1000, -1000, 315, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1426,
	654, -1000, -1000, -1000, 53416, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 55858, -1000, 1588, -19, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 653, -1000, 1578, 191, 1490, -1000,
	-1000, -1000, -1000, -1000, 55858, -1000, -1000, 2622, 2620, 1517,
	652, 53014, -1000, 1768, -1000, 790, 16006, -1000, 1005, -1000,
	16006, 311, -1000, -1000, -1000, -1000, -1000, 40004, 12558, 39596,
	39188, 36344, 52606, 12140, 45704, 1029, -1000, -1000, -1000, -1000,
	-1000, -10, 33836, 55858, -1000, 302, -1000, -1000, -1000, -1000,
	-1000, -1000, 23501, 775, 23056, 504, 22611, 312, -1000, -1000,
	-1000, -1000, 2619, 2618, 922, 2617, 2284, 59074, 1368, 2616,
	1269, 1009, 853, 2615, 2611, 2607, 2604, 2603, 2596, 2592,
	1188, 52198, 2072, 35926, 35508, 46106, 46106, 1892, 51790, -1000,
	-1000, 1076, 1065, -1000, -1000, -1000, -1000, 2179, 2074, 2067,
	45296, -1000, -1000, 2591, 2590, 2589, 2588, 2587, 58672, 1367,
	2586, 1814, 2585, 2583, 2582, 2581, 2580, 2579, 2578, 2577,
	2575, -1000, 44888, 44480, 44072, 43664, 51382, 35090, 34672, -1000,
	-1000, -1000, 28943, 5248, 50974, 29781, 46106, -1000, -1000, 23932,
	113, -1000, -1000, -1000, 2032, -1000, 23932, 113, -1000, 1422,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2013, 1266, 2463,
	34254, 1540, 1116, 2172, 2572, 1769, 2155, 2144, 2143, 2138,
	2136, 2568, 1253, 2567, 1275, 2566, 1238, 2135, 2479, 1554,
	38780, 2565, 2559, 2323, 2105, 2031, -1000, -1000, -1000, -1000,
	1196, -1000, -1000, -1000, 41222, -1000, -1000, 1584, -1000, -1000,
	1584, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1028, 57868,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1181, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1896, -1000, 1511, -1000, -1000, 2558,
	2039, 1722, 2321, 2321, 2321, 2362, 458, 450, -1000, 412,
	-1000, -1000, 65635, -1000, -1000, 23932, 23932, 23932, 23932, 23932,
	1452, -1000, 651, -1000, -1000, 687, -1000, 649, 603, -1000,
	-1000, -1000, -1000, -1000, -1000, 648, 2485, -1000, 895, -1000,
	-1000, -1000, -1000, 2429, -1000, 14699, -1000, -1000, -1000, 390,
	647, 23932, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 296, 802,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 588, 1369, 585, 585, 585, -1000,
	-1000, 850, -1000, -1000, -1000, 361, 584, 305, 583, -1000,
	-1000, -1000, -1000, 2070, 645, 643, -1000, 642, 640, 639,
	-1000, -1000, -1000, 637, 636, 631, 630, 629, 626, 625,
	624, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 849, -1000,
	623, 622, 620, 616, 613, 611, 608, 607, 606, -1000,
	-1000, -11, 55858, -1000, 473, -11, -1000, -1000, 605, -1000,
	17744, 17744, 17744, -1000, -1000, 1572, 23932, -1000, 1799, -1000,
	3732, -232, 774, 28127, -1000, 26484, 774, 694, 31001, -1000,
	2028, -1000, -1000, 604, 285, -1000, -1000, -1000, 2027, 55858,
	12974, 46106, 46106, -1000, -1000, 23932, -1000, -1000, 36760, 33434,
	55858, 46508, 2396, 8389, 33434, 55858, 2066, -1000, -1000, -1000,
	55858, -1000, 23932, -1000, 2392, 1687, -27, -1000, -1000, -1000,
	-1000, -1000, 1802, 1793, 966, 1289, -1000, 16006, 2275, -1000,
	-1000, -1000, 284, 12974, -1000, 1365, 2225, 1058, -1000, 1626,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1335, 2224,
	-1000, 1363, 2222, 1318, -1000, -1000, 822, 2219, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1559, -1000, -1000,
	2306, -1000, -1000, 1634, 2217, -142, 36760, 33836, -18, -1000,
	-1000, -48, -1000, 11722, 65635, -1000, -1000, -1000, 65635, 780,
	-1000, -1000, 2216, -1000, 65635, 777, -1000, -1000, 2194, -1000,
	-1000, -1000, 2556, -1000, 2555, 1734, 2554, 2552, 2551, -1000,
	1296, 1386, 2550, -1000, 2549, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43256, 42848, 852, -1000, 1569, -1000, -1000, 42440,
	817, 1729, -1000, -1000, 1724, -1000, 861, -1000, 2546, 50566,
	1912, 817, 1716, -1000, -1000, -1000, -1000, -1000, 46106, -1000,
	46106, -1000, 46106, -1000, 1190, -1000, 58270, -232, -1000, -1000,
	-1000, -1000, -1000, 2192, 2544, 2542, 2541, -1000, 55858, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 153, 2191,
	-1000, -1000, 153, 2190, -1000, 153, 2188, -1000, 152, 2180,
	-1000, -1000, 1595, 2175, -1000, -126, 2171, -1000, -1000, -126,
	2168, -1000, -32, -1000, -1000, -1000, 872, -1000, 28535, 50158,
	36760, 811, 656, 65635, -1000, 36760, 65635, -1000, -1000, 49750,
	42038, -1000, -1000, 1119, 1834, -1000, -1000, -1000, -1000, 36760,
	36760, -1000, 49342, -1000, -1000, -1000, 1488, 2324, 46106, -1000,
	-1000, 2058, -1000, 33032, 46106, -1000, 46106, -1000, 46106, -1000,
	46106, -1000, 46106, -1000, -1000, -1000, -1000, -1000, 2185, 1338,
	1305, -1000, 55858, -1000, -1000, 2332, 55858, -1000, -1000, -1000,
	1796, -1000, -1000, -1000, -1000, 46106, -1000, -1000, -1000, -1000,
	-1000, -1000, 2050, -1000, 1257, -1000, 1110, -1000, -1000, 159,
	-1000, -1000, -27, -1000, 57868, -1000, -1000, 2039, 1722, -1000,
	55858, -1000, -1000, -1000, 2039, 1504, 1852, 22166, 1838, 23932,
	412, -1000, -1000, 412, 412, 17313, -1000, -1000, 8389, 8389,
	12974, 1039, 23932, 23932, 23932, 23932, 23932, 23932, 23932, 23932,
	23932, 23932, 23932, 23932, 23932, 23932, 23932, 23932, 23932, 23932,
	23932, 23932, 23932, 23932, 23932, 23932, 23932, 23932, 23932, 23932,
	23932, 23932, 23932, 23932, 23932, 23932, 23932, 1797, 23932, 1025,
	23932, 23932, 23932, 23932, 1374, -1000, -1000, 1471, 491, 1500,
	-1000, 2437, 2437, 2437, 65947, 65947, 544, 2540, 687, -1000,
	23932, -1000, 113, 23932, 13392, -1000, 2471, 1155, -1000, -1000,
	450, 7909, 1658, -1000, 447, 13837, -1000, -1000, -1000, 14699,
	603, 21721, 23932, 835, 65635, 11306, 2082, 1951, -1000, 2470,
	-1000, -1000, 2429, -1000, -1000, -1000, -1000, 2467, 1037, 1036,
	2466, -1000, 2464, 2461, 602, 756, 742, 740, 739, 595,
	23932, 23932, 23932, 23932, 23932, 23932, 23932, 23932, -1000, 21290,
	20845, 20400, 25225, 19955, 23932, 15130, 19510, 19065, 55858, -11,
	2391, 23932, 189, -1000, 64478, -1000, 189, 189, 601, -38,
	65635, 1842, 1837, 27721, 1789, 1460, 1460, 1460, -1000, 598,
	670, 774, 8793, 47726, 1468, 774, 774, 280, 300, 446,
	26078, 1799, 47726, -1000, -1000, 46106, 594, 13392, 12974, 1134,
	-39, 275, 1848, 1843, -1000, -41, 811, 1021, -24, -1000,
	4358, -46, -1000, 1075, -1000, -1000, -1000, -1000, 431, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 847, 593, 591, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 588, 1369, 585, 585,
	585, -1000, -1000, -1000, 361, 584, 305, 583, -1000, -1000,
	-1000, -1000, -1000, -1000, 2025, -48, 46508, 755, -49, 927,
	-27, -1000, 1584, -1000, 1337, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2483, -1000,
	2442, -1000, -1000, 2456, -13, -1000, -1000, 12974, -1000, -28,
	1383, -1000, 38372, 2329, 2302, 2299, 1180, -1000, 1138, 2359,
	41222, 2379, 227, -1000, 2021, -1000, -1000, 789, 1105, 1016,
	41222, 1363, -1000, 8389, -1000, 1914, 2358, 1125, 1173, 1125,
	1125, 1148, -1000, 41222, 1014, 1406, 36760, -1000, 1012, -1000,
	-29, 2374, 81, -1000, 2014, 998, -1000, -1000, 46106, 12974,
	764, -18, 33836, 55858, 269, -1000, 23932, 113, 23932, 113,
	-1000, -1000, 2166, -1000, -1000, -1000, 2539, 1315, 1812, -1000,
	-1000, -1000, 582, 1704, 1363, 1688, -1000, -1000, 41630, 55858,
	1853, -23, 46106, -1000, -1000, 1403, -1000, 2161, 2151, 519,
	2537, -1000, 1564, 1685, -1000, -1000, -1000, 57466, 1050, 2132,
	828, 165, 2389, 165, 31407, -1000, 55858, -1000, 55858, -1000,
	-1000, -1000, 2535, -1000, 46106, -1000, -1000, 46106, -1000, 46106,
	-1000, 46106, -1000, 46106, 46106, -1000, 55858, 36760, 36760, 36760,
	4358, 37568, -60, 445, -1000, 48940, 55858, 882, 37970, -202,
	764, -1000, 764, -1000, 46106, 2047, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 55858, -1000, 55858, -1000, -1000,
	-1000, -1000, -1000, -1000, 1201, -1000, 2046, -1000, 2043, -1000,
	33, -1000, -1000, -1000, -1000, 1646, 46106, 46106, 46106, -1000,
	41222, -1000, -1000, 2039, -1000, -1000, -1000, -1000, -1000, 65635,
	-1000, 449, -1000, -1000, 65635, 1233, 1887, -1000, 1887, -22,
	-1000, 64097, 1828, 46106, -1000, -1000, -1000, -1000, -1000, 787,
	433, 433, 1020, 1020, 1020, 1020, 2390, 358, 1017, 738,
	190, 190, 190, 190, 190, 190, 190, 190, 685, 506,
	506, 685, 685, 685, 685, 685, 506, 506, 506, 190,
	190, 190, 65947, 65802, 6527, 23932, 23932, 994, 1470, 491,
	6023, 23932, 7223, 7223, 7223, 7223, -1000, 1358, -1000, -1000,
	-1000, -1000, 2011, 580, 25225, 25225, -1000, -1000, -1000, -1000,
	14268, 23932, -1000, -1000, -1000, -1000, 18620, -1000, -1000, 63716,
	-251, 443, -211, -7, -1000, 23932, 23932, 23932, 442, -1000,
	441, -1000, -1000, 991, -1000, 990, 986, 984, -1000, 579,
	268, 23932, 55858, -1000, 61430, 669, -86, -1000, -61, 1130,
	-1000, 23932, 264, -1000, 1458, 578, 577, 437, -62, 435,
	783, 782, 434, 432, 429, 23932, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 65488, 61124, 61049, 60743,
	7445, 60668, 60362, -63, 423, -1000, 2003, -211, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 422, -1000, 420, -1000, 65321,
	-211, 418, 3435, -1000, 25225, 25225, 25225, -1000, 414, -1000,
	64172, -1000, 65174, 18189, 18189, 18189, 413, 65007, 23932, -211,
	-68, -1000, -69, -1000, -1000, 575, -70, 828, 17744, 26906,
	12974, -1000, 828, 828, 23932, -1000, 23932, 27721, 27721, 1652,
	1836, 27721, -1000, -1000, -1000, -1000, 47726, 455, 774, 47726,
	-1000, 2429, 1829, -1000, -1000, -1000, 55858, 473, -1000, 47726,
	47726, 12974, 774, -1000, 410, 30187, -7, 261, -1000, -1000,
	12974, 1902, 1902, -1000, 2002, 55858, 2407, -1000, -1000, 8389,
	-1000, 673, 1001, -1000, 2454, 566, -1000, 2429, 2429, 55858,
	142, 16006, -1000, 1584, -1000, -1000, 1216, -1000, 1361, -1000,
	-1000, -1000, -1000, 16006, -1000, 1440, 46106, 55858, 55858, -1000,
	-1000, 1682, 57064, 1677, 8389, 55858, -1000, -1000, 565, 555,
	1825, 1823, 55858, 55858, 56662, 56260, 55858, 1411, 23932, 1505,
	1345, 113, -1000, 113, 554, 1024, 46106, 46106, 1313, -1000,
	-1000, -1000, -1000, -1000, 46106, -1000, -1000, 2449, -1000, 1125,
	-1000, -1000, -1000, 1125, 1363, 1312, 46106, 36760, 821, 55858,
	1405, 113, -1000, 113, 545, 12974, 1334, -1000, 1927, -1000,
	1623, -1000, -1000, 10890, 65635, -1000, 65635, -1000, 55858, -1000,
	840, 55858, 37970, 810, 2129, -1000, 1363, 2126, 473, -1000,
	-1000, 109, 811, 36760, 46106, -23, 36760, 36760, 36760, 2532,
	543, 2531, -1000, 46106, 2123, 1525, 1671, 2148, 721, 55858,
	1475, -1000, 23932, 1359, -1000, 30595, 863, 55858, 1261, 93,
	-1000, -1000, -1000, 18, 55858, -1000, 2530, -1000, -1000, 153,
	153, 153, -1000, 152, 1595, -1000, -126, -126, -1000, -1000,
	4358, 811, -25, 542, -1000, 737, 736, 29365, 36760, -71,
	-1000, -1000, -1000, -1000, -1000, 46106, 55858, 686, 1905, 55858,
	-1000, 811, -1000, 819, -1000, 1085, -48, -48, -1000, 1197,
	1191, 55858, -1000, 12974, 55858, 46106, 12974, 46106, -1000, -1000,
	-1000, -1000, -1000, 1233, -1000, 23932, -1000, -1000, -1000, 17313,
	-1000, -1000, -1000, 46106, -222, 23932, 23932, 5796, 5562, 23932,
	25225, 25225, -1000, 23932, 4906, -1000, -1000, -1000, -1000, -1000,
	1988, 538, 23932, 8389, 5971, 4667, -1000, 409, 60287, 685,
	-1000, 23932, -1000, 404, 16882, -1000, 64553, -14, -14, -1000,
	2481, 1746, 1399, 1308, 1212, 2438, 10474, -211, -76, -1000,
	-1000, 672, -1000, 2139, -1000, 23932, 64859, 10058, -1000, 31813,
	831, 1475, -1000, -1000, 2429, 779, -1000, -1000, -1000, 779,
	-1000, 63410, 8389, 8389, 23932, 23932, -1000, 23932, 23932, 23932,
	-1000, -1000, 23932, -1000, -1000, 1969, 23932, -1000, 8389, 8389,
	25225, 25225, 25225, 25225, 25225, 25225, 25225, 25225, 25225, 25225,
	25225, 25225, 25225, 25225, 25225, 25225, 25225, 25225, 25225, 1660,
	25225, 2423, 2423, 2423, -1000, 2038, 1969, 23932, 23932, 8389,
	402, 391, 388, -1000, 23932, -211, -1000, -1000, 4358, -1000,
	1943, -1000, -189, -1000, 1799, -1000, -1000, 1943, 1943, -89,
	65635, -1000, 1652, -1000, 536, 23932, 27721, -1000, 668, -1000,
	-90, -1000, 47726, -1000, 666, -237, -1000, 730, -1000, 473,
	-1000, -1000, -1000, 258, 47726, -1000, -95, -1000, 2387, 384,
	12974, -1000, -1000, -1000, -1000, -1000, 113, -48, 1483, -1000,
	2434, -1000, 660, 382, 2429, 381, 380, -48, 55858, -1000,
	-27, -1000, -1000, -1000, -1000, -1000, -1000, 979, 978, -1000,
	2121, -1000, 1655, -1000, 864, -1000, 1235, 23932, 23932, 534,
	518, 1382, 2529, 2117, 1595, 2113, 1595, -1000, -1000, 795,
	-1000, 65635, 517, 516, -1000, -28, 1330, -1000, -1000, 23932,
	23932, 48534, -1000, 2306, -1000, 977, -1000, -1000, -1000, 1363,
	975, -1000, -1000, 1400, -1000, -1000, -1000, -1000, 23932, -1000,
	-29, 974, 811, 1966, 1126, -1000, 2525, 2524, 2523, 376,
	-34, -1000, 2386, 1513, 55858, 46106, 46106, 2385, 46106, -1000,
	-1000, -1000, -1000, 817, -1000, -1000, 2520, -1000, 881, 12974,
	46106, 2108, 1775, 721, 37166, -1000, 817, 1852, -1000, 65635,
	-1000, 1261, 16437, 2304, -96, -1000, 242, -1000, -1000, -1000,
	828, 31407, 27721, 23932, 2515, -97, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 48132, 48132, 36760, 36760, 36760, 811,
	55858, 55858, 37970, 2507, 513, 55858, 55858, 512, -1000, -1000,
	-1000, 1478, 46106, -1000, -1000, 815, -1000, -1000, 1409, 1611,
	-1000, 1495, 63335, -1000, 2316, 12974, 2397, 7223, 23932, 23932,
	839, 4402, 1624, 7223, 23932, 23932, 8389, 66114, -98, 23932,
	23932, -1000, 23932, 658, 65635, 2475, 23932, 374, 371, 369,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 368, -1000,
	-1000, -1000, -1000, -1000, 65635, 23932, 160, -1000, -1000, -1000,
	59878, -1000, 23932, 366, 365, -1000, -1000, -1000, 364, 357,
	8226, 257, 63029, 62954, 62648, 65635, 2038, 65635, -1000, -1000,
	667, 667, 1113, 1113, 1113, 1113, 2423, 329, 705, 1064,
	405, 405, 405, 533, 983, 983, 405, 405, 405, 1965,
	1741, 509, 6492, -1000, -1000, 65635, 65635, 345, -1000, -1000,
	-1000, -211, 340, 1938, 2356, -1000, 27721, 1938, 1938, -1000,
	-1000, 55858, 65635, -1000, -232, -1000, 2429, -1000, -1000, 1829,
	-1000, 9222, -1000, 12974, -1000, -1000, 30187, -1000, 508, -1000,
	110, -1000, -1000, 596, -1000, -1000, 337, -1000, -1000, -48,
	55858, 55858, 55858, 2102, -1000, 3484, -1000, 62573, -105, -1000,
	64097, 23932, 55858, -1000, 1404, 1824, 907, -1000, 55858, -1000,
	55858, -1000, -1000, 55858, 55858, 46106, 55858, 55858, -111, 65635,
	-51, -1000, 726, -1000, 46106, 46106, 36760, -113, 12974, -1000,
	36760, 970, -1000, -1000, -1000, 1899, 113, -1000, 2504, 507,
	1363, 113, 764, -1000, -1000, 505, 55858, 1524, 503, 12974,
	1800, 721, 37166, -1000, 1050, 1261, -1000, -1000, -81, -1000,
	562, 113, 55858, 2500, 1475, -1000, -118, 65635, -1000, 723,
	-1000, -116, -1000, -1000, 331, -1000, 2265, 2264, -1000, -1000,
	23932, 496, 495, 55858, 1758, -1000, -1000, -1000, -1000, 12974,
	1083, -1000, -1000, -1000, 2316, 7223, 7223, 23932, 23932, 23932,
	7223, 66114, -125, -1000, 7223, 7223, -211, -1000, -1000, 64553,
	-1000, -1000, -1000, -1000, 65635, 9642, 1423, -1000, 62267, -1000,
	-1000, -1000, -1000, 23932, 23932, -1000, -1000, -1000, -1000, -1000,
	25225, 1964, 494, 8389, -1000, -1000, 824, 23932, 23932, 1799,
	824, 824, -128, 774, -1000, -1000, -1000, 2429, 110, -1000,
	2497, 12974, -1000, -1000, -1000, -1000, -1000, 55858, -1000, 55858,
	-1000, 12974, 55858, 1968, 1667, -1000, -1000, 1821, 493, 25225,
	46106, 769, 1981, 1427, 23932, -1000, -134, -135, 1666, -1000,
	-1000, 1643, 23932, -1000, 8389, 1595, 1595, -136, -144, -1000,
	973, 971, 967, 55858, 16006, -1000, -1000, -1000, 964, -1000,
	-126, 23932, 1405, 1921, 814, -1000, 37970, 810, -1000, -1000,
	-1000, 23932, -1000, 46106, 23932, 1522, -1000, 721, 37166, -1000,
	2148, -1000, 2236, 55858, 2297, -1000, -1000, -1000, 1852, 491,
	-1000, 811, 490, 488, -145, 23932, 23932, -147, -131, -1000,
	771, 747, -1000, -1000, 46106, -1000, 7223, 7223, 7223, -1000,
	326, -1000, -1000, 1475, 2355, -1000, 62192, 61886, 3804, 25225,
	8389, -152, -1000, 55858, 65635, -211, -1000, -1000, -1000, 47726,
	451, -1000, -1000, 1881, -1000, -1000, -1000, 55858, 1649, -1000,
	-1000, 23932, 6492, 486, 23932, -1000, -1000, 1895, 2024, 1899,
	485, -1000, -1000, -1000, -1000, 1353, -1000, -1000, 65635, 2337,
	-1000, -1000, 482, 481, 55858, 55858, 480, 712, -1000, 479,
	65635, 810, -1000, 1447, -1000, 1885, 325, 2384, -155, 881,
	-158, 46106, 37166, -1000, 1775, 1043, -163, 55858, 1261, -1000,
	-1000, 36760, 36760, 1427, -164, -165, -1000, 1758, -1000, 55858,
	-1000, 55858, -1000, -1000, 1390, 23932, -1000, -1000, 3804, -166,
	-1000, -146, -1000, 2383, -1000, -1000, -1000, -1000, 2099, 61811,
	1756, 55858, 61505, 2006, -1000, -1000, 1405, 55858, 46106, 880,
	12974, 1409, 1409, -1000, -1000, 23932, 16006, 23932, -1000, 46106,
	-1000, 2260, 1899, 113, 1427, 478, 1427, 477, -1000, 1800,
	1176, -1000, 828, -1000, -1000, -180, -183, 1899, 1427, -1000,
	-1000, -188, -191, 313, 24794, 24794, 24794, -211, -1000, 55858,
	476, 2077, -1000, 1497, 1387, 95, 897, -1000, -1000, 1981,
	-193, 473, -1000, 23932, -1000, -196, -1000, 860, -199, -1000,
	858, -204, -1000, -209, 472, -1000, 1405, 814, 1899, 23932,
	1899, 23932, -1000, 31407, -1000, 811, 811, 1405, 1899, -1000,
	-1000, -1000, -1000, -1000, 25656, 1523, 1251, 63791, -1000, -1000,
	-1000, -1000, 55858, -1000, 1510, 1502, 1182, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1756, 65635, -1000, 1409, 1916,
	-1000, 1409, 1961, -1000, -1000, 55858, 810, -1000, 1405, -212,
	1405, -215, -207, -1000, -1000, -1000, 1405, 2394, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2152, -1000, 888, 1738, 1738,
	1497, -1000, 466, -1000, 462, -218, -1000, 827, 1427, 827,
	1427, -1000, -1000, 24363, -1000, 2411, -1000, -1000, 1780, -1000,
	1981, 23932, 23932, 1558, -1000, 2489, 1899, -1000, 1899, -1000,
	-1000, -1000, -1000, -1000, -224, -225, -1000, -1000, -1000, -1000,
	1405, 1405, 1405, 943, 827, 827, -1000, 461, -1000, -1000,
	23932, -226, 1405, -1000,
}
var sqlPgo = [...]int{

	0, 3108, 3107, 2089, 3106, 3104, 3103, 3099, 3097, 3095,
	3094, 3093, 3092, 3089, 3088, 3087, 3083, 3074, 3070, 3069,
	3066, 3064, 3063, 3062, 3061, 3060, 3059, 3058, 3052, 3050,
	3048, 3042, 3041, 3038, 3036, 3035, 3031, 3030, 3026, 3025,
	3024, 3023, 3022, 3019, 3016, 23, 3012, 3011, 3010, 3009,
	3005, 3004, 3003, 3002, 3001, 3000, 2999, 2998, 2997, 2996,
	2994, 2992, 2990, 2988, 2987, 2986, 2985, 2979, 2977, 2974,
	2973, 2971, 2970, 2969, 2968, 117, 2967, 2966, 2965, 2964,
	2962, 2961, 2960, 2959, 2957, 2956, 2955, 2950, 2944, 2943,
	151, 2934, 2933, 2932, 2931, 2927, 2922, 2918, 2912, 2911,
	2909, 181, 2907, 2901, 2899, 2898, 2896, 2895, 2894, 2893,
	2892, 2891, 2889, 2888, 2887, 2885, 2882, 2881, 2880, 2878,
	2877, 2866, 2861, 2859, 2858, 2855, 2853, 2852, 198, 134,
	2842, 2840, 2833, 2830, 2828, 2827, 91, 88, 60, 2826,
	87, 116, 203, 5124, 177, 2825, 2824, 2822, 2820, 2819,
	69, 128, 127, 125, 122, 94, 2818, 2817, 70, 41,
	30, 22, 99, 2816, 2815, 2809, 1947, 86, 2808, 2806,
	191, 174, 2804, 778, 2803, 132, 76, 95, 68, 71,
	2802, 113, 15, 2801, 133, 38, 2800, 114, 66, 25,
	3958, 5613, 78, 199, 74, 82, 163, 154, 159, 157,
	121, 362, 2799, 182, 141, 146, 2798, 2797, 2796, 52,
	143, 64, 27, 130, 8, 2793, 13, 2790, 7, 2788,
	2787, 2786, 2785, 26, 120, 44, 57, 2784, 19, 9,
	166, 2783, 162, 2781, 92, 2780, 187, 148, 144, 56,
	173, 2779, 2778, 2777, 2776, 2775, 97, 21, 96, 2773,
	2771, 104, 178, 2770, 62, 124, 80, 101, 194, 75,
	156, 102, 161, 165, 2769, 2768, 2767, 170, 2766, 2765,
	123, 155, 2758, 2757, 33, 36, 169, 37, 2756, 2755,
	119, 2754, 147, 2753, 2750, 2748, 197, 129, 158, 12,
	59, 89, 20, 6, 168, 111, 90, 81, 2746, 1953,
	1100, 1550, 2745, 108, 84, 31, 85, 105, 189, 39,
	2740, 2737, 2810, 2735, 2733, 2732, 2731, 137, 2730, 2729,
	2727, 112, 32, 93, 2724, 115, 54, 131, 193, 77,
	160, 149, 183, 2723, 138, 2719, 136, 72, 2718, 145,
	185, 73, 2717, 1150, 118, 2716, 153, 2714, 2713, 2712,
	2711, 35, 2709, 2708, 652, 2706, 110, 2705, 2704, 139,
	167, 176, 28, 2702, 63, 703, 2701, 142, 29, 2699,
	3224, 55, 0, 4928, 4149, 4403, 2698, 5218, 2697, 152,
	103, 2696, 2695, 2694, 2693, 34, 11, 3, 5, 14,
	10, 388, 270, 2690, 2689, 65, 98, 106, 2688, 196,
	164, 2687, 2685, 2683, 67, 2682, 16, 2681, 18, 2680,
	2674, 24, 2, 2673, 2670, 179, 2669, 2668, 2667, 2665,
	2415, 2662, 190, 2661, 100, 2660, 126, 109, 2659, 2655,
	2650, 2642, 186, 2638, 188, 2636, 4, 17, 1, 2634,
	2633, 2631, 150, 51, 2249, 2629, 2628, 58, 140, 45,
	2627, 2626, 135,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 422, 422, 18, 28, 19, 29, 13, 424,
	424, 424, 424, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 421, 421, 154, 154, 153, 149,
	149, 425, 425, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 370, 370, 371, 371, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 46, 129, 129, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 430, 430, 431,
	431, 432, 432, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 60, 60,
	50, 417, 417, 237, 237, 338, 338, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 238, 238, 73, 73, 73, 73, 73,
	73, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 340, 340, 74, 74, 310, 310, 77, 77,
	268, 268, 78, 78, 78, 78, 78, 79, 79, 79,
	79, 89, 89, 89, 89, 420, 420, 230, 230, 170,
	170, 170, 170, 84, 84, 84, 84, 85, 85, 85,
	86, 86, 134, 134, 95, 95, 95, 95, 95, 94,
	94, 94, 94, 94, 94, 40, 40, 40, 41, 41,
	42, 42, 43, 43, 44, 44, 45, 45, 45, 45,
	45, 97, 97, 426, 426, 99, 96, 96, 96, 98,
	98, 98, 98, 100, 101, 101, 101, 101, 101, 101,
	102, 102, 364, 364, 245, 245, 362, 362, 378, 378,
	363, 363, 207, 207, 207, 207, 207, 208, 208, 208,
	369, 369, 369, 369, 369, 369, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 119, 119, 119, 128, 128, 128, 128,
	128, 128, 128, 121, 121, 121, 112, 112, 104, 104,
	104, 104, 108, 108, 108, 108, 108, 105, 105, 109,
	109, 111, 111, 113, 113, 113, 113, 113, 113, 106,
	106, 106, 106, 115, 115, 115, 115, 114, 114, 124,
	124, 124, 124, 124, 124, 324, 324, 120, 120, 120,
	120, 123, 123, 123, 123, 259, 259, 118, 118, 118,
	122, 122, 125, 125, 125, 125, 107, 107, 107, 435,
	435, 435, 126, 126, 117, 117, 127, 127, 127, 127,
	127, 127, 127, 116, 116, 116, 423, 423, 110, 418,
	418, 415, 415, 415, 415, 415, 415, 415, 416, 416,
	419, 419, 82, 82, 82, 55, 55, 436, 436, 436,
	56, 56, 437, 437, 437, 434, 434, 434, 434, 434,
	434, 434, 434, 209, 209, 210, 210, 291, 291, 291,
	291, 291, 211, 211, 156, 156, 156, 214, 215, 215,
	212, 212, 213, 213, 213, 217, 217, 216, 219, 219,
	218, 290, 383, 383, 384, 384, 384, 384, 384, 384,
	384, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 381, 381, 381, 382, 379, 379, 380, 380, 380,
	380, 438, 438, 438, 438, 438, 438, 439, 439, 289,
	289, 223, 223, 386, 386, 386, 386, 387, 387, 387,
	387, 387, 390, 389, 388, 388, 388, 388, 388, 320,
	320, 320, 59, 59, 59, 256, 256, 255, 255, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 131, 131, 57, 57, 57, 162, 162,
	54, 54, 54, 441, 441, 58, 58, 58, 442, 442,
	61, 61, 61, 61, 61, 61, 53, 53, 53, 53,
	53, 443, 443, 274, 274, 273, 273, 228, 228, 326,
	174, 174, 150, 150, 150, 21, 23, 23, 16, 16,
	16, 16, 16, 16, 31, 31, 32, 32, 27, 27,
	427, 427, 428, 428, 83, 83, 87, 87, 87, 93,
	93, 130, 130, 130, 130, 130, 130, 130, 35, 35,
	35, 35, 47, 47, 47, 47, 91, 445, 445, 445,
	92, 92, 444, 444, 169, 169, 169, 169, 171, 171,
	286, 286, 287, 287, 446, 446, 288, 288, 288, 164,
	163, 165, 165, 52, 52, 52, 158, 158, 159, 159,
	160, 160, 161, 161, 447, 447, 80, 80, 80, 133,
	133, 203, 203, 282, 282, 282, 224, 224, 179, 179,
	285, 285, 283, 283, 283, 283, 254, 254, 254, 132,
	132, 233, 233, 247, 247, 248, 248, 335, 335, 249,
	90, 90, 143, 143, 141, 141, 141, 141, 141, 141,
	448, 448, 142, 142, 142, 144, 144, 144, 144, 144,
	144, 144, 147, 147, 147, 147, 148, 148, 148, 146,
	146, 397, 397, 397, 399, 399, 400, 396, 396, 398,
	398, 440, 440, 258, 258, 258, 221, 222, 220, 220,
	449, 449, 226, 226, 225, 227, 227, 325, 325, 325,
	252, 252, 252, 252, 277, 277, 275, 275, 276, 276,
	278, 278, 279, 279, 279, 280, 280, 281, 281, 251,
	251, 306, 306, 145, 145, 145, 232, 232, 232, 234,
	234, 297, 297, 297, 298, 298, 296, 296, 296, 296,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 328,
	328, 235, 235, 329, 284, 284, 413, 413, 413, 414,
	414, 323, 323, 330, 330, 330, 330, 330, 330, 321,
	321, 322, 322, 336, 337, 337, 262, 262, 262, 262,
	260, 260, 261, 261, 331, 331, 331, 331, 253, 253,
	332, 332, 332, 333, 292, 293, 293, 341, 341, 341,
	341, 356, 231, 231, 231, 450, 450, 342, 342, 342,
	342, 342, 342, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 346, 346, 346, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 355, 355, 355, 355,
	355, 347, 347, 352, 352, 353, 353, 353, 348, 349,
	354, 354, 354, 354, 451, 451, 358, 358, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 344, 344, 344,
	351, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 269, 269, 270, 270, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 301, 301, 301, 301, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 391, 391, 391, 391, 391, 391, 391, 391,
	394, 394, 395, 395, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 401, 401, 402, 402, 404, 404, 405,
	405, 406, 407, 407, 407, 408, 409, 409, 403, 403,
	410, 410, 410, 410, 411, 411, 412, 412, 412, 412,
	412, 312, 312, 313, 313, 319, 319, 319, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 172, 172, 172, 172, 172, 243,
	243, 241, 241, 241, 244, 244, 242, 242, 240, 240,
	239, 239, 309, 309, 307, 307, 311, 311, 263, 263,
	357, 357, 357, 357, 357, 357, 357, 264, 264, 264,
	272, 265, 265, 266, 266, 266, 266, 266, 303, 304,
	267, 267, 267, 305, 305, 314, 318, 318, 317, 316,
	316, 315, 315, 294, 294, 295, 295, 250, 250, 452,
	452, 246, 246, 334, 334, 334, 334, 205, 205, 236,
	236, 204, 204, 198, 198, 199, 199, 199, 199, 229,
	229, 359, 359, 359, 360, 361, 308, 189, 188, 176,
	177, 187, 186, 185, 175, 178, 182, 183, 184, 180,
	181, 194, 193, 192, 191, 339, 200, 200, 201, 201,
	201, 202, 202, 202, 202, 173, 173, 195, 195, 196,
	197, 197, 190, 190, 190, 166, 166, 166, 167, 167,
	168, 168, 368, 368, 366, 366, 366, 367, 367, 367,
	367, 365, 365, 365, 365, 365, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 374, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 377, 377,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 8, 3,
	6, 1, 2, 1, 3, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 6,
	3, 1, 1, 2, 1, 1, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 3, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 4,
	4, 3, 4, 4, 3, 4, 4, 4, 3, 2,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 2, 3, 3, 3, 2, 3, 5,
	4, 6, 4, 6, 4, 1, 0, 2, 3, 3,
	3, 7, 5, 3, 3, 2, 0, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 3, 4, 3, 1,
	1, 1, 2, 3, 2, 3, 6, 6, 7, 9,
	6, 3, 4, 5, 5, 3, 1, 1, 5, 2,
	0, 1, 1, 1, 1, 3, 2, 2, 2, 1,
	2, 0, 3, 3, 2, 10, 13, 0, 2, 3,
	9, 12, 0, 2, 3, 1, 1, 2, 2, 2,
	2, 1, 0, 1, 0, 1, 3, 1, 1, 1,
	1, 3, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 4, 2, 5, 5, 5,
	2, 8, 9, 6, 5, 3, 1, 5, 8, 5,
	11, 0, 1, 3, 3, 2, 2, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 5, 8, 4, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 1, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 1, 1, 8, 7, 5, 0, 1,
	6, 7, 6, 5, 3, 4, 14, 17, 14, 17,
	4, 0, 2, 2, 0, 1, 0, 1, 3, 2,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 0,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 1, 3, 1, 3,
	8, 5, 3, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 2, 3, 4, 3, 4, 5,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 5, 1, 0,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 4, 2, 5, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 3, 4, 1, 5, 3, 4, 5, 1,
	5, 1, 3, 2, 0, 3, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 2, 1, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 5, 4, 1, 2, 1, 4, 1,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 2,
	5, 1, 4, 2, 5, 1, 4, 3, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 1, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	4, 6, 5, 7, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 1, 5, 5, 3, 1, 1, 1, 2, 2,
	2, 4, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 8, 6, 4,
	6, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 1, 2, 3, 2, 3, 2, 3, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 1, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 2, 2, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 445, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 80,
	67, 120, 102, 107, 126, 152, 276, 305, 315, 299,
	-98, -99, 334, -35, -47, -92, -91, -5, -11, 27,
	38, -37, -38, -39, 52, -57, -54, -51, -60, -429,
	82, -398, -65, -68, -70, -433, 112, 125, 163, 269,
	-85, -86, 301, 303, -42, -41, 121, -141, -143, -96,
	-97, -134, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 337, 383, 39, 346,
	68, 115, 309, 21, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -397,
	-66, -67, -69, -71, -72, 300, -144, -142, 442, 395,
	-14, -18, -19, -15, -17, -20, -16, -24, -28, -29,
	-26, -25, -27, -30, -31, -32, -33, -21, -22, -13,
	413, 421, -147, -145, -146, -148, 322, 403, 360, 446,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	-191, -195, -196, -197, -190, -166, -374, -377, 4, -372,
	-375, 131, 176, 240, 21, 22, 23, 24, 25, 27,
	37, 38, 39, 42, 44, 45, 48, 49, 50, 51,
	52, 53, 56, 61, 66, 67, 68, 69, 70, 75,
	72, 73, 74, 77, 79, 80, 81, 84, 85, 93,
	94, 95, 96, 97, 98, 102, 105, 104, 107, 110,
	111, 112, 114, 116, 117, 120, 121, 124, 122, 366,
	368, 123, 125, 126, 127, 137, 138, 139, 141, 142,
	144, 146, 150, 151, 153, 157, 159, 160, 161, 162,
	163, 164, 165, 177, 172, 178, 182, 185, 184, 186,
	187, 188, 179, 193, 196, 197, 198, 200, 201, 204,
	205, 206, 207, 210, 209, 212, 215, 216, 219, 220,
	223, 225, 226, 228, 229, 227, 230, 233, 231, 232,
	235, 236, 238, 237, 245, 246, 248, 249, 250, 264,
	253, 254, 257, 260, 263, 265, 266, 267, 268, 269,
	270, 272, 274, 276, 278, 280, 281, 282, 283, 284,
	285, 287, 288, 290, 291, 292, 293, 294, 299, 296,
	297, 298, 300, 301, 302, 303, 305, 307, 308, 309,
	310, 312, 314, 335, 336, 348, 315, 316, 317, 318,
	319, 320, 321, 325, 329, 326, 327, 328, 330, 323,
	324, 331, 332, 334, 337, 339, 341, 342, 345, 346,
	347, 349, 352, 353, 354, 350, 351, 344, 359, 357,
	358, 361, 362, 363, 364, 365, 367, 369, 377, 378,
	380, 383, 384, 385, 387, 388, 391, 392, 393, 394,
	399, 395, 397, 400, 401, 402, 408, 407, 414, 415,
	417, 418, 419, 32, 40, 41, 43, 46, 57, 58,
	59, 62, 99, 100, 119, 128, 129, 140, 154, 156,
	166, 167, 168, 183, 189, 191, 171, 213, 243, 244,
	258, 262, 273, 275, 286, 311, 340, 355, 371, 372,
	373, 374, 379, 381, 403, 404, 405, 409, 416, 251,
	-184, 2, -166, -166, 276, 26, 2, 26, 272, 324,
	362, 364, 2, 192, 2, -420, -230, 2, 26, -170,
	-166, 82, 152, 322, -184, 2, -420, -230, 24, 2,
	-166, 2, -171, 2, 315, -166, 445, 77, 220, 61,
	311, 331, -101, 378, -100, 371, 317, -102, -364, 2,
	233, -166, 445, 445, 445, 445, 2, 360, 267, 407,
	323, 396, 95, 283, 176, -415, 2, 4, -375, -372,
	-199, -198, 360, 95, -197, -190, 435, -196, 445, 445,
	445, 2, 197, 198, 282, 281, 331, 332, 445, 445,
	445, 2, 25, 55, 76, 79, 101, 127, 147, 150,
	255, -430, 226, 264, 280, 317, 330, 359, 369, 380,
	-434, 347, 56, 396, -441, 385, 110, -273, 95, 364,
	362, 220, 151, 392, 307, 155, 390, 105, 182, 394,
	393, 445, 445, 25, 55, 64, 79, 110, 127, 147,
	150, -432, 264, 280, 314, 317, 330, 359, 369, 385,
	380, 2, 407, 323, 360, 176, 95, 396, 307, 279,
	-75, 2, 442, 29, 334, -140, 360, 2, -166, 197,
	198, 2, 445, 445, -415, 2, 197, 198, 2, 319,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 2, -128, 331, 347, 160,
	38, 61, 26, 66, 96, 153, 176, 177, 205, 76,
	77, 281, 220, 198, -324, 332, 361, 318, 357, 378,
	82, 397, 308, 419, -423, 122, 4, 95, 233, 333,
	371, 70, 365, 366, -440, 2, 360, -444, 2, 378,
	378, 2, -444, 2, -444, 2, -169, 2, 378, 375,
	-445, 378, 416, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, -142, -144, -143, 445, 445,
	445, 445, 445, -128, 331, 2, 61, 26, -448, 145,
	-225, -226, 389, 190, 118, 256, -141, -143, 2, -397,
	-362, 2, -299, -378, -301, 433, 434, 428, 239, 420,
	-312, 101, 390, 251, -377, -302, -314, 119, 311, -244,
	8, 9, 5, 6, 7, -173, -343, -308, -351, 382,
	130, 242, -202, 448, 10, 442, -394, -143, -313, 33,
	156, 54, -366, -201, -345, -353, -349, -350, -450, 44,
	50, 49, 369, 232, 325, 326, 341, 327, 328, 42,
	399, 172, 248, 250, 184, 4, 191, -200, -190, -391,
	-392, -372, -373, 183, 189, 185, 340, 186, 187, 188,
	41, 286, 141, 142, 140, 111, 100, 99, 244, 46,
	45, 43, 404, -354, 97, 371, 372, 373, 374, 200,
	201, -166, -374, 64, 87, 88, 86, 91, 90, 92,
	89, 333, 396, 55, 32, 166, 167, 171, 243, 168,
	62, -393, 351, 83, 149, 181, 169, 194, 195, 199,
	214, 217, 234, 241, 259, 261, 306, 338, -451, 405,
	128, 129, 262, 273, 355, 379, 381, 154, 213, 57,
	58, -399, 287, -400, -184, -399, 445, 445, 447, 445,
	-220, -221, -222, 2, 26, 108, 442, 2, -327, 2,
	440, -331, -143, 208, -330, 442, -328, -191, 252, -395,
	312, -391, -392, -173, -190, -201, 4, -3, -223, 442,
	444, 360, 65, 2, -268, 442, -166, 26, -140, 251,
	375, 447, -310, 442, 251, 148, 253, -166, 2, 2,
	335, 2, 442, -101, 59, 378, -287, 2, -288, -163,
	-164, -165, 196, 278, 285, 419, -362, -426, 148, 425,
	375, -362, -245, 444, 2, -331, 166, -191, 2, -188,
	-365, 4, -372, -375, -373, -376, 64, -374, 26, 28,
	29, 30, 31, 33, 34, 35, 36, 47, 54, 55,
	60, 63, 65, 76, 82, 86, 87, 89, 88, 90,
	91, 92, 101, 103, 106, 108, 109, 113, 115, 118,
	130, 132, 145, 147, 148, 152, 155, 158, 170, 180,
	190, 192, 208, 211, 218, 221, 222, 239, 242, 247,
	251, 252, 255, 256, 271, 277, 289, 304, 322, 333,
	343, 356, 360, 370, 375, 376, 382, 389, 390, 396,
	398, 406, 410, 411, 412, 413, -377, 2, -331, 166,
	2, -192, 166, -331, -195, 2, -370, 166, -368, 10,
	-367, 5, 4, -372, -375, -373, 2, -175, -166, 2,
	-187, -365, 2, -204, 166, -191, 375, 447, -236, -198,
	-199, -229, -166, 444, -299, 2, -90, 2, -299, 166,
	2, -90, 166, 2, -299, 166, 2, -90, 166, 2,
	2, 2, 380, 2, 79, 166, -166, 360, 94, 2,
	298, -431, 314, 384, 407, 2, 2, 2, 2, 2,
	2, 2, 360, 323, -442, 287, -180, 2, -166, 145,
	-370, 166, 2, -370, 166, 2, -193, -195, -193, 176,
	193, -175, 166, 2, 364, 362, 364, 362, 148, 2,
	192, 2, 192, 2, -332, 2, -333, -191, 2, 2,
	2, 2, 2, 166, -166, 360, 94, 2, 207, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -238, 166,
	2, -191, -238, 166, 2, -238, 166, 2, -205, 166,
	2, -204, -175, 166, 2, -371, 166, 2, -370, -371,
	166, 2, -340, 2, -339, -367, 403, -75, 442, 331,
	442, -370, -191, -299, -90, 148, -299, -90, 2, 95,
	360, -128, 2, 145, 398, 2, 8, 2, -370, 284,
	137, 2, 335, 2, 281, 332, 61, 419, 148, 2,
	2, -418, 2, 251, 148, 2, 148, 2, 148, 2,
	148, 2, 148, 2, 2, 281, 332, 2, 377, 206,
	123, 2, 148, -259, 2, 413, 148, 2, 5, 2,
	196, 278, 348, 2, -191, -435, 2, 360, 407, 323,
	2, 2, 72, 73, 148, 2, 148, 419, 2, -253,
	-331, -286, -287, -286, 375, -171, -448, -225, -226, -128,
	335, 2, 2, -448, -252, -275, -276, 218, 132, 247,
	-258, 26, 108, -258, -258, 48, 443, 443, 11, 12,
	63, 37, 433, 434, 435, 436, 143, 437, 438, 431,
	432, 430, 423, 424, 427, 202, 203, 78, 426, 425,
	71, 224, 313, 133, 134, 135, 136, 295, 173, 174,
	175, 14, 15, 16, 30, 255, 217, 420, 169, 338,
	428, 17, 18, 19, 194, 195, 241, 40, 170, -172,
	-206, -299, -299, -299, -299, -299, 261, 442, -250, -294,
	440, -143, 442, 442, 442, 5, 442, 5, -361, 8,
	-143, -299, -312, 443, -242, 442, -143, -312, -307, 442,
	311, 440, 442, -315, -299, 444, -401, 414, -347, 442,
	275, -346, 442, -346, -346, 408, -344, 442, 421, 415,
	442, -344, 442, 442, 145, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 408, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 447, -399,
	-223, 442, -246, -334, -299, 435, -246, -246, 251, -239,
	-299, 83, -262, 199, 234, 149, 214, 306, 181, -361,
	-75, -296, 448, -323, 421, -143, -328, -190, -143, -330,
	442, -327, -323, 435, -191, 442, 148, 442, 444, 148,
	-229, -365, -191, -200, -201, -239, -370, -415, -229, -170,
	34, -309, -341, -342, -355, -343, -352, -348, -351, 291,
	292, 290, 294, 293, 44, 50, 49, 369, 232, 325,
	326, 341, 327, 328, 42, 399, 172, 248, 250, 184,
	4, 43, 404, -354, 191, 183, 189, 185, 340, 186,
	187, 188, 41, 286, 141, 142, 140, 111, 100, 99,
	244, 46, 45, 97, 371, 372, 373, 374, 200, 201,
	405, 351, 57, 58, -415, -229, 145, -364, -239, 34,
	-287, 2, -446, 447, 216, -208, 223, 238, 159, 252,
	417, -369, 5, 4, -308, -320, 101, 220, -351, 9,
	434, -359, 8, 433, -363, -362, 85, 444, -365, -152,
	296, -151, 23, 27, 112, 401, 124, -213, 178, 267,
	119, 344, -422, -424, 316, 367, 368, 74, 245, 296,
	119, -255, -257, 34, 93, 236, 263, 51, 164, 227,
	228, 346, 409, 119, 296, 413, 119, -424, 296, -424,
	-154, 344, -422, -424, 316, 296, -153, -213, 119, 448,
	-370, -236, 447, 447, -365, 435, 119, 119, 119, 119,
	2, 2, 239, 2, 2, 2, 150, -434, -432, 2,
	2, 2, -191, 166, -192, 166, 2, -195, 407, 251,
	-417, -237, 360, -191, -162, -396, 413, 239, 239, 34,
	442, 2, -177, 166, 2, -167, -166, 176, -396, 239,
	-332, -203, -191, -203, 334, -184, 34, -296, 119, 2,
	2, 2, -166, -155, 447, 53, 302, 119, -155, 119,
	-155, 119, -155, 447, 119, -155, 119, 447, 119, 119,
	443, 447, -340, -370, -138, 413, 148, 82, 442, -371,
	-175, 2, -191, 2, 360, 200, -370, -370, -364, 26,
	336, 2, 73, -191, -419, 145, -416, 307, -415, -191,
	-191, -191, -191, -191, 145, 2, 377, 2, 377, 2,
	-166, 67, -166, 216, -191, 145, 360, 176, 360, -155,
	447, -171, -448, -252, -364, -448, -276, -275, -278, -299,
	26, -281, 139, 235, -299, -301, -142, -142, -142, -227,
	-325, -299, 277, 176, -356, -341, -341, -189, -365, 371,
	-299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
	-299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
	-299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
	-299, -299, -299, -299, -299, 217, 169, 338, 40, 170,
	-299, 375, -299, -299, -299, -299, 231, 239, 242, 382,
	130, 391, 108, 245, -452, 356, 36, -305, -143, -243,
	442, -319, 31, 343, 26, -312, 442, 2, -294, -299,
	-295, -240, -239, -239, 443, 406, 26, 108, 435, 2,
	8, -269, -271, 418, 230, 98, 161, 229, -270, 321,
	443, 447, 34, 443, -299, -240, -311, -307, -239, -318,
	-317, 410, -365, 435, -402, 138, 155, 8, -361, 8,
	371, 371, 8, 8, 8, 442, 443, 2, 443, 2,
	443, 2, 443, 2, 443, 2, -299, -299, -299, -299,
	-299, -299, -299, -239, -263, 2, -357, -239, 4, 418,
	230, 98, 161, 229, 321, -263, 2, -264, 2, -299,
	-239, -265, -300, -301, 433, 434, 428, -312, -266, 2,
	-299, -240, -299, 47, 211, 376, -267, -299, 148, -239,
	-239, 2, -239, 2, -400, 34, -239, -232, 447, 148,
	34, 4, -232, -232, 442, 443, 447, 199, 199, -327,
	-262, 199, -260, 259, -260, -260, -413, 442, 441, -323,
	-176, 440, 449, -365, -322, -321, 34, -184, 257, -323,
	-323, 444, 443, -322, -191, 442, -239, -365, 349, 443,
	444, 194, 194, 443, -138, 375, 413, -75, 443, 447,
	-231, 33, 440, -271, 442, -358, 408, 442, 442, 148,
	-230, -426, 443, 378, -288, -207, 285, 342, 297, 329,
	9, 8, 8, 447, -365, 447, 375, -427, 76, 65,
	-290, 166, 65, -379, -178, 76, -380, -166, 60, 390,
	277, 147, -427, 76, -427, 76, 76, 334, 347, 48,
	-331, 37, -90, 212, 148, 419, 360, 375, -331, -257,
	-341, 93, 227, 228, 48, -360, -359, 434, -360, 48,
	-360, -360, -360, 413, -192, -331, 375, 268, -370, 375,
	447, 37, -90, 212, 148, 375, -204, -176, -337, -336,
	422, -198, -166, 444, -299, -90, -299, -90, 119, 2,
	-442, 207, 442, -223, 239, -256, -255, 239, -194, 2,
	-191, -229, -338, 192, 447, -237, 268, 119, 119, 442,
	116, 283, 2, 251, 239, -177, 166, -158, 363, 119,
	-293, -292, 411, -282, -90, 442, 101, 34, -282, -247,
	-248, -335, -249, -178, 442, -184, -166, 2, -191, -238,
	-238, -238, -204, -205, -175, -370, -371, -371, -75, -339,
	443, 443, -137, 254, -136, -166, 5, -140, 398, -210,
	-291, -290, -381, -382, -379, 217, 176, 390, 193, 131,
	-138, -336, -337, -337, -191, 145, -229, -229, 331, 145,
	145, 444, -259, 283, 95, 360, 267, 176, -191, -204,
	-191, -331, -448, -279, -359, 442, -280, 311, 312, 447,
	-150, 35, 106, 204, -191, 419, 117, -299, -299, 375,
	-452, 356, -305, 117, -299, 231, 242, 382, 130, 391,
	108, 245, 148, 442, -300, -300, 443, -241, -299, -299,
	441, 451, 443, -449, 447, -225, -299, -239, -239, 443,
	443, 375, 375, 375, 375, 442, 444, -239, -229, 441,
	441, 447, 443, -316, -317, 113, -299, 444, -407, 260,
	442, 442, 443, 443, 447, 443, 419, 419, 443, 443,
	443, -299, 34, 447, 447, 447, 443, 447, 447, 447,
	443, 443, 148, 443, 443, -272, 271, 443, 11, 12,
	433, 434, 435, 436, 143, 437, 438, 431, 432, 430,
	423, 424, 425, 71, 224, 313, 14, 15, 16, 194,
	170, -300, -300, -300, 443, -303, -304, 148, 145, 34,
	-267, -267, -267, 443, 148, -239, 443, 443, 442, 443,
	-293, -334, -234, 2, -327, -186, -365, -293, -293, -239,
	-299, -327, -327, -261, 398, 251, 199, -327, -321, 443,
	-414, -361, -323, -322, -361, -298, -297, 146, 237, -184,
	-223, -322, -322, -365, -323, 443, -235, -329, -395, -449,
	444, -365, -129, 5, 242, -129, 148, -229, 24, -341,
	440, 441, 8, 8, 442, -361, -361, -229, 148, -362,
	-287, 388, 69, 285, -362, -151, -191, -178, -185, -166,
	239, -290, 166, -157, 239, -341, -185, 442, 442, 204,
	204, -178, -185, 166, -178, 166, -185, -185, -421, 285,
	246, -299, 219, 283, 240, -152, 296, -90, -90, 442,
	-426, 398, 107, -191, -194, 296, -200, -360, -360, -255,
	296, -192, -370, 413, -175, -153, -90, -90, 442, -176,
	-154, 296, -135, 165, 245, 435, -166, 407, -166, -209,
	-210, -166, -436, 415, 413, 119, 119, -223, 148, -138,
	-370, -191, -370, -370, -370, 2, 442, 2, -191, 119,
	251, 239, -159, 114, -447, 425, -175, -226, -225, -299,
	-254, -285, 304, 251, -224, -179, -178, 403, -184, -254,
	-233, 447, 148, 425, 444, -224, 2, -155, -155, -155,
	-155, -155, -75, -138, 447, 442, 425, 425, 442, -370,
	-370, 443, 447, -191, -177, 176, 176, -183, -167, -138,
	-43, 413, 360, 331, 331, -166, -187, -175, -191, -188,
	-204, -280, -299, -325, -191, 448, -299, -299, 117, 117,
	-299, -300, -300, -299, 117, 148, 442, -299, -309, 30,
	30, 443, 447, -295, -299, 443, 406, -449, -449, -449,
	5, 230, 161, 229, -270, 229, -270, -270, 8, 435,
	-365, 443, -307, 115, -299, 370, -365, 435, -408, -181,
	442, -166, 411, -225, -361, -344, -344, 443, -356, -341,
	-299, -299, -299, -299, -299, -299, -303, -299, -356, -341,
	-300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
	-300, -300, -300, -300, -300, -300, -300, -300, -300, 108,
	239, 245, -300, -304, -303, -299, -299, -341, 443, 443,
	443, -239, -75, -251, 155, -337, 447, -251, -251, 443,
	-261, 442, -299, -327, 441, 443, 447, -322, 441, 447,
	450, 425, -223, 444, -321, 443, 447, -284, 34, 443,
	-365, -90, 253, 8, 441, 443, -361, 443, 443, -229,
	375, 375, 119, 239, 400, -383, -380, -299, -228, -326,
	-299, 442, 442, -149, 112, 334, -428, 2, 119, -155,
	119, -155, 417, 442, 442, 375, -427, 76, -239, -299,
	-139, 101, -364, -424, 375, 375, 268, -239, 375, -138,
	148, 358, 2, 2, 2, 443, 34, 249, -166, -191,
	-192, 34, -191, -162, 2, -274, 398, -176, -191, 119,
	-160, 210, -447, -368, -396, -277, -275, -254, -246, 240,
	75, 443, 447, 444, -293, -248, -234, -299, 2, 443,
	-136, -137, -370, -370, -370, -138, -140, -140, -291, 2,
	442, -177, -167, 442, 254, -191, -259, -215, -214, 267,
	245, 252, 443, -150, -176, -299, -299, 117, 30, 30,
	-299, -299, -309, 443, -299, -299, -239, 441, 5, -299,
	443, 443, 443, 443, -299, 444, -409, -166, -299, 443,
	443, 443, 443, 447, 447, 443, 443, 443, 443, -304,
	148, 108, 245, 442, 443, 443, -306, 158, 48, -327,
	-306, -306, -229, -296, -361, -297, -176, 440, -365, -329,
	442, 444, 441, 443, -178, -185, -290, 119, -384, 76,
	-385, 63, 131, 82, 239, 242, 390, 277, 60, 101,
	289, 34, 443, 443, 447, -150, -228, -229, 239, 353,
	101, 239, 101, 94, 385, -178, -185, -229, -229, -191,
	-178, -185, 443, 447, 425, -194, -192, -370, 443, -176,
	-371, 371, -211, 179, -90, 2, 442, -223, -256, -90,
	-337, 442, -166, 251, 442, -176, -161, 209, -447, -368,
	-158, -254, -283, 442, 251, -90, -179, 2, -226, 425,
	443, 443, 94, 94, -228, 442, 442, -229, -44, -45,
	176, 76, 270, -188, 360, -150, -299, -299, -299, 443,
	-449, -365, 435, -403, 267, 443, -299, -299, -300, 148,
	442, -309, -404, 412, -299, -239, -404, -404, 443, -323,
	-361, 2, -290, -185, -189, -182, -166, 131, 166, 242,
	204, 442, -300, -191, 442, 2, -438, 103, 180, -289,
	-439, 81, 354, -326, 443, 443, 242, 242, -299, -341,
	-155, -155, 443, 443, 375, 375, 375, -364, -362, 375,
	-299, -212, -213, 170, -437, 413, -209, -436, -228, -191,
	-228, 251, -447, -368, -159, 109, -229, 76, -277, -305,
	-138, 442, 442, 443, -228, -228, 443, 447, 26, 442,
	26, 442, -191, 443, -226, 48, 443, 443, -300, -309,
	443, -405, -406, -181, -322, 441, -385, -182, 239, -299,
	-168, 442, -299, 180, 104, 162, -211, 442, 289, -174,
	63, 442, 442, -178, -185, 442, 425, 442, -436, 265,
	94, 236, 443, 34, 443, -274, 443, -191, -368, -160,
	393, 240, 443, -185, -254, -371, -371, -289, 443, 443,
	-45, -229, -229, -410, 283, 312, 157, -239, 443, 447,
	34, 119, 443, -386, 225, -166, 443, 104, 162, -212,
	-229, -191, -425, 398, -189, -217, -216, -214, -219, -218,
	-214, -239, -362, -239, -191, 94, -211, -90, -289, 442,
	-289, 442, -161, 334, -292, 443, 443, -211, -289, 443,
	443, 443, -411, -412, 40, 387, 85, -299, -411, -411,
	-406, -408, 131, -387, -390, -389, 251, 149, 266, 339,
	443, 353, 409, -438, 443, -223, -299, 443, 447, 403,
	443, 447, 403, 443, 443, 442, -212, -437, -211, -228,
	-211, -228, -247, -138, -138, -212, -211, -412, 274, 144,
	311, 274, 144, -182, -389, 251, -390, 251, 393, 105,
	-386, -216, 170, -218, 148, -229, -436, -212, 443, -212,
	443, -293, -212, 30, -388, 236, 302, 53, 334, -388,
	-387, 442, 442, 443, -443, 411, -289, -443, -289, -412,
	22, 242, 101, -438, -239, -239, -156, 53, 302, 2,
	-211, -211, 443, 443, -212, -212, -212, 375, -443, -443,
	442, -239, 443, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 331,
	332, 334, 335, 336, 338, 339, 341, 343, 345, 347,
	348, 350, 352, 353, 354, 355, 356, 358, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	404, 406, 0, 831, 833, 835, 837, 29, 30, 0,
	0, 169, 171, 173, 0, 197, 199, 201, 202, 204,
	-2, 0, 285, 286, 288, 290, -2, -2, 0, 0,
	393, 395, 0, 0, 415, 416, 0, 920, -2, 409,
	411, 413, 476, 478, 480, 482, 484, 486, 488, 489,
	491, 493, 495, 497, 499, 501, 503, 505, 507, 509,
	511, 513, 515, 517, 519, 521, -2, -2, -2, 0,
	-2, -2, -2, 849, 33, 35, 37, 39, 41, 43,
	61, 253, 254, 256, 258, 260, 263, 264, 266, 959,
	292, 294, 296, 298, 300, 0, -2, 973, 0, 0,
	45, 46, 47, 48, 49, 50, 51, 68, 69, 70,
	71, 72, 73, 74, 54, 56, 57, 63, 64, 66,
	0, 0, 935, 937, 939, 941, -2, 0, 0, -2,
	9, 11, 13, 15, 17, 19, 21, 23, 25, 333,
	337, 340, 342, 344, 346, 349, 351, 357, 359, 361,
	722, 1554, 1567, 1568, 1569, 1572, 1573, 1574, 1575, 1576,
	1577, 1898, 1978, 1979, 1596, 1597, 1598, 1599, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
	1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
	1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
	1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
	1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
	1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
	1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681,
	1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
	1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
	1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
	1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
	1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 0,
	371, 369, 1548, 372, 1735, 374, 376, 279, 280, 281,
	282, 283, 284, 0, 152, 0, 386, 380, 385, 387,
	389, 390, 391, 392, 367, 365, 0, 386, 1599, 384,
	829, 830, 824, 825, 1768, 859, 405, -2, -2, -2,
	1867, -2, 437, -2, 444, 1870, 1770, 447, 0, 449,
	-2, 452, 832, 834, 836, 31, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, -2, -2, -2,
	-2, 0, 0, 1633, 1525, 1569, 1528, 1523, 170, 172,
	174, 175, 0, 0, 0, 0, 0, 0, 198, 200,
	203, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	778, 0, 0, 0, 0, 0, 0, 0, 0, 645,
	646, 0, 0, 651, 773, 774, 795, 0, 0, 0,
	0, 287, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 231,
	325, 326, 0, 960, 0, 0, 0, 150, 143, 0,
	0, 634, 394, 396, 0, 142, 0, 0, 828, 0,
	410, 412, 414, 477, 479, 481, 483, 485, 487, 490,
	492, 494, 496, 498, 500, 502, 504, 506, 508, 510,
	512, 514, 516, 518, 520, 522, 523, 0, 0, 0,
	0, 0, 527, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 0, 526, 528, 529, 530,
	0, 575, 616, 617, 0, 764, 961, 861, 839, 852,
	861, 841, 842, 843, 844, 845, 850, 851, 854, 0,
	846, 847, 848, 34, 36, 38, 40, 42, 44, 255,
	257, 259, 261, 265, 267, -2, 933, 934, 293, 295,
	297, 299, 301, 397, 0, 399, 0, 527, 924, 0,
	-2, 0, 965, 965, 965, 0, 0, 934, 932, 0,
	402, 403, 456, 457, 1188, 0, 0, 0, 0, 0,
	1423, 1272, 0, 458, -2, 1303, 1305, 1846, 1867, 1422,
	1307, 1308, 1309, 1310, 1311, 0, 0, 1314, 0, 1316,
	1317, 1318, 1319, 0, 1321, 0, 1325, 1326, 1327, 0,
	1851, 1502, 1565, -2, 1093, 1094, 1095, 1096, 1097, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1561, 0, 1394,
	1341, -2, 1586, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1642, -2, -2, -2, -2,
	-2, -2, -2, 1149, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1881, 1345, 1346, 1347, 1348, 1349, 1350,
	1351, 1352, 1353, 0, 1835, 1852, 1853, 1858, 1860, 1854,
	1843, 1364, -2, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1150, -2,
	1847, 1848, 1863, 1864, 1869, 1874, 1875, 1850, 1859, -2,
	-2, 951, 1743, 954, 722, 952, 936, 938, 0, 940,
	0, 0, 0, 945, 968, 966, 0, 1004, 949, 950,
	960, 1019, 1042, 0, 1024, 0, 1042, 1064, 0, 1029,
	1763, 1342, 1343, 0, 1569, 1566, -2, 2, 0, 0,
	0, 0, 0, 194, 368, 0, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 407, 408,
	0, 432, 0, 436, 1842, -2, -2, 440, 862, 866,
	867, 868, 0, 0, 0, 0, 446, 0, 0, 433,
	434, 450, 453, 0, 52, 0, 1852, 1064, 53, 0,
	1538, 1591, 1592, 1593, 1594, 1595, 1881, 1897, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 55, 0, 1852,
	58, 0, 1852, 0, -2, 62, 0, 1852, 153, 154,
	1582, 1583, 1587, 1588, 1589, 1590, 65, 0, 1544, 67,
	0, 1541, 75, 0, 1852, 1522, 0, 0, 626, 1519,
	1524, 627, 1529, 0, 176, 177, 178, 179, 180, 1852,
	182, 183, 0, 185, 186, 1852, 188, 189, 0, 191,
	206, 207, 0, 209, 0, 1852, 0, 0, 0, 215,
	-2, 232, 0, 229, 0, 219, 220, 222, 223, 224,
	225, 226, 0, 0, 0, 779, 0, 269, 1549, 0,
	-2, 1852, 767, 770, 1852, 772, 784, 1552, 0, -2,
	0, 958, 1852, 875, 647, 648, 649, 650, 0, 278,
	0, 888, 0, 890, 0, 910, 1070, 1019, 233, 234,
	235, 236, 237, 1852, 0, 0, 0, 242, 0, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 135, 1852,
	304, 323, 135, 1852, 307, 135, 1852, 310, 135, 1852,
	313, 1517, 135, 1852, 316, 317, 1852, 319, 155, 320,
	1852, 322, 0, -2, 362, 1555, -2, 328, 0, -2,
	0, 167, 0, 632, 633, 0, 826, 827, 417, 0,
	0, 524, 525, 0, 0, 535, 536, 537, 538, 1741,
	1657, 541, 0, 544, 565, 579, 0, 0, 0, 548,
	550, 631, 552, 0, 0, 554, 0, 556, 0, 558,
	0, 560, 0, 562, 564, 566, 580, 568, 0, 0,
	0, 578, 0, 583, 584, 0, 0, 589, 590, 591,
	0, 593, 594, 595, 596, 0, 598, 599, -2, -2,
	603, 605, 0, 611, 0, 615, 0, 531, 532, 135,
	1068, 838, -2, 840, 0, 856, 927, -2, 0, 398,
	0, 401, 931, 925, 930, 982, 983, 0, 0, 0,
	0, 963, 964, 0, 0, 0, 922, 923, 0, 0,
	0, 0, 1428, 1429, 1430, 1431, 1432, 1433, 1436, 1437,
	1434, 1435, 1438, 1439, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 1442, 1443, 0, 0, 1445, 0, 1447, 0,
	0, 0, 0, 0, 0, 1251, 1253, 1510, 0, 0,
	1444, 1193, 1194, 1195, 1230, 1231, 0, 0, 1304, 1507,
	1506, 1306, 0, 1459, 0, 1313, 0, 1185, 1320, 1535,
	-2, 0, 1423, 1454, 0, 0, 1328, 1329, 1330, 0,
	0, 1459, 0, 0, 1501, 0, 1396, 0, 1129, 0,
	1130, 1131, 0, 1132, 1133, 1146, 1159, 0, 0, 0,
	0, 1163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1151, 0,
	0, 0, 1482, -2, 0, 0, 0, 0, 0, 953,
	0, 0, 1008, 1511, 1515, 1516, 1008, 1008, 0, 0,
	1460, 0, 0, 0, 0, 1061, 1061, 1061, 1059, 1036,
	0, 1042, 0, 1052, 0, 1042, 1042, 0, -2, 1024,
	0, 0, 1052, 1065, 1066, 0, 0, 0, 0, 0,
	0, 1570, 0, 0, 1557, 0, 167, 0, 378, 388,
	960, 0, 1462, 1084, 1080, 1087, 1088, 1089, 1090, 1136,
	1137, 1138, 1139, 1140, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, -2, 1147, 1149, 1170, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1142, 0, 1117, 1117,
	1117, 1134, 1135, 1158, 1169, 1161, 1169, 1165, 1085, 1086,
	1152, 1153, 1154, 1155, 0, 382, 0, 0, 0, 0,
	-2, 442, 0, 864, 0, 869, 467, 468, 469, 871,
	872, 445, 470, 471, 472, 473, 474, 475, 0, 739,
	0, 741, 1531, 0, 443, 460, 448, 0, 454, 76,
	821, 103, 0, 821, 821, 0, 0, 122, 0, 0,
	0, 0, 0, 94, 99, 82, 83, 0, 0, 0,
	0, 59, 747, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 0, 93, 0, 88,
	78, 0, 0, 96, 101, 0, 126, 128, 0, 0,
	1055, 625, 0, 0, 1570, 1527, 0, 0, 0, 0,
	208, 210, 0, 212, 213, 214, 0, 778, 0, 221,
	218, 262, 722, 1852, 746, 1852, 744, 1553, 0, 0,
	276, 271, 0, 273, 765, 0, 957, 0, 0, 0,
	0, 785, 0, 1852, 790, 1540, 1578, 1579, 877, 0,
	1076, 0, 891, 0, 0, 1071, 0, 1073, 0, 239,
	240, 241, 0, 302, 0, 133, 134, 0, 305, 0,
	308, 0, 311, 0, 0, 314, 0, 0, 0, 0,
	960, 0, 0, 0, 145, 0, 0, 0, 0, 167,
	1055, 419, 1055, 421, 0, 0, 539, 540, 542, 543,
	545, 546, 612, 547, 551, 0, 619, 1759, 629, 553,
	555, 557, 559, 561, 0, 570, 0, 572, 0, 574,
	586, 585, 587, 592, 597, 0, 0, 0, 0, 763,
	0, 855, 928, 930, 400, 926, 980, 981, 986, 990,
	991, 994, 997, 998, 988, 1188, 946, 947, 948, 974,
	975, 804, 0, 1978, 1189, 1081, 1190, 1191, 1537, 0,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	-2, -2, -2, -2, -2, -2, -2, -2, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, -2,
	-2, -2, 1228, 1229, -2, 1446, 1448, 0, 1510, 0,
	-2, 0, -2, -2, -2, -2, 1248, 0, 1250, 1255,
	1257, 1259, 0, 0, 0, 0, 1509, 1269, 1493, 1494,
	0, 0, 1425, 1426, 1427, 1254, 0, 1273, 1508, 1505,
	0, 0, 1458, 971, 1332, 0, 0, 0, 0, 1339,
	0, 1536, 1184, 1171, 1172, 1173, 1174, 1175, 1176, 1186,
	1324, 1456, 0, 1455, 0, 0, 0, 1466, 0, 1500,
	1496, 0, 1558, 1564, 1404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1376, 0, 1469, -2, -2,
	-2, -2, -2, -2, -2, 0, 1378, 0, 1380, 1460,
	1479, 0, 0, 1274, 0, 0, 0, 1423, 0, 1383,
	1460, 1487, 0, 0, 0, 0, 0, 1460, 0, 1492,
	0, 1390, 0, 1392, 955, 0, 0, 1076, 0, 0,
	0, 1514, 1076, 1076, 0, 1003, 0, 0, 0, 0,
	0, 0, 1056, 1060, 1057, 1058, 0, 0, 1042, 1052,
	1016, 0, 0, 1539, 1022, 1051, 0, 722, 1041, 1052,
	1052, 0, -2, 1026, 0, 0, 971, -2, 168, 721,
	0, 0, 0, 370, 0, 0, 0, 364, 366, 0,
	1077, 1079, 0, 1091, 0, 0, -2, 0, 0, 0,
	0, 0, 435, 0, 863, 870, 0, 464, 0, 466,
	740, 1533, 1532, 0, 455, 0, 0, 0, 0, 820,
	105, 1852, 0, 137, 0, 0, 706, 1545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 748,
	749, 751, 757, 759, 0, 753, 1534, 0, 754, 0,
	756, 758, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 1521, 158, 1054,
	0, 1520, 1530, 0, 181, 184, 187, 190, 0, 216,
	0, 0, 654, 637, 0, 742, 745, 0, 722, 777,
	1551, 0, 167, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 783, 0, 0, 0, 1852, 879, 885, 0,
	973, 1075, 0, 908, 893, 0, 0, 0, 908, 912,
	913, 915, 916, 0, 0, 1072, 0, 243, 324, 135,
	135, 135, 1518, 135, 135, 156, 318, 321, 327, 363,
	960, 167, 165, 1723, 163, 160, 162, 0, 0, 0,
	655, 657, 658, 659, 660, 0, 1579, 0, 1685, 1579,
	140, 167, 418, 423, 533, 0, 630, 628, 569, 0,
	0, 0, 582, 0, 0, 0, 0, 0, 613, 614,
	618, 1069, 929, 0, 992, 0, 989, 995, 996, 0,
	977, 802, 803, 0, 0, 0, 0, -2, -2, 0,
	0, 0, 1270, 0, -2, 1249, 1252, 1256, 1258, 1260,
	0, 0, 0, 0, 0, 0, 1449, 0, 1451, 1271,
	1503, 1506, 1421, 0, 0, 970, 971, 971, 971, 1338,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1464,
	1465, 0, 1331, 0, 1497, 0, 0, 0, 1340, 0,
	0, 0, 1141, 1115, 0, 1169, 1167, 1168, 1162, 1169,
	1166, 0, 0, 0, 0, 0, 1359, 0, 0, 0,
	1363, 1375, 0, 1377, 1379, 0, 0, 1381, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 1278, 1279, 1382, 1485, 1486, 0, 0, 0,
	0, 0, 0, 1388, 0, 1491, 1389, 1391, 960, 1005,
	1000, 1512, 1055, 1007, 1009, 1513, 1542, 1000, 1000, 0,
	1461, 1044, 0, 1046, 0, 0, 0, 1048, 0, 1037,
	0, 1039, 1052, 1021, 0, 0, 1014, 0, 1013, 722,
	1050, 1023, 1027, 1558, 0, 1067, 0, 1031, 1034, 0,
	0, 1571, 192, 195, 196, 193, 0, 377, 0, 1463,
	0, 1082, 0, 0, 0, 0, 0, 381, 0, 431,
	-2, 462, 463, 465, 461, 104, 808, 0, 0, 1543,
	0, 107, 1852, 116, 0, 683, 0, 0, 0, 0,
	0, 823, 0, 1852, 135, 1852, 135, 118, 121, 0,
	125, 123, 0, 0, 674, 77, 821, 80, 86, 0,
	0, 0, 92, 0, 814, 0, 752, 755, 761, 60,
	0, 816, 806, 0, 805, 127, 81, 87, 0, 818,
	79, 0, 167, 0, 0, 1526, 0, 0, 0, 0,
	653, -2, 0, 0, 0, 0, 0, 0, 0, 270,
	275, 274, 768, -2, 771, 780, 0, 782, 794, 0,
	0, 0, 881, 885, 0, 884, 958, 985, 972, 1074,
	886, 908, 0, 0, 0, 896, 898, 895, 892, 889,
	1076, 0, 0, 0, 0, 0, 238, 303, 306, 309,
	312, 315, 329, 144, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 0, 1579, 1579, 0, 1547, 141,
	420, 0, 0, 571, 573, 586, 606, 607, 669, 0,
	610, 0, 0, 976, 804, 0, 1192, 1233, 0, 0,
	-2, 0, 0, 1237, 0, 0, 0, -2, 0, 0,
	0, 1450, 1452, 0, 1505, 1333, 0, 0, 0, 0,
	1315, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 0, 1322,
	1323, 1424, 1467, 1495, 1499, 0, 1559, 1563, 1402, 1403,
	1407, 1550, 0, 0, 0, 1160, 1164, 1344, 0, 0,
	0, 0, 0, 0, 0, 1468, 1478, 1480, 1275, 1276,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	-2, -2, -2, 1293, 1294, 1295, -2, -2, -2, 0,
	0, 0, 1481, 1483, 1484, 1488, 1489, 0, 1385, 1386,
	1387, 1490, 0, 1002, 0, 1006, 0, 1002, 1002, 967,
	1045, 0, 1063, 1047, 1019, 1038, 0, 1028, 1017, 0,
	1018, 0, 1049, 0, 1025, 1030, 0, 1033, 0, 1333,
	-2, 151, 379, 0, 1083, 1092, 0, 1144, 1148, 383,
	0, 0, 0, 0, 136, 681, 705, 0, 0, 797,
	804, 0, 0, 109, 0, 0, 0, 117, 0, 114,
	0, 120, 124, 0, 0, 0, 0, 0, 0, 89,
	90, 91, 0, 95, 0, 0, 0, 0, 0, 138,
	0, 0, 211, 776, 217, 663, 0, 638, 0, 722,
	746, 0, 1055, 766, 781, 0, 0, 0, 0, 0,
	883, 885, 0, 876, 877, 908, 984, 887, 906, -2,
	905, 0, 0, 0, 973, 914, 911, 917, 918, 0,
	164, 0, 159, 161, 0, 147, 0, 0, 656, 661,
	0, 0, 0, 0, 0, 534, 581, 608, 668, 0,
	0, 987, 993, 978, 804, 1235, 1239, 0, 0, 0,
	1241, -2, 0, 1263, -2, -2, 1453, 1504, 1312, 971,
	1334, 1336, 1337, 1187, 1498, 0, 1409, 1406, 0, 1393,
	1116, 1354, 1355, 0, 0, 1358, 1360, 1361, 1362, 1477,
	0, 0, 0, 0, 1384, 956, 1398, 0, 0, 1010,
	1398, 1398, 0, 1042, 1040, 1015, 1011, 0, 1559, 1032,
	0, 0, 1078, 1143, 810, 812, 106, 0, 682, 0,
	685, 0, 0, 0, 0, 692, 693, 0, 0, 0,
	0, 0, 711, 720, 0, 799, 0, 0, 0, 111,
	130, 0, 0, 822, 0, 135, 135, 0, 0, 809,
	0, 0, 0, 0, 0, 815, 817, 807, 0, 819,
	157, 0, 671, 0, 642, 639, 654, 637, 743, 775,
	268, 0, 793, 0, 0, 0, 873, 885, 0, 878,
	879, 277, 0, 0, 0, 894, 897, 899, 985, 0,
	166, 167, 0, 0, 0, 0, 0, 0, 422, 424,
	0, 0, 430, 667, 0, 979, 1243, -2, -2, 1264,
	0, 1560, 1562, 973, 0, 1395, 0, 0, -2, 0,
	0, 0, 942, 0, 1001, 999, 943, 944, 1062, 1052,
	0, 1035, 108, 0, 686, 687, 1546, 689, 0, 691,
	694, 0, 696, 1581, 0, 700, 707, 712, 0, 663,
	0, 717, 718, 798, 709, 0, 110, 112, 129, 801,
	113, 119, 0, 0, 0, 0, 0, 0, 97, 0,
	1053, 637, 670, 0, 640, 0, 0, 0, 0, 794,
	0, 0, 0, 880, 881, 0, 0, 0, 908, 919,
	146, 0, 0, 720, 0, 0, 704, 0, 426, 0,
	428, 0, 609, 1335, 1413, 0, 1356, 1357, -2, 0,
	1301, 1397, 1399, 0, 1020, 1012, 684, 688, 0, 0,
	726, 0, 0, 0, 715, 716, 671, 0, 0, 132,
	0, 0, 0, 811, 813, 0, 0, 0, 635, 0,
	643, 0, 663, 0, 720, 0, 720, 0, 882, 883,
	0, 901, 902, 904, 909, 0, 0, 663, 720, 703,
	425, 0, 0, 0, 0, 0, 0, 1408, 1302, 0,
	0, 0, 695, 731, 0, 0, 0, 713, 714, 711,
	0, 722, 115, 0, 800, 0, 675, 0, 0, 678,
	0, 0, 98, 0, 0, 644, 671, 642, 663, 0,
	663, 0, 874, 0, 903, 167, 167, 671, 663, 427,
	429, 1405, 1410, 1414, -2, 1816, 1630, 0, 1411, 1412,
	1400, 1401, 0, 697, 727, 728, 0, 723, 724, 725,
	1580, 698, 699, 708, 719, 726, 131, 672, 0, 0,
	673, 0, 0, 100, 102, 0, 637, 641, 671, 0,
	671, 0, 1076, 148, 149, 701, 671, 0, 1416, 1417,
	1418, 1419, 1420, 690, 729, 0, 730, 0, 0, 0,
	731, 676, 0, 679, 0, 0, 636, 791, 720, 791,
	720, 900, 702, 0, 732, 0, 735, 736, 0, 733,
	711, 0, 0, 666, 786, 0, 663, 788, 663, 1415,
	734, 737, 738, 710, 0, 0, 662, 664, 665, 792,
	671, 671, 671, 0, 791, 791, 677, 0, 787, 789,
	0, 0, 671, 680,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 447, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 451, 446,
	423, 425, 424, 427, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 449, 430, 450, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1031
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1037
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1046
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1055
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1059
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1061
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1071
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1139
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1151
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1166
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1170
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1179
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1195
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1207
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1225
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1248
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1252
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1261
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1276
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1282
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1293
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1303
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1315
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1322
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1334
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1341
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1349
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1354
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1358
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1369
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1377
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1390
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1406
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1416
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1426
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1435
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1446
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1450
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1472
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1477
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1482
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1487
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1492
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1501
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1504
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1513
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1525
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1542
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1545
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1552
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1570
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1582
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1678
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1681
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1711
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1715
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1752
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1757
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1761
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1771
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1780
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1789
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1797
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1816
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1830
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1850
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1854
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1862
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1868
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1878
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1882
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1886
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1892
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1909
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1912
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1922
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1930
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1932
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1935
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1945
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1954
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1962
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1964
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1968
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1971
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1981
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1990
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1998
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2000
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2004
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2011
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2020
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = &sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2034
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2046
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2047
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2049
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2050
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2051
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "create cast")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2056
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2062
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2063
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2064
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2065
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2066
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2067
		{
			return unimplemented(sqllex, "create operator")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			return unimplemented(sqllex, "create publication")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2069
		{
			return unimplemented(sqllex, "create rule")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2070
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			return unimplemented(sqllex, "create server")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2072
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2073
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2077
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2078
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2081
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2082
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2085
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2086
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2089
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2095
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2096
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2097
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2099
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2101
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2102
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2103
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2104
		{
			return unimplemented(sqllex, "drop server")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2105
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2106
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2107
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2112
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2113
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2114
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2115
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2117
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2118
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2119
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2120
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2130
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       name,
				AsOf:        sqlDollar[8].union.asOfClause(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2143
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2147
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2157
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2161
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2167
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2171
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2178
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2182
		{

			sqlVAL.union.val = nil
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2196
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2206
		{
			return helpWith(sqllex, "DELETE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2213
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2216
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2217
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2218
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2220
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2229
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2230
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2231
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2232
		{
			return helpWith(sqllex, "DROP")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2235
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2236
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2237
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2238
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2239
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2247
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2251
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2254
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2262
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2266
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2269
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2277
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2281
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2284
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2292
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2300
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2307
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2323
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2342
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2345
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2353
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2357
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2360
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2364
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2373
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2400
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2403
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2405
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2409
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2413
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2420
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2424
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2427
		{
			return helpWith(sqllex, "DELETE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2429
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2430
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2431
		{
			return helpWith(sqllex, "INSERT")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2432
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2434
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2435
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2438
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2443
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2444
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2445
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2463
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2474
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2478
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2488
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2498
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2502
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2512
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2516
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2547
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2551
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2555
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2558
		{
			return helpWith(sqllex, "GRANT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2578
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2582
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2586
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2589
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2594
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2598
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2609
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2613
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2627
		{
			return helpWith(sqllex, "RESET")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2628
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2636
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2640
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2643
		{
			return helpWith(sqllex, "RESET")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2651
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2665
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2668
		{
			return helpWith(sqllex, "USE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2672
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2673
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2674
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2675
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2679
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "USE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2697
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2715
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2733
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2746
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2754
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2760
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2774
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2778
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2782
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2786
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2800
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2810
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2826
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2830
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2835
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2852
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2855
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2857
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2860
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2864
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2883
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2890
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2896
		{
			return unimplemented(sqllex, "set from current")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2897
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2905
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2910
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2917
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2921
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2927
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2938
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2959
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2963
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2969
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2973
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2977
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2981
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2985
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2991
		{
			sqlVAL.union.val = tree.Low
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2995
		{
			sqlVAL.union.val = tree.Normal
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2999
		{
			sqlVAL.union.val = tree.High
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3014
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3018
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3023
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3027
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3043
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3047
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3051
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3052
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3053
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3054
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3055
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3056
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3057
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3058
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3059
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3060
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3061
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3063
		{
			return helpWith(sqllex, "SHOW")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3070
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3071
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3072
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.str = "client_encoding"
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.str = "timezone"
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3087
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3101
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3110
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3119
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3130
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3147
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3154
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3162
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3169
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3179
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3183
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3186
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3188
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3191
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3199
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3215
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3218
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3231
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3239
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3247
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3255
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3257
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3265
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3267
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3275
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3283
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3291
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3293
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3301
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3309
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3328
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3331
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3340
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3345
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3348
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3350
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3354
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3357
		{
			sqlVAL.union.val = true
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3358
		{
			sqlVAL.union.val = false
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3366
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3369
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3371
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3375
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3385
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3395
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3405
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3411
		{
			sqlVAL.union.val = true
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3412
		{
			sqlVAL.union.val = false
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3419
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3423
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3426
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3433
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3437
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3445
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3450
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3455
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3459
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3467
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3476
		{

			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3485
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3498
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3501
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3509
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3512
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3520
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3524
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3535
		{
			name, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3547
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3557
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3568
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3588
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3600
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3605
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3725
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3733
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3772
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3776
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3781
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3785
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3794
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3801
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3805
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3817
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3826
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3829
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3865
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3882
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3900
		{
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3901
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3902
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3906
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3922
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3939
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3940
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3941
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3955
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3956
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3957
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3958
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3959
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3960
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3961
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3962
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3967
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3973
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3983
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3989
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3992
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:3996
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4009
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4016
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4021
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4026
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4032
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4039
		{
			sqlVAL.str = ""
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4046
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4052
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4059
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4066
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4072
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4076
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 677:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4082
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4092
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4096
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4102
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4113
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4124
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4128
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4134
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4138
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4146
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4150
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4154
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4158
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4176
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4180
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4184
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4192
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4196
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4200
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4213
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4217
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 701:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4228
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4238
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4250
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4260
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4272
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4277
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4283
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4289
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4300
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4310
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4325
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4326
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4327
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4328
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4329
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4330
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4347
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4351
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4357
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4361
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4383
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match full")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4384
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4385
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match simple")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4386
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4397
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4401
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4405
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4409
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4415
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4445
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4451
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4455
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4461
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4480
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4489
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4497
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4501
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4505
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4508
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4509
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4511
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4512
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4513
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4516
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4518
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4520
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4522
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4523
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4525
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4526
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4528
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4530
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4538
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4541
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4549
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4553
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4556
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4560
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4564
		{
			sqlVAL.union.val = nil
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4574
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4578
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4581
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4586
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4587
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4595
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4607
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4608
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4611
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4612
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4618
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4620
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4622
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4624
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4626
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4628
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4644
		{
			table, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4662
		{
			table, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4681
		{
			table, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4699
		{
			table, err := tree.NormalizeTableName(sqlDollar[10].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4717
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4720
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4721
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4725
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4740
		{
			sqlVAL.union.val = false
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4746
		{
			sqlVAL.union.val = true
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4750
		{
			sqlVAL.union.val = false
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4756
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4760
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4769
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4780
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4785
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = tree.Descending
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 805:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4806
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4810
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4816
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4830
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4844
		{
			table, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4858
		{
			table, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4872
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4874
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4878
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4892
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4908
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4922
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4938
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4942
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4947
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4948
		{
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4951
		{
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4952
		{
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4960
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4963
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4973
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4982
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4985
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4993
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4996
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5000
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5001
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5002
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5018
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5021
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5023
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5026
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5036
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5039
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5041
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5044
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5048
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5053
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5054
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5055
		{
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5063
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5070
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5073
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5074
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5078
		{
			sqlVAL.str = ""
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5082
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5086
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5090
		{
			sqlVAL.str = ""
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5096
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5100
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5110
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5116
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5120
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5133
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5135
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5139
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5144
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5148
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5154
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5160
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5166
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5170
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 873:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5180
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5190
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5200
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5204
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5208
		{
			sqlVAL.str = ""
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5214
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5218
		{
			sqlVAL.str = ""
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5224
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5228
		{
			sqlVAL.str = ""
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5234
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5238
		{
			sqlVAL.str = ""
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5243
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5244
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5256
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5263
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5270
		{
			return helpWith(sqllex, "INSERT")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5281
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5288
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5292
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5305
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5316
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5320
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5324
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5330
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5334
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5354
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5358
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5362
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5368
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5371
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5372
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5374
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5380
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5385
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5389
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 909:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5406
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5417
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5421
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5422
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5426
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5443
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5446
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5450
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5493
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5499
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5503
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5518
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5530
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5534
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5538
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5543
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5544
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5549
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5584
		{
			return helpWith(sqllex, "SELECT")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5585
		{
			return helpWith(sqllex, "VALUES")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5586
		{
			return helpWith(sqllex, "TABLE")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5608
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5635
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5647
		{
			return helpWith(sqllex, "SELECT")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5651
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5660
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5669
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5684
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5691
		{
			return helpWith(sqllex, "TABLE")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5703
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5707
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5711
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5715
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 956:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5725
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5733
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5734
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5738
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = nil
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5747
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5748
		{
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.union.val = true
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = false
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = false
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.union.val = true
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5772
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5777
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5778
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5781
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5782
		{
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5796
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5806
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5812
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5816
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5825
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5844
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5853
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5868
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5877
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5883
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5890
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5897
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5906
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5910
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5914
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5920
		{
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5921
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5924
		{
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5925
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5942
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5946
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5952
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5956
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5978
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5980
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5992
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5995
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5997
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6003
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6013
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6017
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6029
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6034
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6046
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6050
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6054
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6058
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6085
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6099
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6113
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6120
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6122
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6130
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6134
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6160
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6166
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6172
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6178
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6180
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6183
		{
			sqlVAL.union.val = nil
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6185
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6189
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6193
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6199
		{
			sqlVAL.union.val = true
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = false
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6223
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6227
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6231
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6239
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6243
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6249
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6253
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6260
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6266
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6273
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6279
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6287
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6297
		{
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6298
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6309
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6313
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6319
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6320
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6321
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6325
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6334
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6356
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6362
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6370
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6384
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6403
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6417
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6426
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6435
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6441
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6450
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6459
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6470
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6471
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6488
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6492
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6496
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6524
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6528
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6532
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6536
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6540
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6544
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6552
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6556
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6587
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6591
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6595
		{
			sqlVAL.union.val = nil
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6606
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6610
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6614
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6630
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6638
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6646
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6650
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6661
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6668
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6686
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6690
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6708
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6723
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6729
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6735
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6743
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6747
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6751
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6757
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6770
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6776
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6797
		{
			sqlVAL.union.val = true
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6798
		{
			sqlVAL.union.val = false
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6807
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6811
		{
			return unimplementedWithIssue(sqllex, 32565)
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6812
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6813
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6815
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6822
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6827
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6830
		{
			sqlVAL.union.val = true
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6831
		{
			sqlVAL.union.val = false
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6832
		{
			sqlVAL.union.val = false
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = tree.Year
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = tree.Month
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = tree.Day
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = tree.Month
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6872
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6876
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6880
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6884
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6888
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6892
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6899
		{
			sqlVAL.union.val = nil
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6905
		{
			sqlVAL.union.val = tree.Second
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6908
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6943
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6952
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6957
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7165
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7196
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7198
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7206
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7210
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7218
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7226
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7230
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7234
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7238
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7242
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7246
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7250
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7254
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7258
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7262
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7284
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7348
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7418
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7426
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7462
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7466
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7470
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7474
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7478
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7483
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7492
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7510
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7519
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7532
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7556
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7567
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7568
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7581
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7592
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7599
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7609
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7613
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7615
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7619
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7633
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7643
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7647
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7655
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7659
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7663
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7667
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7701
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7706
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7711
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7713
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7716
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7721
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7728
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7731
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7736
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7745
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7746
		{
			return unimplemented(sqllex, "treat")
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7748
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7760
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7764
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7767
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7772
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7777
		{
			return unimplemented(sqllex, "within group")
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7778
		{
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7782
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7786
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7797
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7803
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7807
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7813
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7825
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.str = ""
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7877
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7904
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7917
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7964
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7991
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = tree.Any
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = tree.Some
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = tree.All
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = tree.Div
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8020
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8024
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = tree.LT
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = tree.GT
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = tree.LE
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = tree.GE
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = tree.NE
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = tree.Like
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8071
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8100
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8147
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8151
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8157
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8161
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8191
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8204
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8208
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8225
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8233
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8247
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8259
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8267
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8342
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8351
		{
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8352
		{
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8379
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8383
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8401
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8405
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8411
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8423
		{

			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       name,
				SearchTable: true,
			}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8456
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8460
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8464
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8470
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8474
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8486
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8497
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8508
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8518
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8616
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8623
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8645
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8653
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8666
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8684
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8694
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8720
		{
			sqlVAL.str = ""
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8726
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8730
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
