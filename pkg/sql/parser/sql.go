// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:66

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:624
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10259

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 1106,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 71,
	187, 933,
	204, 933,
	219, 249,
	306, 249,
	315, 752,
	342, 249,
	351, 752,
	390, 752,
	414, 249,
	439, 752,
	-2, 0,
	-1, 76,
	219, 253,
	-2, 0,
	-1, 77,
	114, 1106,
	193, 1106,
	424, 1106,
	425, 1106,
	-2, 0,
	-1, 89,
	127, 1080,
	143, 1080,
	156, 1080,
	201, 1080,
	231, 1080,
	269, 1080,
	279, 1080,
	419, 1080,
	-2, 1051,
	-1, 121,
	133, 661,
	218, 661,
	309, 641,
	360, 641,
	407, 661,
	-2, 0,
	-1, 122,
	4, 1108,
	21, 1108,
	22, 1108,
	23, 1108,
	24, 1108,
	25, 1108,
	27, 1108,
	33, 1108,
	38, 1108,
	39, 1108,
	40, 1108,
	41, 1108,
	42, 1108,
	43, 1108,
	44, 1108,
	45, 1108,
	46, 1108,
	47, 1108,
	48, 1108,
	49, 1108,
	50, 1108,
	52, 1108,
	53, 1108,
	54, 1108,
	55, 1108,
	56, 1108,
	57, 1108,
	58, 1108,
	61, 1108,
	62, 1108,
	63, 1108,
	64, 1108,
	66, 1108,
	67, 1108,
	68, 1108,
	72, 1108,
	73, 1108,
	74, 1108,
	75, 1108,
	76, 1108,
	77, 1108,
	79, 1108,
	80, 1108,
	81, 1108,
	82, 1108,
	84, 1108,
	86, 1108,
	87, 1108,
	88, 1108,
	90, 1108,
	92, 1108,
	93, 1108,
	101, 1108,
	102, 1108,
	103, 1108,
	104, 1108,
	105, 1108,
	106, 1108,
	107, 1108,
	108, 1108,
	110, 1108,
	111, 1108,
	113, 1108,
	114, 1108,
	116, 1108,
	119, 1108,
	120, 1108,
	121, 1108,
	123, 1108,
	125, 1108,
	126, 1108,
	128, 1108,
	129, 1108,
	130, 1108,
	131, 1108,
	132, 1108,
	133, 1108,
	134, 1108,
	135, 1108,
	136, 1108,
	137, 1108,
	138, 1108,
	139, 1108,
	140, 1108,
	142, 1108,
	148, 1108,
	149, 1108,
	150, 1108,
	151, 1108,
	152, 1108,
	153, 1108,
	155, 1108,
	157, 1108,
	161, 1108,
	162, 1108,
	164, 1108,
	165, 1108,
	167, 1108,
	168, 1108,
	170, 1108,
	171, 1108,
	172, 1108,
	173, 1108,
	174, 1108,
	175, 1108,
	176, 1108,
	177, 1108,
	179, 1108,
	180, 1108,
	182, 1108,
	183, 1108,
	184, 1108,
	187, 1108,
	188, 1108,
	189, 1108,
	190, 1108,
	193, 1108,
	194, 1108,
	195, 1108,
	196, 1108,
	197, 1108,
	198, 1108,
	199, 1108,
	200, 1108,
	202, 1108,
	204, 1108,
	206, 1108,
	208, 1108,
	209, 1108,
	210, 1108,
	212, 1108,
	213, 1108,
	216, 1108,
	217, 1108,
	218, 1108,
	219, 1108,
	220, 1108,
	222, 1108,
	223, 1108,
	225, 1108,
	226, 1108,
	228, 1108,
	229, 1108,
	232, 1108,
	233, 1108,
	236, 1108,
	237, 1108,
	238, 1108,
	239, 1108,
	241, 1108,
	242, 1108,
	243, 1108,
	244, 1108,
	245, 1108,
	246, 1108,
	247, 1108,
	248, 1108,
	249, 1108,
	250, 1108,
	252, 1108,
	253, 1108,
	254, 1108,
	255, 1108,
	256, 1108,
	258, 1108,
	260, 1108,
	262, 1108,
	264, 1108,
	265, 1108,
	266, 1108,
	267, 1108,
	268, 1108,
	270, 1108,
	271, 1108,
	272, 1108,
	274, 1108,
	275, 1108,
	276, 1108,
	277, 1108,
	280, 1108,
	281, 1108,
	282, 1108,
	284, 1108,
	286, 1108,
	287, 1108,
	288, 1108,
	289, 1108,
	290, 1108,
	291, 1108,
	292, 1108,
	293, 1108,
	294, 1108,
	295, 1108,
	297, 1108,
	298, 1108,
	299, 1108,
	300, 1108,
	301, 1108,
	302, 1108,
	303, 1108,
	305, 1108,
	307, 1108,
	308, 1108,
	309, 1108,
	310, 1108,
	311, 1108,
	312, 1108,
	313, 1108,
	314, 1108,
	315, 1108,
	316, 1108,
	318, 1108,
	319, 1108,
	320, 1108,
	321, 1108,
	322, 1108,
	324, 1108,
	325, 1108,
	326, 1108,
	327, 1108,
	328, 1108,
	329, 1108,
	330, 1108,
	331, 1108,
	333, 1108,
	335, 1108,
	336, 1108,
	337, 1108,
	338, 1108,
	339, 1108,
	340, 1108,
	342, 1108,
	343, 1108,
	344, 1108,
	345, 1108,
	346, 1108,
	347, 1108,
	348, 1108,
	349, 1108,
	351, 1108,
	352, 1108,
	353, 1108,
	354, 1108,
	355, 1108,
	356, 1108,
	357, 1108,
	358, 1108,
	359, 1108,
	360, 1108,
	362, 1108,
	363, 1108,
	364, 1108,
	365, 1108,
	366, 1108,
	368, 1108,
	369, 1108,
	370, 1108,
	371, 1108,
	372, 1108,
	374, 1108,
	375, 1108,
	376, 1108,
	377, 1108,
	378, 1108,
	379, 1108,
	380, 1108,
	381, 1108,
	382, 1108,
	383, 1108,
	384, 1108,
	385, 1108,
	387, 1108,
	388, 1108,
	389, 1108,
	391, 1108,
	392, 1108,
	393, 1108,
	394, 1108,
	395, 1108,
	396, 1108,
	397, 1108,
	399, 1108,
	400, 1108,
	401, 1108,
	402, 1108,
	403, 1108,
	405, 1108,
	407, 1108,
	408, 1108,
	409, 1108,
	410, 1108,
	411, 1108,
	413, 1108,
	414, 1108,
	415, 1108,
	417, 1108,
	418, 1108,
	421, 1108,
	422, 1108,
	423, 1108,
	424, 1108,
	425, 1108,
	426, 1108,
	427, 1108,
	429, 1108,
	431, 1108,
	432, 1108,
	433, 1108,
	434, 1108,
	435, 1108,
	436, 1108,
	437, 1108,
	439, 1108,
	440, 1108,
	441, 1108,
	446, 1108,
	447, 1108,
	448, 1108,
	449, 1108,
	450, 1108,
	451, 1108,
	-2, 0,
	-1, 123,
	1, 985,
	208, 985,
	305, 985,
	313, 985,
	454, 985,
	477, 985,
	-2, 0,
	-1, 125,
	1, 985,
	477, 985,
	-2, 0,
	-1, 126,
	1, 985,
	477, 985,
	-2, 0,
	-1, 127,
	1, 985,
	404, 985,
	477, 985,
	-2, 0,
	-1, 152,
	127, 1079,
	143, 1079,
	156, 1079,
	201, 1079,
	231, 1079,
	269, 1079,
	279, 1079,
	419, 1079,
	-2, 1054,
	-1, 185,
	4, 1115,
	5, 1115,
	6, 1115,
	7, 1115,
	8, 1115,
	9, 1115,
	10, 1115,
	21, 1115,
	22, 1115,
	23, 1115,
	24, 1115,
	25, 1115,
	27, 1115,
	33, 1115,
	34, 1115,
	38, 1115,
	39, 1115,
	40, 1115,
	41, 1115,
	42, 1115,
	43, 1115,
	44, 1115,
	45, 1115,
	46, 1115,
	47, 1115,
	48, 1115,
	49, 1115,
	50, 1115,
	52, 1115,
	53, 1115,
	54, 1115,
	55, 1115,
	56, 1115,
	57, 1115,
	58, 1115,
	59, 1115,
	60, 1115,
	61, 1115,
	62, 1115,
	63, 1115,
	64, 1115,
	66, 1115,
	67, 1115,
	68, 1115,
	70, 1115,
	72, 1115,
	73, 1115,
	74, 1115,
	75, 1115,
	76, 1115,
	77, 1115,
	79, 1115,
	80, 1115,
	81, 1115,
	82, 1115,
	84, 1115,
	86, 1115,
	87, 1115,
	88, 1115,
	90, 1115,
	91, 1115,
	92, 1115,
	93, 1115,
	94, 1115,
	95, 1115,
	96, 1115,
	97, 1115,
	98, 1115,
	99, 1115,
	100, 1115,
	101, 1115,
	102, 1115,
	103, 1115,
	104, 1115,
	105, 1115,
	106, 1115,
	107, 1115,
	108, 1115,
	109, 1115,
	110, 1115,
	111, 1115,
	113, 1115,
	114, 1115,
	116, 1115,
	119, 1115,
	120, 1115,
	121, 1115,
	123, 1115,
	125, 1115,
	126, 1115,
	128, 1115,
	129, 1115,
	130, 1115,
	131, 1115,
	132, 1115,
	133, 1115,
	134, 1115,
	135, 1115,
	136, 1115,
	137, 1115,
	138, 1115,
	139, 1115,
	140, 1115,
	141, 1115,
	142, 1115,
	148, 1115,
	149, 1115,
	150, 1115,
	151, 1115,
	152, 1115,
	153, 1115,
	155, 1115,
	157, 1115,
	160, 1115,
	161, 1115,
	162, 1115,
	164, 1115,
	165, 1115,
	167, 1115,
	168, 1115,
	170, 1115,
	171, 1115,
	172, 1115,
	173, 1115,
	174, 1115,
	175, 1115,
	176, 1115,
	177, 1115,
	178, 1115,
	179, 1115,
	180, 1115,
	182, 1115,
	183, 1115,
	184, 1115,
	187, 1115,
	188, 1115,
	189, 1115,
	190, 1115,
	192, 1115,
	193, 1115,
	194, 1115,
	195, 1115,
	196, 1115,
	197, 1115,
	198, 1115,
	199, 1115,
	200, 1115,
	202, 1115,
	204, 1115,
	205, 1115,
	206, 1115,
	207, 1115,
	208, 1115,
	209, 1115,
	210, 1115,
	211, 1115,
	212, 1115,
	213, 1115,
	216, 1115,
	217, 1115,
	218, 1115,
	219, 1115,
	220, 1115,
	222, 1115,
	223, 1115,
	225, 1115,
	226, 1115,
	227, 1115,
	228, 1115,
	229, 1115,
	230, 1115,
	232, 1115,
	233, 1115,
	234, 1115,
	235, 1115,
	236, 1115,
	237, 1115,
	238, 1115,
	239, 1115,
	241, 1115,
	242, 1115,
	243, 1115,
	244, 1115,
	245, 1115,
	246, 1115,
	247, 1115,
	248, 1115,
	249, 1115,
	250, 1115,
	251, 1115,
	252, 1115,
	253, 1115,
	254, 1115,
	255, 1115,
	256, 1115,
	257, 1115,
	258, 1115,
	259, 1115,
	260, 1115,
	261, 1115,
	262, 1115,
	263, 1115,
	264, 1115,
	265, 1115,
	266, 1115,
	267, 1115,
	268, 1115,
	270, 1115,
	271, 1115,
	272, 1115,
	275, 1115,
	276, 1115,
	277, 1115,
	280, 1115,
	281, 1115,
	282, 1115,
	283, 1115,
	284, 1115,
	285, 1115,
	286, 1115,
	287, 1115,
	288, 1115,
	289, 1115,
	290, 1115,
	291, 1115,
	292, 1115,
	293, 1115,
	294, 1115,
	295, 1115,
	297, 1115,
	298, 1115,
	299, 1115,
	300, 1115,
	301, 1115,
	302, 1115,
	303, 1115,
	305, 1115,
	307, 1115,
	308, 1115,
	309, 1115,
	310, 1115,
	311, 1115,
	312, 1115,
	313, 1115,
	314, 1115,
	315, 1115,
	316, 1115,
	318, 1115,
	319, 1115,
	320, 1115,
	321, 1115,
	322, 1115,
	324, 1115,
	325, 1115,
	326, 1115,
	327, 1115,
	328, 1115,
	329, 1115,
	330, 1115,
	331, 1115,
	333, 1115,
	334, 1115,
	335, 1115,
	336, 1115,
	337, 1115,
	338, 1115,
	339, 1115,
	340, 1115,
	342, 1115,
	343, 1115,
	344, 1115,
	345, 1115,
	346, 1115,
	347, 1115,
	348, 1115,
	349, 1115,
	351, 1115,
	352, 1115,
	353, 1115,
	354, 1115,
	355, 1115,
	356, 1115,
	357, 1115,
	358, 1115,
	359, 1115,
	360, 1115,
	361, 1115,
	362, 1115,
	363, 1115,
	364, 1115,
	365, 1115,
	366, 1115,
	367, 1115,
	368, 1115,
	369, 1115,
	370, 1115,
	371, 1115,
	372, 1115,
	374, 1115,
	375, 1115,
	376, 1115,
	377, 1115,
	378, 1115,
	379, 1115,
	380, 1115,
	381, 1115,
	382, 1115,
	383, 1115,
	384, 1115,
	385, 1115,
	387, 1115,
	388, 1115,
	389, 1115,
	391, 1115,
	392, 1115,
	393, 1115,
	394, 1115,
	395, 1115,
	396, 1115,
	397, 1115,
	399, 1115,
	400, 1115,
	401, 1115,
	402, 1115,
	403, 1115,
	405, 1115,
	407, 1115,
	408, 1115,
	409, 1115,
	410, 1115,
	411, 1115,
	412, 1115,
	413, 1115,
	414, 1115,
	415, 1115,
	417, 1115,
	418, 1115,
	420, 1115,
	421, 1115,
	422, 1115,
	423, 1115,
	424, 1115,
	425, 1115,
	426, 1115,
	427, 1115,
	428, 1115,
	429, 1115,
	431, 1115,
	432, 1115,
	433, 1115,
	434, 1115,
	435, 1115,
	436, 1115,
	437, 1115,
	439, 1115,
	440, 1115,
	441, 1115,
	446, 1115,
	447, 1115,
	448, 1115,
	449, 1115,
	450, 1115,
	451, 1115,
	452, 1115,
	458, 1115,
	465, 1115,
	466, 1115,
	467, 1115,
	474, 1115,
	478, 1115,
	-2, 0,
	-1, 574,
	159, 1820,
	404, 1820,
	457, 1820,
	476, 1820,
	-2, 0,
	-1, 575,
	159, 1901,
	404, 1901,
	457, 1901,
	476, 1901,
	-2, 0,
	-1, 576,
	159, 1809,
	404, 1809,
	457, 1809,
	476, 1809,
	-2, 0,
	-1, 578,
	159, 1998,
	404, 1998,
	457, 1998,
	476, 1998,
	-2, 0,
	-1, 580,
	159, 2028,
	404, 2028,
	457, 2028,
	476, 2028,
	-2, 0,
	-1, 587,
	159, 1913,
	404, 1913,
	457, 1913,
	476, 1913,
	-2, 503,
	-1, 611,
	476, 1764,
	479, 1764,
	-2, 714,
	-1, 612,
	476, 1766,
	479, 1766,
	-2, 715,
	-1, 613,
	476, 1765,
	479, 1765,
	-2, 716,
	-1, 614,
	479, 1701,
	-2, 717,
	-1, 656,
	439, 915,
	-2, 753,
	-1, 759,
	309, 642,
	360, 642,
	-2, 0,
	-1, 760,
	309, 641,
	360, 641,
	-2, 589,
	-1, 764,
	1, 671,
	473, 671,
	475, 671,
	477, 671,
	-2, 0,
	-1, 765,
	1, 713,
	156, 713,
	473, 713,
	475, 713,
	477, 713,
	-2, 0,
	-1, 773,
	1, 645,
	473, 645,
	475, 645,
	477, 645,
	-2, 0,
	-1, 776,
	1, 671,
	473, 671,
	475, 671,
	477, 671,
	-2, 0,
	-1, 777,
	1, 673,
	473, 673,
	475, 673,
	477, 673,
	-2, 0,
	-1, 778,
	1, 676,
	473, 676,
	475, 676,
	477, 676,
	-2, 0,
	-1, 783,
	1, 692,
	473, 692,
	475, 692,
	477, 692,
	-2, 0,
	-1, 784,
	1, 694,
	473, 694,
	475, 694,
	477, 694,
	-2, 0,
	-1, 827,
	143, 1117,
	156, 1117,
	231, 1117,
	269, 1117,
	-2, 1058,
	-1, 840,
	143, 1116,
	156, 1116,
	231, 1116,
	269, 1116,
	-2, 1055,
	-1, 864,
	476, 1763,
	-2, 511,
	-1, 892,
	474, 1755,
	-2, 1746,
	-1, 898,
	5, 1257,
	-2, 1797,
	-1, 899,
	5, 1258,
	-2, 1803,
	-1, 900,
	5, 1259,
	-2, 1802,
	-1, 901,
	5, 1260,
	-2, 2025,
	-1, 902,
	5, 1261,
	-2, 1915,
	-1, 903,
	5, 1262,
	-2, 1990,
	-1, 904,
	5, 1263,
	-2, 1992,
	-1, 905,
	5, 1264,
	-2, 2005,
	-1, 906,
	5, 1265,
	-2, 1993,
	-1, 907,
	5, 1266,
	-2, 1994,
	-1, 908,
	5, 1267,
	-2, 1796,
	-1, 909,
	5, 1268,
	-2, 2042,
	-1, 910,
	5, 1269,
	-2, 1875,
	-1, 911,
	5, 1270,
	-2, 1927,
	-1, 912,
	5, 1271,
	-2, 1929,
	-1, 913,
	5, 1272,
	-2, 1879,
	-1, 914,
	5, 1273,
	474, 1773,
	-2, 1764,
	-1, 920,
	474, 1774,
	-2, 1765,
	-1, 922,
	5, 1277,
	-2, 2075,
	-1, 923,
	5, 1278,
	-2, 2076,
	-1, 924,
	5, 1279,
	-2, 1878,
	-1, 925,
	5, 1280,
	-2, 2088,
	-1, 926,
	5, 1281,
	-2, 1880,
	-1, 927,
	5, 1282,
	-2, 1881,
	-1, 928,
	5, 1283,
	-2, 1882,
	-1, 929,
	5, 1284,
	-2, 2057,
	-1, 930,
	5, 1285,
	-2, 2086,
	-1, 931,
	5, 1286,
	-2, 1858,
	-1, 932,
	5, 1287,
	-2, 1859,
	-1, 933,
	5, 1301,
	-2, 2069,
	-1, 935,
	5, 1276,
	-2, 2065,
	-1, 936,
	5, 1276,
	-2, 2064,
	-1, 937,
	5, 1276,
	-2, 2081,
	-1, 938,
	5, 1293,
	-2, 2059,
	-1, 939,
	5, 1294,
	-2, 1798,
	-1, 940,
	5, 1304,
	-2, 2058,
	-1, 941,
	5, 1306,
	-2, 2097,
	-1, 943,
	5, 1317,
	-2, 1831,
	-1, 944,
	5, 1328,
	-2, 2090,
	-1, 945,
	5, 1320,
	-2, 2091,
	-1, 946,
	5, 1328,
	-2, 2092,
	-1, 947,
	5, 1324,
	-2, 2093,
	-1, 948,
	5, 1245,
	-2, 1888,
	-1, 949,
	5, 1246,
	-2, 1889,
	-1, 950,
	476, 1761,
	-2, 1745,
	-1, 951,
	474, 2118,
	-2, 1762,
	-1, 973,
	5, 1312,
	-2, 2016,
	-1, 991,
	5, 1311,
	-2, 2098,
	-1, 1001,
	5, 1313,
	440, 1313,
	-2, 2060,
	-1, 1002,
	5, 1314,
	440, 1314,
	-2, 2061,
	-1, 1039,
	474, 1773,
	-2, 1764,
	-1, 1067,
	159, 2028,
	404, 2028,
	457, 2028,
	476, 2028,
	-2, 0,
	-1, 1070,
	1, 489,
	477, 489,
	-2, 993,
	-1, 1190,
	324, 1741,
	467, 1741,
	-2, 1739,
	-1, 1202,
	478, 1741,
	-2, 1742,
	-1, 1203,
	1, 912,
	473, 912,
	475, 912,
	477, 912,
	-2, 1104,
	-1, 1251,
	315, 752,
	439, 752,
	-2, 248,
	-1, 1274,
	1, 912,
	473, 912,
	475, 912,
	477, 912,
	-2, 1104,
	-1, 1280,
	273, 1768,
	-2, 0,
	-1, 1343,
	1, 364,
	473, 364,
	475, 364,
	477, 364,
	-2, 1078,
	-1, 1346,
	4, 2096,
	11, 2096,
	12, 2096,
	14, 2096,
	15, 2096,
	16, 2096,
	17, 2096,
	18, 2096,
	19, 2096,
	21, 2096,
	22, 2096,
	23, 2096,
	24, 2096,
	25, 2096,
	27, 2096,
	30, 2096,
	31, 2096,
	33, 2096,
	35, 2096,
	38, 2096,
	39, 2096,
	40, 2096,
	41, 2096,
	42, 2096,
	43, 2096,
	44, 2096,
	45, 2096,
	46, 2096,
	47, 2096,
	48, 2096,
	49, 2096,
	50, 2096,
	52, 2096,
	53, 2096,
	54, 2096,
	55, 2096,
	56, 2096,
	57, 2096,
	58, 2096,
	61, 2096,
	62, 2096,
	63, 2096,
	64, 2096,
	66, 2096,
	67, 2096,
	68, 2096,
	69, 2096,
	72, 2096,
	73, 2096,
	74, 2096,
	75, 2096,
	76, 2096,
	77, 2096,
	78, 2096,
	79, 2096,
	80, 2096,
	81, 2096,
	82, 2096,
	84, 2096,
	85, 2096,
	86, 2096,
	87, 2096,
	88, 2096,
	90, 2096,
	91, 2096,
	92, 2096,
	93, 2096,
	101, 2096,
	102, 2096,
	103, 2096,
	104, 2096,
	105, 2096,
	106, 2096,
	107, 2096,
	108, 2096,
	110, 2096,
	111, 2096,
	113, 2096,
	114, 2096,
	116, 2096,
	119, 2096,
	120, 2096,
	121, 2096,
	123, 2096,
	125, 2096,
	126, 2096,
	128, 2096,
	129, 2096,
	130, 2096,
	131, 2096,
	132, 2096,
	133, 2096,
	134, 2096,
	135, 2096,
	136, 2096,
	137, 2096,
	138, 2096,
	139, 2096,
	140, 2096,
	144, 2096,
	145, 2096,
	146, 2096,
	147, 2096,
	148, 2096,
	149, 2096,
	150, 2096,
	151, 2096,
	152, 2096,
	153, 2096,
	154, 2096,
	155, 2096,
	157, 2096,
	160, 2096,
	161, 2096,
	162, 2096,
	164, 2096,
	165, 2096,
	167, 2096,
	168, 2096,
	170, 2096,
	171, 2096,
	172, 2096,
	173, 2096,
	174, 2096,
	175, 2096,
	176, 2096,
	177, 2096,
	178, 2096,
	179, 2096,
	180, 2096,
	181, 2096,
	182, 2096,
	183, 2096,
	184, 2096,
	185, 2096,
	186, 2096,
	188, 2096,
	189, 2096,
	190, 2096,
	192, 2096,
	193, 2096,
	194, 2096,
	195, 2096,
	196, 2096,
	197, 2096,
	198, 2096,
	199, 2096,
	200, 2096,
	202, 2096,
	204, 2096,
	205, 2096,
	206, 2096,
	207, 2096,
	208, 2096,
	209, 2096,
	210, 2096,
	211, 2096,
	212, 2096,
	213, 2096,
	214, 2096,
	215, 2096,
	216, 2096,
	217, 2096,
	218, 2096,
	219, 2096,
	220, 2096,
	222, 2096,
	223, 2096,
	225, 2096,
	226, 2096,
	227, 2096,
	228, 2096,
	229, 2096,
	230, 2096,
	232, 2096,
	233, 2096,
	236, 2096,
	237, 2096,
	238, 2096,
	239, 2096,
	240, 2096,
	241, 2096,
	242, 2096,
	243, 2096,
	244, 2096,
	245, 2096,
	246, 2096,
	247, 2096,
	248, 2096,
	249, 2096,
	250, 2096,
	251, 2096,
	252, 2096,
	253, 2096,
	254, 2096,
	255, 2096,
	256, 2096,
	258, 2096,
	261, 2096,
	262, 2096,
	264, 2096,
	265, 2096,
	266, 2096,
	267, 2096,
	268, 2096,
	270, 2096,
	271, 2096,
	272, 2096,
	275, 2096,
	276, 2096,
	277, 2096,
	278, 2096,
	280, 2096,
	281, 2096,
	282, 2096,
	284, 2096,
	286, 2096,
	287, 2096,
	288, 2096,
	289, 2096,
	290, 2096,
	291, 2096,
	292, 2096,
	293, 2096,
	294, 2096,
	295, 2096,
	297, 2096,
	298, 2096,
	299, 2096,
	300, 2096,
	301, 2096,
	302, 2096,
	303, 2096,
	305, 2096,
	307, 2096,
	308, 2096,
	309, 2096,
	310, 2096,
	311, 2096,
	312, 2096,
	313, 2096,
	314, 2096,
	315, 2096,
	316, 2096,
	318, 2096,
	319, 2096,
	320, 2096,
	321, 2096,
	322, 2096,
	323, 2096,
	324, 2096,
	325, 2096,
	326, 2096,
	327, 2096,
	328, 2096,
	329, 2096,
	330, 2096,
	331, 2096,
	333, 2096,
	334, 2096,
	335, 2096,
	336, 2096,
	337, 2096,
	338, 2096,
	339, 2096,
	340, 2096,
	341, 2096,
	342, 2096,
	343, 2096,
	344, 2096,
	345, 2096,
	346, 2096,
	347, 2096,
	348, 2096,
	349, 2096,
	351, 2096,
	352, 2096,
	353, 2096,
	354, 2096,
	355, 2096,
	356, 2096,
	357, 2096,
	358, 2096,
	359, 2096,
	360, 2096,
	362, 2096,
	363, 2096,
	364, 2096,
	365, 2096,
	366, 2096,
	367, 2096,
	368, 2096,
	369, 2096,
	370, 2096,
	371, 2096,
	372, 2096,
	374, 2096,
	375, 2096,
	376, 2096,
	377, 2096,
	378, 2096,
	379, 2096,
	380, 2096,
	381, 2096,
	382, 2096,
	383, 2096,
	384, 2096,
	385, 2096,
	387, 2096,
	388, 2096,
	389, 2096,
	391, 2096,
	392, 2096,
	393, 2096,
	394, 2096,
	395, 2096,
	396, 2096,
	397, 2096,
	399, 2096,
	400, 2096,
	401, 2096,
	402, 2096,
	403, 2096,
	405, 2096,
	407, 2096,
	408, 2096,
	409, 2096,
	410, 2096,
	411, 2096,
	413, 2096,
	414, 2096,
	415, 2096,
	417, 2096,
	418, 2096,
	421, 2096,
	422, 2096,
	423, 2096,
	424, 2096,
	425, 2096,
	426, 2096,
	427, 2096,
	429, 2096,
	431, 2096,
	432, 2096,
	433, 2096,
	434, 2096,
	435, 2096,
	436, 2096,
	437, 2096,
	439, 2096,
	440, 2096,
	441, 2096,
	446, 2096,
	447, 2096,
	448, 2096,
	449, 2096,
	450, 2096,
	451, 2096,
	452, 2096,
	453, 2096,
	455, 2096,
	456, 2096,
	457, 2096,
	458, 2096,
	459, 2096,
	460, 2096,
	462, 2096,
	463, 2096,
	464, 2096,
	465, 2096,
	466, 2096,
	467, 2096,
	468, 2096,
	469, 2096,
	470, 2096,
	472, 2096,
	475, 2096,
	476, 2096,
	478, 2096,
	479, 2096,
	-2, 0,
	-1, 1351,
	159, 1998,
	404, 1998,
	457, 1998,
	476, 1998,
	-2, 0,
	-1, 1383,
	309, 642,
	360, 642,
	-2, 0,
	-1, 1407,
	1, 637,
	473, 637,
	475, 637,
	477, 637,
	-2, 0,
	-1, 1408,
	1, 662,
	473, 662,
	475, 662,
	477, 662,
	-2, 0,
	-1, 1409,
	1, 644,
	473, 644,
	475, 644,
	477, 644,
	-2, 0,
	-1, 1411,
	1, 648,
	473, 648,
	475, 648,
	477, 648,
	-2, 0,
	-1, 1438,
	1, 2049,
	473, 2049,
	475, 2049,
	476, 2049,
	477, 2049,
	-2, 690,
	-1, 1439,
	1, 1995,
	473, 1995,
	475, 1995,
	476, 1995,
	477, 1995,
	-2, 691,
	-1, 1454,
	1, 988,
	477, 988,
	-2, 993,
	-1, 1457,
	143, 1116,
	156, 1116,
	231, 1116,
	269, 1116,
	-2, 1059,
	-1, 1551,
	127, 1080,
	143, 1080,
	156, 1080,
	201, 1080,
	231, 1080,
	269, 1080,
	279, 1080,
	419, 1080,
	-2, 1487,
	-1, 1608,
	475, 1635,
	-2, 0,
	-1, 1642,
	127, 1080,
	143, 1080,
	156, 1080,
	201, 1080,
	231, 1080,
	269, 1080,
	279, 1080,
	419, 1080,
	-2, 1195,
	-1, 1701,
	474, 1316,
	-2, 1304,
	-1, 1745,
	1, 491,
	477, 491,
	-2, 993,
	-1, 1950,
	1, 639,
	473, 639,
	475, 639,
	477, 639,
	-2, 0,
	-1, 1951,
	1, 664,
	473, 664,
	475, 664,
	477, 664,
	-2, 0,
	-1, 2023,
	339, 1141,
	340, 1141,
	-2, 1349,
	-1, 2054,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1367,
	-1, 2055,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1368,
	-1, 2056,
	85, 0,
	214, 0,
	215, 0,
	459, 0,
	460, 0,
	-2, 1369,
	-1, 2057,
	85, 0,
	214, 0,
	215, 0,
	459, 0,
	460, 0,
	-2, 1370,
	-1, 2058,
	85, 0,
	214, 0,
	215, 0,
	459, 0,
	460, 0,
	-2, 1371,
	-1, 2059,
	85, 0,
	214, 0,
	215, 0,
	459, 0,
	460, 0,
	-2, 1372,
	-1, 2060,
	85, 0,
	214, 0,
	215, 0,
	459, 0,
	460, 0,
	-2, 1373,
	-1, 2061,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1374,
	-1, 2073,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1386,
	-1, 2074,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1387,
	-1, 2075,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1388,
	-1, 2078,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1393,
	-1, 2084,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1397,
	-1, 2086,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1405,
	-1, 2087,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1406,
	-1, 2088,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1407,
	-1, 2089,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1408,
	-1, 2191,
	5, 1273,
	159, 1646,
	474, 1773,
	-2, 1764,
	-1, 2192,
	159, 1647,
	-2, 2053,
	-1, 2193,
	159, 1648,
	-2, 1912,
	-1, 2194,
	159, 1649,
	-2, 1832,
	-1, 2195,
	159, 1650,
	-2, 1869,
	-1, 2196,
	159, 1651,
	-2, 1910,
	-1, 2197,
	159, 1652,
	-2, 1989,
	-1, 2198,
	159, 1653,
	-2, 1470,
	-1, 2267,
	1, 1196,
	2, 1196,
	91, 1196,
	127, 1196,
	143, 1196,
	156, 1196,
	160, 1196,
	166, 1196,
	169, 1196,
	192, 1196,
	201, 1196,
	211, 1196,
	227, 1196,
	231, 1196,
	251, 1196,
	269, 1196,
	273, 1196,
	279, 1196,
	332, 1196,
	334, 1196,
	419, 1196,
	430, 1196,
	443, 1196,
	444, 1196,
	445, 1196,
	454, 1196,
	473, 1196,
	475, 1196,
	477, 1196,
	479, 1196,
	-2, 1195,
	-1, 2280,
	474, 1747,
	-2, 1759,
	-1, 2300,
	474, 1315,
	-2, 1305,
	-1, 2401,
	1, 912,
	473, 912,
	475, 912,
	477, 912,
	-2, 1104,
	-1, 2553,
	274, 1144,
	-2, 2087,
	-1, 2554,
	274, 1145,
	-2, 1978,
	-1, 2558,
	339, 1712,
	340, 1712,
	-2, 1468,
	-1, 2559,
	339, 1716,
	340, 1716,
	-2, 1469,
	-1, 2560,
	339, 1713,
	340, 1713,
	-2, 1468,
	-1, 2561,
	339, 1717,
	340, 1717,
	-2, 1469,
	-1, 2574,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1395,
	-1, 2575,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1399,
	-1, 2581,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1401,
	-1, 2770,
	208, 993,
	305, 993,
	313, 993,
	454, 993,
	-2, 488,
	-1, 2868,
	1, 912,
	473, 912,
	475, 912,
	477, 912,
	-2, 1104,
	-1, 2957,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1403,
	-1, 2964,
	205, 0,
	207, 0,
	261, 0,
	-2, 1422,
	-1, 3028,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1451,
	-1, 3029,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1452,
	-1, 3030,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1453,
	-1, 3034,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1457,
	-1, 3035,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1458,
	-1, 3036,
	14, 0,
	15, 0,
	16, 0,
	455, 0,
	456, 0,
	457, 0,
	-2, 1459,
	-1, 3080,
	474, 1748,
	-2, 1760,
	-1, 3172,
	476, 2200,
	-2, 1037,
	-1, 3222,
	205, 0,
	207, 0,
	261, 0,
	-2, 1423,
	-1, 3225,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1426,
	-1, 3226,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1428,
	-1, 3391,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1427,
	-1, 3392,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	178, 0,
	181, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 1429,
	-1, 3402,
	205, 0,
	-2, 1460,
	-1, 3516,
	205, 0,
	-2, 1461,
	-1, 3650,
	43, 0,
	178, 0,
	230, 0,
	367, 0,
	452, 0,
	458, 0,
	-2, 2056,
}

const sqlPrivate = 57344

const sqlLast = 85023

var sqlAct = [...]int{

	920, 3764, 3434, 3460, 3431, 3649, 3537, 3660, 3552, 3205,
	3749, 2701, 3616, 3613, 3626, 3597, 2223, 3661, 3327, 3420,
	3662, 2854, 2996, 2454, 3520, 3467, 2702, 3356, 3703, 3380,
	1040, 3648, 2883, 1338, 2041, 3159, 3100, 1206, 3164, 3476,
	865, 217, 2787, 217, 217, 1837, 217, 217, 217, 217,
	217, 1676, 3340, 217, 3284, 850, 2101, 2332, 217, 841,
	1334, 1466, 3361, 613, 2878, 2876, 585, 3144, 2850, 2949,
	1222, 3101, 3406, 1677, 1095, 2443, 2567, 1796, 2427, 217,
	2488, 2486, 2430, 613, 1648, 1032, 2418, 2687, 2744, 2707,
	1187, 1924, 2724, 2496, 2716, 2485, 2477, 2455, 2479, 2705,
	1880, 1883, 2334, 1833, 2390, 1617, 2686, 2143, 3051, 1559,
	2038, 2602, 1579, 3257, 3204, 2260, 1832, 1805, 2034, 3521,
	1836, 1391, 2114, 2551, 1195, 1267, 2495, 88, 2145, 2392,
	1192, 2259, 2262, 2402, 1903, 1821, 916, 2428, 3461, 1083,
	849, 145, 1828, 4, 1783, 2241, 1454, 1781, 2134, 2022,
	2750, 2098, 705, 2003, 1771, 2005, 1321, 2852, 34, 1344,
	209, 1208, 1618, 1331, 1272, 1359, 2137, 1341, 1023, 2448,
	2489, 1637, 1866, 1072, 211, 539, 210, 1574, 553, 561,
	217, 217, 1026, 1627, 2220, 1005, 2115, 2231, 2249, 614,
	1542, 615, 2187, 2324, 1467, 1468, 2004, 2367, 2006, 569,
	609, 152, 1865, 1342, 1358, 579, 1889, 656, 1295, 1022,
	942, 681, 1219, 1795, 1634, 2027, 39, 153, 145, 2368,
	877, 699, 1028, 556, 38, 36, 564, 1003, 27, 25,
	23, 1473, 771, 754, 1277, 2598, 1453, 618, 3065, 621,
	3066, 1410, 1905, 3797, 1905, 1905, 3787, 2240, 3786, 3759,
	2240, 3739, 2240, 1842, 1080, 3298, 3737, 618, 2703, 621,
	3298, 845, 3686, 3684, 3682, 840, 3687, 2240, 2240, 3679,
	3676, 3671, 3646, 3680, 3677, 1842, 1842, 1020, 1009, 3055,
	1010, 2257, 846, 716, 1481, 1482, 2893, 1514, 1515, 1516,
	1524, 1525, 1526, 3645, 2892, 3644, 3641, 1842, 3640, 1917,
	1917, 3611, 1917, 1517, 1512, 3298, 3591, 2768, 845, 2240,
	2295, 1484, 1006, 1006, 3585, 3584, 1530, 3579, 2240, 2240,
	3578, 3298, 3572, 3566, 3298, 3564, 1842, 3298, 3518, 3298,
	3499, 3496, 2295, 3469, 1842, 3298, 3450, 3470, 1052, 3449,
	1842, 3441, 1483, 1842, 3440, 1842, 3412, 828, 3298, 3393,
	1842, 1503, 3378, 2295, 1080, 2233, 1917, 3369, 1500, 2659,
	2660, 2906, 3325, 827, 3316, 3297, 2240, 3224, 2240, 3298,
	3180, 2295, 3174, 854, 2922, 892, 2922, 3142, 3592, 1932,
	3075, 3143, 1481, 1482, 3076, 835, 3073, 3058, 2980, 2976,
	3074, 2240, 1842, 2240, 2921, 2913, 2700, 2698, 2922, 2914,
	2240, 2240, 1512, 2697, 2291, 3502, 2651, 2240, 1007, 1484,
	2240, 2630, 2613, 1053, 1057, 2631, 2240, 1506, 1507, 1508,
	1509, 2475, 2611, 3055, 2232, 1920, 2674, 1489, 2612, 2474,
	2404, 2308, 2294, 1920, 1917, 2240, 2295, 2289, 1842, 2282,
	1483, 2240, 2239, 1842, 185, 1917, 2240, 3317, 1481, 1482,
	1842, 1521, 1919, 2914, 1531, 2381, 1920, 1800, 1511, 1513,
	2323, 2240, 1751, 876, 1904, 1481, 1482, 2906, 1512, 2424,
	2566, 1841, 2321, 1613, 1218, 1484, 3128, 2952, 1527, 2930,
	1528, 1635, 1831, 2276, 187, 2894, 2275, 1498, 1499, 1393,
	2274, 2273, 1484, 2272, 1011, 185, 1008, 834, 833, 832,
	1550, 831, 2665, 1519, 2895, 3505, 1483, 830, 2601, 826,
	825, 824, 823, 1504, 1906, 1503, 1906, 1906, 822, 821,
	2531, 3273, 1500, 1483, 820, 1489, 819, 2659, 2660, 186,
	2677, 2678, 2679, 818, 1529, 187, 817, 816, 815, 179,
	814, 813, 2659, 2660, 217, 752, 3220, 180, 751, 750,
	749, 1518, 748, 747, 746, 745, 1511, 1513, 744, 743,
	2659, 2660, 742, 1038, 741, 740, 1481, 1482, 154, 739,
	738, 3236, 217, 737, 736, 735, 734, 733, 732, 217,
	186, 1506, 1507, 1508, 1509, 731, 730, 729, 2675, 185,
	728, 1489, 727, 1484, 2674, 726, 1510, 725, 217, 1098,
	217, 217, 217, 1098, 217, 1211, 2892, 714, 1489, 1211,
	713, 1504, 2451, 672, 1505, 633, 632, 217, 217, 154,
	624, 623, 1511, 1513, 1483, 3069, 1076, 1053, 77, 187,
	1481, 1482, 622, 595, 591, 590, 589, 573, 207, 1082,
	1522, 217, 206, 1087, 205, 204, 2659, 2660, 203, 202,
	1512, 1498, 1499, 201, 217, 200, 217, 1484, 1211, 217,
	217, 2923, 217, 1913, 1198, 1904, 1998, 199, 198, 197,
	2665, 196, 217, 2747, 186, 2232, 195, 1504, 194, 217,
	193, 1412, 2140, 192, 179, 2665, 191, 190, 1483, 2676,
	189, 188, 180, 217, 217, 217, 217, 217, 1211, 1550,
	2624, 2607, 1211, 2665, 2408, 217, 1211, 217, 217, 1489,
	2283, 2266, 1505, 154, 1779, 3667, 1211, 2178, 1582, 2164,
	2162, 2680, 217, 2436, 1581, 1520, 1661, 1070, 1495, 1496,
	1502, 1523, 1501, 1497, 1053, 1494, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1491, 1568, 1585, 1224, 3647, 3246, 2141,
	1089, 1927, 3245, 1561, 1042, 1638, 2675, 3559, 3511, 1211,
	1510, 1190, 3370, 3430, 1202, 3277, 1091, 3256, 1184, 1189,
	1240, 2675, 1203, 1489, 1214, 1582, 1215, 1480, 1505, 3503,
	3255, 1581, 3243, 217, 1065, 3242, 1227, 3365, 1232, 2665,
	1238, 618, 1282, 621, 3241, 3240, 1234, 217, 3235, 3232,
	3231, 3148, 1580, 1019, 1511, 1513, 1221, 3141, 1220, 3089,
	2670, 2668, 2669, 2661, 2662, 2663, 2664, 2666, 2667, 1278,
	1278, 1926, 2142, 2139, 3088, 1274, 3087, 1335, 3079, 846,
	3048, 3047, 3046, 1494, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1491, 185, 145, 145, 1076, 1347, 1349, 1076, 2972,
	1325, 1328, 2968, 185, 3126, 2917, 1202, 2676, 121, 1504,
	2742, 2694, 2685, 1345, 2659, 2660, 2658, 2677, 2678, 2679,
	1357, 2655, 2676, 1353, 1363, 2675, 2654, 2652, 1362, 2637,
	1096, 1298, 187, 1215, 1196, 2636, 1562, 1458, 1560, 1566,
	2635, 2632, 2629, 187, 1279, 2623, 1501, 1497, 1420, 1494,
	1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491, 2606, 2437,
	2599, 2476, 1656, 2267, 2127, 1480, 1877, 1479, 3794, 1485,
	1486, 1487, 1488, 1490, 1491, 2144, 1375, 186, 3522, 1561,
	3758, 2674, 1411, 1847, 1845, 3757, 3685, 179, 186, 1457,
	1041, 2998, 1239, 3636, 3634, 180, 3551, 3548, 179, 3545,
	919, 3544, 3543, 3506, 3536, 3530, 180, 3500, 3495, 3494,
	1505, 2104, 3446, 3426, 3404, 1452, 154, 1549, 1233, 3388,
	3387, 2671, 2672, 2673, 3375, 3374, 2676, 2450, 2670, 2668,
	2669, 2661, 2662, 2663, 2664, 2666, 2667, 3354, 3364, 1368,
	2762, 3351, 3344, 1384, 2668, 2669, 2661, 2662, 2663, 2664,
	2666, 2667, 1228, 3272, 3147, 217, 3254, 2665, 3194, 3191,
	3117, 3116, 846, 3104, 2661, 2662, 2663, 2664, 2666, 2667,
	3103, 3061, 1487, 1488, 1490, 1491, 2138, 2963, 1546, 3319,
	2924, 2907, 217, 2659, 2660, 1624, 2870, 1615, 1463, 1455,
	1462, 2834, 217, 1098, 217, 217, 217, 217, 2813, 2790,
	2304, 828, 613, 217, 217, 2789, 2763, 613, 217, 1584,
	2699, 2628, 2627, 217, 2110, 1671, 2622, 827, 2590, 1211,
	1459, 2417, 2435, 1586, 1583, 1476, 1477, 1575, 1572, 2302,
	2301, 1743, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491,
	1098, 2659, 2660, 2675, 1481, 1482, 2278, 2670, 2668, 2669,
	2661, 2662, 2663, 2664, 2666, 2667, 1748, 1669, 2271, 3755,
	2238, 2160, 1663, 1076, 1576, 1577, 1660, 1645, 185, 1621,
	1622, 1484, 1616, 1673, 1612, 1611, 2386, 1610, 1740, 1742,
	1609, 1608, 1607, 1606, 1605, 1604, 1928, 1006, 1035, 1777,
	1602, 1601, 2790, 1600, 185, 848, 1599, 1598, 1597, 1596,
	1595, 1594, 1483, 1481, 1482, 846, 1593, 1592, 187, 1591,
	1590, 1589, 1588, 1563, 1547, 3347, 2739, 1545, 1540, 1064,
	145, 1055, 1048, 1512, 1665, 3274, 2665, 3228, 3085, 2354,
	1484, 3072, 1667, 3064, 187, 2610, 2659, 2660, 1652, 2297,
	2177, 3415, 2163, 2161, 2676, 1481, 1482, 2269, 3276, 918,
	1646, 3084, 1562, 186, 2659, 2660, 2760, 1202, 1543, 1800,
	1643, 1483, 1770, 179, 1745, 1512, 3748, 1211, 1211, 217,
	1503, 180, 1484, 1084, 3546, 1098, 618, 3504, 621, 186,
	1789, 618, 1614, 621, 2665, 3429, 2879, 3472, 1636, 179,
	1762, 1761, 154, 3471, 1770, 1772, 1655, 180, 1640, 3368,
	1838, 185, 1672, 1483, 1654, 1653, 3318, 1739, 1651, 1650,
	1649, 1086, 2675, 217, 3067, 2909, 1703, 217, 154, 1770,
	1818, 1746, 217, 1820, 2908, 1018, 1825, 1674, 1597, 1597,
	1080, 217, 3477, 1638, 3151, 2634, 1506, 1507, 1508, 1509,
	217, 187, 217, 1080, 217, 1770, 1489, 1773, 217, 1582,
	2633, 1768, 1763, 3115, 185, 1581, 1450, 2572, 2671, 2672,
	2673, 2356, 217, 1081, 1085, 2670, 2668, 2669, 2661, 2662,
	2663, 2664, 2666, 2667, 1664, 1804, 811, 1511, 1513, 2665,
	1757, 1080, 2856, 1392, 2855, 1570, 186, 1829, 1489, 1421,
	2372, 1383, 1925, 1077, 187, 1765, 179, 3468, 3672, 1211,
	185, 1211, 217, 1211, 180, 1878, 217, 3659, 1567, 1393,
	1834, 1211, 1870, 2676, 1211, 217, 812, 217, 217, 1511,
	1513, 1780, 3131, 3119, 2928, 154, 2816, 1211, 1211, 1211,
	3407, 217, 1504, 1839, 3765, 1215, 1886, 1034, 217, 186,
	187, 1875, 2703, 618, 1071, 621, 3000, 613, 217, 179,
	217, 1038, 217, 1038, 217, 2135, 217, 180, 1221, 2300,
	1220, 2616, 1824, 3668, 1603, 2675, 1578, 2848, 1874, 1255,
	217, 1668, 3681, 217, 1504, 217, 3678, 2888, 154, 2393,
	1894, 1840, 1873, 3096, 3538, 186, 217, 3609, 1767, 3160,
	1078, 3527, 3110, 2483, 2140, 179, 2447, 1946, 1079, 1372,
	2841, 3571, 3719, 180, 3720, 2761, 668, 217, 2944, 1856,
	1908, 217, 3308, 1910, 1857, 1510, 1912, 1942, 1086, 1766,
	1915, 3669, 1797, 1243, 154, 809, 846, 1077, 846, 1931,
	2772, 807, 2336, 1505, 1098, 2309, 2669, 2661, 2662, 2663,
	2664, 2666, 2667, 185, 3320, 805, 1419, 1936, 1888, 1298,
	1892, 1891, 1793, 1891, 1984, 1758, 1843, 794, 1930, 1253,
	1345, 2141, 1345, 1896, 1897, 3791, 2676, 1418, 1982, 1679,
	1923, 1085, 2013, 1798, 1799, 1505, 803, 2002, 1215, 2015,
	215, 1934, 800, 187, 3459, 669, 3452, 3133, 3130, 2444,
	2013, 2206, 3129, 3093, 1943, 1944, 1945, 2663, 2664, 2666,
	2667, 1794, 1921, 1491, 1922, 2039, 2040, 1065, 3092, 2011,
	2327, 844, 2621, 2116, 2117, 1933, 2620, 1935, 2619, 1098,
	860, 618, 2325, 621, 1078, 2339, 2395, 2011, 186, 2116,
	2132, 1254, 1079, 2618, 2142, 2139, 1997, 2576, 179, 1080,
	2388, 2380, 2379, 2394, 2396, 1656, 180, 1964, 2359, 2290,
	1077, 2085, 1417, 1370, 1494, 1492, 1493, 1485, 1486, 1487,
	1488, 1490, 1491, 875, 217, 3570, 1456, 154, 1217, 2186,
	2774, 2190, 2190, 2204, 2156, 2116, 2026, 2298, 2224, 2226,
	2155, 2043, 2399, 2230, 1365, 843, 1098, 2009, 217, 1855,
	2661, 2662, 2663, 2664, 2666, 2667, 3386, 217, 1493, 1485,
	1486, 1487, 1488, 1490, 1491, 2001, 1999, 2000, 2358, 217,
	2007, 2014, 1098, 2667, 1086, 1288, 2929, 1287, 2327, 2369,
	2370, 2012, 2131, 846, 1286, 828, 1285, 2279, 828, 828,
	2325, 1996, 1992, 1940, 846, 1309, 864, 2144, 846, 2012,
	2815, 2030, 1703, 1703, 2031, 2032, 3743, 1078, 1262, 2316,
	2100, 1774, 1775, 2100, 2153, 1079, 2376, 1784, 797, 2154,
	1249, 1785, 2157, 845, 2158, 2159, 2549, 1085, 2246, 551,
	2281, 2338, 1045, 1080, 2347, 1385, 2369, 2370, 3436, 3665,
	2010, 2135, 2112, 2312, 1645, 1366, 1433, 3638, 1995, 2346,
	2254, 2082, 217, 546, 1429, 2314, 1006, 2564, 2010, 2129,
	1211, 1893, 2369, 2370, 1043, 1449, 1957, 2935, 2934, 2528,
	3295, 1954, 2144, 1949, 3719, 2042, 671, 670, 2986, 3744,
	723, 2400, 846, 2245, 1461, 2108, 1393, 2315, 2268, 1950,
	1098, 2106, 1393, 596, 3732, 217, 3731, 1748, 2138, 1273,
	3292, 1416, 2313, 217, 2989, 2215, 1076, 1063, 2199, 2228,
	1407, 1036, 1381, 3106, 217, 1786, 2253, 2288, 2258, 2236,
	2237, 2264, 2265, 2247, 2556, 2557, 145, 217, 1788, 2292,
	2251, 2252, 1994, 2771, 2886, 1271, 3768, 1643, 2885, 3708,
	1951, 217, 1098, 1369, 3293, 789, 1211, 2337, 1046, 3210,
	1958, 2987, 217, 217, 1584, 2023, 1080, 3209, 1251, 3385,
	2147, 1408, 2827, 842, 2563, 1791, 3746, 839, 2821, 3666,
	1800, 2357, 1817, 1802, 3539, 217, 2328, 789, 217, 1273,
	666, 2303, 665, 1790, 2773, 217, 2080, 1371, 698, 2083,
	2362, 801, 2307, 2885, 601, 1991, 217, 801, 2837, 839,
	1573, 2389, 1791, 3118, 217, 3304, 217, 2144, 1800, 217,
	3752, 801, 1576, 1577, 3780, 217, 2758, 2377, 217, 1983,
	217, 2803, 217, 3707, 217, 217, 3206, 217, 1211, 1211,
	2306, 1211, 2361, 1981, 2310, 3398, 217, 217, 2079, 217,
	217, 1905, 802, 1211, 790, 2421, 3728, 3664, 801, 3621,
	2126, 217, 1430, 2280, 2144, 1679, 1679, 606, 3336, 3550,
	1539, 2458, 2471, 2626, 2353, 2331, 2802, 217, 217, 217,
	2405, 2349, 217, 3689, 217, 2263, 790, 217, 603, 217,
	3690, 217, 2360, 1308, 2467, 1791, 1035, 1190, 1035, 2340,
	2343, 2207, 2250, 2385, 3288, 2378, 2441, 2497, 3289, 3382,
	845, 1202, 217, 217, 217, 217, 217, 217, 1248, 217,
	2534, 2326, 3745, 2401, 1038, 2410, 3346, 2412, 2809, 2371,
	2373, 2374, 2375, 3589, 1626, 547, 618, 1703, 621, 2516,
	1038, 2415, 1367, 2499, 3437, 1993, 2502, 2503, 2460, 3291,
	217, 1221, 2518, 2406, 2519, 2508, 2509, 2510, 217, 1431,
	2425, 1044, 3294, 1956, 3107, 3302, 3769, 2469, 2449, 2578,
	3200, 2449, 2099, 2539, 2501, 2541, 724, 2504, 3706, 2505,
	145, 2322, 2453, 2472, 2464, 2081, 2465, 1784, 2466, 548,
	3081, 1785, 598, 1058, 1202, 1202, 3211, 2513, 2468, 2482,
	2473, 791, 1345, 1630, 2537, 2470, 2484, 2520, 2515, 2522,
	2946, 2524, 602, 3381, 2547, 3750, 798, 2521, 2500, 2523,
	1215, 2525, 2805, 1819, 1481, 1482, 3553, 2532, 1791, 549,
	3337, 550, 1432, 791, 864, 1633, 605, 1787, 864, 1202,
	1428, 625, 2107, 1953, 1512, 1948, 2542, 217, 1630, 1182,
	2807, 1484, 600, 1182, 1628, 1460, 2526, 2604, 2605, 1395,
	2579, 1827, 2608, 3146, 3663, 3290, 2555, 1784, 3718, 3716,
	1631, 1785, 3688, 1202, 2545, 1202, 3587, 2546, 1062, 2096,
	1633, 1826, 1483, 1380, 1382, 1786, 3483, 2544, 2550, 3303,
	3037, 597, 3751, 2026, 1629, 2327, 3781, 2600, 1788, 2248,
	3353, 2806, 2874, 2094, 2439, 3588, 2565, 2341, 2536, 1864,
	1539, 1822, 792, 1623, 1056, 1631, 2718, 2609, 1051, 538,
	1471, 3383, 3252, 1906, 3753, 3207, 1470, 2029, 2533, 607,
	1470, 1801, 1798, 1799, 1759, 2950, 3774, 3443, 3442, 1465,
	599, 3424, 2751, 3526, 792, 1034, 3095, 1034, 1756, 2875,
	2867, 793, 846, 1790, 2577, 1098, 2785, 2781, 2440, 2696,
	1823, 2429, 2419, 1887, 1876, 1786, 1869, 1489, 2710, 2711,
	1851, 2985, 2019, 3598, 217, 2712, 3554, 1632, 1788, 217,
	2947, 1470, 217, 793, 1988, 217, 217, 1098, 1752, 3307,
	1679, 217, 3165, 3357, 2416, 2242, 3306, 3212, 1511, 1513,
	1311, 3466, 2615, 1941, 1098, 3464, 3425, 2535, 2795, 2792,
	2090, 217, 2791, 2732, 1469, 2570, 1754, 2548, 1469, 3063,
	2363, 2091, 1632, 2715, 1409, 2092, 217, 2714, 2287, 2097,
	3328, 2286, 3038, 1790, 2285, 1755, 2284, 2423, 843, 720,
	3039, 1294, 1292, 3532, 2403, 217, 217, 217, 626, 627,
	722, 217, 1471, 1504, 217, 1791, 1471, 3432, 2720, 2746,
	2722, 217, 217, 2244, 217, 217, 217, 3213, 2243, 1469,
	2918, 1885, 3253, 2717, 2020, 1076, 2741, 1280, 217, 217,
	217, 2756, 3725, 2769, 2745, 3462, 3601, 217, 2777, 2759,
	3773, 3606, 3595, 2748, 1281, 3258, 2767, 2775, 3052, 3533,
	217, 217, 2778, 2779, 2794, 2721, 2738, 2799, 2800, 1098,
	2730, 3422, 2552, 2719, 2731, 2704, 2733, 2734, 2793, 2151,
	1211, 2797, 2691, 2692, 2693, 712, 2786, 3555, 2342, 1098,
	1396, 3727, 2782, 3683, 217, 1791, 3433, 217, 217, 2818,
	3547, 217, 3403, 3423, 1211, 217, 3305, 217, 629, 628,
	2764, 2765, 3602, 2766, 1505, 1211, 2753, 2754, 2755, 2736,
	217, 2737, 2820, 2364, 2365, 3534, 217, 3251, 1782, 1447,
	2688, 217, 2962, 217, 2093, 1553, 2770, 2926, 2881, 1558,
	217, 2866, 1789, 2095, 1445, 837, 1425, 789, 2776, 2844,
	2828, 1423, 2207, 2207, 1406, 2853, 2587, 1787, 630, 631,
	2752, 1404, 2653, 1211, 1211, 2589, 2890, 1402, 1789, 839,
	2420, 217, 217, 2835, 2843, 217, 2814, 2808, 1400, 1398,
	2585, 2387, 1390, 2823, 1388, 1290, 1703, 2355, 2497, 2810,
	2811, 2829, 2305, 2812, 2861, 2826, 2709, 2497, 2842, 1202,
	1829, 2838, 1293, 1291, 2830, 2836, 718, 719, 1829, 1662,
	838, 721, 217, 1659, 1098, 217, 217, 1098, 217, 2845,
	1873, 2831, 2832, 1703, 1448, 2833, 2361, 2882, 2735, 1360,
	1980, 2689, 2864, 2943, 2942, 1465, 2530, 1787, 1485, 1486,
	1487, 1488, 1490, 1491, 2529, 2749, 790, 2839, 2905, 2507,
	2824, 217, 2008, 1182, 2825, 1990, 2880, 2887, 846, 1035,
	1961, 1741, 2207, 2207, 2207, 2889, 2896, 1587, 1364, 2726,
	1266, 2862, 2916, 2925, 2150, 1035, 2920, 3658, 2941, 2898,
	2899, 2900, 2868, 2901, 2902, 3324, 1446, 2582, 1098, 1038,
	3315, 2940, 710, 711, 864, 145, 145, 3594, 2903, 2904,
	1182, 1444, 2583, 1424, 1038, 1098, 2588, 217, 1422, 3704,
	799, 1405, 2877, 3281, 3163, 3156, 3113, 3111, 1403, 1036,
	3094, 1036, 2965, 2931, 1401, 2932, 2873, 2933, 2865, 2857,
	2911, 2912, 2445, 950, 1038, 1399, 1397, 2434, 2937, 1389,
	2426, 1387, 1289, 2974, 2975, 2938, 2413, 1918, 2727, 1916,
	1914, 1911, 1909, 1907, 2945, 1898, 1848, 3488, 1626, 1846,
	1835, 1830, 2982, 1816, 1803, 2948, 1792, 1474, 2568, 1670,
	2749, 1015, 3720, 3629, 213, 3377, 541, 542, 1202, 557,
	541, 557, 567, 572, 1979, 3372, 588, 3371, 2498, 1778,
	2725, 594, 3049, 791, 1245, 1016, 213, 2039, 3007, 2327,
	3490, 2970, 2981, 2345, 3173, 1800, 1952, 2988, 2990, 2991,
	2729, 2325, 709, 2039, 3017, 604, 213, 217, 217, 1978,
	3001, 2327, 1668, 3295, 1977, 3003, 2997, 1630, 1098, 3004,
	3628, 2992, 1959, 2344, 3006, 1182, 804, 806, 808, 1679,
	3002, 3541, 3068, 3014, 3045, 1442, 1443, 2569, 3309, 217,
	3016, 2584, 1386, 3292, 3041, 3513, 3259, 3285, 1475, 1633,
	2586, 2366, 2348, 1478, 552, 3721, 3714, 2384, 1481, 1482,
	1749, 3283, 2382, 2350, 3042, 3593, 1679, 3287, 1628, 2383,
	3563, 1703, 1481, 1482, 3059, 3060, 1017, 657, 3560, 2728,
	3155, 3145, 697, 2352, 1631, 1196, 217, 3293, 1096, 3056,
	3057, 3078, 836, 1038, 792, 2351, 3054, 2452, 1034, 1484,
	3120, 2229, 563, 541, 541, 1744, 1675, 3747, 1629, 3090,
	145, 213, 1211, 3050, 1034, 1211, 1483, 2757, 3772, 3562,
	3286, 3132, 3070, 1374, 1703, 1703, 2659, 2660, 217, 1373,
	1483, 1481, 1482, 793, 2319, 2320, 217, 2317, 2318, 3071,
	1703, 1703, 1550, 3233, 1098, 217, 2146, 3083, 3136, 1211,
	2319, 2317, 3124, 2152, 1427, 3229, 3082, 1426, 2993, 2978,
	3098, 1548, 3086, 217, 3784, 3125, 3127, 3760, 3733, 3523,
	3456, 1703, 3416, 3175, 3152, 3414, 2994, 217, 217, 1211,
	1211, 1211, 3343, 217, 217, 217, 3167, 3170, 217, 217,
	3275, 1632, 217, 217, 3197, 1211, 3190, 2786, 3179, 3158,
	217, 1098, 3112, 3140, 3114, 3139, 3138, 3137, 3109, 2897,
	2871, 3169, 3166, 2869, 2361, 3153, 2512, 2511, 2462, 2438,
	2458, 2207, 2207, 1098, 2414, 2111, 3154, 1976, 3198, 1975,
	1974, 1973, 1901, 1900, 1899, 1879, 1859, 3288, 1858, 1854,
	1853, 3289, 1852, 1850, 1849, 1441, 1440, 1320, 3161, 1319,
	2497, 1318, 1317, 1316, 3168, 3157, 3227, 1315, 1314, 1313,
	3176, 3171, 1312, 3177, 1310, 1305, 1304, 1303, 1302, 217,
	1301, 1261, 1260, 3186, 3182, 3181, 1259, 1258, 1257, 3134,
	3189, 1256, 3291, 1250, 1182, 3223, 3196, 1244, 3192, 1242,
	3193, 1241, 1061, 1060, 990, 3294, 1873, 897, 3214, 3080,
	1750, 810, 796, 3435, 1435, 2207, 2207, 2207, 2207, 2207,
	2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
	2207, 2207, 2207, 2207, 1679, 2207, 3208, 3215, 3203, 75,
	1252, 644, 217, 70, 1703, 3187, 3188, 3108, 1098, 652,
	1098, 3608, 2801, 2391, 3195, 1960, 3183, 3184, 3185, 1394,
	1962, 2740, 2270, 3586, 3237, 3199, 2625, 3519, 3397, 2149,
	1038, 1038, 1569, 217, 217, 217, 72, 885, 972, 1182,
	3335, 3334, 3250, 3282, 3097, 217, 2487, 1679, 1679, 3332,
	2109, 3331, 217, 853, 217, 1101, 1760, 217, 217, 217,
	1806, 891, 1776, 1679, 1679, 1769, 2299, 1553, 3290, 1098,
	217, 217, 3264, 2189, 1098, 1683, 894, 1680, 1682, 896,
	3300, 1810, 895, 1681, 217, 3260, 1571, 893, 217, 1678,
	3278, 3279, 2422, 3265, 1679, 3263, 3311, 217, 3266, 3270,
	2456, 217, 2745, 1297, 1098, 3271, 1182, 1211, 775, 3310,
	3261, 3262, 3267, 1764, 1703, 3301, 3280, 2105, 2211, 3299,
	2133, 2614, 1564, 866, 1035, 887, 1807, 3312, 3313, 2130,
	1054, 2723, 1182, 2884, 3077, 217, 3363, 1049, 2018, 1035,
	660, 3329, 2656, 2136, 3359, 1047, 2212, 1098, 2205, 2201,
	2446, 1451, 3322, 1541, 2457, 1088, 869, 2103, 1555, 2594,
	2028, 3323, 2891, 2743, 3330, 1059, 2296, 3625, 3373, 1035,
	3358, 3362, 588, 3348, 2033, 3367, 3345, 1098, 3326, 3350,
	1863, 1014, 1036, 1013, 3360, 1012, 3615, 3612, 2851, 1753,
	2311, 213, 1533, 213, 213, 1193, 2858, 213, 1036, 881,
	1201, 2708, 2919, 1263, 593, 3376, 3540, 1811, 3355, 1038,
	213, 1223, 1532, 2398, 1098, 2397, 3409, 3529, 1075, 1074,
	1073, 3384, 217, 2784, 217, 3779, 1098, 217, 3105, 184,
	3394, 1873, 3389, 2562, 1247, 217, 1472, 1464, 181, 183,
	182, 3339, 3122, 18, 3338, 17, 3405, 1265, 92, 1270,
	1182, 37, 213, 213, 3349, 1193, 16, 1679, 217, 120,
	3419, 119, 118, 117, 116, 213, 3418, 115, 114, 1812,
	1813, 109, 1307, 3366, 3410, 3411, 113, 217, 1808, 112,
	111, 110, 108, 107, 106, 217, 213, 213, 213, 213,
	1193, 3269, 105, 3413, 217, 104, 3465, 103, 588, 1211,
	213, 213, 1182, 3417, 102, 217, 101, 3474, 100, 3439,
	3438, 99, 1809, 98, 3455, 709, 97, 96, 95, 94,
	93, 3479, 3445, 584, 3453, 581, 217, 217, 3480, 51,
	50, 3482, 3478, 91, 3487, 90, 3485, 3463, 1035, 3457,
	15, 35, 2853, 13, 3509, 3510, 55, 56, 217, 12,
	30, 3497, 3498, 3473, 31, 81, 80, 29, 14, 28,
	26, 10, 3484, 217, 8, 3492, 3486, 1679, 7, 3362,
	3491, 1038, 32, 1034, 1647, 3489, 213, 11, 150, 1038,
	149, 148, 3525, 74, 147, 3447, 3448, 3508, 1034, 146,
	213, 73, 1038, 3535, 24, 9, 3517, 3512, 142, 3475,
	3150, 1814, 3493, 69, 144, 1703, 143, 141, 140, 139,
	3501, 217, 67, 3524, 138, 137, 68, 136, 1034, 22,
	5, 54, 3549, 3542, 217, 1211, 6, 3379, 1096, 2927,
	85, 217, 86, 33, 65, 1211, 1211, 64, 63, 21,
	53, 1211, 20, 3577, 174, 217, 173, 217, 172, 171,
	166, 165, 3557, 3558, 170, 3561, 168, 3565, 3395, 1703,
	167, 3478, 3568, 3556, 3574, 3569, 1815, 169, 3575, 3576,
	3590, 217, 3581, 3573, 3580, 164, 176, 217, 175, 3603,
	217, 178, 1098, 162, 158, 157, 161, 1202, 163, 160,
	159, 217, 217, 3614, 3617, 3395, 3605, 156, 3623, 177,
	60, 135, 3618, 134, 133, 3622, 132, 2042, 131, 3635,
	130, 3633, 129, 59, 19, 3582, 3610, 3583, 3630, 2,
	3642, 1, 0, 0, 0, 3643, 0, 0, 0, 2211,
	0, 0, 0, 217, 0, 0, 0, 3637, 0, 3639,
	0, 0, 3619, 0, 0, 0, 0, 3604, 3670, 3627,
	0, 0, 0, 0, 0, 1703, 3657, 3656, 3675, 0,
	3654, 3655, 0, 0, 0, 2207, 0, 0, 0, 0,
	0, 0, 0, 0, 3691, 0, 3693, 0, 3673, 217,
	2591, 2592, 0, 0, 0, 0, 3701, 1034, 0, 0,
	0, 0, 0, 0, 3695, 0, 3705, 3692, 541, 217,
	0, 3700, 3697, 0, 0, 1035, 1035, 2207, 0, 2211,
	2211, 3694, 0, 3696, 0, 0, 0, 0, 3713, 213,
	3717, 213, 3715, 3711, 3712, 213, 217, 3614, 217, 3722,
	3617, 3724, 0, 3726, 3723, 1223, 2458, 1193, 213, 3738,
	213, 3735, 3730, 0, 3741, 213, 1223, 557, 0, 3740,
	213, 1223, 3736, 3734, 0, 0, 588, 0, 1679, 3631,
	3742, 0, 3632, 0, 0, 0, 0, 0, 0, 0,
	3756, 3754, 3698, 3699, 0, 0, 3702, 0, 0, 0,
	3762, 0, 3766, 3761, 3763, 3627, 3767, 0, 1625, 0,
	2682, 2683, 2684, 3770, 0, 0, 3729, 0, 0, 0,
	0, 3776, 0, 0, 3782, 1182, 3783, 0, 0, 0,
	0, 0, 1679, 0, 3777, 3778, 0, 2207, 0, 2211,
	2211, 2211, 0, 0, 0, 3785, 0, 0, 0, 3789,
	3790, 3793, 3792, 0, 3795, 0, 0, 1182, 0, 0,
	0, 3798, 3788, 0, 0, 0, 0, 0, 0, 0,
	0, 3796, 0, 0, 1182, 0, 0, 0, 0, 0,
	0, 0, 0, 2042, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 1035, 0, 0, 1036, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1036, 0, 0, 0, 0, 0, 1679, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1036, 0, 2659, 2660, 0, 2677, 2678, 2679,
	0, 0, 0, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 3219, 1034, 1034, 213, 0, 0, 1182,
	213, 0, 0, 0, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 0, 1884, 0, 0, 0, 0, 1182,
	0, 0, 0, 213, 0, 213, 0, 213, 0, 0,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2674, 0, 2659, 2660, 1902, 2677, 2678, 2679, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 588, 1035, 0, 0, 709,
	0, 0, 0, 0, 1035, 0, 1512, 0, 213, 0,
	1193, 213, 0, 1484, 0, 0, 0, 1035, 0, 0,
	2674, 0, 0, 0, 588, 2659, 2660, 2665, 2677, 2678,
	2679, 213, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 213, 0, 213, 1483, 213, 0, 213, 0, 213,
	0, 1036, 0, 1503, 1182, 0, 0, 1182, 0, 0,
	1500, 0, 0, 1985, 0, 0, 1986, 0, 1987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2680, 213,
	0, 0, 0, 1034, 0, 0, 0, 0, 0, 0,
	0, 0, 2674, 0, 0, 0, 2665, 0, 0, 0,
	572, 3218, 0, 0, 588, 0, 0, 0, 0, 2958,
	2959, 0, 0, 2675, 0, 0, 0, 0, 0, 1506,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 1182, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 2211, 2211,
	0, 0, 0, 0, 0, 1182, 0, 2680, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 1513, 0, 0, 0, 0, 0, 0, 2665, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2675, 0, 0, 0, 0, 0, 0, 1498,
	1499, 0, 0, 3018, 3019, 3020, 3021, 3022, 3023, 3024,
	3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034,
	3035, 3036, 0, 3040, 2676, 1504, 0, 0, 0, 2680,
	0, 0, 2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211,
	2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211,
	2211, 0, 2211, 0, 0, 1034, 0, 0, 0, 0,
	0, 0, 0, 1034, 2675, 0, 0, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 1034, 0, 1182, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 0, 2676, 0, 0, 0, 0, 213, 0,
	541, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1036, 1036,
	0, 0, 852, 0, 0, 0, 852, 0, 2671, 2672,
	2673, 0, 0, 0, 0, 2670, 2668, 2669, 2661, 2662,
	2663, 2664, 2666, 2667, 0, 0, 2659, 2660, 0, 2677,
	2678, 2679, 0, 0, 0, 2676, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1225, 0, 1229, 0, 1235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 1182, 0, 0, 2671, 2672, 2673,
	0, 0, 0, 0, 2670, 2668, 2669, 2661, 2662, 2663,
	2664, 2666, 2667, 2674, 0, 0, 886, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2335, 0,
	0, 0, 0, 0, 1501, 1497, 213, 1494, 1492, 1493,
	1485, 1486, 1487, 1488, 1490, 1491, 0, 213, 0, 1356,
	0, 1182, 0, 0, 0, 0, 0, 1361, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 2671,
	2672, 2673, 0, 1182, 213, 0, 2670, 2668, 2669, 2661,
	2662, 2663, 2664, 2666, 2667, 213, 2407, 0, 0, 2665,
	0, 0, 0, 0, 89, 0, 0, 1036, 0, 0,
	2659, 2660, 0, 2677, 2678, 2679, 0, 0, 1223, 0,
	0, 213, 0, 1413, 0, 0, 2681, 0, 213, 2966,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1884,
	0, 0, 0, 0, 0, 0, 0, 2335, 0, 541,
	2680, 0, 2461, 0, 0, 0, 0, 0, 213, 0,
	0, 213, 0, 213, 0, 213, 0, 213, 213, 0,
	1193, 0, 829, 0, 0, 0, 0, 2674, 0, 2480,
	709, 847, 2335, 2335, 0, 2675, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 1182, 0,
	1182, 0, 0, 0, 1534, 1535, 1536, 1537, 1538, 0,
	213, 1193, 213, 0, 1024, 1223, 0, 1223, 0, 0,
	1193, 0, 1193, 0, 1193, 0, 0, 0, 0, 0,
	0, 0, 0, 1552, 0, 0, 0, 0, 0, 1565,
	0, 0, 0, 0, 0, 213, 213, 213, 213, 1193,
	213, 0, 213, 2665, 0, 0, 0, 0, 0, 1182,
	0, 0, 0, 0, 1182, 0, 0, 0, 0, 1036,
	0, 0, 0, 0, 0, 0, 0, 1036, 0, 0,
	0, 0, 0, 213, 0, 0, 2676, 0, 0, 0,
	1036, 213, 0, 0, 1182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 1514, 1515, 1516, 1524,
	1525, 1526, 0, 0, 0, 0, 0, 1182, 0, 2675,
	0, 0, 0, 1512, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 1530, 0, 0, 0, 0,
	0, 1619, 1619, 1619, 0, 0, 0, 1182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1223, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 0, 3402, 0, 0, 0, 1500, 0, 0,
	2671, 2672, 2673, 0, 1182, 0, 0, 2670, 2668, 2669,
	2661, 2662, 2663, 2664, 2666, 2667, 1182, 0, 0, 0,
	0, 0, 2211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 852, 0, 0, 3427, 0, 0, 0, 0,
	2676, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 1506, 1507, 1508, 1509,
	0, 0, 0, 0, 2211, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 0, 0,
	1521, 0, 0, 1531, 0, 0, 0, 1511, 1513, 0,
	0, 0, 213, 0, 0, 0, 0, 541, 0, 0,
	0, 0, 541, 0, 0, 541, 0, 0, 541, 541,
	0, 0, 0, 0, 541, 0, 1498, 1499, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 1223, 3516, 0, 0, 0, 0,
	0, 0, 1504, 0, 2671, 2672, 2673, 0, 0, 1223,
	0, 2670, 2668, 2669, 2661, 2662, 2663, 2664, 2666, 2667,
	0, 0, 0, 0, 2211, 0, 0, 0, 2335, 2335,
	213, 0, 0, 0, 2335, 0, 0, 2788, 0, 0,
	0, 0, 0, 0, 2335, 2788, 0, 2335, 2788, 2788,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 213, 213, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 1193, 1510, 0, 0, 0, 0,
	0, 0, 2211, 2211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 89, 0, 89, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 2847, 0, 0,
	2849, 2335, 1182, 0, 213, 0, 0, 864, 213, 1522,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 0, 0, 0, 0, 1193,
	0, 213, 0, 0, 2335, 0, 541, 0, 0, 0,
	0, 0, 0, 2335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 847, 89,
	89, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 213, 1884, 89, 0, 1884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1520, 0, 0, 1495, 1496, 1502,
	1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487,
	1488, 1490, 1491, 0, 0, 2936, 0, 0, 1193, 213,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2017, 0,
	2021, 0, 0, 0, 213, 0, 0, 2035, 0, 0,
	0, 0, 0, 0, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 0,
	2084, 0, 2086, 2087, 2088, 2089, 829, 0, 0, 0,
	2999, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2113, 0, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1552, 0, 0, 0, 2128,
	0, 1551, 0, 0, 0, 1557, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2166,
	2169, 2172, 2175, 0, 2179, 2180, 2181, 2182, 2183, 2184,
	2185, 0, 0, 0, 0, 2203, 0, 2214, 2216, 2221,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 213,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1639, 0, 1642, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 588,
	0, 0, 0, 0, 1481, 1482, 0, 1514, 1515, 1516,
	1524, 1525, 1526, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 1512, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 0, 0, 2335, 213, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2480, 2480, 0, 0, 0, 0, 709, 709, 2335, 0,
	0, 1884, 1884, 0, 0, 709, 2335, 0, 0, 0,
	0, 0, 0, 213, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2409, 0, 2411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 1531, 0, 0, 0, 1511, 1513,
	0, 0, 3238, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 0,
	1528, 0, 0, 0, 0, 0, 0, 1498, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 213,
	691, 0, 0, 0, 0, 1223, 0, 213, 0, 0,
	0, 0, 0, 0, 1529, 0, 0, 2527, 0, 0,
	213, 0, 0, 673, 0, 0, 0, 0, 0, 0,
	0, 1518, 0, 0, 0, 0, 2335, 2335, 2335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1223, 0,
	0, 0, 0, 0, 0, 2335, 0, 2788, 674, 0,
	1223, 1223, 213, 1534, 1535, 847, 0, 847, 675, 0,
	0, 0, 0, 213, 213, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 676, 0, 0, 2335, 0, 0,
	0, 3341, 0, 0, 1505, 0, 0, 0, 0, 0,
	213, 696, 0, 0, 3352, 0, 0, 0, 0, 951,
	0, 0, 0, 0, 0, 700, 0, 677, 2574, 2575,
	1522, 0, 0, 0, 2581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 678, 0, 1223, 0,
	61, 703, 702, 2595, 2596, 0, 0, 0, 0, 2128,
	214, 0, 0, 0, 62, 0, 679, 0, 2603, 680,
	0, 0, 0, 0, 606, 0, 0, 0, 0, 0,
	66, 0, 214, 0, 2617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 0, 0, 0, 0,
	829, 0, 214, 829, 829, 0, 0, 0, 0, 2638,
	0, 0, 71, 0, 0, 1520, 0, 0, 1495, 1496,
	1502, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1491, 0, 2335, 0, 2788, 2647, 0,
	3421, 0, 2648, 0, 76, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 2102, 77,
	84, 0, 0, 0, 0, 0, 2221, 2221, 2221, 0,
	0, 588, 847, 0, 0, 0, 0, 0, 0, 128,
	0, 1619, 0, 1551, 0, 61, 0, 1551, 0, 2713,
	3421, 0, 0, 0, 0, 0, 682, 0, 2335, 62,
	123, 0, 0, 78, 0, 0, 0, 213, 0, 0,
	0, 0, 0, 0, 698, 66, 683, 0, 1223, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 41, 125, 0, 0, 0, 0, 0, 0, 213,
	213, 0, 0, 605, 0, 40, 0, 71, 0, 0,
	684, 0, 0, 685, 0, 1024, 852, 0, 0, 693,
	0, 2999, 0, 0, 0, 0, 686, 0, 43, 58,
	852, 1642, 0, 0, 44, 0, 3421, 0, 0, 76,
	0, 0, 126, 0, 0, 0, 0, 0, 42, 87,
	0, 0, 0, 0, 77, 84, 2804, 687, 694, 0,
	0, 0, 89, 0, 0, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 690, 0,
	0, 45, 0, 689, 3341, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 607, 213, 78, 0,
	0, 0, 0, 0, 2788, 0, 0, 692, 1512, 0,
	0, 151, 82, 0, 83, 1484, 0, 0, 1223, 0,
	1223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3599, 704, 1483, 0, 0, 121,
	1223, 0, 0, 213, 0, 1503, 0, 0, 0, 0,
	0, 0, 1500, 0, 213, 2335, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 2961, 0, 0, 2999, 0, 0, 0,
	155, 89, 79, 0, 0, 0, 0, 0, 186, 0,
	46, 1506, 1507, 1508, 1509, 0, 0, 0, 179, 0,
	0, 1489, 0, 89, 0, 89, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 151, 82, 0, 83,
	0, 47, 2335, 0, 0, 127, 0, 701, 0, 0,
	0, 48, 1511, 1513, 0, 0, 0, 0, 185, 0,
	0, 0, 3421, 0, 0, 2035, 89, 0, 0, 89,
	52, 2953, 2954, 0, 121, 2957, 0, 0, 0, 2960,
	0, 1498, 1499, 0, 124, 0, 0, 0, 2964, 1223,
	0, 2335, 0, 0, 0, 0, 89, 2971, 187, 0,
	2713, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 2983, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	0, 0, 0, 186, 3008, 3009, 0, 3010, 3011, 3012,
	0, 0, 3013, 179, 89, 0, 3015, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 214, 1103, 214,
	214, 0, 1103, 214, 1103, 0, 0, 0, 1103, 0,
	0, 0, 154, 0, 0, 3, 214, 3043, 3044, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3053, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 3062, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 1103, 214, 214,
	1524, 1525, 1526, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 1530, 0, 0, 0,
	2102, 0, 214, 214, 214, 214, 0, 1103, 0, 0,
	0, 1103, 0, 3091, 0, 1103, 214, 214, 0, 0,
	0, 1551, 1483, 0, 0, 1103, 0, 0, 3099, 3102,
	0, 1503, 0, 0, 0, 0, 0, 0, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 1497, 1103, 1494,
	1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 1506, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 214, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1619, 0, 0, 0, 0, 0,
	0, 1521, 0, 3178, 1531, 0, 0, 0, 1511, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1024, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1024, 0, 1498, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 3216, 3217, 0, 0, 0, 0,
	3221, 3222, 0, 0, 0, 3225, 3226, 917, 0, 0,
	0, 0, 3230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3239,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 89, 0,
	619, 89, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	619, 0, 0, 0, 1505, 0, 0, 0, 0, 89,
	89, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 1484,
	0, 214, 3102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 0, 214, 214, 214, 0, 0, 0,
	0, 214, 0, 0, 1024, 0, 214, 847, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 1103, 1503,
	0, 0, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 89, 89, 0, 0, 1037, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1491, 0, 0, 0, 2956, 0, 0,
	3102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 1489, 0, 3390, 3391, 3392,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 3400, 3401, 0, 1511, 1513, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 3408, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 1103, 214, 0,
	1483, 0, 0, 0, 1103, 0, 0, 3102, 0, 1503,
	612, 1504, 0, 0, 0, 3444, 1500, 0, 0, 0,
	0, 0, 0, 0, 3451, 0, 0, 852, 0, 0,
	612, 0, 0, 3458, 0, 0, 0, 0, 0, 1481,
	1482, 0, 214, 0, 0, 0, 214, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 2955, 0, 1512,
	3102, 0, 0, 3102, 0, 0, 1484, 0, 0, 214,
	0, 214, 0, 214, 0, 1506, 1507, 1508, 1509, 0,
	0, 0, 0, 3102, 3102, 1489, 89, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 1483, 0, 0,
	0, 1024, 1024, 0, 0, 0, 1503, 0, 0, 0,
	0, 0, 1505, 1500, 0, 0, 1511, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	1103, 0, 1103, 0, 0, 3528, 0, 0, 3531, 0,
	1103, 0, 0, 1103, 214, 1498, 1499, 214, 0, 0,
	0, 0, 0, 0, 2580, 3102, 1103, 1103, 1103, 0,
	0, 0, 0, 1030, 0, 0, 0, 214, 0, 0,
	0, 1504, 1506, 1507, 1508, 1509, 214, 214, 0, 214,
	0, 214, 1489, 214, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 1513, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1491, 1498, 1499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 852, 0, 0, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 1504, 0,
	0, 0, 1505, 0, 0, 212, 0, 212, 212, 0,
	1024, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 619, 0, 3653, 3653, 3653, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 3674, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 212, 0, 0,
	0, 0, 0, 3102, 0, 3102, 0, 0, 1103, 212,
	0, 1510, 0, 0, 0, 0, 0, 0, 0, 3653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	212, 212, 212, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 212, 0, 0, 0, 0,
	1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 1103, 1024, 0, 0, 0, 0, 0, 0, 0,
	1024, 0, 1481, 1482, 0, 0, 3653, 3771, 0, 0,
	212, 0, 0, 0, 3775, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 212, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 1501, 1497, 0,
	1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 0, 0, 0, 0, 1500, 0, 0, 1103,
	61, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 62, 0, 1099, 0, 0, 0,
	1099, 0, 1212, 0, 0, 0, 1212, 0, 0, 1103,
	66, 89, 0, 0, 0, 0, 0, 2573, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 0, 1506, 1507, 1508, 1509, 0,
	0, 0, 71, 0, 0, 1489, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 1212, 0, 0, 0, 0,
	214, 1103, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 214, 0, 0, 76, 0, 1511, 1513, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 77,
	84, 0, 0, 0, 0, 1212, 0, 214, 0, 1212,
	0, 0, 0, 1212, 214, 1498, 1499, 0, 0, 0,
	0, 0, 0, 1212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 78, 214, 0, 0, 214, 0, 214,
	0, 214, 0, 214, 214, 0, 0, 1103, 1103, 0,
	1103, 0, 0, 1641, 0, 1037, 1212, 0, 0, 212,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 212, 1641, 212, 0, 0, 0, 0, 619,
	0, 0, 0, 0, 619, 0, 214, 0, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2102, 0, 0, 0, 0,
	0, 1093, 0, 0, 1510, 0, 0, 1200, 0, 0,
	921, 214, 214, 214, 214, 0, 214, 0, 214, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 1481, 1482,
	0, 1514, 1515, 1516, 1524, 1525, 1526, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 1512, 214,
	0, 0, 0, 0, 0, 1484, 0, 214, 0, 0,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 82, 0, 83, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 185, 0, 1503, 1324, 1324, 1324, 1200,
	0, 0, 1500, 0, 0, 704, 0, 0, 0, 121,
	1354, 1355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 619, 0, 0, 0,
	1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1491, 0, 0, 0, 0, 122, 0, 0, 0,
	0, 1506, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	155, 1489, 0, 0, 0, 0, 0, 0, 186, 0,
	212, 0, 0, 0, 212, 0, 1434, 89, 179, 212,
	89, 0, 0, 0, 0, 1521, 180, 0, 1531, 0,
	0, 0, 1511, 1513, 0, 0, 0, 212, 0, 212,
	0, 212, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 1527, 0, 1528, 0, 0, 0, 0, 0,
	1099, 1498, 1499, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 0, 612, 0, 0, 1519, 0, 0,
	0, 0, 0, 0, 1103, 0, 1212, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 1529, 0,
	0, 0, 212, 0, 0, 212, 1103, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 0, 1103, 0, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 619, 212, 0, 212, 0, 212,
	0, 212, 0, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 212, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 214, 214,
	0, 0, 0, 0, 1522, 0, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 1212, 1212, 0, 0, 1103, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 1657, 0, 0, 0, 0,
	214, 0, 0, 1103, 214, 0, 0, 0, 1666, 0,
	1200, 0, 0, 0, 1103, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1520,
	0, 0, 1495, 1496, 1502, 1523, 1501, 1497, 0, 1494,
	1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491, 0, 0,
	0, 0, 2124, 0, 0, 0, 2125, 0, 0, 0,
	0, 0, 1103, 1103, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1212, 0, 1212, 0,
	1212, 0, 0, 0, 0, 0, 1037, 0, 1212, 0,
	0, 1212, 0, 1103, 0, 214, 1103, 214, 0, 0,
	0, 0, 1037, 0, 1212, 1212, 1212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 0, 61, 0,
	0, 0, 0, 0, 612, 0, 0, 0, 0, 0,
	214, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 0, 66, 1100,
	0, 0, 0, 1100, 0, 1213, 0, 0, 0, 1213,
	0, 0, 0, 0, 0, 635, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	636, 654, 0, 0, 0, 0, 1861, 0, 1213, 0,
	1868, 1099, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 637, 0, 0, 638, 77, 84, 0,
	0, 0, 0, 1299, 0, 1890, 0, 1890, 0, 0,
	0, 0, 0, 661, 0, 0, 0, 0, 1213, 639,
	212, 0, 1213, 0, 0, 0, 1213, 0, 0, 659,
	0, 212, 0, 0, 0, 0, 1213, 0, 0, 0,
	0, 78, 0, 0, 212, 0, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 641, 619,
	62, 642, 663, 0, 0, 0, 606, 1103, 1868, 1213,
	0, 1938, 0, 0, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 0, 0, 0, 0,
	0, 1955, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 1965, 0, 1967, 0, 1969, 0, 1971, 71, 1972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 1099, 0, 212, 2293, 212, 0, 212,
	0, 212, 212, 662, 0, 0, 0, 0, 0, 1989,
	76, 0, 645, 0, 0, 79, 0, 0, 0, 1099,
	87, 0, 0, 0, 0, 77, 84, 0, 212, 0,
	0, 1103, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 212, 214, 643, 151,
	82, 0, 83, 0, 0, 214, 0, 0, 646, 0,
	0, 0, 0, 1103, 214, 0, 0, 0, 1103, 78,
	0, 185, 0, 0, 0, 0, 0, 0, 647, 212,
	212, 212, 212, 704, 212, 0, 212, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 1103,
	1103, 0, 0, 0, 0, 605, 0, 1212, 0, 0,
	0, 187, 0, 0, 1103, 655, 0, 212, 0, 214,
	1103, 0, 0, 0, 0, 212, 0, 0, 648, 0,
	0, 0, 0, 0, 122, 0, 0, 1099, 0, 0,
	0, 0, 1103, 0, 0, 0, 0, 653, 155, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 649,
	0, 0, 666, 0, 665, 0, 179, 650, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 0, 0, 0,
	651, 0, 0, 79, 0, 658, 0, 0, 0, 1099,
	667, 0, 664, 1212, 0, 154, 0, 0, 607, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 82, 0,
	83, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 2277, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1213,
	0, 704, 0, 0, 0, 121, 0, 1103, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 1212, 1212, 0, 1212, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 1103, 214,
	214, 1037, 0, 1103, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 1037, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 1103, 0, 0, 1103, 0, 0, 0,
	0, 0, 0, 1350, 0, 0, 1641, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 1213, 1213, 0,
	0, 0, 0, 0, 1200, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1868, 0, 0, 0, 212, 212, 212, 2433, 0,
	0, 0, 0, 0, 1641, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 2463, 0,
	0, 1324, 0, 1324, 214, 1324, 0, 1200, 1200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 0, 212, 0, 2506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 1213,
	2514, 1213, 2517, 1213, 0, 1037, 0, 0, 0, 0,
	0, 1213, 0, 214, 1213, 0, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 0, 1213, 1213, 1213,
	0, 0, 0, 0, 0, 2538, 1200, 2540, 1200, 0,
	2543, 0, 0, 0, 0, 214, 214, 0, 212, 0,
	1481, 1482, 0, 1514, 1515, 1516, 1524, 1525, 1526, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1517,
	1512, 0, 0, 1324, 0, 0, 0, 1484, 0, 0,
	0, 2571, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 1099, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 1099, 0, 0, 0, 0, 0, 1503, 0, 0,
	0, 0, 0, 0, 1500, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 1103, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 1507, 1508, 1509, 0, 0, 0,
	0, 0, 0, 1489, 0, 0, 0, 0, 0, 214,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 1099, 1521, 0, 1100,
	1531, 0, 0, 0, 1511, 1513, 0, 1212, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 1527, 0, 1528, 0, 0, 0,
	0, 1212, 0, 1498, 1499, 0, 0, 0, 0, 0,
	0, 0, 1212, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 1037, 1037, 0, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1529, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1212, 1212, 1100, 0, 0, 0, 0, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 1510, 61, 1099, 0, 0, 0, 0, 0,
	2780, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 0,
	1213, 2817, 2819, 2433, 0, 0, 1522, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 0, 0, 0, 0,
	0, 0, 0, 212, 0, 71, 0, 0, 0, 0,
	1100, 0, 212, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1037, 1099, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 2859, 0, 0, 87, 2863, 0,
	0, 0, 77, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 2872, 0, 0, 1213, 212, 0, 0,
	0, 1520, 0, 0, 1495, 1496, 1502, 1523, 1501, 1497,
	0, 1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491,
	0, 0, 0, 0, 0, 0, 78, 0, 3244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2915, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	1514, 1515, 1516, 1524, 1525, 1526, 0, 0, 1213, 1213,
	0, 1213, 0, 0, 0, 1099, 1517, 1512, 0, 2939,
	0, 1200, 0, 1213, 1484, 0, 0, 0, 0, 1530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1037, 2951, 1483, 0, 0, 0, 0,
	0, 1037, 0, 0, 1503, 0, 0, 0, 0, 0,
	79, 1500, 0, 0, 1641, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 82, 0, 83, 0, 1212,
	0, 0, 1212, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 212, 212, 0,
	1506, 1507, 1508, 1509, 0, 0, 0, 0, 704, 0,
	1489, 1099, 121, 0, 0, 0, 1212, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 187, 1531, 0, 0,
	0, 1511, 1513, 0, 0, 0, 1212, 1212, 1212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 1527, 1212, 1528, 0, 0, 0, 0, 1099, 0,
	1498, 1499, 0, 155, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 1519, 0, 0, 0,
	1099, 179, 0, 0, 0, 0, 1504, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1529, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 1099, 0, 0,
	0, 3149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 0, 1522, 0, 0, 0, 1100, 3162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1212, 0, 0, 0, 1520, 0,
	0, 1495, 1496, 1502, 1523, 1501, 1497, 0, 1494, 1492,
	1493, 1485, 1486, 1487, 1488, 1490, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 2969, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 1100,
	0, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	1213, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1213, 0, 1481, 1482, 0,
	1514, 1515, 1516, 1524, 1525, 1526, 0, 212, 0, 0,
	0, 1099, 0, 0, 0, 0, 1517, 1512, 212, 0,
	0, 0, 0, 1099, 1484, 0, 0, 0, 0, 1530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1213, 1213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 0, 0, 0,
	0, 1500, 3314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2433, 1481, 1482, 0, 1514, 1515, 1516,
	1524, 1525, 1526, 0, 1100, 0, 1212, 1100, 0, 0,
	0, 0, 0, 1517, 1512, 0, 0, 0, 0, 0,
	2433, 1484, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 1507, 1508, 1509, 0, 0, 0, 0, 0, 0,
	1489, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 0, 0, 0, 0, 1500, 0,
	0, 0, 0, 0, 1521, 0, 0, 1531, 1100, 0,
	0, 1511, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 1527, 0, 1528, 0, 0, 0, 0, 0, 0,
	1498, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 1506, 1507, 1508,
	1509, 0, 1212, 0, 0, 0, 1504, 1489, 0, 0,
	0, 0, 1212, 1212, 0, 0, 0, 0, 1212, 0,
	0, 0, 0, 0, 0, 0, 0, 1529, 3428, 0,
	0, 1521, 0, 0, 1531, 0, 0, 0, 1511, 1513,
	0, 0, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 1099,
	1528, 0, 0, 0, 0, 0, 0, 1498, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 3481, 1100, 1510,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 1529, 0, 0, 0, 0, 3507,
	1200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 0, 1522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 1213, 0, 0, 1213, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 3567, 1520, 1213,
	1522, 1495, 1496, 1502, 1523, 1501, 1497, 0, 1494, 1492,
	1493, 1485, 1486, 1487, 1488, 1490, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 2650, 0, 0, 0, 1213,
	1213, 1213, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1213, 0, 0, 0, 0,
	0, 1100, 0, 3607, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3624, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 1495, 1496,
	1502, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 2649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 1514, 1515, 1516, 1524, 1525,
	1526, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 1512, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 1100, 1503,
	1100, 0, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 1100, 1506, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 1213, 0, 1521,
	0, 0, 1531, 0, 0, 0, 1511, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1527, 0, 1528, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1522, 1213,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 1495, 1496, 1502, 1523,
	1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	2646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1213, 1213, 0, 0, 0,
	0, 1213, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 1104, 227, 1105,
	1106, 1107, 1100, 1108, 492, 1109, 1110, 1111, 1112, 228,
	230, 229, 231, 232, 493, 494, 233, 495, 236, 234,
	235, 496, 1113, 237, 238, 239, 240, 241, 242, 243,
	1114, 1115, 244, 497, 498, 499, 1116, 245, 246, 500,
	1117, 1102, 1118, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 1119, 257, 0, 258, 259, 260,
	1120, 261, 974, 262, 263, 1121, 1122, 1124, 1123, 1125,
	1126, 1127, 264, 265, 266, 267, 268, 269, 501, 502,
	1128, 270, 271, 1129, 273, 272, 1130, 274, 1131, 1132,
	275, 276, 277, 1133, 278, 1134, 279, 280, 1135, 281,
	503, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	504, 505, 1136, 219, 1137, 0, 0, 0, 0, 292,
	293, 294, 506, 295, 296, 0, 297, 1138, 298, 1139,
	1140, 975, 299, 300, 1141, 301, 507, 1142, 508, 302,
	1143, 303, 304, 305, 306, 509, 510, 511, 361, 977,
	307, 308, 1144, 309, 310, 312, 0, 0, 220, 311,
	313, 320, 1145, 976, 314, 512, 316, 315, 317, 318,
	319, 513, 1146, 514, 1147, 321, 978, 515, 979, 322,
	323, 324, 980, 325, 326, 0, 0, 327, 328, 329,
	330, 331, 1148, 333, 332, 1149, 334, 516, 981, 335,
	336, 982, 1150, 337, 338, 1151, 1152, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	352, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	1153, 221, 985, 359, 1154, 517, 360, 518, 362, 363,
	1155, 364, 365, 366, 1156, 1157, 368, 369, 370, 1158,
	1159, 371, 372, 519, 986, 373, 987, 520, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 1160, 382, 383,
	521, 384, 522, 385, 386, 1161, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 523, 395, 396, 1162, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 1163, 410, 988, 411, 412, 413, 414,
	524, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 1164, 432, 433, 427, 429, 430, 431, 428, 434,
	435, 436, 1165, 437, 417, 418, 438, 439, 989, 440,
	441, 525, 442, 443, 1166, 444, 445, 446, 447, 419,
	448, 452, 453, 449, 450, 451, 526, 1167, 455, 456,
	454, 1168, 457, 458, 459, 460, 461, 286, 462, 1169,
	463, 527, 528, 529, 530, 1170, 470, 1171, 464, 465,
	531, 466, 532, 1172, 467, 468, 469, 0, 471, 472,
	1173, 1174, 473, 474, 475, 477, 478, 476, 480, 1175,
	481, 1176, 479, 482, 483, 484, 533, 534, 535, 1177,
	486, 485, 536, 1178, 1179, 1180, 1181, 487, 488, 537,
	489, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 2255, 0, 0, 0, 0, 0, 0,
	0, 2256, 222, 223, 224, 225, 226, 1104, 227, 1105,
	1106, 1107, 0, 1108, 492, 1109, 1110, 1111, 1112, 228,
	230, 229, 231, 232, 493, 494, 233, 495, 236, 234,
	235, 496, 1113, 237, 238, 239, 240, 241, 242, 243,
	1114, 1115, 244, 497, 498, 499, 1116, 245, 246, 500,
	1117, 1102, 1118, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 1119, 257, 0, 258, 259, 260,
	1120, 261, 974, 262, 263, 1121, 1122, 1124, 1123, 1125,
	1126, 1127, 264, 265, 266, 267, 268, 269, 501, 502,
	1128, 270, 271, 1129, 273, 272, 1130, 274, 1131, 1132,
	275, 276, 277, 1133, 278, 1134, 279, 280, 1135, 281,
	503, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	504, 505, 1136, 219, 1137, 0, 0, 0, 0, 292,
	293, 294, 506, 295, 296, 0, 297, 1138, 298, 1139,
	1140, 975, 299, 300, 1141, 301, 507, 1142, 508, 302,
	1143, 303, 304, 305, 306, 509, 510, 511, 361, 977,
	307, 308, 1144, 309, 310, 312, 0, 0, 220, 311,
	313, 320, 1145, 976, 314, 512, 316, 315, 317, 318,
	319, 513, 1146, 514, 1147, 321, 978, 515, 979, 322,
	323, 324, 980, 325, 326, 0, 0, 327, 328, 329,
	330, 331, 1148, 333, 332, 1149, 334, 516, 981, 335,
	336, 982, 1150, 337, 338, 1151, 1152, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	352, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	1153, 221, 985, 359, 1154, 517, 360, 518, 362, 363,
	1155, 364, 365, 366, 1156, 1157, 368, 369, 370, 1158,
	1159, 371, 372, 519, 986, 373, 987, 520, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 1160, 382, 383,
	521, 384, 522, 385, 386, 1161, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 523, 395, 396, 1162, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 1163, 410, 988, 411, 412, 413, 414,
	524, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 1164, 432, 433, 427, 429, 430, 431, 428, 434,
	435, 436, 1165, 437, 417, 418, 438, 439, 989, 440,
	441, 525, 442, 443, 1166, 444, 445, 446, 447, 419,
	448, 452, 453, 449, 450, 451, 526, 1167, 455, 456,
	454, 1168, 457, 458, 459, 460, 461, 286, 462, 1169,
	463, 527, 528, 529, 530, 1170, 470, 1171, 464, 465,
	531, 466, 532, 1172, 467, 468, 469, 0, 471, 472,
	1173, 1174, 473, 474, 475, 477, 478, 476, 480, 1175,
	481, 1176, 479, 482, 483, 484, 533, 534, 535, 1177,
	486, 485, 536, 1178, 1179, 1180, 1181, 487, 488, 537,
	489, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 2977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2979,
	222, 223, 224, 225, 226, 1104, 227, 1105, 1106, 1107,
	0, 1108, 492, 1109, 1110, 1111, 1112, 228, 230, 229,
	231, 232, 493, 494, 233, 495, 236, 234, 235, 496,
	1113, 237, 238, 239, 240, 241, 242, 243, 1114, 1115,
	244, 497, 498, 499, 1116, 245, 246, 500, 1117, 1102,
	1118, 247, 248, 249, 250, 251, 252, 0, 254, 255,
	256, 253, 1119, 257, 0, 258, 259, 260, 1120, 261,
	974, 262, 263, 1121, 1122, 1124, 1123, 1125, 1126, 1127,
	264, 265, 266, 267, 268, 269, 501, 502, 1128, 270,
	271, 1129, 273, 272, 1130, 274, 1131, 1132, 275, 276,
	277, 1133, 278, 1134, 279, 280, 1135, 281, 503, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 504, 505,
	1136, 219, 1137, 0, 0, 0, 0, 292, 293, 294,
	506, 295, 296, 0, 297, 1138, 298, 1139, 1140, 975,
	299, 300, 1141, 301, 507, 1142, 508, 302, 1143, 303,
	304, 305, 306, 509, 510, 511, 361, 977, 307, 308,
	1144, 309, 310, 312, 0, 0, 220, 311, 313, 320,
	1145, 976, 314, 512, 316, 315, 317, 318, 319, 513,
	1146, 514, 1147, 321, 978, 515, 979, 322, 323, 324,
	980, 325, 326, 0, 0, 327, 328, 329, 330, 331,
	1148, 333, 332, 1149, 334, 516, 981, 335, 336, 982,
	1150, 337, 338, 1151, 1152, 339, 340, 341, 342, 0,
	343, 344, 346, 348, 345, 347, 349, 351, 352, 350,
	983, 353, 354, 357, 358, 356, 984, 355, 1153, 221,
	985, 359, 1154, 517, 360, 518, 362, 363, 1155, 364,
	365, 366, 1156, 1157, 368, 369, 370, 1158, 1159, 371,
	372, 519, 986, 373, 987, 520, 374, 367, 375, 376,
	377, 378, 379, 380, 381, 1160, 382, 383, 521, 384,
	522, 385, 386, 1161, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 523, 395, 396, 1162, 397, 398, 399,
	400, 401, 0, 403, 404, 405, 402, 406, 407, 408,
	409, 1163, 410, 988, 411, 412, 413, 414, 524, 415,
	0, 416, 420, 421, 422, 423, 424, 425, 426, 1164,
	432, 433, 427, 429, 430, 431, 428, 434, 435, 436,
	1165, 437, 417, 418, 438, 439, 989, 440, 441, 525,
	442, 443, 1166, 444, 445, 446, 447, 419, 448, 452,
	453, 449, 450, 451, 526, 1167, 455, 456, 454, 1168,
	457, 458, 459, 460, 461, 286, 462, 1169, 463, 527,
	528, 529, 530, 1170, 470, 1171, 464, 465, 531, 466,
	532, 1172, 467, 468, 469, 0, 471, 472, 1173, 1174,
	473, 474, 475, 477, 478, 476, 480, 1175, 481, 1176,
	479, 482, 483, 484, 533, 534, 535, 1177, 486, 485,
	536, 1178, 1179, 1180, 1181, 487, 488, 537, 489, 490,
	491, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3268, 222, 223, 224, 225, 226, 1104, 227, 1105,
	1106, 1107, 0, 1108, 492, 1109, 1110, 1111, 1112, 228,
	230, 229, 231, 232, 493, 494, 233, 495, 236, 234,
	235, 496, 1113, 237, 238, 239, 240, 241, 242, 243,
	1114, 1115, 244, 497, 498, 499, 1116, 245, 246, 500,
	1117, 1102, 1118, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 1119, 257, 0, 258, 259, 260,
	1120, 261, 974, 262, 263, 1121, 1122, 1124, 1123, 1125,
	1126, 1127, 264, 265, 266, 267, 268, 269, 501, 502,
	1128, 270, 271, 1129, 273, 272, 1130, 274, 1131, 1132,
	275, 276, 277, 1133, 278, 1134, 279, 280, 1135, 281,
	503, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	504, 505, 1136, 219, 1137, 0, 0, 0, 0, 292,
	293, 294, 506, 295, 296, 0, 297, 1138, 298, 1139,
	1140, 975, 299, 300, 1141, 301, 507, 1142, 508, 302,
	1143, 303, 304, 305, 306, 509, 510, 511, 361, 977,
	307, 308, 1144, 309, 310, 312, 0, 0, 220, 311,
	313, 320, 1145, 976, 314, 512, 316, 315, 317, 318,
	319, 513, 1146, 514, 1147, 321, 978, 515, 979, 322,
	323, 324, 980, 325, 326, 0, 0, 327, 328, 329,
	330, 331, 1148, 333, 332, 1149, 334, 516, 981, 335,
	336, 982, 1150, 337, 338, 1151, 1152, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	352, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	1153, 221, 985, 359, 1154, 517, 360, 518, 362, 363,
	1155, 364, 365, 366, 1156, 1157, 368, 369, 370, 1158,
	1159, 371, 372, 519, 986, 373, 987, 520, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 1160, 382, 383,
	521, 384, 522, 385, 386, 1161, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 523, 395, 396, 1162, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 1163, 410, 988, 411, 412, 413, 414,
	524, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 1164, 432, 433, 427, 429, 430, 431, 428, 434,
	435, 436, 1165, 437, 417, 418, 438, 439, 989, 440,
	441, 525, 442, 443, 1166, 444, 445, 446, 447, 419,
	448, 452, 453, 449, 450, 451, 526, 1167, 455, 456,
	454, 1168, 457, 458, 459, 460, 461, 286, 462, 1169,
	463, 527, 528, 529, 530, 1170, 470, 1171, 464, 465,
	531, 466, 532, 1172, 467, 468, 469, 0, 471, 472,
	1173, 1174, 473, 474, 475, 477, 478, 476, 480, 1175,
	481, 1176, 479, 482, 483, 484, 533, 534, 535, 1177,
	486, 485, 536, 1178, 1179, 1180, 1181, 487, 488, 537,
	489, 490, 491, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3396, 0,
	222, 223, 224, 225, 226, 1104, 227, 1105, 1106, 1107,
	0, 1108, 492, 1109, 1110, 1111, 1112, 228, 230, 229,
	231, 232, 493, 494, 233, 495, 236, 234, 235, 496,
	1113, 237, 238, 239, 240, 241, 242, 243, 1114, 1115,
	244, 497, 498, 499, 1116, 245, 246, 500, 1117, 1102,
	1118, 247, 248, 249, 250, 251, 252, 0, 254, 255,
	256, 253, 1119, 257, 0, 258, 259, 260, 1120, 261,
	974, 262, 263, 1121, 1122, 1124, 1123, 1125, 1126, 1127,
	264, 265, 266, 267, 268, 269, 501, 502, 1128, 270,
	271, 1129, 273, 272, 1130, 274, 1131, 1132, 275, 276,
	277, 1133, 278, 1134, 279, 280, 1135, 281, 503, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 504, 505,
	1136, 219, 1137, 0, 0, 0, 0, 292, 293, 294,
	506, 295, 296, 0, 297, 1138, 298, 1139, 1140, 975,
	299, 300, 1141, 301, 507, 1142, 508, 302, 1143, 303,
	304, 305, 306, 509, 510, 511, 361, 977, 307, 308,
	1144, 309, 310, 312, 0, 0, 220, 311, 313, 320,
	1145, 976, 314, 512, 316, 315, 317, 318, 319, 513,
	1146, 514, 1147, 321, 978, 515, 979, 322, 323, 324,
	980, 325, 326, 0, 0, 327, 328, 329, 330, 331,
	1148, 333, 332, 1149, 334, 516, 981, 335, 336, 982,
	1150, 337, 338, 1151, 1152, 339, 340, 341, 342, 0,
	343, 344, 346, 348, 345, 347, 349, 351, 352, 350,
	983, 353, 354, 357, 358, 356, 984, 355, 1153, 221,
	985, 359, 1154, 517, 360, 518, 362, 363, 1155, 364,
	365, 366, 1156, 1157, 368, 369, 370, 1158, 1159, 371,
	372, 519, 986, 373, 987, 520, 374, 367, 375, 376,
	377, 378, 379, 380, 381, 1160, 382, 383, 521, 384,
	522, 385, 386, 1161, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 523, 395, 396, 1162, 397, 398, 399,
	400, 401, 0, 403, 404, 405, 402, 406, 407, 408,
	409, 1163, 410, 988, 411, 412, 413, 414, 524, 415,
	0, 416, 420, 421, 422, 423, 424, 425, 426, 1164,
	432, 433, 427, 429, 430, 431, 428, 434, 435, 436,
	1165, 437, 417, 418, 438, 439, 989, 440, 441, 525,
	442, 443, 1166, 444, 445, 446, 447, 419, 448, 452,
	453, 449, 450, 451, 526, 1167, 455, 456, 454, 1168,
	457, 458, 459, 460, 461, 286, 462, 1169, 463, 527,
	528, 529, 530, 1170, 470, 1171, 464, 465, 531, 466,
	532, 1172, 467, 468, 469, 0, 471, 472, 1173, 1174,
	473, 474, 475, 477, 478, 476, 480, 1175, 481, 1176,
	479, 482, 483, 484, 533, 534, 535, 1177, 486, 485,
	536, 1178, 1179, 1180, 1181, 487, 488, 537, 489, 490,
	491, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3321, 0, 222, 223,
	224, 225, 226, 1104, 227, 1105, 1106, 1107, 0, 1108,
	492, 1109, 1110, 1111, 1112, 228, 230, 229, 231, 232,
	493, 494, 233, 495, 236, 234, 235, 496, 1113, 237,
	238, 239, 240, 241, 242, 243, 1114, 1115, 244, 497,
	498, 499, 1116, 245, 246, 500, 1117, 1102, 1118, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	1119, 257, 0, 258, 259, 260, 1120, 261, 974, 262,
	263, 1121, 1122, 1124, 1123, 1125, 1126, 1127, 264, 265,
	266, 267, 268, 269, 501, 502, 1128, 270, 271, 1129,
	273, 272, 1130, 274, 1131, 1132, 275, 276, 277, 1133,
	278, 1134, 279, 280, 1135, 281, 503, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 504, 505, 1136, 219,
	1137, 0, 0, 0, 0, 292, 293, 294, 506, 295,
	296, 0, 297, 1138, 298, 1139, 1140, 975, 299, 300,
	1141, 301, 507, 1142, 508, 302, 1143, 303, 304, 305,
	306, 509, 510, 511, 361, 977, 307, 308, 1144, 309,
	310, 312, 0, 0, 220, 311, 313, 320, 1145, 976,
	314, 512, 316, 315, 317, 318, 319, 513, 1146, 514,
	1147, 321, 978, 515, 979, 322, 323, 324, 980, 325,
	326, 0, 0, 327, 328, 329, 330, 331, 1148, 333,
	332, 1149, 334, 516, 981, 335, 336, 982, 1150, 337,
	338, 1151, 1152, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 352, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 1153, 221, 985, 359,
	1154, 517, 360, 518, 362, 363, 1155, 364, 365, 366,
	1156, 1157, 368, 369, 370, 1158, 1159, 371, 372, 519,
	986, 373, 987, 520, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 1160, 382, 383, 521, 384, 522, 385,
	386, 1161, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 523, 395, 396, 1162, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 1163,
	410, 988, 411, 412, 413, 414, 524, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 1164, 432, 433,
	427, 429, 430, 431, 428, 434, 435, 436, 1165, 437,
	417, 418, 438, 439, 989, 440, 441, 525, 442, 443,
	1166, 444, 445, 446, 447, 419, 448, 452, 453, 449,
	450, 451, 526, 1167, 455, 456, 454, 1168, 457, 458,
	459, 460, 461, 286, 462, 1169, 463, 527, 528, 529,
	530, 1170, 470, 1171, 464, 465, 531, 466, 532, 1172,
	467, 468, 469, 0, 471, 472, 1173, 1174, 473, 474,
	475, 477, 478, 476, 480, 1175, 481, 1176, 479, 482,
	483, 484, 533, 534, 535, 1177, 486, 485, 536, 1178,
	1179, 1180, 1181, 487, 488, 537, 489, 490, 491, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3202, 0, 222, 223, 224, 225,
	226, 1104, 227, 1105, 1106, 1107, 0, 1108, 492, 1109,
	1110, 1111, 1112, 228, 230, 229, 231, 232, 493, 494,
	233, 495, 236, 234, 235, 496, 1113, 237, 238, 239,
	240, 241, 242, 243, 1114, 1115, 244, 497, 498, 499,
	1116, 245, 246, 500, 1117, 1102, 1118, 247, 248, 249,
	250, 251, 252, 0, 254, 255, 256, 253, 1119, 257,
	0, 258, 259, 260, 1120, 261, 974, 262, 263, 1121,
	1122, 1124, 1123, 1125, 1126, 1127, 264, 265, 266, 267,
	268, 269, 501, 502, 1128, 270, 271, 1129, 273, 272,
	1130, 274, 1131, 1132, 275, 276, 277, 1133, 278, 1134,
	279, 280, 1135, 281, 503, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 504, 505, 1136, 219, 1137, 0,
	0, 0, 0, 292, 293, 294, 506, 295, 296, 0,
	297, 1138, 298, 1139, 1140, 975, 299, 300, 1141, 301,
	507, 1142, 508, 302, 1143, 303, 304, 305, 306, 509,
	510, 511, 361, 977, 307, 308, 1144, 309, 310, 312,
	0, 0, 220, 311, 313, 320, 1145, 976, 314, 512,
	316, 315, 317, 318, 319, 513, 1146, 514, 1147, 321,
	978, 515, 979, 322, 323, 324, 980, 325, 326, 0,
	0, 327, 328, 329, 330, 331, 1148, 333, 332, 1149,
	334, 516, 981, 335, 336, 982, 1150, 337, 338, 1151,
	1152, 339, 340, 341, 342, 0, 343, 344, 346, 348,
	345, 347, 349, 351, 352, 350, 983, 353, 354, 357,
	358, 356, 984, 355, 1153, 221, 985, 359, 1154, 517,
	360, 518, 362, 363, 1155, 364, 365, 366, 1156, 1157,
	368, 369, 370, 1158, 1159, 371, 372, 519, 986, 373,
	987, 520, 374, 367, 375, 376, 377, 378, 379, 380,
	381, 1160, 382, 383, 521, 384, 522, 385, 386, 1161,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 523,
	395, 396, 1162, 397, 398, 399, 400, 401, 0, 403,
	404, 405, 402, 406, 407, 408, 409, 1163, 410, 988,
	411, 412, 413, 414, 524, 415, 0, 416, 420, 421,
	422, 423, 424, 425, 426, 1164, 432, 433, 427, 429,
	430, 431, 428, 434, 435, 436, 1165, 437, 417, 418,
	438, 439, 989, 440, 441, 525, 442, 443, 1166, 444,
	445, 446, 447, 419, 448, 452, 453, 449, 450, 451,
	526, 1167, 455, 456, 454, 1168, 457, 458, 459, 460,
	461, 286, 462, 1169, 463, 527, 528, 529, 530, 1170,
	470, 1171, 464, 465, 531, 466, 532, 1172, 467, 468,
	469, 0, 471, 472, 1173, 1174, 473, 474, 475, 477,
	478, 476, 480, 1175, 481, 1176, 479, 482, 483, 484,
	533, 534, 535, 1177, 486, 485, 536, 1178, 1179, 1180,
	1181, 487, 488, 537, 489, 490, 491, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2995, 0, 222, 223, 224, 225, 226, 1104,
	227, 1105, 1106, 1107, 0, 1108, 492, 1109, 1110, 1111,
	1112, 228, 230, 229, 231, 232, 493, 494, 233, 495,
	236, 234, 235, 496, 1113, 237, 238, 239, 240, 241,
	242, 243, 1114, 1115, 244, 497, 498, 499, 1116, 245,
	246, 500, 1117, 1102, 1118, 247, 248, 249, 250, 251,
	252, 0, 254, 255, 256, 253, 1119, 257, 0, 258,
	259, 260, 1120, 261, 974, 262, 263, 1121, 1122, 1124,
	1123, 1125, 1126, 1127, 264, 265, 266, 267, 268, 269,
	501, 502, 1128, 270, 271, 1129, 273, 272, 1130, 274,
	1131, 1132, 275, 276, 277, 1133, 278, 1134, 279, 280,
	1135, 281, 503, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 504, 505, 1136, 219, 1137, 0, 0, 0,
	0, 292, 293, 294, 506, 295, 296, 0, 297, 1138,
	298, 1139, 1140, 975, 299, 300, 1141, 301, 507, 1142,
	508, 302, 1143, 303, 304, 305, 306, 509, 510, 511,
	361, 977, 307, 308, 1144, 309, 310, 312, 0, 0,
	220, 311, 313, 320, 1145, 976, 314, 512, 316, 315,
	317, 318, 319, 513, 1146, 514, 1147, 321, 978, 515,
	979, 322, 323, 324, 980, 325, 326, 0, 0, 327,
	328, 329, 330, 331, 1148, 333, 332, 1149, 334, 516,
	981, 335, 336, 982, 1150, 337, 338, 1151, 1152, 339,
	340, 341, 342, 0, 343, 344, 346, 348, 345, 347,
	349, 351, 352, 350, 983, 353, 354, 357, 358, 356,
	984, 355, 1153, 221, 985, 359, 1154, 517, 360, 518,
	362, 363, 1155, 364, 365, 366, 1156, 1157, 368, 369,
	370, 1158, 1159, 371, 372, 519, 986, 373, 987, 520,
	374, 367, 375, 376, 377, 378, 379, 380, 381, 1160,
	382, 383, 521, 384, 522, 385, 386, 1161, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 523, 395, 396,
	1162, 397, 398, 399, 400, 401, 0, 403, 404, 405,
	402, 406, 407, 408, 409, 1163, 410, 988, 411, 412,
	413, 414, 524, 415, 0, 416, 420, 421, 422, 423,
	424, 425, 426, 1164, 432, 433, 427, 429, 430, 431,
	428, 434, 435, 436, 1165, 437, 417, 418, 438, 439,
	989, 440, 441, 525, 442, 443, 1166, 444, 445, 446,
	447, 419, 448, 452, 453, 449, 450, 451, 526, 1167,
	455, 456, 454, 1168, 457, 458, 459, 460, 461, 286,
	462, 1169, 463, 527, 528, 529, 530, 1170, 470, 1171,
	464, 465, 531, 466, 532, 1172, 467, 468, 469, 0,
	471, 472, 1173, 1174, 473, 474, 475, 477, 478, 476,
	480, 1175, 481, 1176, 479, 482, 483, 484, 533, 534,
	535, 1177, 486, 485, 536, 1178, 1179, 1180, 1181, 487,
	488, 537, 489, 490, 491, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2846, 0, 222, 223, 224, 225, 226, 1104, 227, 1105,
	1106, 1107, 0, 1108, 492, 1109, 1110, 1111, 1112, 228,
	230, 229, 231, 232, 493, 494, 233, 495, 236, 234,
	235, 496, 1113, 237, 238, 239, 240, 241, 242, 243,
	1114, 1115, 244, 497, 498, 499, 1116, 245, 246, 500,
	1117, 1102, 1118, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 1119, 257, 0, 258, 259, 260,
	1120, 261, 974, 262, 263, 1121, 1122, 1124, 1123, 1125,
	1126, 1127, 264, 265, 266, 267, 268, 269, 501, 502,
	1128, 270, 271, 1129, 273, 272, 1130, 274, 1131, 1132,
	275, 276, 277, 1133, 278, 1134, 279, 280, 1135, 281,
	503, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	504, 505, 1136, 219, 1137, 0, 0, 0, 0, 292,
	293, 294, 506, 295, 296, 0, 297, 1138, 298, 1139,
	1140, 975, 299, 300, 1141, 301, 507, 1142, 508, 302,
	1143, 303, 304, 305, 306, 509, 510, 511, 361, 977,
	307, 308, 1144, 309, 310, 312, 0, 0, 220, 311,
	313, 320, 1145, 976, 314, 512, 316, 315, 317, 318,
	319, 513, 1146, 514, 1147, 321, 978, 515, 979, 322,
	323, 324, 980, 325, 326, 0, 0, 327, 328, 329,
	330, 331, 1148, 333, 332, 1149, 334, 516, 981, 335,
	336, 982, 1150, 337, 338, 1151, 1152, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	352, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	1153, 221, 985, 359, 1154, 517, 360, 518, 362, 363,
	1155, 364, 365, 366, 1156, 1157, 368, 369, 370, 1158,
	1159, 371, 372, 519, 986, 373, 987, 520, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 1160, 382, 383,
	521, 384, 522, 385, 386, 1161, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 523, 395, 396, 1162, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 1163, 410, 988, 411, 412, 413, 414,
	524, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 1164, 432, 433, 427, 429, 430, 431, 428, 434,
	435, 436, 1165, 437, 417, 418, 438, 439, 989, 440,
	441, 525, 442, 443, 1166, 444, 445, 446, 447, 419,
	448, 452, 453, 449, 450, 451, 526, 1167, 455, 456,
	454, 1168, 457, 458, 459, 460, 461, 286, 462, 1169,
	463, 527, 528, 529, 530, 1170, 470, 1171, 464, 465,
	531, 466, 532, 1172, 467, 468, 469, 0, 471, 472,
	1173, 1174, 473, 474, 475, 477, 478, 476, 480, 1175,
	481, 1176, 479, 482, 483, 484, 533, 534, 535, 1177,
	486, 485, 536, 1178, 1179, 1180, 1181, 487, 488, 537,
	489, 490, 491, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2148, 0,
	222, 223, 224, 225, 226, 1104, 227, 1105, 1106, 1107,
	0, 1108, 492, 1109, 1110, 1111, 1112, 228, 230, 229,
	231, 232, 493, 494, 233, 495, 236, 234, 235, 496,
	1113, 237, 238, 239, 240, 241, 242, 243, 1114, 1115,
	244, 497, 498, 499, 1116, 245, 246, 500, 1117, 1102,
	1118, 247, 248, 249, 250, 251, 252, 0, 254, 255,
	256, 253, 1119, 257, 0, 258, 259, 260, 1120, 261,
	974, 262, 263, 1121, 1122, 1124, 1123, 1125, 1126, 1127,
	264, 265, 266, 267, 268, 269, 501, 502, 1128, 270,
	271, 1129, 273, 272, 1130, 274, 1131, 1132, 275, 276,
	277, 1133, 278, 1134, 279, 280, 1135, 281, 503, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 504, 505,
	1136, 219, 1137, 0, 0, 0, 0, 292, 293, 294,
	506, 295, 296, 0, 297, 1138, 298, 1139, 1140, 975,
	299, 300, 1141, 301, 507, 1142, 508, 302, 1143, 303,
	304, 305, 306, 509, 510, 511, 361, 977, 307, 308,
	1144, 309, 310, 312, 0, 0, 220, 311, 313, 320,
	1145, 976, 314, 512, 316, 315, 317, 318, 319, 513,
	1146, 514, 1147, 321, 978, 515, 979, 322, 323, 324,
	980, 325, 326, 0, 0, 327, 328, 329, 330, 331,
	1148, 333, 332, 1149, 334, 516, 981, 335, 336, 982,
	1150, 337, 338, 1151, 1152, 339, 340, 341, 342, 0,
	343, 344, 346, 348, 345, 347, 349, 351, 352, 350,
	983, 353, 354, 357, 358, 356, 984, 355, 1153, 221,
	985, 359, 1154, 517, 360, 518, 362, 363, 1155, 364,
	365, 366, 1156, 1157, 368, 369, 370, 1158, 1159, 371,
	372, 519, 986, 373, 987, 520, 374, 367, 375, 376,
	377, 378, 379, 380, 381, 1160, 382, 383, 521, 384,
	522, 385, 386, 1161, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 523, 395, 396, 1162, 397, 398, 399,
	400, 401, 0, 403, 404, 405, 402, 406, 407, 408,
	409, 1163, 410, 988, 411, 412, 413, 414, 524, 415,
	0, 416, 420, 421, 422, 423, 424, 425, 426, 1164,
	432, 433, 427, 429, 430, 431, 428, 434, 435, 436,
	1165, 437, 417, 418, 438, 439, 989, 440, 441, 525,
	442, 443, 1166, 444, 445, 446, 447, 419, 448, 452,
	453, 449, 450, 451, 526, 1167, 455, 456, 454, 1168,
	457, 458, 459, 460, 461, 286, 462, 1169, 463, 527,
	528, 529, 530, 1170, 470, 1171, 464, 465, 531, 466,
	532, 1172, 467, 468, 469, 0, 471, 472, 1173, 1174,
	473, 474, 475, 477, 478, 476, 480, 1175, 481, 1176,
	479, 482, 483, 484, 533, 534, 535, 1177, 486, 485,
	536, 1178, 1179, 1180, 1181, 487, 488, 537, 489, 490,
	491, 1194, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1844, 0, 0, 0,
	222, 223, 224, 225, 226, 1104, 227, 1105, 1106, 1107,
	0, 1108, 492, 1109, 1110, 1111, 1112, 228, 230, 229,
	231, 232, 493, 494, 233, 495, 236, 234, 235, 496,
	1113, 237, 238, 239, 240, 241, 242, 243, 1114, 1115,
	244, 497, 498, 499, 1116, 245, 246, 500, 1117, 1102,
	1118, 247, 248, 249, 250, 251, 252, 0, 254, 255,
	256, 253, 1119, 257, 0, 258, 259, 260, 1120, 261,
	974, 262, 263, 1121, 1122, 1124, 1123, 1125, 1126, 1127,
	264, 265, 266, 267, 268, 269, 501, 502, 1128, 270,
	271, 1129, 273, 272, 1130, 274, 1131, 1132, 275, 276,
	277, 1133, 278, 1134, 279, 280, 1135, 281, 503, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 504, 505,
	1136, 219, 1137, 0, 0, 0, 0, 292, 293, 294,
	506, 295, 296, 0, 297, 1138, 298, 1139, 1140, 975,
	299, 300, 1141, 301, 507, 1142, 508, 302, 1143, 303,
	304, 305, 306, 509, 510, 511, 361, 977, 307, 308,
	1144, 309, 310, 312, 0, 0, 220, 311, 313, 320,
	1145, 976, 314, 512, 316, 315, 317, 318, 319, 513,
	1146, 514, 1147, 321, 978, 515, 979, 322, 323, 324,
	980, 325, 326, 0, 0, 327, 328, 329, 330, 331,
	1148, 333, 332, 1149, 334, 516, 981, 335, 336, 982,
	1150, 337, 338, 1151, 1152, 339, 340, 341, 342, 0,
	343, 344, 346, 348, 345, 347, 349, 351, 352, 350,
	983, 353, 354, 357, 358, 356, 984, 355, 1153, 221,
	985, 359, 1154, 517, 360, 518, 362, 363, 1155, 364,
	365, 366, 1156, 1157, 368, 369, 370, 1158, 1159, 371,
	372, 519, 986, 373, 987, 520, 374, 367, 375, 376,
	377, 378, 379, 380, 381, 1160, 382, 383, 521, 384,
	522, 385, 386, 1161, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 523, 395, 396, 1162, 397, 398, 399,
	400, 401, 0, 403, 404, 405, 402, 406, 407, 408,
	409, 1163, 410, 988, 411, 412, 413, 414, 524, 415,
	0, 416, 420, 421, 422, 423, 424, 425, 426, 1164,
	432, 433, 427, 429, 430, 431, 428, 434, 435, 436,
	1165, 437, 417, 418, 438, 439, 989, 440, 441, 525,
	442, 443, 1166, 444, 445, 446, 447, 419, 448, 452,
	453, 449, 450, 451, 526, 1167, 455, 456, 454, 1168,
	457, 458, 459, 460, 461, 286, 462, 1169, 463, 527,
	528, 529, 530, 1170, 470, 1171, 464, 465, 531, 466,
	532, 1172, 467, 468, 469, 0, 471, 472, 1173, 1174,
	473, 474, 475, 477, 478, 476, 480, 1175, 481, 1176,
	479, 482, 483, 484, 533, 534, 535, 1177, 486, 485,
	536, 1178, 1179, 1180, 1181, 487, 488, 537, 489, 490,
	491, 1094, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 1104, 227, 1105, 1106, 1107,
	0, 1108, 492, 1109, 1110, 1111, 1112, 228, 230, 229,
	231, 232, 493, 494, 233, 495, 236, 234, 235, 496,
	1113, 237, 238, 239, 240, 241, 242, 243, 1114, 1115,
	244, 497, 498, 499, 1116, 245, 246, 500, 1117, 1102,
	1118, 247, 248, 249, 250, 251, 252, 0, 254, 255,
	256, 253, 1119, 257, 0, 258, 259, 260, 1120, 261,
	974, 262, 263, 1121, 1122, 1124, 1123, 1125, 1126, 1127,
	264, 265, 266, 267, 268, 269, 501, 502, 1128, 270,
	271, 1129, 273, 272, 1130, 274, 1131, 1132, 275, 276,
	277, 1133, 278, 1134, 279, 280, 1135, 281, 503, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 504, 505,
	1136, 219, 1137, 0, 0, 0, 0, 292, 293, 294,
	506, 295, 296, 0, 297, 1138, 298, 1139, 1140, 975,
	299, 300, 1141, 301, 507, 1142, 508, 302, 1143, 303,
	304, 305, 306, 509, 510, 511, 361, 977, 307, 308,
	1144, 309, 310, 312, 0, 0, 220, 311, 313, 320,
	1145, 976, 314, 512, 316, 315, 317, 318, 319, 513,
	1146, 514, 1147, 321, 978, 515, 979, 322, 323, 324,
	980, 325, 326, 0, 0, 327, 328, 329, 330, 331,
	1148, 333, 332, 1149, 334, 516, 981, 335, 336, 982,
	1150, 337, 338, 1151, 1152, 339, 340, 341, 342, 0,
	343, 344, 346, 348, 345, 347, 349, 351, 352, 350,
	983, 353, 354, 357, 358, 356, 984, 355, 1153, 221,
	985, 359, 1154, 517, 360, 518, 362, 363, 1155, 364,
	365, 366, 1156, 1157, 368, 369, 370, 1158, 1159, 371,
	372, 519, 986, 373, 987, 520, 374, 367, 375, 376,
	377, 378, 379, 380, 381, 1160, 382, 383, 521, 384,
	522, 385, 386, 1161, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 523, 395, 396, 1162, 397, 398, 399,
	400, 401, 0, 403, 404, 405, 402, 406, 407, 408,
	409, 1163, 410, 988, 411, 412, 413, 414, 524, 415,
	0, 416, 420, 421, 422, 423, 424, 425, 426, 1164,
	432, 433, 427, 429, 430, 431, 428, 434, 435, 436,
	1165, 437, 417, 418, 438, 439, 989, 440, 441, 525,
	442, 443, 1166, 444, 445, 446, 447, 419, 448, 452,
	453, 449, 450, 451, 526, 1167, 455, 456, 454, 1168,
	457, 458, 459, 460, 461, 286, 462, 1169, 463, 527,
	528, 529, 530, 1170, 470, 1171, 464, 465, 531, 466,
	532, 1172, 467, 468, 469, 0, 471, 472, 1173, 1174,
	473, 474, 475, 477, 478, 476, 480, 1175, 481, 1176,
	479, 482, 483, 484, 533, 534, 535, 1177, 486, 485,
	536, 1178, 1179, 1180, 1181, 487, 488, 537, 489, 490,
	491, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 1104, 227, 1105, 1106, 1107, 0, 1108,
	492, 1109, 1110, 1111, 1112, 228, 230, 229, 231, 232,
	493, 494, 233, 495, 236, 234, 235, 496, 1113, 237,
	238, 239, 240, 241, 242, 243, 1114, 1115, 244, 497,
	498, 499, 1116, 245, 246, 500, 1117, 1102, 1118, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	1119, 257, 0, 258, 259, 260, 1120, 261, 974, 262,
	263, 1121, 1122, 1124, 1123, 1125, 1126, 1127, 264, 265,
	266, 267, 268, 269, 501, 502, 1128, 270, 271, 1129,
	273, 272, 1130, 274, 1131, 1132, 275, 276, 277, 1133,
	278, 1134, 279, 280, 1135, 281, 503, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 504, 505, 1136, 219,
	1137, 0, 0, 0, 0, 292, 293, 294, 506, 295,
	296, 0, 297, 1138, 298, 1139, 1140, 975, 299, 300,
	1141, 301, 507, 1142, 508, 302, 1143, 303, 304, 305,
	306, 509, 510, 511, 361, 977, 307, 308, 1144, 309,
	310, 312, 0, 0, 220, 311, 313, 320, 1145, 976,
	314, 512, 316, 315, 317, 318, 319, 513, 1146, 514,
	1147, 321, 978, 515, 979, 322, 323, 324, 980, 325,
	326, 0, 0, 327, 328, 329, 330, 331, 1148, 333,
	332, 1149, 334, 516, 981, 335, 336, 982, 1150, 337,
	338, 1151, 1152, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 352, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 1153, 221, 985, 359,
	1154, 517, 360, 518, 362, 363, 1155, 364, 365, 366,
	1156, 1157, 368, 369, 370, 1158, 1159, 371, 372, 519,
	986, 373, 987, 520, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 1160, 382, 383, 521, 384, 522, 385,
	386, 1161, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 523, 395, 396, 1162, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 1163,
	410, 988, 411, 412, 413, 414, 524, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 1164, 432, 433,
	427, 429, 430, 431, 428, 434, 435, 436, 1165, 437,
	417, 418, 438, 439, 989, 440, 441, 525, 442, 443,
	1166, 444, 445, 446, 447, 419, 448, 452, 453, 449,
	450, 451, 526, 1167, 455, 456, 454, 1168, 457, 458,
	459, 460, 461, 286, 462, 1169, 463, 527, 528, 529,
	530, 1170, 470, 1171, 464, 465, 531, 466, 532, 1172,
	467, 468, 469, 0, 471, 472, 1173, 1174, 473, 474,
	475, 477, 478, 476, 480, 1175, 481, 1176, 479, 482,
	483, 484, 533, 534, 535, 1177, 486, 485, 536, 1178,
	1179, 1180, 1181, 487, 488, 537, 489, 490, 491, 2123,
	0, 914, 872, 873, 874, 870, 871, 883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 2120, 227, 0, 0, 0, 0, 0,
	965, 888, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 929, 908, 940, 236, 898, 939, 938, 0, 237,
	238, 900, 899, 241, 242, 243, 890, 964, 244, 1001,
	1002, 499, 0, 245, 246, 971, 0, 952, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 974, 262,
	263, 955, 953, 954, 961, 957, 956, 960, 264, 265,
	266, 267, 943, 269, 936, 935, 861, 270, 271, 0,
	273, 272, 0, 274, 2121, 0, 275, 934, 277, 0,
	278, 0, 279, 280, 0, 281, 867, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 992, 993, 879, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 933, 931,
	932, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 999, 0, 889, 302, 0, 303, 304, 305,
	306, 966, 967, 970, 361, 977, 307, 308, 0, 309,
	310, 910, 0, 0, 220, 311, 313, 320, 0, 976,
	314, 922, 913, 924, 926, 927, 928, 923, 0, 915,
	0, 321, 978, 968, 979, 322, 323, 324, 980, 948,
	949, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 1000, 981, 335, 336, 982, 0, 337,
	338, 959, 958, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 902, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 858, 221, 985, 359,
	880, 969, 360, 937, 362, 363, 0, 911, 365, 912,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 994, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 995, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 930, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 868, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 0, 432, 433,
	903, 904, 906, 907, 428, 434, 435, 436, 962, 437,
	417, 418, 438, 439, 989, 440, 441, 925, 905, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 973, 449,
	450, 451, 996, 0, 455, 456, 454, 0, 457, 458,
	459, 460, 461, 286, 901, 0, 463, 944, 945, 946,
	947, 0, 470, 0, 464, 465, 997, 466, 998, 878,
	467, 468, 469, 0, 471, 472, 0, 862, 473, 474,
	475, 477, 478, 476, 480, 963, 481, 0, 909, 482,
	483, 484, 533, 941, 991, 2119, 486, 485, 536, 0,
	0, 0, 0, 487, 488, 537, 489, 490, 491, 859,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 855, 856, 2122, 0, 0, 0, 0, 0,
	0, 884, 2118, 0, 848, 882, 914, 872, 873, 874,
	870, 871, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 965, 888, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 929, 908, 940, 236,
	898, 939, 938, 0, 237, 238, 900, 899, 241, 242,
	243, 890, 964, 244, 1001, 1002, 499, 0, 245, 246,
	971, 0, 952, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 955, 953, 954, 961,
	957, 956, 960, 264, 265, 266, 267, 943, 269, 936,
	935, 861, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 934, 277, 0, 278, 0, 279, 280, 0,
	281, 867, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 992, 993, 879, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 933, 931, 932, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 999, 0, 889,
	302, 0, 303, 304, 305, 306, 966, 967, 970, 361,
	977, 307, 308, 0, 309, 310, 910, 0, 0, 220,
	311, 313, 320, 0, 976, 314, 922, 913, 924, 926,
	927, 928, 923, 0, 915, 0, 321, 978, 968, 979,
	322, 323, 324, 980, 948, 949, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 1000, 981,
	335, 336, 982, 0, 337, 338, 959, 958, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 902, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 858, 221, 985, 359, 880, 969, 360, 937, 362,
	363, 0, 911, 365, 912, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 994, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 995, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 930, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 868, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 185, 432, 433, 903, 904, 906, 907, 428,
	434, 435, 436, 962, 437, 417, 418, 438, 439, 989,
	440, 441, 925, 905, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 973, 449, 450, 451, 996, 0, 455,
	456, 454, 187, 457, 458, 459, 460, 461, 286, 901,
	0, 463, 944, 945, 946, 947, 0, 470, 0, 464,
	465, 997, 466, 998, 878, 467, 468, 469, 0, 471,
	472, 0, 862, 473, 474, 475, 477, 478, 476, 480,
	963, 481, 0, 909, 482, 483, 484, 1346, 941, 991,
	0, 486, 485, 536, 0, 0, 0, 179, 487, 488,
	537, 489, 490, 491, 859, 180, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 855, 856, 914,
	872, 873, 874, 870, 871, 883, 1556, 1554, 0, 0,
	882, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 965, 888,
	0, 0, 0, 228, 230, 229, 231, 232, 493, 929,
	908, 940, 236, 898, 939, 938, 0, 237, 238, 900,
	899, 241, 242, 243, 890, 964, 244, 1001, 1002, 499,
	0, 245, 246, 971, 0, 952, 0, 247, 248, 249,
	250, 251, 252, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 974, 262, 263, 955,
	953, 954, 961, 957, 956, 960, 264, 265, 266, 267,
	943, 269, 936, 935, 861, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 934, 277, 0, 278, 0,
	279, 280, 0, 281, 867, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 992, 993, 879, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 933, 931, 932, 0,
	297, 0, 298, 0, 0, 975, 299, 300, 0, 301,
	999, 0, 889, 302, 0, 303, 304, 305, 306, 966,
	967, 970, 361, 977, 307, 308, 0, 309, 310, 910,
	0, 0, 220, 311, 313, 320, 0, 976, 314, 922,
	913, 924, 926, 927, 928, 923, 0, 915, 0, 321,
	978, 968, 979, 322, 323, 324, 980, 948, 949, 0,
	0, 327, 328, 329, 330, 331, 0, 333, 332, 0,
	334, 1000, 981, 335, 336, 982, 0, 337, 338, 959,
	958, 339, 340, 341, 342, 0, 343, 344, 346, 348,
	345, 347, 349, 351, 902, 350, 983, 353, 354, 357,
	358, 356, 984, 355, 858, 221, 985, 359, 880, 969,
	360, 937, 362, 363, 0, 911, 365, 912, 0, 0,
	368, 369, 370, 0, 0, 371, 372, 519, 986, 373,
	987, 994, 374, 367, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 383, 995, 384, 522, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 930,
	395, 396, 0, 397, 398, 399, 400, 401, 0, 403,
	404, 405, 402, 406, 407, 408, 409, 0, 410, 988,
	411, 412, 413, 414, 868, 415, 0, 416, 420, 421,
	422, 423, 424, 425, 426, 185, 432, 433, 903, 904,
	906, 907, 428, 434, 435, 436, 962, 437, 417, 418,
	438, 439, 989, 440, 441, 925, 905, 443, 0, 444,
	445, 446, 447, 419, 448, 452, 973, 449, 450, 451,
	996, 0, 455, 456, 454, 187, 457, 458, 459, 460,
	461, 286, 901, 0, 463, 944, 945, 946, 947, 0,
	470, 0, 464, 465, 997, 466, 998, 878, 467, 468,
	469, 0, 471, 472, 0, 862, 473, 474, 475, 477,
	478, 476, 480, 963, 481, 0, 909, 482, 483, 484,
	1346, 941, 991, 0, 486, 485, 536, 0, 0, 0,
	179, 487, 488, 537, 489, 490, 491, 859, 180, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	855, 856, 914, 872, 873, 874, 870, 871, 883, 1556,
	2593, 0, 0, 882, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 965, 888, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 929, 908, 940, 236, 898, 939, 938, 0,
	237, 238, 900, 899, 241, 242, 243, 890, 964, 244,
	1001, 1002, 499, 0, 245, 246, 971, 0, 952, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 974,
	262, 263, 955, 953, 954, 961, 957, 956, 960, 264,
	265, 266, 267, 943, 269, 936, 935, 861, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 934, 277,
	0, 278, 0, 279, 280, 0, 281, 867, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 992, 993, 879,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 933,
	931, 932, 0, 297, 0, 298, 0, 0, 975, 299,
	300, 0, 301, 999, 0, 889, 302, 0, 303, 304,
	305, 306, 966, 967, 970, 361, 977, 307, 308, 0,
	309, 310, 910, 0, 0, 220, 311, 313, 320, 0,
	976, 314, 922, 913, 924, 926, 927, 928, 923, 0,
	915, 0, 321, 978, 968, 979, 322, 323, 324, 980,
	948, 949, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 1000, 981, 335, 336, 982, 0,
	337, 338, 959, 958, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 902, 350, 983,
	353, 354, 357, 358, 356, 984, 355, 858, 221, 985,
	359, 880, 969, 360, 937, 362, 363, 0, 911, 365,
	912, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 986, 373, 987, 994, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 995, 384, 522,
	385, 386, 0, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 930, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 988, 411, 412, 413, 414, 868, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 185, 432,
	433, 903, 904, 906, 907, 428, 434, 435, 436, 962,
	437, 417, 418, 438, 439, 989, 440, 441, 925, 905,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 973,
	449, 450, 451, 996, 0, 455, 456, 454, 187, 457,
	458, 459, 460, 461, 286, 901, 0, 463, 944, 945,
	946, 947, 0, 470, 0, 464, 465, 997, 466, 998,
	878, 467, 468, 469, 0, 471, 472, 0, 862, 473,
	474, 475, 477, 478, 476, 480, 963, 481, 0, 909,
	482, 483, 484, 1346, 941, 991, 0, 486, 485, 536,
	0, 0, 0, 179, 487, 488, 537, 489, 490, 491,
	859, 180, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 855, 856, 914, 872, 873, 874, 870,
	871, 883, 1556, 1554, 0, 0, 882, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 965, 888, 0, 0, 0, 228,
	230, 229, 231, 232, 493, 929, 908, 940, 236, 898,
	939, 938, 2217, 237, 238, 900, 899, 241, 242, 243,
	890, 964, 244, 1001, 1002, 499, 0, 245, 246, 971,
	0, 952, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 974, 262, 263, 955, 953, 954, 961, 957,
	956, 960, 264, 265, 266, 267, 943, 269, 936, 935,
	861, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 934, 277, 0, 278, 0, 279, 280, 0, 281,
	867, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	992, 993, 879, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 933, 931, 932, 0, 297, 0, 298, 0,
	2222, 975, 299, 300, 0, 301, 999, 0, 889, 302,
	0, 303, 304, 305, 306, 966, 967, 970, 361, 977,
	307, 308, 0, 309, 310, 910, 0, 0, 220, 311,
	313, 320, 0, 976, 314, 922, 913, 924, 926, 927,
	928, 923, 0, 915, 0, 321, 978, 968, 979, 322,
	323, 324, 980, 948, 949, 0, 0, 327, 328, 329,
	330, 331, 0, 333, 332, 2218, 334, 1000, 981, 335,
	336, 982, 0, 337, 338, 959, 958, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	902, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	858, 221, 985, 359, 880, 969, 360, 937, 362, 363,
	0, 911, 365, 912, 0, 0, 368, 369, 370, 0,
	0, 371, 372, 519, 986, 373, 987, 994, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	995, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 930, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 988, 411, 412, 413, 414,
	868, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 0, 432, 433, 903, 904, 906, 907, 428, 434,
	435, 436, 962, 437, 417, 418, 438, 439, 989, 440,
	441, 925, 905, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 973, 449, 450, 451, 996, 0, 455, 456,
	454, 0, 457, 458, 459, 460, 461, 286, 901, 0,
	463, 944, 945, 946, 947, 0, 470, 2219, 464, 465,
	997, 466, 998, 878, 467, 468, 469, 0, 471, 472,
	0, 862, 473, 474, 475, 477, 478, 476, 480, 963,
	481, 0, 909, 482, 483, 484, 533, 941, 991, 0,
	486, 485, 536, 0, 0, 0, 0, 487, 488, 537,
	489, 490, 491, 859, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 855, 856, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 2176, 882,
	914, 872, 873, 874, 870, 871, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 965,
	888, 0, 0, 0, 228, 230, 229, 231, 232, 493,
	929, 908, 940, 236, 898, 939, 938, 0, 237, 238,
	900, 899, 241, 242, 243, 890, 964, 244, 1001, 1002,
	499, 0, 245, 246, 971, 0, 952, 0, 247, 248,
	249, 250, 251, 252, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 974, 262, 263,
	955, 953, 954, 961, 957, 956, 960, 264, 265, 266,
	267, 943, 269, 936, 935, 861, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 934, 277, 0, 278,
	0, 279, 280, 0, 281, 867, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 992, 993, 879, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 933, 931, 932,
	0, 297, 0, 298, 0, 0, 975, 299, 300, 0,
	301, 999, 0, 889, 302, 0, 303, 304, 305, 306,
	966, 967, 970, 361, 977, 307, 308, 0, 309, 310,
	910, 0, 0, 220, 311, 313, 320, 0, 976, 314,
	922, 913, 924, 926, 927, 928, 923, 0, 915, 0,
	321, 978, 968, 979, 322, 323, 324, 980, 948, 949,
	0, 0, 327, 328, 329, 330, 331, 0, 333, 332,
	0, 334, 1000, 981, 335, 336, 982, 0, 337, 338,
	959, 958, 339, 340, 341, 342, 0, 343, 344, 346,
	348, 345, 347, 349, 351, 902, 350, 983, 353, 354,
	357, 358, 356, 984, 355, 858, 221, 985, 359, 880,
	969, 360, 937, 362, 363, 0, 911, 365, 912, 0,
	0, 368, 369, 370, 0, 0, 371, 372, 519, 986,
	373, 987, 994, 374, 367, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 383, 995, 384, 522, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	930, 395, 396, 0, 397, 398, 399, 400, 401, 0,
	403, 404, 405, 402, 406, 407, 408, 409, 0, 410,
	988, 411, 412, 413, 414, 868, 415, 0, 416, 420,
	421, 422, 423, 424, 425, 426, 0, 432, 433, 903,
	904, 906, 907, 428, 434, 435, 436, 962, 437, 417,
	418, 438, 439, 989, 440, 441, 925, 905, 443, 0,
	444, 445, 446, 447, 419, 448, 452, 973, 449, 450,
	451, 996, 0, 455, 456, 454, 0, 457, 458, 459,
	460, 461, 286, 901, 0, 463, 944, 945, 946, 947,
	0, 470, 0, 464, 465, 997, 466, 998, 878, 467,
	468, 469, 0, 471, 472, 0, 862, 473, 474, 475,
	477, 478, 476, 480, 963, 481, 0, 909, 482, 483,
	484, 533, 941, 991, 0, 486, 485, 536, 0, 0,
	0, 0, 487, 488, 537, 489, 490, 491, 859, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 855, 856, 0, 0, 0, 0, 0, 0, 0,
	884, 2174, 0, 2173, 882, 914, 872, 873, 874, 870,
	871, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 965, 888, 0, 0, 0, 228,
	230, 229, 231, 232, 493, 929, 908, 940, 236, 898,
	939, 938, 0, 237, 238, 900, 899, 241, 242, 243,
	890, 964, 244, 1001, 1002, 499, 0, 245, 246, 971,
	0, 952, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 974, 262, 263, 955, 953, 954, 961, 957,
	956, 960, 264, 265, 266, 267, 943, 269, 936, 935,
	861, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 934, 277, 0, 278, 0, 279, 280, 0, 281,
	867, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	992, 993, 879, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 933, 931, 932, 0, 297, 0, 298, 0,
	0, 975, 299, 300, 0, 301, 999, 0, 889, 302,
	0, 303, 304, 305, 306, 966, 967, 970, 361, 977,
	307, 308, 0, 309, 310, 910, 0, 0, 220, 311,
	313, 320, 0, 976, 314, 922, 913, 924, 926, 927,
	928, 923, 0, 915, 0, 321, 978, 968, 979, 322,
	323, 324, 980, 948, 949, 0, 0, 327, 328, 329,
	330, 331, 0, 333, 332, 0, 334, 1000, 981, 335,
	336, 982, 0, 337, 338, 959, 958, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	902, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	858, 221, 985, 359, 880, 969, 360, 937, 362, 363,
	0, 911, 365, 912, 0, 0, 368, 369, 370, 0,
	0, 371, 372, 519, 986, 373, 987, 994, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	995, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 930, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 988, 411, 412, 413, 414,
	868, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 0, 432, 433, 903, 904, 906, 907, 428, 434,
	435, 436, 962, 437, 417, 418, 438, 439, 989, 440,
	441, 925, 905, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 973, 449, 450, 451, 996, 0, 455, 456,
	454, 0, 457, 458, 459, 460, 461, 286, 901, 0,
	463, 944, 945, 946, 947, 0, 470, 0, 464, 465,
	997, 466, 998, 878, 467, 468, 469, 0, 471, 472,
	0, 862, 473, 474, 475, 477, 478, 476, 480, 963,
	481, 0, 909, 482, 483, 484, 533, 941, 991, 0,
	486, 485, 536, 0, 0, 0, 0, 487, 488, 537,
	489, 490, 491, 859, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 855, 856, 0, 0,
	0, 0, 0, 0, 0, 884, 2171, 0, 2170, 882,
	914, 872, 873, 874, 870, 871, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 965,
	888, 0, 0, 0, 228, 230, 229, 231, 232, 493,
	929, 908, 940, 236, 898, 939, 938, 0, 237, 238,
	900, 899, 241, 242, 243, 890, 964, 244, 1001, 1002,
	499, 0, 245, 246, 971, 0, 952, 0, 247, 248,
	249, 250, 251, 252, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 974, 262, 263,
	955, 953, 954, 961, 957, 956, 960, 264, 265, 266,
	267, 943, 269, 936, 935, 861, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 934, 277, 0, 278,
	0, 279, 280, 0, 281, 867, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 992, 993, 879, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 933, 931, 932,
	0, 297, 0, 298, 0, 0, 975, 299, 300, 0,
	301, 999, 0, 889, 302, 0, 303, 304, 305, 306,
	966, 967, 970, 361, 977, 307, 308, 0, 309, 310,
	910, 0, 0, 220, 311, 313, 320, 0, 976, 314,
	922, 913, 924, 926, 927, 928, 923, 0, 915, 0,
	321, 978, 968, 979, 322, 323, 324, 980, 948, 949,
	0, 0, 327, 328, 329, 330, 331, 0, 333, 332,
	0, 334, 1000, 981, 335, 336, 982, 0, 337, 338,
	959, 958, 339, 340, 341, 342, 0, 343, 344, 346,
	348, 345, 347, 349, 351, 902, 350, 983, 353, 354,
	357, 358, 356, 984, 355, 858, 221, 985, 359, 880,
	969, 360, 937, 362, 363, 0, 911, 365, 912, 0,
	0, 368, 369, 370, 0, 0, 371, 372, 519, 986,
	373, 987, 994, 374, 367, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 383, 995, 384, 522, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	930, 395, 396, 0, 397, 398, 399, 400, 401, 0,
	403, 404, 405, 402, 406, 407, 408, 409, 0, 410,
	988, 411, 412, 413, 414, 868, 415, 0, 416, 420,
	421, 422, 423, 424, 425, 426, 0, 432, 433, 903,
	904, 906, 907, 428, 434, 435, 436, 962, 437, 417,
	418, 438, 439, 989, 440, 441, 925, 905, 443, 0,
	444, 445, 446, 447, 419, 448, 452, 973, 449, 450,
	451, 996, 0, 455, 456, 454, 0, 457, 458, 459,
	460, 461, 286, 901, 0, 463, 944, 945, 946, 947,
	0, 470, 0, 464, 465, 997, 466, 998, 878, 467,
	468, 469, 0, 471, 472, 0, 862, 473, 474, 475,
	477, 478, 476, 480, 963, 481, 0, 909, 482, 483,
	484, 533, 941, 991, 0, 486, 485, 536, 0, 0,
	0, 0, 487, 488, 537, 489, 490, 491, 859, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 855, 856, 0, 0, 0, 0, 0, 0, 0,
	884, 2168, 0, 2167, 882, 914, 872, 873, 874, 870,
	871, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 965, 888, 0, 0, 0, 228,
	230, 229, 231, 232, 493, 929, 908, 940, 236, 898,
	939, 938, 0, 237, 238, 900, 899, 241, 242, 243,
	890, 964, 244, 1001, 1002, 499, 0, 245, 246, 971,
	0, 952, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 974, 262, 263, 955, 953, 954, 961, 957,
	956, 960, 264, 265, 266, 267, 943, 269, 936, 935,
	861, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 934, 277, 0, 278, 0, 279, 280, 0, 281,
	867, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	992, 993, 879, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 933, 931, 932, 0, 297, 0, 298, 0,
	0, 975, 299, 300, 0, 301, 999, 0, 889, 302,
	0, 303, 304, 305, 306, 966, 967, 970, 361, 977,
	307, 308, 0, 309, 310, 910, 0, 0, 220, 311,
	313, 320, 0, 976, 314, 922, 913, 924, 926, 927,
	928, 923, 0, 915, 0, 321, 978, 968, 979, 322,
	323, 324, 980, 948, 949, 0, 0, 327, 328, 329,
	330, 331, 0, 333, 332, 0, 334, 1000, 981, 335,
	336, 982, 0, 337, 338, 959, 958, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	902, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	858, 221, 985, 359, 880, 969, 360, 937, 362, 363,
	0, 911, 365, 912, 0, 0, 368, 369, 370, 0,
	0, 371, 372, 519, 986, 373, 987, 994, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	995, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 930, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 988, 411, 412, 413, 414,
	868, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 0, 432, 433, 903, 904, 906, 907, 428, 434,
	435, 436, 962, 437, 417, 418, 438, 439, 989, 440,
	441, 925, 905, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 973, 449, 450, 451, 996, 0, 455, 456,
	454, 0, 457, 458, 459, 460, 461, 286, 901, 0,
	463, 944, 945, 946, 947, 0, 470, 0, 464, 465,
	997, 466, 998, 878, 467, 468, 469, 0, 471, 472,
	0, 862, 473, 474, 475, 477, 478, 476, 480, 963,
	481, 0, 909, 482, 483, 484, 533, 941, 991, 0,
	486, 485, 536, 0, 0, 0, 0, 487, 488, 537,
	489, 490, 491, 859, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 855, 856, 0, 0,
	0, 0, 0, 0, 0, 884, 2165, 0, 1415, 882,
	914, 872, 873, 874, 870, 871, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 965,
	888, 0, 0, 0, 228, 230, 229, 231, 232, 493,
	929, 908, 940, 236, 898, 939, 938, 0, 237, 238,
	900, 899, 241, 242, 243, 890, 964, 244, 1001, 1002,
	499, 0, 245, 246, 971, 0, 952, 0, 247, 248,
	249, 250, 251, 252, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 974, 262, 263,
	955, 953, 954, 961, 957, 956, 960, 264, 265, 266,
	267, 943, 269, 936, 935, 861, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 934, 277, 0, 278,
	0, 279, 280, 0, 281, 867, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 992, 993, 879, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 933, 931, 932,
	0, 297, 0, 298, 0, 0, 975, 299, 300, 0,
	301, 999, 0, 889, 302, 0, 303, 304, 305, 306,
	966, 967, 970, 361, 977, 307, 308, 0, 309, 310,
	910, 0, 0, 220, 311, 313, 320, 0, 976, 314,
	922, 913, 924, 926, 927, 928, 923, 0, 915, 0,
	321, 978, 968, 979, 322, 323, 324, 980, 948, 949,
	0, 0, 327, 328, 329, 330, 331, 0, 333, 332,
	0, 334, 1000, 981, 335, 336, 982, 0, 337, 338,
	959, 958, 339, 340, 341, 342, 0, 343, 344, 346,
	348, 345, 347, 349, 351, 902, 350, 983, 353, 354,
	357, 358, 356, 984, 355, 858, 221, 985, 359, 880,
	969, 360, 937, 362, 363, 0, 911, 365, 912, 0,
	0, 368, 369, 370, 0, 0, 371, 372, 519, 986,
	373, 987, 994, 374, 367, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 383, 995, 384, 522, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	930, 395, 396, 0, 397, 398, 399, 400, 401, 0,
	403, 404, 405, 402, 406, 407, 408, 409, 0, 410,
	988, 411, 412, 413, 414, 868, 415, 0, 416, 420,
	421, 422, 423, 424, 425, 426, 0, 432, 433, 903,
	904, 906, 907, 428, 434, 435, 436, 962, 437, 417,
	418, 438, 439, 989, 440, 441, 925, 905, 443, 0,
	444, 445, 446, 447, 419, 448, 452, 973, 449, 450,
	451, 996, 0, 455, 456, 454, 0, 457, 458, 459,
	460, 461, 286, 901, 0, 463, 944, 945, 946, 947,
	0, 470, 0, 464, 465, 997, 466, 998, 878, 467,
	468, 469, 0, 471, 472, 0, 862, 473, 474, 475,
	477, 478, 476, 480, 963, 481, 0, 909, 482, 483,
	484, 533, 941, 991, 0, 486, 485, 536, 1414, 0,
	0, 0, 487, 488, 537, 489, 490, 491, 859, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 855, 856, 0, 0, 0, 0, 0, 0, 0,
	884, 0, 0, 851, 882, 914, 872, 873, 874, 870,
	871, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 965, 888, 0, 0, 0, 228,
	230, 229, 231, 232, 493, 929, 908, 940, 236, 898,
	939, 938, 0, 237, 238, 900, 899, 241, 242, 243,
	890, 964, 244, 1001, 1002, 499, 0, 245, 246, 971,
	0, 952, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 974, 262, 263, 955, 953, 954, 961, 957,
	956, 960, 264, 265, 266, 267, 943, 269, 936, 935,
	861, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 934, 277, 0, 278, 0, 279, 280, 0, 281,
	867, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	992, 993, 879, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 933, 931, 932, 0, 297, 0, 298, 0,
	0, 975, 299, 300, 0, 301, 999, 0, 889, 302,
	0, 303, 304, 305, 306, 966, 967, 970, 361, 977,
	307, 308, 0, 309, 310, 910, 0, 0, 220, 311,
	313, 320, 0, 976, 314, 922, 913, 924, 926, 927,
	928, 923, 0, 915, 0, 321, 978, 968, 979, 322,
	323, 324, 980, 948, 949, 0, 0, 327, 328, 329,
	330, 331, 0, 333, 332, 0, 334, 1000, 981, 335,
	336, 982, 0, 337, 338, 959, 958, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	902, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	858, 221, 985, 359, 880, 969, 360, 937, 362, 363,
	0, 911, 365, 912, 863, 0, 368, 369, 370, 0,
	0, 371, 372, 519, 986, 373, 987, 994, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	995, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 930, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 988, 411, 412, 413, 414,
	868, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 0, 432, 433, 903, 904, 906, 907, 428, 434,
	435, 436, 962, 437, 417, 418, 438, 439, 989, 440,
	441, 925, 905, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 973, 449, 450, 451, 996, 0, 455, 456,
	454, 0, 457, 458, 459, 460, 461, 286, 901, 0,
	463, 944, 945, 946, 947, 0, 470, 0, 464, 465,
	997, 466, 998, 878, 467, 468, 469, 0, 471, 472,
	0, 862, 473, 474, 475, 477, 478, 476, 480, 963,
	481, 0, 909, 482, 483, 484, 533, 941, 991, 0,
	486, 485, 536, 0, 0, 0, 0, 487, 488, 537,
	489, 490, 491, 859, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 855, 856, 914, 872,
	873, 874, 870, 871, 883, 884, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 965, 888, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 929, 908,
	940, 236, 898, 939, 938, 0, 237, 238, 900, 899,
	241, 242, 243, 890, 964, 244, 1001, 1002, 499, 0,
	245, 246, 971, 0, 952, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 3620, 260, 0, 261, 974, 262, 263, 955, 953,
	954, 961, 957, 956, 960, 264, 265, 266, 267, 943,
	269, 936, 935, 861, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 934, 277, 0, 278, 0, 279,
	280, 0, 281, 867, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 992, 993, 879, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 933, 931, 932, 0, 297,
	0, 298, 0, 0, 975, 299, 300, 0, 301, 999,
	0, 889, 302, 0, 303, 304, 305, 306, 966, 967,
	970, 361, 977, 307, 308, 0, 309, 310, 910, 0,
	0, 220, 311, 313, 320, 0, 976, 314, 922, 913,
	924, 926, 927, 928, 923, 0, 915, 0, 321, 978,
	968, 979, 322, 323, 324, 980, 948, 949, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	1000, 981, 335, 336, 982, 0, 337, 338, 959, 958,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 902, 350, 983, 353, 354, 357, 358,
	356, 984, 355, 858, 221, 985, 359, 880, 969, 360,
	937, 362, 363, 0, 911, 365, 912, 863, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 986, 373, 987,
	994, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 995, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 930, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 988, 411,
	412, 413, 414, 868, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 903, 904, 906,
	907, 428, 434, 435, 436, 962, 437, 417, 418, 438,
	439, 989, 440, 441, 925, 905, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 973, 449, 450, 451, 996,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 901, 0, 463, 944, 945, 946, 947, 0, 470,
	0, 464, 465, 997, 466, 998, 878, 467, 468, 469,
	0, 471, 472, 0, 862, 473, 474, 475, 477, 478,
	476, 480, 963, 481, 0, 909, 482, 483, 484, 533,
	941, 991, 0, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 859, 0, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 855,
	856, 914, 872, 873, 874, 870, 871, 883, 884, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	965, 888, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 929, 908, 940, 236, 898, 939, 938, 0, 237,
	238, 900, 899, 241, 242, 243, 890, 964, 244, 1001,
	1002, 499, 0, 245, 246, 971, 0, 952, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 3454, 260, 0, 261, 974, 262,
	263, 955, 953, 954, 961, 957, 956, 960, 264, 265,
	266, 267, 943, 269, 936, 935, 861, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 934, 277, 0,
	278, 0, 279, 280, 0, 281, 867, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 992, 993, 879, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 933, 931,
	932, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 999, 0, 889, 302, 0, 303, 304, 305,
	306, 966, 967, 970, 361, 977, 307, 308, 0, 309,
	310, 910, 0, 0, 220, 311, 313, 320, 0, 976,
	314, 922, 913, 924, 926, 927, 928, 923, 0, 915,
	0, 321, 978, 968, 979, 322, 323, 324, 980, 948,
	949, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 1000, 981, 335, 336, 982, 0, 337,
	338, 959, 958, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 902, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 858, 221, 985, 359,
	880, 969, 360, 937, 362, 363, 0, 911, 365, 912,
	863, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 994, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 995, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 930, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 868, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 0, 432, 433,
	903, 904, 906, 907, 428, 434, 435, 436, 962, 437,
	417, 418, 438, 439, 989, 440, 441, 925, 905, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 973, 449,
	450, 451, 996, 0, 455, 456, 454, 0, 457, 458,
	459, 460, 461, 286, 901, 0, 463, 944, 945, 946,
	947, 0, 470, 0, 464, 465, 997, 466, 998, 878,
	467, 468, 469, 0, 471, 472, 0, 862, 473, 474,
	475, 477, 478, 476, 480, 963, 481, 0, 909, 482,
	483, 484, 533, 941, 991, 0, 486, 485, 536, 0,
	0, 0, 0, 487, 488, 537, 489, 490, 491, 859,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 855, 856, 914, 872, 873, 874, 870, 871,
	883, 884, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 965, 888, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 929, 908, 940, 236, 898, 939,
	938, 0, 237, 238, 900, 899, 241, 242, 243, 890,
	964, 244, 1001, 1002, 499, 0, 245, 246, 971, 0,
	952, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 974, 262, 263, 955, 953, 954, 961, 957, 956,
	960, 264, 265, 266, 267, 943, 269, 936, 935, 861,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	934, 277, 0, 278, 0, 279, 280, 0, 281, 867,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 992,
	993, 879, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 933, 931, 932, 0, 297, 0, 298, 0, 0,
	975, 299, 300, 0, 301, 999, 0, 889, 302, 0,
	303, 304, 305, 306, 966, 967, 970, 361, 977, 307,
	308, 0, 309, 310, 910, 0, 0, 220, 311, 313,
	320, 0, 976, 314, 922, 913, 924, 926, 927, 928,
	923, 0, 915, 0, 321, 978, 968, 979, 322, 323,
	324, 980, 948, 949, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 1000, 981, 335, 336,
	982, 0, 337, 338, 959, 958, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 902,
	350, 983, 353, 354, 357, 358, 356, 984, 355, 858,
	3172, 985, 359, 880, 969, 360, 937, 362, 363, 0,
	911, 365, 912, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 986, 373, 987, 994, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 995,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 930, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 988, 411, 412, 413, 414, 868,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 903, 904, 906, 907, 428, 434, 435,
	436, 962, 437, 417, 418, 438, 439, 989, 440, 441,
	925, 905, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 973, 449, 450, 451, 996, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 901, 0, 463,
	944, 945, 946, 947, 0, 470, 0, 464, 465, 997,
	466, 998, 878, 467, 468, 469, 0, 471, 472, 0,
	862, 473, 474, 475, 477, 478, 476, 480, 963, 481,
	0, 909, 482, 483, 484, 533, 941, 991, 0, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 859, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 855, 856, 1620, 0, 0,
	0, 0, 0, 0, 884, 0, 0, 0, 882, 914,
	872, 873, 874, 870, 871, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 965, 888,
	0, 0, 0, 228, 230, 229, 231, 232, 493, 929,
	908, 940, 236, 898, 939, 938, 0, 237, 238, 900,
	899, 241, 242, 243, 890, 964, 244, 1001, 1002, 499,
	0, 245, 246, 971, 0, 952, 0, 247, 248, 249,
	250, 251, 252, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 974, 262, 263, 955,
	953, 954, 961, 957, 956, 960, 264, 265, 266, 267,
	943, 269, 936, 935, 861, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 934, 277, 0, 278, 0,
	279, 280, 0, 281, 867, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 992, 993, 879, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 933, 931, 932, 0,
	297, 0, 298, 0, 0, 975, 299, 300, 0, 301,
	999, 0, 889, 302, 0, 303, 304, 305, 306, 966,
	967, 970, 361, 977, 307, 308, 0, 309, 310, 910,
	0, 0, 220, 311, 313, 320, 0, 976, 314, 922,
	913, 924, 926, 927, 928, 923, 0, 915, 0, 321,
	978, 968, 979, 322, 323, 324, 980, 948, 949, 0,
	0, 327, 328, 329, 330, 331, 0, 333, 332, 0,
	334, 1000, 981, 335, 336, 982, 0, 337, 338, 959,
	958, 339, 340, 341, 342, 0, 343, 344, 346, 348,
	345, 347, 349, 351, 902, 350, 983, 353, 354, 357,
	358, 356, 984, 355, 858, 221, 985, 359, 880, 969,
	360, 937, 362, 363, 0, 911, 365, 912, 0, 0,
	368, 369, 370, 0, 0, 371, 372, 519, 986, 373,
	987, 994, 374, 367, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 383, 995, 384, 522, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 930,
	395, 396, 0, 397, 398, 399, 400, 401, 0, 403,
	404, 405, 402, 406, 407, 408, 409, 0, 410, 988,
	411, 412, 413, 414, 868, 415, 0, 416, 420, 421,
	422, 423, 424, 425, 426, 0, 432, 433, 903, 904,
	906, 907, 428, 434, 435, 436, 962, 437, 417, 418,
	438, 439, 989, 440, 441, 925, 905, 443, 0, 444,
	445, 446, 447, 419, 448, 452, 973, 449, 450, 451,
	996, 0, 455, 456, 454, 0, 457, 458, 459, 460,
	461, 286, 901, 0, 463, 944, 945, 946, 947, 0,
	470, 0, 464, 465, 997, 466, 998, 878, 467, 468,
	469, 0, 471, 472, 0, 862, 473, 474, 475, 477,
	478, 476, 480, 963, 481, 0, 909, 482, 483, 484,
	533, 941, 991, 2973, 486, 485, 536, 0, 0, 0,
	0, 487, 488, 537, 489, 490, 491, 859, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	855, 856, 914, 872, 873, 874, 870, 871, 883, 884,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 965, 888, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 929, 908, 940, 236, 898, 939, 938, 0,
	237, 238, 900, 899, 241, 242, 243, 890, 964, 244,
	1001, 1002, 499, 0, 245, 246, 971, 0, 952, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 974,
	262, 263, 955, 953, 954, 961, 957, 956, 960, 264,
	265, 266, 267, 943, 269, 936, 935, 861, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 934, 277,
	0, 278, 0, 279, 280, 0, 281, 867, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 992, 993, 879,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 933,
	931, 932, 0, 297, 0, 298, 0, 0, 975, 299,
	300, 0, 301, 999, 0, 889, 302, 0, 303, 304,
	305, 306, 966, 967, 970, 361, 977, 307, 308, 0,
	309, 310, 910, 0, 0, 2037, 311, 313, 320, 0,
	976, 314, 922, 913, 924, 926, 927, 928, 923, 0,
	915, 0, 321, 978, 968, 979, 322, 323, 324, 980,
	948, 949, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 1000, 981, 335, 336, 982, 0,
	337, 338, 959, 958, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 902, 350, 983,
	353, 354, 357, 358, 356, 984, 355, 858, 221, 985,
	359, 880, 969, 360, 937, 362, 363, 0, 911, 365,
	912, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 986, 373, 987, 994, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 995, 384, 522,
	385, 386, 2036, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 930, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 988, 411, 412, 413, 414, 868, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 0, 432,
	433, 903, 904, 906, 907, 428, 434, 435, 436, 962,
	437, 417, 418, 438, 439, 989, 440, 441, 925, 905,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 973,
	449, 450, 451, 996, 0, 455, 456, 454, 0, 457,
	458, 459, 460, 461, 286, 901, 0, 463, 944, 945,
	946, 947, 0, 470, 0, 464, 465, 997, 466, 998,
	878, 467, 468, 469, 0, 471, 472, 0, 862, 473,
	474, 475, 477, 478, 476, 480, 963, 481, 0, 909,
	482, 483, 484, 533, 941, 991, 0, 486, 485, 536,
	0, 0, 0, 0, 487, 488, 537, 489, 490, 491,
	859, 0, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 855, 856, 914, 872, 873, 874, 870,
	871, 883, 884, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 965, 888, 0, 0, 0, 228,
	230, 229, 231, 232, 493, 929, 908, 940, 236, 898,
	939, 938, 0, 237, 238, 900, 899, 241, 242, 243,
	890, 964, 244, 1001, 1002, 499, 0, 245, 246, 971,
	0, 952, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 974, 262, 263, 955, 953, 954, 961, 957,
	956, 960, 264, 265, 266, 267, 943, 269, 936, 935,
	861, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 934, 277, 0, 278, 0, 279, 280, 0, 281,
	867, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	992, 993, 879, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 933, 931, 932, 0, 297, 0, 298, 0,
	0, 975, 299, 300, 0, 301, 999, 0, 889, 302,
	0, 303, 304, 305, 306, 966, 967, 970, 361, 977,
	307, 308, 0, 309, 310, 910, 0, 0, 220, 311,
	313, 320, 0, 976, 314, 922, 913, 924, 926, 927,
	928, 923, 0, 915, 0, 321, 978, 968, 979, 322,
	323, 324, 980, 948, 949, 0, 0, 327, 328, 329,
	330, 331, 0, 333, 332, 0, 334, 1000, 981, 335,
	336, 982, 0, 337, 338, 959, 958, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	902, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	858, 221, 985, 359, 880, 969, 360, 937, 362, 363,
	0, 911, 365, 912, 863, 0, 368, 369, 370, 0,
	0, 371, 372, 519, 986, 373, 987, 994, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	995, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 930, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 988, 411, 412, 413, 414,
	868, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 0, 432, 433, 903, 904, 906, 907, 428, 434,
	435, 436, 962, 437, 417, 418, 438, 439, 989, 440,
	441, 925, 905, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 973, 449, 450, 451, 996, 0, 455, 456,
	454, 0, 457, 458, 459, 460, 461, 286, 901, 0,
	463, 944, 945, 946, 947, 0, 470, 0, 464, 465,
	997, 466, 998, 878, 467, 468, 469, 0, 471, 472,
	0, 862, 473, 474, 475, 477, 478, 476, 480, 963,
	481, 0, 909, 482, 483, 484, 533, 941, 991, 0,
	486, 485, 536, 0, 0, 0, 0, 487, 488, 537,
	489, 490, 491, 859, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 855, 856, 914, 872,
	873, 874, 870, 871, 883, 884, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 965, 888, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 929, 908,
	940, 236, 898, 939, 938, 0, 237, 238, 900, 899,
	241, 242, 243, 890, 964, 244, 1001, 1002, 499, 0,
	245, 246, 971, 0, 952, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 974, 262, 263, 955, 953,
	954, 961, 957, 956, 960, 264, 265, 266, 267, 943,
	269, 936, 935, 861, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 934, 277, 0, 278, 0, 279,
	280, 0, 281, 867, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 992, 993, 879, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 933, 931, 932, 0, 297,
	0, 298, 0, 0, 975, 299, 300, 0, 301, 999,
	0, 889, 302, 0, 303, 304, 305, 306, 966, 967,
	970, 361, 977, 307, 308, 0, 309, 310, 910, 0,
	0, 220, 311, 313, 320, 0, 976, 314, 922, 913,
	924, 926, 927, 928, 923, 0, 915, 0, 321, 978,
	968, 979, 322, 323, 324, 980, 948, 949, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	1000, 981, 335, 336, 982, 0, 337, 338, 959, 958,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 902, 350, 983, 353, 354, 357, 358,
	356, 984, 355, 858, 221, 985, 359, 880, 969, 360,
	937, 362, 363, 0, 911, 365, 912, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 986, 373, 987,
	994, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 995, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 930, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 988, 411,
	412, 413, 414, 868, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 903, 904, 906,
	907, 428, 434, 435, 436, 962, 437, 417, 418, 438,
	439, 989, 440, 441, 925, 905, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 973, 449, 450, 451, 996,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 901, 0, 463, 944, 945, 946, 947, 0, 470,
	0, 464, 465, 997, 466, 998, 878, 467, 468, 469,
	0, 471, 472, 0, 862, 473, 474, 475, 477, 478,
	476, 480, 963, 481, 0, 909, 482, 483, 484, 533,
	941, 991, 0, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 859, 0, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 855,
	856, 1620, 0, 0, 0, 0, 0, 0, 884, 0,
	0, 0, 882, 914, 872, 873, 874, 870, 871, 883,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 965, 888, 0, 0, 0, 228, 230, 229,
	231, 232, 493, 929, 908, 940, 236, 898, 939, 938,
	0, 237, 238, 900, 899, 241, 242, 243, 890, 964,
	244, 1001, 1002, 499, 0, 245, 246, 971, 0, 952,
	0, 247, 248, 249, 250, 251, 252, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	974, 262, 263, 955, 953, 954, 961, 957, 956, 960,
	264, 265, 266, 267, 943, 269, 936, 935, 861, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 934,
	277, 0, 278, 0, 279, 280, 0, 281, 867, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 992, 993,
	879, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	933, 931, 932, 0, 297, 0, 298, 0, 2222, 975,
	299, 300, 0, 301, 999, 0, 889, 302, 0, 303,
	304, 305, 306, 966, 967, 970, 361, 977, 307, 308,
	0, 309, 310, 910, 0, 0, 220, 311, 313, 320,
	0, 976, 314, 922, 913, 924, 926, 927, 928, 923,
	0, 915, 0, 321, 978, 968, 979, 322, 323, 324,
	980, 948, 949, 0, 0, 327, 328, 329, 330, 331,
	0, 333, 332, 0, 334, 1000, 981, 335, 336, 982,
	0, 337, 338, 959, 958, 339, 340, 341, 342, 0,
	343, 344, 346, 348, 345, 347, 349, 351, 902, 350,
	983, 353, 354, 357, 358, 356, 984, 355, 858, 221,
	985, 359, 880, 969, 360, 937, 362, 363, 0, 911,
	365, 912, 0, 0, 368, 369, 370, 0, 0, 371,
	372, 519, 986, 373, 987, 994, 374, 367, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 383, 995, 384,
	522, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 930, 395, 396, 0, 397, 398, 399,
	400, 401, 0, 403, 404, 405, 402, 406, 407, 408,
	409, 0, 410, 988, 411, 412, 413, 414, 868, 415,
	0, 416, 420, 421, 422, 423, 424, 425, 426, 0,
	432, 433, 903, 904, 906, 907, 428, 434, 435, 436,
	962, 437, 417, 418, 438, 439, 989, 440, 441, 925,
	905, 443, 0, 444, 445, 446, 447, 419, 448, 452,
	973, 449, 450, 451, 996, 0, 455, 456, 454, 0,
	457, 458, 459, 460, 461, 286, 901, 0, 463, 944,
	945, 946, 947, 0, 470, 0, 464, 465, 997, 466,
	998, 878, 467, 468, 469, 0, 471, 472, 0, 862,
	473, 474, 475, 477, 478, 476, 480, 963, 481, 0,
	909, 482, 483, 484, 533, 941, 991, 0, 486, 485,
	536, 0, 0, 0, 0, 487, 488, 537, 489, 490,
	491, 859, 0, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 855, 856, 914, 872, 873, 874,
	870, 871, 883, 884, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 965, 888, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 929, 908, 940, 236,
	898, 939, 938, 0, 237, 238, 900, 899, 241, 242,
	243, 890, 964, 244, 1001, 1002, 499, 0, 245, 246,
	971, 0, 952, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 955, 953, 954, 961,
	957, 956, 960, 264, 265, 266, 267, 943, 269, 936,
	935, 861, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 934, 277, 0, 278, 0, 279, 280, 0,
	281, 867, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 992, 993, 879, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 933, 931, 932, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 999, 0, 889,
	302, 0, 303, 304, 305, 306, 966, 967, 970, 361,
	977, 307, 308, 0, 309, 310, 910, 0, 0, 220,
	311, 313, 320, 0, 976, 314, 922, 913, 924, 926,
	927, 928, 923, 0, 915, 0, 321, 978, 968, 979,
	322, 323, 324, 980, 948, 949, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 1000, 981,
	335, 336, 982, 0, 337, 338, 959, 958, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 902, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 858, 221, 985, 359, 880, 969, 360, 937, 362,
	363, 0, 911, 365, 912, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 994, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 995, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 930, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 868, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 903, 904, 906, 907, 428,
	434, 435, 436, 962, 437, 417, 418, 438, 439, 989,
	440, 441, 925, 905, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 973, 449, 450, 451, 996, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 901,
	0, 463, 944, 945, 946, 947, 0, 470, 0, 464,
	465, 997, 466, 998, 878, 467, 468, 469, 0, 471,
	472, 0, 862, 473, 474, 475, 477, 478, 476, 480,
	963, 481, 0, 909, 482, 483, 484, 533, 941, 991,
	0, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 859, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 855, 856, 0,
	0, 0, 0, 0, 0, 0, 884, 1554, 0, 2227,
	882, 914, 872, 873, 874, 870, 871, 883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	965, 888, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 929, 908, 940, 236, 898, 939, 938, 0, 237,
	238, 900, 899, 241, 242, 243, 890, 964, 244, 1001,
	1002, 499, 0, 245, 246, 971, 0, 952, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 974, 262,
	263, 955, 953, 954, 961, 957, 956, 960, 264, 265,
	266, 267, 943, 269, 936, 935, 861, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 934, 277, 0,
	278, 0, 279, 280, 0, 281, 867, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 992, 993, 879, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 933, 931,
	932, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 999, 0, 889, 302, 0, 303, 304, 305,
	306, 966, 967, 970, 361, 977, 307, 308, 0, 309,
	310, 910, 0, 0, 220, 311, 313, 320, 0, 976,
	314, 922, 913, 924, 926, 927, 928, 923, 0, 915,
	0, 321, 978, 968, 979, 322, 323, 324, 980, 948,
	949, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 1000, 981, 335, 336, 982, 0, 337,
	338, 959, 958, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 902, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 858, 221, 985, 359,
	880, 969, 360, 937, 362, 363, 0, 911, 365, 912,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 994, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 995, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 930, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 868, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 0, 432, 433,
	903, 904, 906, 907, 428, 434, 435, 436, 962, 437,
	417, 418, 438, 439, 989, 440, 441, 925, 905, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 973, 449,
	450, 451, 996, 0, 455, 456, 454, 0, 457, 458,
	459, 460, 461, 286, 901, 0, 463, 944, 945, 946,
	947, 0, 470, 0, 464, 465, 997, 466, 998, 878,
	467, 468, 469, 0, 471, 472, 0, 862, 473, 474,
	475, 477, 478, 476, 480, 963, 481, 0, 909, 482,
	483, 484, 533, 941, 991, 0, 486, 485, 536, 0,
	0, 0, 0, 487, 488, 537, 489, 490, 491, 859,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 855, 856, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 2225, 882, 914, 872, 873, 874,
	870, 871, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 965, 888, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 929, 908, 940, 236,
	898, 939, 938, 0, 237, 238, 900, 899, 241, 242,
	243, 890, 964, 244, 1001, 1002, 499, 0, 245, 246,
	971, 0, 952, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 955, 953, 954, 961,
	957, 956, 960, 264, 265, 266, 267, 943, 269, 936,
	935, 861, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 934, 277, 0, 278, 0, 279, 280, 0,
	281, 867, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 992, 993, 879, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 933, 931, 932, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 999, 0, 889,
	302, 0, 303, 304, 305, 306, 966, 967, 970, 361,
	977, 307, 308, 0, 309, 310, 910, 0, 0, 220,
	311, 313, 320, 0, 976, 314, 922, 913, 924, 926,
	927, 928, 923, 0, 915, 0, 321, 978, 968, 979,
	322, 323, 324, 980, 948, 949, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 1000, 981,
	335, 336, 982, 0, 337, 338, 959, 958, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 902, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 858, 221, 985, 359, 880, 969, 360, 937, 362,
	363, 0, 911, 365, 912, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 994, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 995, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 930, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 868, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 903, 904, 906, 907, 428,
	434, 435, 436, 962, 437, 417, 418, 438, 439, 989,
	440, 441, 925, 905, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 973, 449, 450, 451, 996, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 901,
	0, 463, 944, 945, 946, 947, 0, 470, 0, 464,
	465, 997, 466, 998, 878, 467, 468, 469, 0, 471,
	472, 0, 862, 473, 474, 475, 477, 478, 476, 480,
	963, 481, 0, 909, 482, 483, 484, 533, 941, 991,
	0, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 859, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 855, 856, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 0, 2213,
	882, 914, 872, 873, 874, 870, 871, 883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	965, 888, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 929, 908, 940, 236, 898, 939, 938, 0, 237,
	238, 900, 899, 241, 242, 243, 890, 964, 244, 1001,
	1002, 499, 0, 245, 246, 971, 0, 952, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 974, 262,
	263, 955, 953, 954, 961, 957, 956, 960, 264, 265,
	266, 267, 943, 269, 936, 935, 861, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 934, 277, 0,
	278, 0, 279, 280, 0, 281, 867, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 992, 993, 879, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 933, 931,
	932, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 999, 0, 889, 302, 0, 303, 304, 305,
	306, 966, 967, 970, 361, 977, 307, 308, 0, 309,
	310, 910, 0, 0, 220, 311, 313, 320, 0, 976,
	314, 922, 913, 924, 926, 927, 928, 923, 0, 915,
	0, 321, 978, 968, 979, 322, 323, 324, 980, 948,
	949, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 1000, 981, 335, 336, 982, 0, 337,
	338, 959, 958, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 902, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 858, 221, 985, 359,
	880, 969, 360, 937, 362, 363, 0, 911, 365, 912,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 994, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 995, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 930, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 868, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 0, 432, 433,
	903, 904, 906, 907, 428, 434, 435, 436, 962, 437,
	417, 418, 438, 439, 989, 440, 441, 925, 905, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 973, 449,
	450, 451, 996, 0, 455, 456, 454, 0, 457, 458,
	459, 460, 461, 286, 901, 0, 463, 944, 945, 946,
	947, 0, 470, 0, 464, 465, 997, 466, 998, 878,
	467, 468, 469, 0, 471, 472, 0, 862, 473, 474,
	475, 477, 478, 476, 480, 963, 481, 0, 909, 482,
	483, 484, 533, 941, 991, 0, 486, 485, 536, 0,
	0, 0, 0, 487, 488, 537, 489, 490, 491, 859,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 855, 856, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 2202, 882, 914, 872, 873, 874,
	870, 871, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 965, 888, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 929, 908, 940, 236,
	898, 939, 938, 0, 237, 238, 900, 899, 241, 242,
	243, 890, 964, 244, 1001, 1002, 499, 0, 245, 246,
	971, 0, 952, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 955, 953, 954, 961,
	957, 956, 960, 264, 265, 266, 267, 943, 269, 936,
	935, 861, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 934, 277, 0, 278, 0, 279, 280, 0,
	281, 867, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 992, 993, 879, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 933, 931, 932, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 999, 0, 889,
	302, 0, 303, 304, 305, 306, 966, 967, 970, 361,
	977, 307, 308, 0, 309, 310, 910, 0, 0, 220,
	311, 313, 320, 0, 976, 314, 922, 913, 924, 926,
	927, 928, 923, 0, 915, 0, 321, 978, 968, 979,
	322, 323, 324, 980, 948, 949, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 1000, 981,
	335, 336, 982, 0, 337, 338, 959, 958, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 902, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 858, 221, 985, 359, 880, 969, 360, 937, 362,
	363, 0, 911, 365, 912, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 994, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 995, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 930, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 868, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 903, 904, 906, 907, 428,
	434, 435, 436, 962, 437, 417, 418, 438, 439, 989,
	440, 441, 925, 905, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 973, 449, 450, 451, 996, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 901,
	0, 463, 944, 945, 946, 947, 0, 470, 0, 464,
	465, 997, 466, 998, 878, 467, 468, 469, 0, 471,
	472, 0, 862, 473, 474, 475, 477, 478, 476, 480,
	963, 481, 0, 909, 482, 483, 484, 533, 941, 991,
	0, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 859, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 855, 856, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 0, 2200,
	882, 2191, 2198, 873, 874, 870, 871, 883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	965, 888, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 929, 908, 940, 236, 898, 939, 938, 0, 237,
	238, 900, 899, 241, 242, 243, 890, 964, 244, 1001,
	1002, 499, 0, 245, 246, 971, 0, 952, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 974, 262,
	263, 955, 953, 954, 961, 957, 956, 960, 264, 265,
	266, 267, 943, 2194, 936, 935, 861, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 934, 277, 0,
	278, 0, 279, 280, 0, 281, 867, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 992, 993, 879, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 933, 931,
	932, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 999, 0, 889, 302, 0, 303, 304, 305,
	2195, 966, 967, 970, 361, 977, 307, 308, 0, 309,
	310, 910, 0, 0, 220, 311, 313, 320, 0, 976,
	314, 922, 913, 924, 926, 927, 928, 923, 0, 915,
	0, 321, 978, 968, 979, 322, 323, 324, 980, 948,
	949, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 1000, 981, 335, 336, 982, 0, 337,
	338, 959, 958, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 2196, 2193, 351, 902, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 858, 221, 985, 359,
	880, 969, 360, 937, 362, 363, 0, 911, 365, 912,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 994, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 995, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 930, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 868, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 2197, 0, 432, 433,
	903, 904, 906, 907, 428, 434, 435, 436, 962, 437,
	417, 418, 438, 439, 989, 440, 441, 925, 905, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 973, 449,
	450, 451, 996, 0, 455, 456, 454, 0, 457, 458,
	459, 460, 461, 286, 901, 0, 463, 944, 945, 946,
	947, 0, 470, 0, 464, 465, 997, 466, 998, 878,
	467, 468, 469, 0, 471, 472, 0, 862, 473, 474,
	475, 477, 478, 476, 480, 963, 481, 0, 909, 482,
	483, 484, 533, 941, 991, 0, 486, 485, 536, 0,
	0, 0, 0, 487, 488, 537, 489, 2192, 491, 859,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 855, 856, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 2188, 882, 2191, 2198, 873, 874,
	870, 871, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 965, 888, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 929, 908, 940, 236,
	898, 939, 938, 0, 237, 238, 900, 899, 241, 242,
	243, 890, 964, 244, 1001, 1002, 499, 0, 245, 246,
	971, 0, 952, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 955, 953, 954, 961,
	957, 956, 960, 264, 265, 266, 267, 943, 2194, 936,
	935, 861, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 934, 277, 0, 278, 0, 279, 280, 0,
	281, 867, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 992, 993, 879, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 933, 931, 932, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 999, 0, 889,
	302, 0, 303, 304, 305, 2195, 966, 967, 970, 361,
	977, 307, 308, 0, 309, 310, 910, 0, 0, 220,
	311, 313, 320, 0, 976, 314, 922, 913, 924, 926,
	927, 928, 923, 0, 915, 0, 321, 978, 968, 979,
	322, 323, 324, 980, 948, 949, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 1000, 981,
	335, 336, 982, 0, 337, 338, 959, 958, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 2196, 2193,
	351, 902, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 858, 221, 985, 359, 880, 969, 360, 937, 362,
	363, 0, 911, 365, 912, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 994, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 995, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 930, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 868, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 2197, 0, 432, 433, 903, 904, 906, 907, 428,
	434, 435, 436, 962, 437, 417, 418, 438, 439, 989,
	440, 441, 925, 905, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 973, 449, 450, 451, 996, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 901,
	0, 463, 944, 945, 946, 947, 0, 470, 0, 464,
	465, 997, 466, 998, 878, 467, 468, 469, 0, 471,
	472, 0, 862, 473, 474, 475, 477, 478, 476, 480,
	963, 481, 0, 909, 482, 483, 484, 533, 941, 991,
	0, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 2192, 491, 859, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 855, 856, 914,
	872, 873, 874, 870, 871, 883, 884, 0, 0, 0,
	882, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 965, 888,
	0, 0, 0, 228, 230, 229, 231, 232, 493, 929,
	908, 940, 236, 898, 939, 938, 0, 237, 238, 900,
	899, 241, 242, 243, 890, 964, 244, 1001, 1002, 499,
	0, 245, 246, 971, 0, 952, 0, 247, 248, 249,
	250, 251, 252, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 974, 262, 263, 955,
	953, 954, 961, 957, 956, 960, 264, 265, 266, 267,
	943, 269, 936, 935, 861, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 934, 277, 0, 278, 0,
	279, 280, 0, 281, 867, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 992, 993, 879, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 933, 931, 932, 0,
	297, 0, 298, 0, 0, 975, 299, 300, 0, 301,
	999, 0, 889, 302, 0, 303, 304, 305, 306, 966,
	967, 970, 361, 977, 307, 308, 0, 309, 310, 910,
	0, 0, 220, 311, 313, 320, 0, 976, 314, 922,
	913, 924, 926, 927, 928, 923, 0, 915, 0, 321,
	978, 968, 979, 322, 323, 324, 980, 948, 949, 0,
	0, 327, 328, 329, 330, 331, 0, 333, 332, 0,
	334, 1000, 981, 335, 336, 982, 0, 337, 338, 959,
	958, 339, 340, 341, 342, 0, 343, 344, 346, 348,
	345, 347, 349, 351, 902, 350, 983, 353, 354, 357,
	358, 356, 984, 355, 858, 221, 985, 359, 880, 969,
	360, 937, 362, 363, 0, 911, 365, 912, 0, 0,
	368, 369, 370, 0, 0, 371, 372, 519, 986, 373,
	987, 994, 374, 367, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 383, 995, 384, 522, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 930,
	395, 396, 0, 397, 398, 399, 400, 401, 0, 403,
	404, 405, 402, 406, 407, 408, 409, 0, 410, 988,
	411, 412, 413, 414, 868, 415, 0, 416, 420, 421,
	422, 423, 424, 425, 426, 0, 432, 433, 903, 904,
	906, 907, 428, 434, 435, 436, 962, 437, 417, 418,
	438, 439, 989, 440, 441, 925, 905, 443, 0, 444,
	445, 446, 447, 419, 448, 452, 973, 449, 450, 451,
	996, 0, 455, 456, 454, 0, 457, 458, 459, 460,
	461, 286, 901, 0, 463, 944, 945, 946, 947, 0,
	470, 0, 464, 465, 997, 466, 998, 878, 467, 468,
	469, 0, 471, 472, 0, 862, 473, 474, 475, 477,
	478, 476, 480, 963, 481, 0, 909, 482, 483, 484,
	533, 941, 991, 0, 486, 485, 536, 0, 0, 0,
	0, 487, 488, 537, 489, 490, 491, 859, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	855, 856, 0, 0, 0, 0, 0, 1562, 0, 884,
	0, 0, 0, 882, 914, 872, 873, 874, 870, 871,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 2016, 227, 0, 0,
	0, 0, 0, 965, 888, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 929, 908, 940, 236, 898, 939,
	938, 0, 237, 238, 900, 899, 241, 242, 243, 890,
	964, 244, 1001, 1002, 499, 0, 245, 246, 971, 0,
	952, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 974, 262, 263, 955, 953, 954, 961, 957, 956,
	960, 264, 265, 266, 267, 943, 269, 936, 935, 861,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	934, 277, 0, 278, 0, 279, 280, 0, 281, 867,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 992,
	993, 879, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 933, 931, 932, 0, 297, 0, 298, 0, 0,
	975, 299, 300, 0, 301, 999, 0, 889, 302, 0,
	303, 304, 305, 306, 966, 967, 970, 361, 977, 307,
	308, 0, 309, 310, 910, 0, 0, 220, 311, 313,
	320, 0, 976, 314, 922, 913, 924, 926, 927, 928,
	923, 0, 915, 0, 321, 978, 968, 979, 322, 323,
	324, 980, 948, 949, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 1000, 981, 335, 336,
	982, 0, 337, 338, 959, 958, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 902,
	350, 983, 353, 354, 357, 358, 356, 984, 355, 858,
	221, 985, 359, 880, 969, 360, 937, 362, 363, 0,
	911, 365, 912, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 986, 373, 987, 994, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 995,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 930, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 988, 411, 412, 413, 414, 868,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 903, 904, 906, 907, 428, 434, 435,
	436, 962, 437, 417, 418, 438, 439, 989, 440, 441,
	925, 905, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 973, 449, 450, 451, 996, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 901, 0, 463,
	944, 945, 946, 947, 0, 470, 0, 464, 465, 997,
	466, 998, 878, 467, 468, 469, 0, 471, 472, 0,
	862, 473, 474, 475, 477, 478, 476, 480, 963, 481,
	0, 909, 482, 483, 484, 533, 941, 991, 0, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 859, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 855, 856, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 0, 1237, 882, 914,
	872, 873, 874, 870, 871, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 965, 888,
	0, 0, 0, 228, 230, 229, 231, 232, 493, 929,
	908, 940, 236, 898, 939, 938, 0, 237, 238, 900,
	899, 241, 242, 243, 890, 964, 244, 1001, 1002, 499,
	0, 245, 246, 971, 0, 952, 0, 247, 248, 249,
	250, 251, 252, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 974, 262, 263, 955,
	953, 954, 961, 957, 956, 960, 264, 265, 266, 267,
	943, 269, 936, 935, 861, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 934, 277, 0, 278, 0,
	279, 280, 0, 281, 867, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 992, 993, 879, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 933, 931, 932, 0,
	297, 0, 298, 0, 0, 975, 299, 300, 0, 301,
	999, 0, 889, 302, 0, 303, 304, 305, 306, 1236,
	967, 970, 361, 977, 307, 308, 0, 309, 310, 910,
	0, 0, 220, 311, 313, 320, 0, 976, 314, 922,
	913, 924, 926, 927, 928, 923, 0, 915, 0, 321,
	978, 968, 979, 322, 323, 324, 980, 948, 949, 0,
	0, 327, 328, 329, 330, 331, 0, 333, 332, 0,
	334, 1000, 981, 335, 336, 982, 0, 337, 338, 959,
	958, 339, 340, 341, 342, 0, 343, 344, 346, 348,
	345, 347, 349, 351, 902, 350, 983, 353, 354, 357,
	358, 356, 984, 355, 858, 221, 985, 359, 880, 969,
	360, 937, 362, 363, 0, 911, 365, 912, 0, 0,
	368, 369, 370, 0, 0, 371, 372, 519, 986, 373,
	987, 994, 374, 367, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 383, 995, 384, 522, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 930,
	395, 396, 0, 397, 398, 399, 400, 401, 0, 403,
	404, 405, 402, 406, 407, 408, 409, 0, 410, 988,
	411, 412, 413, 414, 868, 415, 0, 416, 420, 421,
	422, 423, 424, 425, 426, 0, 432, 433, 903, 904,
	906, 907, 428, 434, 435, 436, 962, 437, 417, 418,
	438, 439, 989, 440, 441, 925, 905, 443, 0, 444,
	445, 446, 447, 419, 448, 452, 973, 449, 450, 451,
	996, 0, 455, 456, 454, 0, 457, 458, 459, 460,
	461, 286, 901, 0, 463, 944, 945, 946, 947, 0,
	470, 0, 464, 465, 997, 466, 998, 878, 467, 468,
	469, 0, 471, 472, 0, 862, 473, 474, 475, 477,
	478, 476, 480, 963, 481, 0, 909, 482, 483, 484,
	533, 941, 991, 0, 486, 485, 536, 0, 0, 0,
	0, 487, 488, 537, 489, 490, 491, 859, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	855, 856, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 0, 1231, 882, 914, 872, 873, 874, 870, 871,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 965, 888, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 929, 908, 940, 236, 898, 939,
	938, 0, 237, 238, 900, 899, 241, 242, 243, 890,
	964, 244, 1001, 1002, 499, 0, 245, 246, 971, 0,
	952, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 974, 262, 263, 955, 953, 954, 961, 957, 956,
	960, 264, 265, 266, 267, 943, 269, 936, 935, 861,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	934, 277, 0, 278, 0, 279, 280, 0, 281, 867,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 992,
	993, 879, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 933, 931, 932, 0, 297, 0, 298, 0, 0,
	975, 299, 300, 0, 301, 999, 0, 889, 302, 0,
	303, 304, 305, 306, 1230, 967, 970, 361, 977, 307,
	308, 0, 309, 310, 910, 0, 0, 220, 311, 313,
	320, 0, 976, 314, 922, 913, 924, 926, 927, 928,
	923, 0, 915, 0, 321, 978, 968, 979, 322, 323,
	324, 980, 948, 949, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 1000, 981, 335, 336,
	982, 0, 337, 338, 959, 958, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 902,
	350, 983, 353, 354, 357, 358, 356, 984, 355, 858,
	221, 985, 359, 880, 969, 360, 937, 362, 363, 0,
	911, 365, 912, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 986, 373, 987, 994, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 995,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 930, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 988, 411, 412, 413, 414, 868,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 903, 904, 906, 907, 428, 434, 435,
	436, 962, 437, 417, 418, 438, 439, 989, 440, 441,
	925, 905, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 973, 449, 450, 451, 996, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 901, 0, 463,
	944, 945, 946, 947, 0, 470, 0, 464, 465, 997,
	466, 998, 878, 467, 468, 469, 0, 471, 472, 0,
	862, 473, 474, 475, 477, 478, 476, 480, 963, 481,
	0, 909, 482, 483, 484, 533, 941, 991, 0, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 859, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 855, 856, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 0, 1226, 882, 914,
	872, 873, 874, 870, 871, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 965, 888,
	0, 0, 0, 228, 230, 229, 231, 232, 493, 929,
	908, 940, 236, 898, 939, 938, 0, 237, 238, 900,
	899, 241, 242, 243, 890, 964, 244, 1001, 1002, 499,
	0, 245, 246, 971, 0, 952, 0, 247, 248, 249,
	250, 251, 252, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 974, 262, 263, 955,
	953, 954, 961, 957, 956, 960, 264, 265, 266, 267,
	943, 269, 936, 935, 861, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 934, 277, 0, 278, 0,
	279, 280, 0, 281, 867, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 992, 993, 879, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 933, 931, 932, 0,
	297, 0, 298, 0, 0, 975, 299, 300, 0, 301,
	999, 0, 889, 302, 0, 303, 304, 305, 306, 966,
	967, 970, 361, 977, 307, 308, 0, 309, 310, 910,
	0, 0, 220, 311, 313, 320, 0, 976, 314, 922,
	913, 924, 926, 927, 928, 923, 0, 915, 0, 321,
	978, 968, 979, 322, 323, 324, 980, 948, 949, 0,
	0, 327, 328, 329, 330, 331, 0, 333, 332, 0,
	334, 1000, 981, 335, 336, 982, 0, 337, 338, 959,
	958, 339, 340, 341, 342, 0, 343, 344, 346, 348,
	345, 347, 349, 351, 902, 350, 983, 353, 354, 357,
	358, 356, 984, 355, 858, 221, 985, 359, 880, 969,
	360, 937, 362, 363, 0, 911, 365, 912, 0, 0,
	368, 369, 370, 0, 0, 371, 372, 519, 986, 373,
	987, 994, 374, 367, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 383, 995, 384, 522, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 930,
	395, 396, 0, 397, 398, 399, 400, 401, 0, 403,
	404, 405, 402, 406, 407, 408, 409, 0, 410, 988,
	411, 412, 413, 414, 868, 415, 0, 416, 420, 421,
	422, 423, 424, 425, 426, 0, 432, 433, 903, 904,
	906, 907, 428, 434, 435, 436, 962, 437, 417, 418,
	438, 439, 989, 440, 441, 925, 905, 443, 0, 444,
	445, 446, 447, 419, 448, 452, 973, 449, 450, 451,
	996, 0, 455, 456, 454, 0, 457, 458, 459, 460,
	461, 286, 901, 0, 463, 944, 945, 946, 947, 0,
	470, 0, 464, 465, 997, 466, 998, 878, 467, 468,
	469, 0, 471, 472, 0, 862, 473, 474, 475, 477,
	478, 476, 480, 963, 481, 0, 909, 482, 483, 484,
	533, 941, 991, 0, 486, 485, 536, 0, 0, 0,
	0, 487, 488, 537, 489, 490, 491, 859, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	855, 856, 914, 872, 873, 874, 870, 871, 883, 884,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 965, 888, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 929, 908, 940, 236, 898, 939, 938, 0,
	237, 238, 900, 899, 241, 242, 243, 890, 964, 244,
	1001, 1002, 499, 0, 245, 246, 971, 0, 952, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 974,
	262, 263, 955, 953, 954, 961, 957, 956, 960, 264,
	265, 266, 267, 943, 269, 936, 935, 861, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 934, 277,
	0, 278, 0, 279, 280, 0, 281, 867, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 992, 993, 879,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 933,
	931, 932, 0, 297, 0, 298, 0, 0, 975, 299,
	300, 0, 301, 999, 0, 889, 302, 0, 303, 304,
	305, 306, 966, 967, 970, 361, 977, 307, 308, 0,
	309, 310, 910, 0, 0, 220, 311, 313, 320, 0,
	976, 314, 922, 913, 924, 926, 927, 928, 923, 0,
	915, 0, 321, 978, 968, 979, 322, 323, 324, 980,
	948, 949, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 1000, 981, 335, 336, 982, 0,
	337, 338, 959, 958, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 902, 350, 983,
	353, 354, 357, 358, 356, 984, 355, 858, 221, 985,
	359, 880, 969, 360, 937, 362, 363, 0, 911, 365,
	912, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 986, 373, 987, 994, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 995, 384, 522,
	385, 386, 0, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 930, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 988, 411, 412, 413, 414, 868, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 0, 432,
	433, 903, 904, 906, 907, 428, 434, 435, 436, 962,
	437, 417, 418, 438, 439, 989, 440, 441, 925, 905,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 973,
	449, 450, 451, 996, 0, 455, 456, 454, 0, 457,
	458, 459, 460, 461, 286, 901, 0, 463, 944, 945,
	946, 947, 0, 470, 0, 464, 465, 997, 466, 998,
	878, 467, 468, 469, 0, 471, 472, 0, 862, 473,
	474, 475, 477, 478, 476, 480, 963, 481, 0, 909,
	482, 483, 484, 533, 941, 991, 0, 486, 485, 536,
	0, 0, 0, 0, 487, 488, 537, 489, 490, 491,
	859, 0, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 855, 856, 914, 872, 873, 874, 870,
	871, 883, 884, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 965, 888, 0, 0, 0, 228,
	230, 229, 231, 232, 493, 929, 908, 940, 236, 898,
	939, 938, 0, 237, 238, 900, 899, 241, 242, 243,
	890, 964, 244, 1001, 1002, 499, 0, 245, 246, 971,
	0, 952, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 974, 262, 3652, 955, 953, 954, 961, 957,
	956, 960, 264, 265, 266, 267, 943, 269, 936, 935,
	861, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 934, 277, 0, 278, 0, 279, 280, 0, 281,
	867, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	992, 993, 879, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 933, 931, 932, 0, 297, 0, 298, 0,
	0, 975, 299, 300, 0, 301, 999, 0, 889, 302,
	0, 303, 304, 305, 306, 966, 967, 970, 361, 977,
	307, 308, 0, 309, 310, 910, 0, 0, 220, 311,
	313, 320, 0, 976, 314, 922, 913, 924, 926, 927,
	928, 923, 0, 915, 0, 321, 978, 968, 979, 322,
	323, 324, 980, 948, 949, 0, 0, 327, 328, 329,
	330, 331, 0, 333, 332, 0, 334, 1000, 981, 335,
	336, 982, 0, 337, 338, 959, 958, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	902, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	858, 221, 985, 359, 880, 969, 360, 937, 362, 363,
	0, 911, 365, 912, 0, 0, 368, 369, 370, 0,
	0, 371, 372, 519, 986, 373, 987, 994, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	995, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 930, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 988, 411, 412, 413, 414,
	868, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 0, 432, 433, 903, 904, 906, 907, 428, 434,
	435, 436, 962, 437, 417, 418, 438, 439, 989, 440,
	441, 925, 905, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 973, 449, 450, 451, 996, 0, 455, 456,
	454, 0, 457, 458, 459, 460, 461, 286, 901, 0,
	463, 944, 945, 946, 947, 0, 470, 0, 464, 465,
	997, 466, 998, 878, 467, 468, 469, 0, 3651, 472,
	0, 862, 473, 474, 475, 477, 478, 476, 480, 963,
	481, 0, 909, 482, 483, 484, 533, 941, 991, 0,
	486, 485, 536, 0, 0, 0, 0, 487, 488, 537,
	489, 490, 491, 859, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 855, 856, 914, 872,
	873, 874, 870, 871, 883, 884, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 965, 888, 0,
	0, 0, 228, 230, 229, 231, 232, 3650, 929, 908,
	940, 236, 898, 939, 938, 0, 237, 238, 900, 899,
	241, 242, 243, 890, 964, 244, 1001, 1002, 499, 0,
	245, 246, 971, 0, 952, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 974, 262, 3652, 955, 953,
	954, 961, 957, 956, 960, 264, 265, 266, 267, 943,
	269, 936, 935, 861, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 934, 277, 0, 278, 0, 279,
	280, 0, 281, 867, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 992, 993, 879, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 933, 931, 932, 0, 297,
	0, 298, 0, 0, 975, 299, 300, 0, 301, 999,
	0, 889, 302, 0, 303, 304, 305, 306, 966, 967,
	970, 361, 977, 307, 308, 0, 309, 310, 910, 0,
	0, 220, 311, 313, 320, 0, 976, 314, 922, 913,
	924, 926, 927, 928, 923, 0, 915, 0, 321, 978,
	968, 979, 322, 323, 324, 980, 948, 949, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	1000, 981, 335, 336, 982, 0, 337, 338, 959, 958,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 902, 350, 983, 353, 354, 357, 358,
	356, 984, 355, 858, 221, 985, 359, 880, 969, 360,
	937, 362, 363, 0, 911, 365, 912, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 986, 373, 987,
	994, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 995, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 930, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 988, 411,
	412, 413, 414, 868, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 903, 904, 906,
	907, 428, 434, 435, 436, 962, 437, 417, 418, 438,
	439, 989, 440, 441, 925, 905, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 973, 449, 450, 451, 996,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 901, 0, 463, 944, 945, 946, 947, 0, 470,
	0, 464, 465, 997, 466, 998, 878, 467, 468, 469,
	0, 3651, 472, 0, 862, 473, 474, 475, 477, 478,
	476, 480, 963, 481, 0, 909, 482, 483, 484, 533,
	941, 991, 0, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 859, 0, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 855,
	856, 914, 872, 873, 874, 2560, 2561, 883, 884, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	965, 888, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 929, 908, 940, 236, 898, 939, 938, 0, 237,
	238, 900, 899, 241, 242, 243, 890, 964, 244, 1001,
	1002, 499, 0, 245, 246, 971, 0, 952, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 974, 262,
	263, 955, 953, 954, 961, 957, 956, 960, 264, 265,
	266, 267, 943, 269, 936, 935, 861, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 934, 277, 0,
	278, 0, 279, 280, 0, 281, 867, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 992, 993, 879, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 933, 931,
	932, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 999, 0, 889, 302, 0, 303, 304, 305,
	306, 966, 967, 970, 361, 977, 307, 308, 0, 309,
	310, 910, 0, 0, 220, 311, 313, 320, 0, 976,
	314, 922, 913, 924, 926, 927, 928, 923, 0, 915,
	0, 321, 978, 968, 979, 322, 323, 324, 980, 948,
	949, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 1000, 981, 335, 336, 982, 0, 337,
	338, 959, 958, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 902, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 858, 221, 985, 359,
	880, 969, 360, 937, 362, 363, 0, 911, 365, 912,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 994, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 995, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 930, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 868, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 0, 432, 433,
	903, 904, 906, 907, 428, 434, 435, 436, 962, 437,
	417, 418, 438, 439, 989, 440, 441, 925, 905, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 973, 449,
	450, 451, 996, 0, 455, 456, 454, 0, 457, 458,
	459, 460, 461, 286, 901, 0, 463, 944, 945, 946,
	947, 0, 470, 0, 464, 465, 997, 466, 998, 878,
	467, 468, 469, 0, 471, 472, 0, 862, 473, 474,
	475, 477, 478, 476, 480, 963, 481, 0, 909, 482,
	483, 484, 533, 941, 991, 0, 486, 485, 536, 0,
	0, 0, 0, 487, 488, 537, 489, 490, 491, 859,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 855, 856, 914, 872, 873, 874, 2558, 2559,
	883, 884, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 965, 888, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 929, 908, 940, 236, 898, 939,
	938, 0, 237, 238, 900, 899, 241, 242, 243, 890,
	964, 244, 1001, 1002, 499, 0, 245, 246, 971, 0,
	952, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 974, 262, 263, 955, 953, 954, 961, 957, 956,
	960, 264, 265, 266, 267, 943, 269, 936, 935, 861,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	934, 277, 0, 278, 0, 279, 280, 0, 281, 867,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 992,
	993, 879, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 933, 931, 932, 0, 297, 0, 298, 0, 0,
	975, 299, 300, 0, 301, 999, 0, 889, 302, 0,
	303, 304, 305, 306, 966, 967, 970, 361, 977, 307,
	308, 0, 309, 310, 910, 0, 0, 220, 311, 313,
	320, 0, 976, 314, 922, 913, 924, 926, 927, 928,
	923, 0, 915, 0, 321, 978, 968, 979, 322, 323,
	324, 980, 948, 949, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 1000, 981, 335, 336,
	982, 0, 337, 338, 959, 958, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 902,
	350, 983, 353, 354, 357, 358, 356, 984, 355, 858,
	221, 985, 359, 880, 969, 360, 937, 362, 363, 0,
	911, 365, 912, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 986, 373, 987, 994, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 995,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 930, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 988, 411, 412, 413, 414, 868,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 903, 904, 906, 907, 428, 434, 435,
	436, 962, 437, 417, 418, 438, 439, 989, 440, 441,
	925, 905, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 973, 449, 450, 451, 996, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 901, 0, 463,
	944, 945, 946, 947, 0, 470, 0, 464, 465, 997,
	466, 998, 878, 467, 468, 469, 0, 471, 472, 0,
	862, 473, 474, 475, 477, 478, 476, 480, 963, 481,
	0, 909, 482, 483, 484, 533, 941, 991, 0, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 859, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 855, 856, 914, 872, 873,
	874, 870, 871, 883, 884, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 965, 888, 0, 0,
	0, 228, 230, 229, 231, 232, 493, 929, 908, 940,
	236, 898, 939, 938, 0, 237, 238, 900, 899, 241,
	242, 243, 890, 964, 244, 1001, 1002, 499, 0, 245,
	246, 971, 0, 952, 0, 247, 248, 249, 250, 251,
	252, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 974, 262, 263, 955, 953, 954,
	961, 957, 956, 960, 264, 265, 266, 267, 943, 269,
	936, 935, 861, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 934, 277, 0, 278, 0, 279, 280,
	0, 281, 867, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 992, 993, 879, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 933, 931, 932, 0, 297, 0,
	298, 0, 0, 975, 299, 300, 0, 301, 999, 0,
	889, 302, 0, 303, 304, 305, 306, 966, 967, 970,
	361, 977, 307, 308, 0, 309, 310, 910, 0, 0,
	220, 311, 313, 320, 0, 976, 314, 922, 913, 924,
	926, 927, 928, 923, 0, 915, 0, 321, 978, 968,
	979, 322, 323, 324, 980, 948, 949, 0, 0, 327,
	328, 329, 330, 331, 0, 333, 332, 0, 334, 1000,
	981, 335, 336, 982, 0, 337, 338, 959, 958, 339,
	340, 341, 342, 0, 343, 344, 346, 348, 345, 347,
	349, 351, 902, 350, 983, 353, 354, 357, 358, 356,
	984, 355, 858, 221, 985, 359, 880, 969, 360, 937,
	362, 363, 0, 911, 365, 912, 0, 0, 368, 369,
	370, 0, 0, 371, 372, 519, 986, 373, 987, 994,
	374, 367, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 383, 995, 384, 522, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 930, 395, 396,
	0, 397, 398, 399, 400, 401, 0, 403, 404, 405,
	402, 406, 407, 408, 409, 0, 410, 988, 411, 412,
	413, 414, 868, 415, 0, 416, 420, 421, 422, 423,
	424, 425, 426, 0, 432, 433, 903, 904, 906, 907,
	428, 434, 435, 436, 962, 437, 417, 418, 438, 439,
	989, 440, 441, 925, 905, 443, 0, 444, 445, 446,
	447, 419, 448, 452, 973, 449, 450, 451, 996, 0,
	455, 456, 454, 0, 457, 458, 459, 460, 461, 286,
	901, 0, 463, 944, 945, 946, 947, 0, 470, 0,
	464, 465, 997, 466, 998, 878, 467, 468, 469, 0,
	471, 472, 0, 862, 473, 474, 475, 477, 478, 476,
	480, 963, 481, 0, 909, 482, 483, 484, 533, 941,
	991, 0, 486, 485, 536, 0, 0, 0, 0, 487,
	488, 537, 489, 490, 491, 859, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 0, 0, 2024, 2025,
	914, 872, 873, 874, 870, 871, 883, 884, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 965,
	888, 0, 0, 0, 228, 230, 229, 231, 232, 493,
	929, 908, 940, 236, 898, 939, 938, 0, 237, 238,
	900, 899, 241, 242, 243, 890, 964, 244, 1001, 1002,
	499, 0, 245, 246, 971, 0, 952, 0, 247, 248,
	249, 250, 251, 252, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 974, 262, 263,
	955, 953, 954, 961, 957, 956, 960, 264, 265, 266,
	267, 943, 269, 936, 935, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 934, 277, 0, 278,
	0, 279, 280, 0, 281, 867, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 992, 993, 879, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 933, 931, 932,
	0, 297, 0, 298, 0, 0, 975, 299, 300, 0,
	301, 999, 0, 889, 302, 0, 303, 304, 305, 306,
	966, 967, 970, 361, 977, 307, 308, 0, 309, 310,
	910, 0, 0, 220, 311, 313, 320, 0, 976, 314,
	922, 913, 924, 926, 927, 928, 923, 0, 915, 0,
	321, 978, 968, 979, 322, 323, 324, 980, 948, 949,
	0, 0, 327, 328, 329, 330, 331, 0, 333, 332,
	0, 334, 1000, 981, 335, 336, 982, 0, 337, 338,
	959, 958, 339, 340, 341, 342, 0, 343, 344, 346,
	348, 345, 347, 349, 351, 902, 350, 983, 353, 354,
	357, 358, 356, 984, 355, 0, 221, 985, 359, 880,
	969, 360, 937, 362, 363, 0, 911, 365, 912, 0,
	0, 368, 369, 370, 0, 0, 371, 372, 519, 986,
	373, 987, 994, 374, 367, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 383, 995, 384, 522, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	930, 395, 396, 0, 397, 398, 399, 400, 401, 0,
	403, 404, 405, 402, 406, 407, 408, 409, 0, 410,
	988, 411, 412, 413, 414, 868, 415, 0, 416, 420,
	421, 422, 423, 424, 425, 426, 0, 432, 433, 903,
	904, 906, 907, 428, 434, 435, 436, 962, 437, 417,
	418, 438, 439, 989, 440, 441, 925, 905, 443, 0,
	444, 445, 446, 447, 419, 448, 452, 973, 449, 450,
	451, 996, 0, 455, 456, 454, 0, 457, 458, 459,
	460, 461, 286, 901, 0, 463, 944, 945, 946, 947,
	0, 470, 0, 464, 465, 997, 466, 998, 878, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 480, 963, 481, 0, 909, 482, 483,
	484, 533, 941, 991, 0, 486, 485, 536, 0, 0,
	0, 0, 487, 488, 537, 489, 490, 491, 0, 0,
	0, 0, 0, 0, 2210, 0, 0, 0, 0, 0,
	0, 2208, 2209, 914, 872, 873, 874, 870, 871, 883,
	884, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 965, 888, 0, 0, 0, 228, 230, 229,
	231, 232, 493, 929, 908, 940, 236, 898, 939, 938,
	0, 237, 238, 900, 899, 241, 242, 243, 890, 964,
	244, 1001, 1002, 499, 0, 245, 246, 971, 0, 952,
	0, 247, 248, 249, 250, 251, 252, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	974, 262, 263, 955, 953, 954, 961, 957, 956, 960,
	264, 265, 266, 267, 943, 269, 936, 935, 0, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 934,
	277, 0, 278, 0, 279, 280, 0, 281, 867, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 992, 993,
	879, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	933, 931, 932, 0, 297, 0, 298, 0, 0, 975,
	299, 300, 0, 301, 999, 0, 889, 302, 0, 303,
	304, 305, 306, 966, 967, 970, 361, 977, 307, 308,
	0, 309, 310, 910, 0, 0, 220, 311, 313, 320,
	0, 976, 314, 922, 913, 924, 926, 927, 928, 923,
	0, 915, 0, 321, 978, 968, 979, 322, 323, 324,
	980, 948, 949, 0, 0, 327, 328, 329, 330, 331,
	0, 333, 332, 0, 334, 1000, 981, 335, 336, 982,
	0, 337, 338, 959, 958, 339, 340, 341, 342, 0,
	343, 344, 346, 348, 345, 347, 349, 351, 902, 350,
	983, 353, 354, 357, 358, 356, 984, 355, 0, 221,
	985, 359, 880, 969, 360, 937, 362, 363, 0, 911,
	365, 912, 0, 0, 368, 369, 370, 0, 0, 371,
	372, 519, 986, 373, 987, 994, 374, 367, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 383, 995, 384,
	522, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 930, 395, 396, 0, 397, 398, 399,
	400, 401, 0, 403, 404, 405, 402, 406, 407, 408,
	409, 0, 410, 988, 411, 412, 413, 414, 2553, 2554,
	0, 416, 420, 421, 422, 423, 424, 425, 426, 0,
	432, 433, 903, 904, 906, 907, 428, 434, 435, 436,
	962, 437, 417, 418, 438, 439, 989, 440, 441, 925,
	905, 443, 0, 444, 445, 446, 447, 419, 448, 452,
	973, 449, 450, 451, 996, 0, 455, 456, 454, 0,
	457, 458, 459, 460, 461, 286, 901, 0, 463, 944,
	945, 946, 947, 0, 470, 0, 464, 465, 997, 466,
	998, 878, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 480, 963, 481, 0,
	909, 482, 483, 484, 533, 941, 991, 0, 486, 485,
	536, 0, 0, 0, 0, 487, 488, 537, 489, 490,
	491, 914, 872, 873, 874, 870, 871, 883, 0, 0,
	0, 0, 0, 0, 1774, 1775, 0, 0, 222, 223,
	224, 225, 226, 884, 227, 0, 0, 882, 0, 0,
	965, 888, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 929, 908, 940, 236, 898, 939, 938, 0, 237,
	238, 900, 899, 241, 242, 243, 0, 964, 244, 1001,
	1002, 499, 0, 245, 246, 971, 0, 952, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 974, 262,
	263, 955, 953, 954, 961, 957, 956, 960, 264, 265,
	266, 267, 943, 269, 936, 935, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 934, 277, 0,
	278, 0, 279, 280, 0, 281, 503, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 992, 993, 879, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 933, 931,
	932, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 999, 0, 889, 302, 0, 303, 304, 305,
	306, 966, 967, 970, 361, 977, 307, 308, 0, 309,
	310, 910, 0, 0, 220, 311, 313, 320, 0, 976,
	314, 922, 913, 924, 926, 927, 928, 923, 0, 915,
	0, 321, 978, 968, 979, 322, 323, 324, 980, 948,
	949, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 1000, 981, 335, 336, 982, 0, 337,
	338, 959, 958, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 902, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 0, 221, 985, 359,
	880, 969, 360, 937, 362, 363, 0, 911, 365, 912,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 994, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 995, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 930, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 868, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 0, 432, 433,
	903, 904, 906, 907, 428, 434, 435, 436, 962, 437,
	417, 418, 438, 439, 989, 440, 441, 925, 905, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 973, 449,
	450, 451, 996, 0, 455, 456, 454, 0, 457, 458,
	459, 460, 461, 286, 901, 0, 463, 944, 945, 946,
	947, 0, 470, 0, 464, 465, 997, 466, 998, 878,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 480, 963, 481, 0, 909, 482,
	483, 484, 533, 941, 991, 0, 486, 485, 536, 0,
	0, 0, 0, 487, 488, 537, 489, 490, 491, 914,
	872, 873, 874, 870, 871, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 884, 227, 0, 0, 882, 0, 0, 965, 888,
	0, 0, 0, 228, 230, 229, 231, 232, 0, 929,
	908, 940, 236, 898, 939, 938, 0, 237, 238, 900,
	899, 241, 242, 243, 890, 964, 244, 1001, 1002, 499,
	0, 245, 246, 971, 0, 952, 0, 247, 248, 249,
	250, 251, 252, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 974, 262, 3652, 955,
	953, 954, 961, 957, 956, 960, 264, 265, 266, 267,
	943, 269, 936, 935, 861, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 934, 277, 0, 278, 0,
	279, 280, 0, 281, 867, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 992, 993, 879, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 933, 931, 932, 0,
	297, 0, 298, 0, 0, 975, 299, 300, 0, 301,
	999, 0, 889, 302, 0, 303, 304, 305, 306, 966,
	967, 970, 361, 0, 307, 308, 0, 309, 310, 910,
	0, 0, 220, 311, 313, 320, 0, 976, 314, 922,
	913, 924, 926, 927, 928, 923, 0, 915, 0, 321,
	0, 968, 0, 322, 323, 324, 980, 948, 949, 0,
	0, 327, 328, 329, 330, 331, 0, 333, 332, 0,
	334, 1000, 981, 335, 336, 0, 0, 337, 338, 959,
	958, 339, 340, 341, 342, 0, 343, 344, 346, 348,
	345, 347, 349, 351, 902, 350, 983, 353, 354, 357,
	358, 356, 984, 355, 858, 221, 0, 359, 880, 969,
	360, 937, 362, 363, 0, 911, 365, 912, 0, 0,
	368, 369, 370, 0, 0, 371, 372, 519, 986, 373,
	987, 994, 374, 367, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 383, 995, 384, 522, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 930,
	395, 396, 0, 397, 398, 399, 400, 401, 0, 403,
	404, 405, 402, 406, 407, 408, 409, 0, 410, 988,
	411, 412, 413, 414, 868, 415, 0, 416, 420, 421,
	422, 423, 424, 425, 426, 0, 432, 433, 903, 904,
	906, 907, 428, 434, 435, 436, 962, 437, 417, 418,
	438, 439, 0, 440, 441, 925, 905, 443, 0, 444,
	445, 446, 447, 419, 448, 452, 973, 449, 450, 451,
	996, 0, 455, 456, 454, 0, 457, 458, 459, 460,
	461, 286, 901, 0, 463, 944, 945, 946, 947, 0,
	470, 0, 464, 465, 997, 466, 998, 878, 467, 468,
	469, 0, 3651, 472, 0, 862, 473, 474, 475, 477,
	478, 476, 480, 963, 481, 0, 909, 482, 483, 484,
	533, 941, 991, 0, 486, 485, 536, 0, 0, 0,
	0, 487, 488, 537, 489, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 1039, 0, 0,
	855, 856, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 0, 0, 882, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 228, 230, 229, 231, 232, 493, 494, 233, 495,
	236, 234, 235, 496, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 964, 244, 497, 498, 499, 0, 245,
	246, 971, 0, 952, 0, 247, 248, 249, 250, 251,
	252, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 974, 262, 263, 955, 953, 954,
	961, 957, 956, 960, 264, 265, 266, 267, 268, 269,
	501, 502, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 503, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 992, 993, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 506, 295, 296, 0, 297, 0,
	298, 0, 0, 975, 299, 300, 0, 301, 999, 0,
	508, 302, 0, 303, 304, 305, 306, 966, 967, 970,
	361, 977, 307, 308, 0, 309, 310, 312, 0, 0,
	220, 311, 313, 320, 0, 976, 314, 512, 316, 315,
	317, 318, 319, 513, 0, 514, 0, 321, 978, 968,
	979, 322, 323, 324, 980, 325, 326, 0, 0, 327,
	328, 329, 330, 331, 1025, 333, 332, 0, 334, 1000,
	981, 335, 336, 982, 0, 337, 338, 959, 958, 339,
	340, 341, 342, 0, 343, 344, 346, 348, 345, 347,
	349, 351, 352, 350, 983, 353, 354, 357, 358, 356,
	984, 355, 0, 221, 985, 359, 0, 969, 360, 518,
	362, 363, 0, 364, 365, 366, 0, 1031, 368, 369,
	370, 0, 0, 371, 372, 519, 986, 373, 987, 994,
	374, 367, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 383, 995, 384, 522, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 523, 395, 396,
	0, 397, 398, 399, 400, 401, 0, 403, 404, 405,
	402, 406, 407, 408, 409, 0, 410, 988, 411, 412,
	413, 414, 524, 1033, 0, 416, 420, 421, 422, 423,
	424, 425, 426, 185, 432, 433, 427, 429, 430, 431,
	428, 434, 435, 436, 962, 437, 417, 418, 438, 439,
	989, 440, 441, 525, 442, 443, 0, 444, 445, 446,
	447, 419, 448, 452, 453, 449, 450, 451, 996, 0,
	455, 456, 454, 187, 457, 458, 459, 460, 461, 286,
	462, 0, 463, 527, 528, 529, 530, 0, 470, 0,
	464, 465, 997, 466, 998, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	480, 963, 481, 0, 479, 482, 483, 484, 1346, 534,
	535, 0, 486, 485, 536, 1039, 0, 0, 179, 487,
	488, 537, 489, 490, 491, 0, 180, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 965, 1029, 0, 1644, 0, 228,
	230, 229, 231, 232, 493, 494, 233, 495, 236, 234,
	235, 496, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 964, 244, 497, 498, 499, 0, 245, 246, 971,
	0, 952, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 974, 262, 263, 955, 953, 954, 961, 957,
	956, 960, 264, 265, 266, 267, 268, 269, 501, 502,
	0, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	503, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	992, 993, 0, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 506, 295, 296, 0, 297, 0, 298, 0,
	0, 975, 299, 300, 0, 301, 999, 0, 508, 302,
	0, 303, 304, 305, 306, 966, 967, 970, 361, 977,
	307, 308, 0, 309, 310, 312, 0, 0, 220, 311,
	313, 320, 0, 976, 314, 512, 316, 315, 317, 318,
	319, 513, 0, 514, 0, 321, 978, 968, 979, 322,
	323, 324, 980, 325, 326, 0, 0, 327, 328, 329,
	330, 331, 1025, 333, 332, 0, 334, 1000, 981, 335,
	336, 982, 0, 337, 338, 959, 958, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	352, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	0, 221, 985, 359, 0, 969, 360, 518, 362, 363,
	0, 364, 365, 366, 0, 1031, 368, 369, 370, 0,
	0, 371, 372, 519, 986, 373, 987, 994, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	995, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 523, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 988, 411, 412, 413, 414,
	524, 1033, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 185, 432, 433, 427, 429, 430, 431, 428, 434,
	435, 436, 962, 437, 417, 418, 438, 439, 989, 440,
	441, 525, 442, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 453, 449, 450, 451, 996, 0, 455, 456,
	454, 187, 457, 458, 459, 460, 461, 286, 462, 0,
	463, 527, 528, 529, 530, 0, 470, 0, 464, 465,
	997, 466, 998, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 480, 963,
	481, 0, 479, 482, 483, 484, 1346, 534, 535, 0,
	486, 485, 536, 2706, 0, 1039, 179, 487, 488, 537,
	489, 490, 491, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 1029, 965, 1644, 0, 0, 0, 228,
	230, 229, 231, 232, 493, 494, 233, 495, 236, 234,
	235, 496, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 964, 244, 497, 498, 499, 0, 245, 246, 971,
	0, 952, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 974, 262, 263, 955, 953, 954, 961, 957,
	956, 960, 264, 265, 266, 267, 268, 269, 501, 502,
	0, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	503, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	992, 993, 0, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 506, 295, 296, 0, 297, 0, 298, 0,
	0, 975, 299, 300, 0, 301, 999, 0, 508, 302,
	0, 303, 304, 305, 306, 966, 967, 970, 361, 977,
	307, 308, 0, 309, 310, 312, 0, 0, 220, 311,
	313, 320, 0, 976, 314, 512, 316, 315, 317, 318,
	319, 513, 0, 514, 0, 321, 978, 968, 979, 322,
	323, 324, 980, 325, 326, 0, 0, 327, 328, 329,
	330, 331, 1025, 333, 332, 0, 334, 1000, 981, 335,
	336, 982, 0, 337, 338, 959, 958, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	352, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	0, 221, 985, 359, 0, 969, 360, 518, 362, 363,
	0, 364, 365, 366, 0, 1031, 368, 369, 370, 0,
	0, 371, 372, 519, 986, 373, 987, 994, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	995, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 523, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 988, 411, 412, 413, 414,
	524, 1033, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 0, 432, 433, 427, 429, 430, 431, 428, 434,
	435, 436, 962, 437, 417, 418, 438, 439, 989, 440,
	441, 525, 442, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 453, 449, 450, 451, 996, 0, 455, 456,
	454, 0, 457, 458, 459, 460, 461, 286, 462, 0,
	463, 527, 528, 529, 530, 0, 470, 0, 464, 465,
	997, 466, 998, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 480, 963,
	481, 0, 479, 482, 483, 484, 533, 534, 535, 0,
	486, 485, 536, 1021, 0, 1039, 0, 487, 488, 537,
	489, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 1029, 965, 1027, 0, 0, 0, 228,
	230, 229, 231, 232, 493, 494, 233, 495, 236, 234,
	235, 496, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 964, 244, 497, 498, 499, 0, 245, 246, 971,
	0, 952, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 974, 262, 263, 955, 953, 954, 961, 957,
	956, 960, 264, 265, 266, 267, 268, 269, 501, 502,
	0, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	503, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	992, 993, 0, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 506, 295, 296, 0, 297, 0, 298, 0,
	0, 975, 299, 300, 0, 301, 999, 0, 508, 302,
	0, 303, 304, 305, 306, 966, 967, 970, 361, 977,
	307, 308, 0, 309, 310, 312, 0, 0, 220, 311,
	313, 320, 0, 976, 314, 512, 316, 315, 317, 318,
	319, 513, 0, 514, 0, 321, 978, 968, 979, 322,
	323, 324, 980, 325, 326, 0, 0, 327, 328, 329,
	330, 331, 1025, 333, 332, 0, 334, 1000, 981, 335,
	336, 982, 0, 337, 338, 959, 958, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	352, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	0, 221, 985, 359, 0, 969, 360, 518, 362, 363,
	0, 364, 365, 366, 0, 1031, 368, 369, 370, 0,
	0, 371, 372, 519, 986, 373, 987, 994, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	995, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 523, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 988, 411, 412, 413, 414,
	524, 1033, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 0, 432, 433, 427, 429, 430, 431, 428, 434,
	435, 436, 962, 437, 417, 418, 438, 439, 989, 440,
	441, 525, 442, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 453, 449, 450, 451, 996, 0, 455, 456,
	454, 0, 457, 458, 459, 460, 461, 286, 462, 0,
	463, 527, 528, 529, 530, 0, 470, 0, 464, 465,
	997, 466, 998, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 480, 963,
	481, 0, 479, 482, 483, 484, 533, 534, 535, 0,
	486, 485, 536, 1039, 0, 0, 0, 487, 488, 537,
	489, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 965, 1029, 0, 1027, 0, 228, 230, 229,
	231, 232, 493, 494, 233, 495, 236, 234, 235, 496,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 964,
	244, 497, 498, 499, 0, 245, 246, 971, 0, 952,
	0, 247, 248, 249, 250, 251, 252, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	974, 262, 263, 955, 953, 954, 961, 957, 956, 960,
	264, 265, 266, 267, 268, 269, 501, 502, 0, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 503, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 992, 993,
	0, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	506, 295, 296, 0, 297, 0, 298, 0, 0, 975,
	299, 300, 0, 301, 999, 0, 508, 302, 0, 303,
	304, 305, 306, 966, 967, 970, 361, 977, 307, 308,
	0, 309, 310, 312, 0, 0, 220, 311, 313, 320,
	0, 976, 314, 512, 316, 315, 317, 318, 319, 513,
	0, 514, 0, 321, 978, 968, 979, 322, 323, 324,
	980, 325, 326, 0, 0, 327, 328, 329, 330, 331,
	1025, 333, 332, 0, 334, 1000, 981, 335, 336, 982,
	0, 337, 338, 959, 958, 339, 340, 341, 342, 0,
	343, 344, 346, 348, 345, 347, 349, 351, 352, 350,
	983, 353, 354, 357, 358, 356, 984, 355, 0, 221,
	985, 359, 0, 969, 360, 518, 362, 363, 0, 364,
	365, 366, 0, 1031, 368, 369, 370, 0, 0, 371,
	372, 519, 986, 373, 987, 994, 374, 367, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 383, 995, 384,
	522, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 523, 395, 396, 0, 397, 398, 399,
	400, 401, 0, 403, 404, 405, 402, 406, 407, 408,
	409, 0, 410, 988, 411, 412, 413, 414, 524, 1033,
	0, 416, 420, 421, 422, 423, 424, 425, 426, 0,
	432, 433, 427, 429, 430, 431, 428, 434, 435, 436,
	962, 437, 417, 418, 438, 439, 989, 440, 441, 525,
	442, 443, 0, 444, 445, 446, 447, 419, 448, 452,
	453, 449, 450, 451, 996, 0, 455, 456, 454, 0,
	457, 458, 459, 460, 461, 286, 462, 0, 463, 527,
	528, 529, 530, 0, 470, 0, 464, 465, 997, 466,
	998, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 480, 963, 481, 0,
	479, 482, 483, 484, 533, 534, 535, 0, 486, 485,
	536, 1039, 0, 0, 0, 487, 488, 537, 489, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	965, 1029, 0, 1027, 0, 228, 230, 229, 231, 232,
	493, 494, 233, 495, 236, 234, 235, 496, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 964, 244, 497,
	498, 499, 0, 245, 246, 971, 0, 952, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 974, 262,
	263, 955, 953, 954, 961, 957, 956, 960, 264, 265,
	266, 267, 268, 269, 501, 502, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 503, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 992, 993, 0, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 506, 295,
	296, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 999, 0, 508, 302, 0, 303, 304, 305,
	306, 966, 967, 970, 361, 977, 307, 308, 0, 309,
	310, 312, 0, 0, 220, 311, 313, 320, 0, 976,
	314, 512, 316, 315, 317, 318, 319, 513, 0, 514,
	0, 321, 978, 968, 979, 322, 323, 324, 980, 325,
	326, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 1000, 981, 335, 336, 982, 0, 337,
	338, 959, 958, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 352, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 0, 221, 985, 359,
	0, 969, 360, 518, 362, 363, 0, 364, 365, 366,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 994, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 995, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 523, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 524, 1033, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 0, 432, 433,
	427, 429, 430, 431, 428, 434, 435, 436, 962, 437,
	417, 418, 438, 439, 989, 440, 441, 525, 442, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 453, 449,
	450, 451, 996, 0, 455, 456, 454, 0, 457, 458,
	459, 460, 461, 286, 462, 0, 463, 527, 528, 529,
	530, 0, 470, 0, 464, 465, 997, 466, 998, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 480, 963, 481, 0, 479, 482,
	483, 484, 533, 534, 535, 0, 486, 485, 536, 848,
	0, 1210, 0, 487, 488, 537, 489, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	492, 1545, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 494, 233, 495, 236, 234, 235, 496, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 497,
	498, 499, 0, 245, 246, 500, 0, 1102, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 974, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 501, 502, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 503, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 504, 505, 0, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 506, 295,
	296, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 507, 0, 508, 302, 0, 303, 304, 305,
	306, 509, 510, 511, 361, 977, 307, 308, 0, 309,
	310, 312, 0, 0, 0, 311, 313, 320, 0, 976,
	314, 512, 316, 315, 317, 318, 319, 513, 0, 514,
	0, 321, 978, 515, 979, 322, 323, 324, 980, 325,
	326, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 516, 981, 335, 336, 982, 0, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 352, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 0, 0, 985, 359,
	0, 517, 360, 518, 362, 363, 0, 364, 365, 366,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 520, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 521, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 523, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 524, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 185, 432, 433,
	427, 429, 430, 431, 428, 434, 435, 436, 0, 437,
	417, 418, 438, 439, 989, 440, 441, 525, 442, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 453, 449,
	450, 451, 526, 0, 455, 456, 454, 187, 457, 458,
	459, 460, 461, 286, 462, 0, 463, 527, 528, 529,
	530, 0, 470, 0, 464, 465, 531, 466, 532, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 480, 0, 481, 0, 479, 482,
	483, 484, 1346, 534, 535, 0, 486, 485, 536, 1343,
	0, 1210, 179, 487, 488, 537, 489, 490, 491, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	492, 154, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 494, 233, 495, 236, 234, 235, 496, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 497,
	498, 499, 0, 245, 246, 500, 0, 1102, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 974, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 501, 502, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 503, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 504, 505, 0, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 506, 295,
	296, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 507, 0, 508, 302, 0, 303, 304, 305,
	306, 509, 510, 511, 361, 977, 307, 308, 0, 309,
	310, 312, 0, 0, 0, 311, 313, 320, 0, 976,
	314, 512, 316, 315, 317, 318, 319, 513, 0, 514,
	0, 321, 978, 515, 979, 322, 323, 324, 980, 325,
	326, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 516, 981, 335, 336, 982, 0, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 352, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 0, 0, 985, 359,
	0, 517, 360, 518, 362, 363, 0, 364, 365, 366,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 520, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 521, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 523, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 524, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 185, 432, 433,
	427, 429, 430, 431, 428, 434, 435, 436, 0, 437,
	417, 418, 438, 439, 989, 440, 441, 525, 442, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 453, 449,
	450, 451, 526, 0, 455, 456, 454, 187, 457, 458,
	459, 460, 461, 286, 462, 0, 463, 527, 528, 529,
	530, 0, 470, 0, 464, 465, 531, 466, 532, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 480, 0, 481, 0, 479, 482,
	483, 484, 1346, 534, 535, 0, 486, 485, 536, 0,
	0, 0, 179, 487, 488, 537, 489, 490, 491, 0,
	180, 0, 0, 0, 0, 1210, 1209, 0, 0, 0,
	0, 1207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 492, 0, 0, 0, 0, 228,
	230, 229, 231, 232, 493, 494, 233, 495, 236, 234,
	235, 496, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 497, 498, 499, 0, 245, 246, 500,
	0, 1102, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 974, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 268, 269, 501, 502,
	0, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	503, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	504, 505, 0, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 506, 295, 296, 0, 297, 0, 298, 0,
	0, 975, 299, 300, 0, 301, 507, 0, 508, 302,
	0, 303, 304, 305, 306, 509, 510, 511, 361, 977,
	307, 308, 0, 309, 310, 312, 0, 0, 0, 311,
	313, 320, 0, 976, 314, 512, 316, 315, 317, 318,
	319, 513, 0, 514, 0, 321, 978, 515, 979, 322,
	323, 324, 980, 325, 326, 0, 0, 327, 328, 329,
	330, 331, 0, 333, 332, 0, 334, 516, 981, 335,
	336, 982, 0, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	352, 350, 983, 353, 354, 357, 358, 356, 984, 355,
	0, 0, 985, 359, 0, 517, 360, 518, 362, 363,
	0, 364, 365, 366, 0, 0, 368, 369, 370, 0,
	0, 371, 372, 519, 986, 373, 987, 520, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	521, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 523, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 988, 411, 412, 413, 414,
	524, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 0, 432, 433, 427, 429, 430, 431, 428, 434,
	435, 436, 0, 437, 417, 418, 438, 439, 989, 440,
	441, 525, 442, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 453, 449, 450, 451, 526, 0, 455, 456,
	454, 0, 457, 458, 459, 460, 461, 286, 462, 0,
	463, 527, 528, 529, 530, 0, 470, 0, 464, 465,
	531, 466, 532, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 480, 0,
	481, 0, 479, 482, 483, 484, 533, 534, 535, 0,
	486, 485, 536, 0, 0, 0, 0, 487, 488, 537,
	489, 490, 491, 1210, 1209, 0, 0, 0, 0, 1207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 2910, 227, 0, 0, 0,
	0, 0, 492, 0, 0, 0, 0, 228, 230, 229,
	231, 232, 493, 494, 233, 495, 236, 234, 235, 496,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 497, 498, 499, 0, 245, 246, 500, 0, 1102,
	0, 247, 248, 249, 250, 251, 252, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	974, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 268, 269, 501, 502, 0, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 503, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 504, 505,
	0, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	506, 295, 296, 0, 297, 0, 298, 0, 0, 975,
	299, 300, 0, 301, 507, 0, 508, 302, 0, 303,
	304, 305, 306, 509, 510, 511, 361, 977, 307, 308,
	0, 309, 310, 312, 0, 0, 0, 311, 313, 320,
	0, 976, 314, 512, 316, 315, 317, 318, 319, 513,
	0, 514, 0, 321, 978, 515, 979, 322, 323, 324,
	980, 325, 326, 0, 0, 327, 328, 329, 330, 331,
	0, 333, 332, 0, 334, 516, 981, 335, 336, 982,
	0, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 344, 346, 348, 345, 347, 349, 351, 352, 350,
	983, 353, 354, 357, 358, 356, 984, 355, 0, 0,
	985, 359, 0, 517, 360, 518, 362, 363, 0, 364,
	365, 366, 0, 0, 368, 369, 370, 0, 0, 371,
	372, 519, 986, 373, 987, 520, 374, 367, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 383, 521, 384,
	522, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 523, 395, 396, 0, 397, 398, 399,
	400, 401, 0, 403, 404, 405, 402, 406, 407, 408,
	409, 0, 410, 988, 411, 412, 413, 414, 524, 415,
	0, 416, 420, 421, 422, 423, 424, 425, 426, 0,
	432, 433, 427, 429, 430, 431, 428, 434, 435, 436,
	0, 437, 417, 418, 438, 439, 989, 440, 441, 525,
	442, 443, 0, 444, 445, 446, 447, 419, 448, 452,
	453, 449, 450, 451, 526, 0, 455, 456, 454, 0,
	457, 458, 459, 460, 461, 286, 462, 0, 463, 527,
	528, 529, 530, 0, 470, 0, 464, 465, 531, 466,
	532, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 480, 0, 481, 0,
	479, 482, 483, 484, 533, 534, 535, 0, 486, 485,
	536, 0, 0, 0, 0, 487, 488, 537, 489, 490,
	491, 1210, 1209, 0, 0, 0, 0, 1207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 1216, 227, 0, 0, 0, 0, 0,
	492, 0, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 494, 233, 495, 236, 234, 235, 496, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 497,
	498, 499, 0, 245, 246, 500, 0, 1102, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 974, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 501, 502, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 503, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 504, 505, 0, 219,
	0, 0, 0, 0, 0, 292, 293, 294, 506, 295,
	296, 0, 297, 0, 298, 0, 0, 975, 299, 300,
	0, 301, 507, 0, 508, 302, 0, 303, 304, 305,
	306, 509, 510, 511, 361, 977, 307, 308, 0, 309,
	310, 312, 0, 0, 0, 311, 313, 320, 0, 976,
	314, 512, 316, 315, 317, 318, 319, 513, 0, 514,
	0, 321, 978, 515, 979, 322, 323, 324, 980, 325,
	326, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 516, 981, 335, 336, 982, 0, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 352, 350, 983, 353,
	354, 357, 358, 356, 984, 355, 0, 0, 985, 359,
	0, 517, 360, 518, 362, 363, 0, 364, 365, 366,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	986, 373, 987, 520, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 521, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 523, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 988, 411, 412, 413, 414, 524, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 0, 432, 433,
	427, 429, 430, 431, 428, 434, 435, 436, 0, 437,
	417, 418, 438, 439, 989, 440, 441, 525, 442, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 453, 449,
	450, 451, 526, 0, 455, 456, 454, 0, 457, 458,
	459, 460, 461, 286, 462, 0, 463, 527, 528, 529,
	530, 0, 470, 0, 464, 465, 531, 466, 532, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 480, 0, 481, 0, 479, 482,
	483, 484, 533, 534, 535, 0, 486, 485, 536, 1039,
	0, 0, 0, 487, 488, 537, 489, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 965, 0,
	0, 1352, 0, 228, 230, 229, 231, 232, 493, 494,
	233, 495, 236, 234, 235, 496, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 964, 244, 497, 498, 499,
	0, 245, 246, 971, 0, 952, 0, 247, 248, 249,
	250, 251, 252, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 974, 262, 263, 955,
	953, 954, 961, 957, 956, 960, 264, 265, 266, 267,
	268, 269, 501, 502, 0, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 503, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 992, 993, 0, 219, 0, 0,
	0, 0, 0, 292, 293, 294, 506, 295, 296, 0,
	297, 0, 298, 0, 0, 975, 299, 300, 0, 301,
	999, 0, 508, 302, 0, 303, 304, 305, 306, 966,
	967, 970, 361, 977, 307, 308, 0, 309, 310, 312,
	0, 0, 220, 311, 313, 320, 0, 976, 314, 512,
	316, 315, 317, 318, 319, 513, 0, 514, 0, 321,
	978, 968, 979, 322, 323, 324, 980, 325, 326, 0,
	0, 327, 328, 329, 330, 331, 0, 333, 332, 0,
	334, 1000, 981, 335, 336, 982, 0, 337, 338, 959,
	958, 339, 340, 341, 342, 0, 343, 344, 346, 348,
	345, 347, 349, 351, 352, 350, 983, 353, 354, 357,
	358, 356, 984, 355, 0, 221, 985, 359, 0, 969,
	360, 518, 362, 363, 0, 364, 365, 366, 0, 0,
	368, 369, 370, 0, 0, 371, 372, 519, 986, 373,
	987, 994, 374, 367, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 383, 995, 384, 522, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 523,
	395, 396, 0, 397, 398, 399, 400, 401, 0, 403,
	404, 405, 402, 406, 407, 408, 409, 0, 410, 988,
	411, 412, 413, 414, 524, 415, 0, 416, 420, 421,
	422, 423, 424, 425, 426, 0, 432, 433, 427, 429,
	430, 431, 428, 434, 435, 436, 962, 437, 417, 418,
	438, 439, 989, 440, 441, 525, 442, 443, 0, 444,
	445, 446, 447, 419, 448, 452, 453, 449, 450, 451,
	996, 0, 455, 456, 454, 0, 457, 458, 459, 460,
	461, 286, 462, 0, 463, 527, 528, 529, 530, 0,
	470, 0, 464, 465, 997, 466, 998, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 480, 963, 481, 0, 479, 482, 483, 484,
	533, 534, 535, 0, 486, 485, 536, 848, 0, 216,
	0, 487, 488, 537, 489, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 492, 0,
	0, 0, 0, 228, 230, 229, 231, 232, 493, 494,
	233, 495, 236, 234, 235, 496, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 497, 498, 499,
	0, 245, 246, 500, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	268, 269, 501, 502, 0, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 503, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 504, 505, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 506, 295, 296, 0,
	297, 0, 298, 0, 0, 0, 299, 300, 0, 301,
	507, 0, 508, 302, 0, 303, 304, 305, 306, 509,
	510, 511, 361, 0, 307, 308, 0, 309, 310, 312,
	0, 0, 0, 311, 313, 320, 0, 0, 314, 512,
	316, 315, 317, 318, 319, 513, 0, 514, 0, 321,
	0, 515, 0, 322, 323, 324, 0, 325, 326, 0,
	0, 327, 328, 329, 330, 331, 0, 333, 332, 0,
	334, 516, 0, 335, 336, 0, 0, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 344, 346, 348,
	345, 347, 349, 351, 352, 350, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 517,
	360, 518, 362, 363, 0, 364, 365, 366, 0, 0,
	368, 369, 370, 0, 0, 371, 372, 519, 0, 373,
	0, 520, 374, 367, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 383, 521, 384, 522, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 523,
	395, 396, 0, 397, 398, 399, 400, 401, 0, 403,
	404, 405, 402, 406, 407, 408, 409, 0, 410, 0,
	411, 412, 413, 414, 524, 415, 0, 416, 420, 421,
	422, 423, 424, 425, 426, 185, 432, 433, 427, 429,
	430, 431, 428, 434, 435, 436, 0, 437, 417, 418,
	438, 439, 0, 440, 441, 525, 442, 443, 0, 444,
	445, 446, 447, 419, 448, 452, 453, 449, 450, 451,
	526, 0, 455, 456, 454, 187, 457, 458, 459, 460,
	461, 286, 462, 0, 463, 527, 528, 529, 530, 0,
	470, 0, 464, 465, 531, 466, 532, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 480, 0, 481, 0, 479, 482, 483, 484,
	1346, 534, 535, 0, 486, 485, 536, 216, 0, 0,
	179, 487, 488, 537, 489, 490, 491, 0, 180, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 492, 0, 0, 154,
	0, 228, 230, 229, 231, 232, 493, 494, 233, 495,
	236, 234, 235, 496, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 497, 498, 499, 0, 245,
	246, 500, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 268, 269,
	501, 502, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 503, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 504, 505, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 506, 295, 296, 0, 297, 0,
	298, 0, 0, 0, 299, 300, 0, 301, 507, 0,
	508, 302, 0, 303, 304, 305, 306, 509, 510, 511,
	361, 0, 307, 308, 0, 309, 310, 312, 0, 0,
	220, 311, 313, 320, 0, 0, 314, 512, 316, 315,
	317, 318, 319, 513, 0, 514, 0, 321, 0, 515,
	0, 322, 323, 324, 0, 325, 326, 0, 0, 327,
	328, 329, 330, 331, 0, 333, 332, 0, 334, 516,
	0, 335, 336, 0, 0, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 344, 346, 348, 345, 347,
	349, 351, 352, 350, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 221, 0, 359, 0, 517, 360, 518,
	362, 363, 0, 364, 365, 366, 0, 0, 368, 369,
	370, 0, 0, 371, 372, 519, 0, 373, 0, 520,
	374, 367, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 383, 521, 384, 522, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 523, 395, 396,
	0, 397, 398, 399, 400, 401, 0, 403, 404, 405,
	402, 406, 407, 408, 409, 0, 410, 0, 411, 412,
	413, 414, 524, 415, 0, 416, 420, 421, 422, 423,
	424, 425, 426, 0, 432, 433, 427, 429, 430, 431,
	428, 434, 435, 436, 0, 437, 417, 418, 438, 439,
	0, 440, 441, 525, 442, 443, 0, 444, 445, 446,
	447, 419, 448, 452, 453, 449, 450, 451, 526, 0,
	455, 456, 454, 0, 457, 458, 459, 460, 461, 286,
	462, 0, 463, 527, 528, 529, 530, 0, 470, 0,
	464, 465, 531, 466, 532, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	480, 0, 481, 0, 479, 482, 483, 484, 533, 534,
	535, 0, 486, 485, 536, 1296, 0, 216, 0, 487,
	488, 537, 489, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 492, 1658, 0, 0,
	0, 228, 230, 229, 231, 232, 493, 494, 233, 495,
	236, 234, 235, 496, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 497, 498, 499, 0, 245,
	246, 500, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 268, 269,
	501, 502, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 503, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 504, 505, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 506, 295, 296, 0, 297, 0,
	298, 0, 0, 0, 299, 300, 0, 301, 507, 0,
	508, 302, 0, 303, 304, 305, 306, 509, 510, 511,
	361, 0, 307, 308, 0, 309, 310, 312, 0, 0,
	220, 311, 313, 320, 0, 0, 314, 512, 316, 315,
	317, 318, 319, 513, 0, 514, 0, 321, 0, 515,
	0, 322, 323, 324, 0, 325, 326, 0, 0, 327,
	328, 329, 330, 331, 0, 333, 332, 0, 334, 516,
	0, 335, 336, 0, 0, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 344, 346, 348, 345, 347,
	349, 351, 352, 350, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 221, 0, 359, 0, 517, 360, 518,
	362, 363, 0, 364, 365, 366, 0, 0, 368, 369,
	370, 0, 0, 371, 372, 519, 0, 373, 0, 520,
	374, 367, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 383, 521, 384, 522, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 523, 395, 396,
	0, 397, 398, 399, 400, 401, 0, 403, 404, 405,
	402, 406, 407, 408, 409, 0, 410, 0, 411, 412,
	413, 414, 524, 415, 0, 416, 420, 421, 422, 423,
	424, 425, 426, 0, 432, 433, 427, 429, 430, 431,
	428, 434, 435, 436, 0, 437, 417, 418, 438, 439,
	0, 440, 441, 525, 442, 443, 0, 444, 445, 446,
	447, 419, 448, 452, 453, 449, 450, 451, 526, 0,
	455, 456, 454, 0, 457, 458, 459, 460, 461, 286,
	462, 0, 463, 527, 528, 529, 530, 0, 470, 0,
	464, 465, 531, 466, 532, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	480, 0, 481, 0, 479, 482, 483, 484, 533, 534,
	535, 0, 486, 485, 536, 216, 0, 0, 0, 487,
	488, 537, 489, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 0, 227, 0,
	0, 0, 0, 0, 492, 1300, 0, 0, 0, 228,
	230, 229, 231, 232, 493, 494, 233, 495, 236, 234,
	235, 496, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 244, 497, 498, 499, 0, 245, 246, 500,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 268, 269, 501, 502,
	0, 270, 271, 0, 273, 272, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	503, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	504, 505, 0, 219, 0, 0, 0, 0, 0, 292,
	293, 294, 506, 295, 296, 0, 297, 0, 298, 0,
	0, 0, 299, 300, 0, 301, 507, 0, 508, 302,
	0, 303, 304, 305, 306, 509, 510, 511, 361, 0,
	307, 308, 0, 309, 310, 312, 0, 0, 220, 311,
	313, 320, 0, 0, 314, 512, 316, 315, 317, 318,
	319, 513, 0, 514, 0, 321, 0, 515, 0, 322,
	323, 324, 0, 325, 326, 0, 0, 327, 328, 329,
	330, 331, 0, 333, 332, 0, 334, 516, 0, 335,
	336, 0, 0, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 344, 346, 348, 345, 347, 349, 351,
	352, 350, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 221, 0, 359, 0, 517, 360, 518, 362, 363,
	0, 364, 365, 366, 0, 0, 368, 369, 370, 0,
	0, 371, 372, 519, 0, 373, 0, 520, 374, 367,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 383,
	521, 384, 522, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 392, 393, 394, 523, 395, 396, 0, 397,
	398, 399, 400, 401, 0, 403, 404, 405, 402, 406,
	407, 408, 409, 0, 410, 0, 411, 412, 413, 414,
	524, 415, 0, 416, 420, 421, 422, 423, 424, 425,
	426, 0, 432, 433, 427, 429, 430, 431, 428, 434,
	435, 436, 0, 437, 417, 418, 438, 439, 0, 440,
	441, 525, 442, 443, 0, 444, 445, 446, 447, 419,
	448, 452, 453, 449, 450, 451, 526, 0, 455, 456,
	454, 0, 457, 458, 459, 460, 461, 286, 462, 0,
	463, 527, 528, 529, 530, 0, 470, 0, 464, 465,
	531, 466, 532, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 480, 0,
	481, 0, 479, 482, 483, 484, 533, 534, 535, 0,
	486, 485, 536, 216, 0, 0, 0, 487, 488, 537,
	489, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 224, 225, 226, 0, 227, 0, 0, 0,
	0, 0, 492, 2860, 0, 0, 0, 228, 230, 229,
	231, 232, 493, 494, 233, 495, 236, 234, 235, 496,
	0, 237, 238, 239, 240, 241, 242, 243, 0, 0,
	244, 497, 498, 499, 0, 245, 246, 500, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 268, 269, 501, 502, 0, 270,
	271, 0, 273, 272, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 503, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 504, 505,
	0, 219, 0, 0, 0, 0, 0, 292, 293, 294,
	506, 295, 296, 0, 297, 0, 298, 0, 0, 0,
	299, 300, 0, 301, 507, 0, 508, 302, 0, 303,
	304, 305, 306, 509, 510, 511, 361, 0, 307, 308,
	0, 309, 310, 312, 0, 0, 220, 311, 313, 320,
	0, 0, 314, 512, 316, 315, 317, 318, 319, 513,
	0, 514, 0, 321, 0, 515, 0, 322, 323, 324,
	0, 325, 326, 0, 0, 327, 328, 329, 330, 331,
	0, 333, 332, 0, 334, 516, 0, 335, 336, 0,
	0, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 344, 346, 348, 345, 347, 349, 351, 352, 350,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 221,
	0, 359, 0, 517, 360, 518, 362, 363, 0, 364,
	365, 366, 0, 0, 368, 369, 370, 0, 0, 371,
	372, 519, 0, 373, 0, 520, 374, 367, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 383, 521, 384,
	522, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	392, 393, 394, 523, 395, 396, 0, 397, 398, 399,
	400, 401, 0, 403, 404, 405, 402, 406, 407, 408,
	409, 0, 410, 0, 411, 412, 413, 414, 524, 415,
	0, 416, 420, 421, 422, 423, 424, 425, 426, 0,
	432, 433, 427, 429, 430, 431, 428, 434, 435, 436,
	0, 437, 417, 418, 438, 439, 0, 440, 441, 525,
	442, 443, 0, 444, 445, 446, 447, 419, 448, 452,
	453, 449, 450, 451, 526, 0, 455, 456, 454, 0,
	457, 458, 459, 460, 461, 286, 462, 0, 463, 527,
	528, 529, 530, 0, 470, 0, 464, 465, 531, 466,
	532, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 480, 0, 481, 0,
	479, 482, 483, 484, 533, 534, 535, 0, 486, 485,
	536, 216, 0, 0, 0, 487, 488, 537, 489, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 0, 227, 0, 0, 0, 0, 0,
	492, 1300, 0, 0, 0, 228, 230, 229, 231, 232,
	493, 494, 233, 495, 236, 234, 235, 496, 0, 237,
	238, 239, 240, 241, 242, 243, 0, 0, 244, 497,
	498, 499, 0, 245, 246, 500, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 268, 269, 501, 502, 0, 270, 271, 0,
	273, 272, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 503, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 504, 505, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 506, 295,
	296, 0, 297, 0, 298, 0, 0, 0, 299, 300,
	0, 301, 507, 0, 508, 302, 0, 303, 304, 305,
	306, 509, 510, 511, 361, 0, 307, 308, 0, 309,
	310, 312, 0, 0, 0, 311, 313, 320, 0, 0,
	314, 512, 316, 315, 317, 318, 319, 513, 0, 514,
	0, 321, 0, 515, 0, 322, 323, 324, 0, 325,
	326, 0, 0, 327, 328, 329, 330, 331, 0, 333,
	332, 0, 334, 516, 0, 335, 336, 0, 0, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 344,
	346, 348, 345, 347, 349, 351, 352, 350, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 517, 360, 518, 362, 363, 0, 364, 365, 366,
	0, 0, 368, 369, 370, 0, 0, 371, 372, 519,
	0, 373, 0, 520, 374, 367, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 383, 521, 384, 522, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 392, 393,
	394, 523, 395, 396, 0, 397, 398, 399, 400, 401,
	0, 403, 404, 405, 402, 406, 407, 408, 409, 0,
	410, 0, 411, 412, 413, 414, 524, 415, 0, 416,
	420, 421, 422, 423, 424, 425, 426, 0, 432, 433,
	427, 429, 430, 431, 428, 434, 435, 436, 0, 437,
	417, 418, 438, 439, 0, 440, 441, 525, 442, 443,
	0, 444, 445, 446, 447, 419, 448, 452, 453, 449,
	450, 451, 526, 0, 455, 456, 454, 0, 457, 458,
	459, 460, 461, 286, 462, 0, 463, 527, 528, 529,
	530, 0, 470, 0, 464, 465, 531, 466, 532, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 480, 0, 481, 0, 479, 482,
	483, 484, 533, 534, 535, 0, 486, 485, 536, 216,
	0, 0, 0, 487, 488, 537, 489, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 0, 227, 0, 0, 0, 0, 0, 492, 0,
	0, 2459, 0, 228, 230, 229, 231, 232, 493, 494,
	233, 495, 236, 234, 235, 496, 0, 237, 238, 239,
	240, 241, 242, 243, 0, 0, 244, 497, 498, 499,
	0, 245, 246, 500, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	268, 269, 501, 502, 0, 270, 271, 0, 273, 272,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 503, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 504, 505, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 506, 295, 296, 0,
	297, 0, 298, 0, 0, 0, 299, 300, 0, 301,
	507, 0, 508, 302, 0, 303, 304, 305, 306, 509,
	510, 511, 361, 0, 307, 308, 0, 309, 310, 312,
	0, 0, 0, 311, 313, 320, 0, 0, 314, 512,
	316, 315, 317, 318, 319, 513, 0, 514, 0, 321,
	0, 515, 0, 322, 323, 324, 0, 325, 326, 0,
	0, 327, 328, 329, 330, 331, 0, 333, 332, 0,
	334, 516, 0, 335, 336, 0, 0, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 344, 346, 348,
	345, 347, 349, 351, 352, 350, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 517,
	360, 518, 362, 363, 0, 364, 365, 366, 0, 0,
	368, 369, 370, 0, 0, 371, 372, 519, 0, 373,
	0, 520, 374, 367, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 383, 521, 384, 522, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 392, 393, 394, 523,
	395, 396, 0, 397, 398, 399, 400, 401, 0, 403,
	404, 405, 402, 406, 407, 408, 409, 0, 410, 0,
	411, 412, 413, 414, 524, 415, 0, 416, 420, 421,
	422, 423, 424, 425, 426, 0, 432, 433, 427, 429,
	430, 431, 428, 434, 435, 436, 0, 437, 417, 418,
	438, 439, 0, 440, 441, 525, 442, 443, 0, 444,
	445, 446, 447, 419, 448, 452, 453, 449, 450, 451,
	526, 0, 455, 456, 454, 0, 457, 458, 459, 460,
	461, 286, 462, 0, 463, 527, 528, 529, 530, 0,
	470, 0, 464, 465, 531, 466, 532, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 480, 0, 481, 0, 479, 482, 483, 484,
	533, 534, 535, 0, 486, 485, 536, 216, 0, 0,
	0, 487, 488, 537, 489, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 492, 0, 0, 2998,
	0, 228, 230, 229, 231, 232, 493, 494, 233, 495,
	236, 234, 235, 496, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 497, 498, 499, 0, 245,
	246, 500, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 268, 269,
	501, 502, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 503, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 504, 505, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 506, 295, 296, 0, 297, 0,
	298, 0, 0, 0, 299, 300, 0, 301, 507, 0,
	508, 302, 0, 303, 304, 305, 306, 509, 510, 511,
	361, 0, 307, 308, 0, 309, 310, 312, 0, 0,
	0, 311, 313, 320, 0, 0, 314, 512, 316, 315,
	317, 318, 319, 513, 0, 514, 0, 321, 0, 515,
	0, 322, 323, 324, 0, 325, 326, 0, 0, 327,
	328, 329, 330, 331, 0, 333, 332, 0, 334, 516,
	0, 335, 336, 0, 0, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 344, 346, 348, 345, 347,
	349, 351, 352, 350, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 517, 360, 518,
	362, 363, 0, 364, 365, 366, 0, 0, 368, 369,
	370, 0, 0, 371, 372, 519, 0, 373, 0, 520,
	374, 367, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 383, 521, 384, 522, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 523, 395, 396,
	0, 397, 398, 399, 400, 401, 0, 403, 404, 405,
	402, 406, 407, 408, 409, 0, 410, 0, 411, 412,
	413, 414, 524, 415, 0, 416, 420, 421, 422, 423,
	424, 425, 426, 0, 432, 433, 427, 429, 430, 431,
	428, 434, 435, 436, 0, 437, 417, 418, 438, 439,
	0, 440, 441, 525, 442, 443, 0, 444, 445, 446,
	447, 419, 448, 452, 453, 449, 450, 451, 526, 0,
	455, 456, 454, 0, 457, 458, 459, 460, 461, 286,
	462, 0, 463, 527, 528, 529, 530, 0, 470, 0,
	464, 465, 531, 466, 532, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	480, 0, 481, 0, 479, 482, 483, 484, 533, 534,
	535, 0, 486, 485, 536, 717, 0, 611, 0, 487,
	488, 537, 489, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 0,
	227, 0, 0, 0, 0, 0, 492, 1929, 0, 0,
	0, 228, 230, 229, 231, 232, 493, 494, 233, 495,
	236, 234, 235, 496, 0, 237, 238, 239, 240, 241,
	242, 243, 0, 0, 244, 497, 498, 499, 0, 245,
	246, 500, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 617, 267, 268, 269,
	501, 502, 0, 270, 271, 0, 273, 272, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 503, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 504, 505, 0, 219, 0, 0, 0, 0,
	0, 292, 293, 294, 506, 295, 296, 0, 297, 0,
	298, 0, 715, 0, 299, 300, 0, 301, 507, 0,
	508, 302, 0, 303, 304, 305, 306, 509, 510, 511,
	361, 0, 307, 308, 0, 309, 310, 312, 0, 0,
	220, 311, 313, 320, 0, 0, 314, 512, 316, 315,
	317, 318, 319, 513, 0, 514, 0, 321, 0, 515,
	0, 322, 323, 324, 0, 325, 326, 0, 0, 327,
	328, 329, 330, 331, 0, 333, 332, 0, 334, 516,
	0, 335, 336, 0, 0, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 344, 346, 348, 345, 347,
	349, 351, 352, 350, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 221, 0, 359, 0, 517, 360, 518,
	362, 363, 0, 364, 365, 366, 0, 0, 368, 369,
	370, 0, 0, 371, 372, 519, 0, 373, 0, 520,
	374, 367, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 383, 521, 384, 522, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 392, 393, 394, 523, 395, 396,
	0, 397, 398, 399, 400, 401, 0, 403, 404, 405,
	402, 406, 407, 408, 409, 0, 410, 0, 411, 412,
	413, 414, 524, 415, 0, 416, 420, 421, 422, 423,
	424, 425, 426, 0, 432, 433, 427, 429, 430, 431,
	428, 434, 435, 436, 0, 437, 417, 418, 438, 439,
	0, 440, 441, 525, 442, 443, 0, 444, 445, 446,
	447, 419, 448, 452, 453, 449, 450, 451, 526, 0,
	455, 456, 454, 616, 457, 458, 459, 460, 461, 286,
	462, 0, 463, 527, 528, 529, 530, 0, 470, 0,
	464, 465, 531, 466, 532, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	480, 0, 481, 0, 479, 482, 483, 484, 533, 534,
	535, 0, 486, 485, 536, 0, 610, 0, 611, 487,
	488, 537, 489, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	620, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 617, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 616, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 608, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 1210, 1209, 0, 0,
	0, 0, 1207, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 1102, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	977, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 976, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 978, 515, 979,
	322, 323, 324, 980, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 981,
	335, 336, 982, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 0, 0, 985, 359, 3135, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 989,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 1210, 1209, 0, 0, 0, 0,
	1207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 494, 233, 495, 236, 234, 235,
	496, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	0, 244, 497, 498, 499, 0, 245, 246, 500, 0,
	1102, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 974, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 501, 502, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 503,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 504,
	505, 0, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 506, 295, 296, 0, 297, 0, 298, 0, 0,
	975, 299, 300, 0, 301, 507, 0, 508, 302, 0,
	303, 304, 305, 306, 509, 510, 511, 361, 977, 307,
	308, 0, 309, 310, 312, 0, 0, 0, 311, 313,
	320, 0, 976, 314, 512, 316, 315, 317, 318, 319,
	513, 0, 514, 0, 321, 978, 515, 979, 322, 323,
	324, 980, 325, 326, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 516, 981, 335, 336,
	982, 0, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 352,
	350, 983, 353, 354, 357, 358, 356, 984, 355, 0,
	0, 985, 359, 2840, 517, 360, 518, 362, 363, 0,
	364, 365, 366, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 986, 373, 987, 520, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 521,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 523, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 988, 411, 412, 413, 414, 524,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 427, 429, 430, 431, 428, 434, 435,
	436, 0, 437, 417, 418, 438, 439, 989, 440, 441,
	525, 442, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 453, 449, 450, 451, 526, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 462, 0, 463,
	527, 528, 529, 530, 0, 470, 0, 464, 465, 531,
	466, 532, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 480, 0, 481,
	0, 479, 482, 483, 484, 533, 534, 535, 611, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 617, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 1963,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 616, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 611, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 620, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 617, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 220,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 221, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 616, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 1379, 0, 1210, 1209, 0, 0,
	0, 0, 1207, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 1102, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	1378, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	977, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 976, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 978, 515, 979,
	322, 323, 324, 980, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 981,
	335, 336, 982, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 0, 0, 985, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 1377, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 1376, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 989,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 1340, 0, 1210, 1209, 0, 0,
	0, 0, 1207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 1102, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 1339, 510, 511, 361,
	977, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 976, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 978, 515, 979,
	322, 323, 324, 980, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 981,
	335, 336, 982, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 0, 0, 985, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 989,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 1276, 0, 1210, 1209, 0, 0,
	0, 0, 1207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 1102, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 1275, 510, 511, 361,
	977, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 976, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 978, 515, 979,
	322, 323, 324, 980, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 981,
	335, 336, 982, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 0, 0, 985, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 989,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 1205, 0, 1210, 1209, 0, 0,
	0, 0, 1207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 1102, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 1204, 510, 511, 361,
	977, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 976, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 978, 515, 979,
	322, 323, 324, 980, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 981,
	335, 336, 982, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 0, 0, 985, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 989,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 1210, 1209, 0, 0, 0, 0,
	1207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 494, 233, 495, 236, 234, 235,
	496, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	0, 244, 497, 498, 499, 0, 245, 246, 500, 0,
	1102, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 974, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 501, 502, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 503,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 504,
	505, 0, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 506, 295, 296, 0, 297, 0, 298, 0, 0,
	975, 299, 300, 0, 301, 507, 0, 508, 302, 0,
	303, 304, 305, 306, 509, 510, 511, 361, 977, 307,
	308, 0, 309, 310, 312, 0, 0, 0, 311, 313,
	320, 0, 976, 314, 512, 316, 315, 317, 318, 319,
	513, 0, 514, 0, 321, 978, 515, 979, 322, 323,
	324, 980, 325, 326, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 516, 981, 335, 336,
	982, 0, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 352,
	350, 983, 353, 354, 357, 358, 356, 984, 355, 0,
	0, 985, 359, 0, 517, 360, 518, 362, 363, 0,
	364, 365, 366, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 986, 373, 987, 520, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 521,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 523, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 988, 411, 412, 413, 414, 524,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 427, 429, 430, 431, 428, 434, 435,
	436, 0, 437, 417, 418, 438, 439, 989, 440, 441,
	525, 442, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 453, 449, 450, 451, 526, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 462, 0, 463,
	527, 528, 529, 530, 0, 470, 0, 464, 465, 531,
	466, 532, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 480, 0, 481,
	0, 479, 482, 483, 484, 533, 534, 535, 216, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1210, 1209, 0, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 620, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 1102, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 974, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 1747, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 975, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	977, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 976, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 978, 515, 979,
	322, 323, 324, 980, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 981,
	335, 336, 982, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 983, 353, 354, 357, 358, 356, 984,
	355, 0, 0, 985, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 986, 373, 987, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 988, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 989,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 1210, 1209, 0, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 494, 233, 495, 236, 234, 235,
	496, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	0, 244, 497, 498, 499, 0, 245, 246, 500, 0,
	1102, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 974, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 501, 502, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 503,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 504,
	505, 0, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 506, 295, 296, 0, 297, 0, 298, 0, 0,
	975, 299, 300, 0, 301, 507, 0, 508, 302, 0,
	303, 304, 305, 306, 509, 510, 511, 361, 977, 307,
	308, 0, 309, 310, 312, 0, 0, 0, 311, 313,
	320, 0, 976, 314, 512, 316, 315, 317, 318, 319,
	513, 0, 514, 0, 321, 978, 515, 979, 322, 323,
	324, 980, 325, 326, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 516, 981, 335, 336,
	982, 0, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 352,
	350, 983, 353, 354, 357, 358, 356, 984, 355, 0,
	0, 985, 359, 0, 517, 360, 518, 362, 363, 0,
	364, 365, 366, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 986, 373, 987, 520, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 521,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 523, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 988, 411, 412, 413, 414, 524,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 427, 429, 430, 431, 428, 434, 435,
	436, 0, 437, 417, 418, 438, 439, 989, 440, 441,
	525, 442, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 453, 449, 450, 451, 526, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 462, 0, 463,
	527, 528, 529, 530, 0, 470, 0, 464, 465, 531,
	466, 532, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 480, 0, 481,
	0, 479, 482, 483, 484, 533, 534, 535, 1210, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 1102, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 974, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 975, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 977, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 976, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 978,
	515, 979, 322, 323, 324, 980, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 981, 335, 336, 982, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 983, 353, 354, 357, 358,
	356, 984, 355, 0, 0, 985, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 986, 373, 987,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 988, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 989, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 216, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 494, 233, 495, 236, 234, 235, 496, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 0, 244,
	497, 498, 499, 2336, 245, 246, 500, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 2333, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 501, 502, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 503, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 504, 505, 0,
	2494, 0, 0, 0, 0, 0, 292, 293, 294, 506,
	295, 296, 0, 297, 0, 298, 2339, 0, 0, 299,
	300, 0, 301, 507, 0, 508, 302, 0, 303, 304,
	305, 306, 509, 510, 511, 361, 0, 307, 308, 0,
	309, 310, 312, 0, 0, 2491, 311, 313, 320, 0,
	0, 314, 512, 316, 315, 317, 318, 319, 513, 0,
	514, 0, 2493, 0, 515, 0, 322, 323, 324, 0,
	325, 326, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 516, 0, 335, 336, 2490, 0,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 352, 350, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 517, 360, 518, 362, 363, 0, 364, 365,
	366, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 0, 373, 0, 520, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 521, 384, 522,
	385, 386, 2338, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 523, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 0, 411, 412, 413, 414, 524, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 0, 432,
	433, 427, 429, 430, 431, 428, 434, 435, 436, 0,
	437, 417, 418, 438, 439, 0, 440, 441, 525, 442,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 453,
	449, 450, 451, 526, 0, 455, 456, 454, 0, 457,
	458, 459, 460, 461, 286, 462, 0, 463, 527, 528,
	529, 530, 0, 470, 0, 464, 465, 531, 466, 532,
	0, 467, 468, 469, 0, 471, 472, 0, 2492, 473,
	474, 475, 477, 478, 476, 480, 0, 481, 0, 479,
	482, 483, 484, 533, 534, 535, 216, 486, 485, 536,
	0, 0, 0, 0, 487, 488, 537, 489, 490, 491,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 2336, 245, 246,
	500, 0, 0, 2330, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 2333, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	2339, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 2329, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 2338, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 2337, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 1436, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 220,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 221, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 1439, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 1437, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 1438, 485, 536, 1186, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 1188, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 220,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 221, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 1031, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 1183, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 1185, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 220,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 221, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 1031, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 1090, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 219, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 1092, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 220,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 221, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 1031, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 566, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 565, 226, 555, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 558, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 559, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 560, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 554, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 555, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 558, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 559, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 560, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	216, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 228, 230, 229, 231, 232, 493,
	494, 233, 495, 236, 234, 235, 496, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 497, 498,
	499, 0, 245, 246, 500, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 501, 502, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 503, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 504, 505, 0, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 506, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 507, 0, 508, 302, 0, 303, 304, 305, 306,
	509, 510, 511, 361, 0, 307, 308, 0, 309, 310,
	312, 0, 0, 220, 311, 313, 320, 0, 0, 314,
	512, 316, 315, 317, 318, 319, 513, 0, 514, 0,
	321, 0, 515, 0, 322, 323, 324, 0, 325, 326,
	0, 0, 327, 328, 329, 330, 331, 0, 333, 332,
	0, 334, 516, 0, 335, 336, 0, 0, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 344, 346,
	348, 345, 347, 349, 351, 352, 350, 0, 353, 354,
	357, 358, 356, 2822, 355, 0, 221, 0, 359, 0,
	517, 360, 518, 362, 363, 0, 364, 365, 366, 0,
	0, 368, 369, 370, 0, 0, 371, 372, 519, 0,
	373, 0, 520, 374, 367, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 383, 521, 384, 522, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	523, 395, 396, 0, 397, 398, 399, 400, 401, 0,
	403, 404, 405, 402, 406, 407, 408, 409, 0, 410,
	0, 411, 412, 413, 414, 524, 415, 0, 416, 420,
	421, 422, 423, 424, 425, 426, 0, 432, 433, 427,
	429, 430, 431, 428, 434, 435, 436, 0, 437, 417,
	418, 438, 439, 0, 440, 441, 525, 442, 443, 0,
	444, 445, 446, 447, 419, 448, 452, 453, 449, 450,
	451, 526, 0, 455, 456, 454, 0, 457, 458, 459,
	460, 461, 286, 462, 0, 463, 527, 528, 529, 530,
	0, 470, 0, 464, 465, 531, 466, 532, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 480, 0, 481, 0, 479, 482, 483,
	484, 533, 534, 535, 216, 486, 485, 536, 0, 0,
	0, 0, 487, 488, 537, 489, 490, 491, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 494, 233, 495, 236, 234, 235,
	496, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	0, 244, 497, 498, 499, 0, 245, 246, 500, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 501, 502, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 503,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 504,
	505, 0, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 506, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 507, 0, 508, 302, 0,
	303, 304, 305, 306, 509, 510, 511, 361, 0, 307,
	308, 0, 309, 310, 312, 0, 0, 220, 311, 313,
	320, 0, 0, 314, 512, 316, 315, 317, 318, 319,
	513, 0, 514, 0, 321, 0, 515, 0, 322, 323,
	324, 0, 325, 326, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 516, 0, 335, 336,
	0, 0, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 352,
	350, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	221, 0, 359, 0, 517, 360, 518, 362, 363, 0,
	364, 365, 366, 0, 1031, 368, 369, 370, 0, 0,
	371, 372, 519, 0, 373, 0, 520, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 521,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 523, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 0, 411, 412, 413, 414, 524,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 427, 429, 430, 431, 428, 434, 435,
	436, 0, 437, 417, 418, 438, 439, 0, 440, 441,
	525, 442, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 453, 449, 450, 451, 526, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 462, 0, 463,
	527, 528, 529, 530, 0, 470, 0, 464, 465, 531,
	466, 532, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 480, 0, 481,
	0, 479, 482, 483, 484, 533, 534, 535, 0, 486,
	485, 536, 2432, 0, 216, 0, 487, 488, 537, 489,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 494, 233, 495, 236, 234, 235,
	496, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	0, 244, 497, 498, 499, 0, 245, 246, 500, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 501, 502, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 503,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 504,
	505, 0, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 506, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 507, 0, 508, 302, 0,
	303, 304, 305, 306, 2431, 510, 511, 361, 0, 307,
	308, 0, 309, 310, 312, 0, 0, 220, 311, 313,
	320, 0, 0, 314, 512, 316, 315, 317, 318, 319,
	513, 0, 514, 0, 321, 0, 515, 0, 322, 323,
	324, 0, 325, 326, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 516, 0, 335, 336,
	0, 0, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 352,
	350, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	221, 0, 359, 0, 517, 360, 518, 362, 363, 0,
	364, 365, 366, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 0, 373, 0, 520, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 521,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 523, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 0, 411, 412, 413, 414, 524,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 427, 429, 430, 431, 428, 434, 435,
	436, 0, 437, 417, 418, 438, 439, 0, 440, 441,
	525, 442, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 453, 449, 450, 451, 526, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 462, 0, 463,
	527, 528, 529, 530, 0, 470, 0, 464, 465, 531,
	466, 532, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 480, 0, 481,
	0, 479, 482, 483, 484, 533, 534, 535, 0, 486,
	485, 536, 1939, 0, 216, 0, 487, 488, 537, 489,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 494, 233, 495, 236, 234, 235,
	496, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	0, 244, 497, 498, 499, 0, 245, 246, 500, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 501, 502, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 503,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 504,
	505, 0, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 506, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 507, 0, 508, 302, 0,
	303, 304, 305, 306, 509, 510, 511, 361, 0, 307,
	308, 0, 309, 310, 312, 0, 0, 220, 311, 313,
	320, 0, 0, 314, 512, 316, 315, 317, 318, 319,
	513, 0, 514, 0, 321, 0, 515, 0, 322, 323,
	324, 0, 325, 326, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 516, 0, 335, 336,
	0, 0, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 352,
	350, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	221, 0, 359, 0, 517, 360, 518, 362, 363, 0,
	364, 365, 366, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 0, 373, 0, 520, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 521,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 523, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 0, 411, 412, 413, 414, 524,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 427, 429, 430, 431, 428, 434, 435,
	436, 0, 437, 417, 418, 438, 439, 0, 440, 441,
	525, 442, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 453, 449, 450, 451, 526, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 462, 0, 463,
	527, 528, 529, 530, 0, 470, 0, 464, 465, 531,
	466, 532, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 480, 0, 481,
	0, 479, 482, 483, 484, 533, 534, 535, 216, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 1867, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1872, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1871, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1860, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1862, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1333, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1332, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1330, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1329, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1327, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1326, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1323, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1322, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1197, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1199, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 216, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 494, 233, 495, 236, 234, 235, 496, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 0, 244,
	497, 498, 499, 0, 245, 246, 500, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 501, 502, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 503, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 504, 505, 0,
	219, 0, 0, 0, 0, 0, 292, 293, 294, 506,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 507, 0, 508, 302, 0, 303, 304,
	305, 306, 509, 510, 511, 361, 0, 307, 308, 0,
	309, 310, 312, 0, 0, 220, 311, 313, 320, 0,
	0, 314, 512, 316, 315, 317, 318, 319, 513, 0,
	514, 0, 321, 0, 515, 0, 322, 323, 324, 0,
	325, 326, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 516, 0, 335, 336, 0, 0,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 352, 350, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 221, 0,
	359, 0, 517, 360, 518, 362, 363, 0, 364, 365,
	366, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 0, 373, 0, 520, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 521, 384, 522,
	385, 386, 0, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 523, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 0, 411, 412, 413, 414, 524, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 0, 432,
	433, 427, 429, 430, 431, 428, 434, 435, 436, 0,
	437, 417, 418, 438, 439, 0, 440, 441, 525, 442,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 453,
	449, 450, 451, 526, 0, 455, 456, 454, 0, 457,
	458, 459, 460, 461, 286, 462, 0, 463, 527, 528,
	529, 530, 0, 470, 0, 464, 465, 531, 466, 532,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 480, 0, 481, 0, 479,
	482, 483, 484, 533, 534, 535, 216, 486, 485, 536,
	0, 0, 0, 0, 487, 488, 537, 489, 490, 491,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 558, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 559, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 560, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	216, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 228, 230, 229, 231, 232, 493,
	494, 233, 495, 236, 234, 235, 496, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 497, 498,
	499, 0, 245, 246, 500, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 1970,
	267, 268, 269, 501, 502, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 503, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 504, 505, 0, 219, 0,
	0, 0, 0, 0, 292, 293, 294, 506, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 507, 0, 508, 302, 0, 303, 304, 305, 306,
	509, 510, 511, 361, 0, 307, 308, 0, 309, 310,
	312, 0, 0, 220, 311, 313, 320, 0, 0, 314,
	512, 316, 315, 317, 318, 319, 513, 0, 514, 0,
	321, 0, 515, 0, 322, 323, 324, 0, 325, 326,
	0, 0, 327, 328, 329, 330, 331, 0, 333, 332,
	0, 334, 516, 0, 335, 336, 0, 0, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 344, 346,
	348, 345, 347, 349, 351, 352, 350, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 221, 0, 359, 0,
	517, 360, 518, 362, 363, 0, 364, 365, 366, 0,
	0, 368, 369, 370, 0, 0, 371, 372, 519, 0,
	373, 0, 520, 374, 367, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 383, 521, 384, 522, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	523, 395, 396, 0, 397, 398, 399, 400, 401, 0,
	403, 404, 405, 402, 406, 407, 408, 409, 0, 410,
	0, 411, 412, 413, 414, 524, 415, 0, 416, 420,
	421, 422, 423, 424, 425, 426, 0, 432, 433, 427,
	429, 430, 431, 428, 434, 435, 436, 0, 437, 417,
	418, 438, 439, 0, 440, 441, 525, 442, 443, 0,
	444, 445, 446, 447, 419, 448, 452, 453, 449, 450,
	451, 526, 0, 455, 456, 454, 0, 457, 458, 459,
	460, 461, 286, 462, 0, 463, 527, 528, 529, 530,
	0, 470, 0, 464, 465, 531, 466, 532, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 480, 0, 481, 0, 479, 482, 483,
	484, 533, 534, 535, 216, 486, 485, 536, 0, 0,
	0, 0, 487, 488, 537, 489, 490, 491, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 494, 233, 495, 236, 234, 235,
	496, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	0, 244, 497, 498, 499, 0, 245, 246, 500, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 1968, 267, 268, 269, 501, 502, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 503,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 504,
	505, 0, 219, 0, 0, 0, 0, 0, 292, 293,
	294, 506, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 507, 0, 508, 302, 0,
	303, 304, 305, 306, 509, 510, 511, 361, 0, 307,
	308, 0, 309, 310, 312, 0, 0, 220, 311, 313,
	320, 0, 0, 314, 512, 316, 315, 317, 318, 319,
	513, 0, 514, 0, 321, 0, 515, 0, 322, 323,
	324, 0, 325, 326, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 516, 0, 335, 336,
	0, 0, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 352,
	350, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	221, 0, 359, 0, 517, 360, 518, 362, 363, 0,
	364, 365, 366, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 0, 373, 0, 520, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 521,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 523, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 0, 411, 412, 413, 414, 524,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 427, 429, 430, 431, 428, 434, 435,
	436, 0, 437, 417, 418, 438, 439, 0, 440, 441,
	525, 442, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 453, 449, 450, 451, 526, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 462, 0, 463,
	527, 528, 529, 530, 0, 470, 0, 464, 465, 531,
	466, 532, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 480, 0, 481,
	0, 479, 482, 483, 484, 533, 534, 535, 216, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 1966, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 219, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 220, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 221, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 708, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 707, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 706, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 216, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 494, 233, 495, 236, 234, 235, 496, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 0, 244,
	497, 498, 499, 0, 245, 246, 500, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 501, 502, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 503, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 504, 505, 0,
	2494, 0, 0, 0, 0, 0, 292, 293, 294, 506,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 507, 0, 508, 302, 0, 303, 304,
	305, 306, 509, 510, 511, 361, 0, 307, 308, 0,
	309, 310, 312, 0, 0, 0, 311, 313, 320, 0,
	0, 314, 512, 316, 315, 317, 318, 319, 513, 0,
	514, 0, 321, 0, 515, 0, 322, 323, 324, 0,
	325, 326, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 516, 0, 335, 336, 0, 0,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 352, 350, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 517, 360, 518, 362, 363, 0, 364, 365,
	366, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 0, 373, 0, 520, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 521, 384, 522,
	385, 386, 3333, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 523, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 0, 411, 412, 413, 414, 524, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 0, 432,
	433, 427, 429, 430, 431, 428, 434, 435, 436, 0,
	437, 417, 418, 438, 439, 0, 440, 441, 525, 442,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 453,
	449, 450, 451, 526, 0, 455, 456, 454, 0, 457,
	458, 459, 460, 461, 286, 462, 0, 463, 527, 528,
	529, 530, 0, 470, 0, 464, 465, 531, 466, 532,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 480, 0, 481, 0, 479,
	482, 483, 484, 533, 534, 535, 0, 486, 485, 536,
	545, 0, 216, 0, 487, 488, 537, 489, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 544, 227, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 494, 233, 495, 236, 234, 235, 496, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 0, 244,
	497, 498, 499, 0, 245, 246, 500, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 501, 502, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 503, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 504, 505, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 506,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 507, 0, 508, 302, 0, 303, 304,
	305, 306, 509, 510, 511, 361, 0, 307, 308, 0,
	309, 310, 312, 0, 0, 0, 311, 313, 320, 0,
	0, 314, 512, 316, 315, 317, 318, 319, 513, 0,
	514, 0, 321, 0, 515, 0, 322, 323, 324, 0,
	325, 326, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 516, 0, 335, 336, 0, 0,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 352, 350, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 517, 360, 518, 362, 363, 0, 364, 365,
	366, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 0, 373, 0, 520, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 521, 384, 522,
	543, 386, 0, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 523, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 0, 411, 412, 413, 414, 524, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 0, 432,
	433, 427, 429, 430, 431, 428, 434, 435, 436, 0,
	437, 417, 418, 438, 439, 0, 440, 441, 525, 442,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 453,
	449, 450, 451, 526, 0, 455, 456, 454, 0, 457,
	458, 459, 460, 461, 286, 462, 0, 463, 527, 528,
	529, 530, 0, 470, 0, 464, 465, 531, 466, 532,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 480, 0, 481, 0, 479,
	482, 483, 484, 533, 534, 535, 0, 486, 485, 536,
	216, 3342, 0, 0, 487, 488, 537, 489, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 228, 230, 229, 231, 232, 493,
	494, 233, 495, 236, 234, 235, 496, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 497, 498,
	499, 0, 245, 246, 500, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 501, 502, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 503, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 504, 505, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 506, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 507, 0, 508, 302, 0, 303, 304, 305, 306,
	509, 510, 511, 361, 0, 307, 308, 0, 309, 310,
	312, 0, 0, 0, 311, 313, 320, 0, 0, 314,
	512, 316, 315, 317, 318, 319, 513, 0, 514, 0,
	321, 0, 515, 0, 322, 323, 324, 0, 325, 326,
	0, 0, 327, 328, 329, 330, 331, 0, 333, 332,
	0, 334, 516, 0, 335, 336, 0, 0, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 344, 346,
	348, 345, 347, 349, 351, 352, 350, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	517, 360, 518, 362, 363, 0, 364, 365, 366, 0,
	0, 368, 369, 370, 0, 0, 371, 372, 519, 0,
	373, 0, 520, 374, 367, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 383, 521, 384, 522, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	523, 395, 396, 0, 397, 398, 399, 400, 401, 0,
	403, 404, 405, 402, 406, 407, 408, 409, 0, 410,
	0, 411, 412, 413, 414, 524, 415, 0, 416, 420,
	421, 422, 423, 424, 425, 426, 0, 432, 433, 427,
	429, 430, 431, 428, 434, 435, 436, 0, 437, 417,
	418, 438, 439, 0, 440, 441, 525, 442, 443, 0,
	444, 445, 446, 447, 419, 448, 452, 453, 449, 450,
	451, 526, 0, 455, 456, 454, 0, 457, 458, 459,
	460, 461, 286, 462, 0, 463, 527, 528, 529, 530,
	0, 470, 0, 464, 465, 531, 466, 532, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 480, 0, 481, 0, 479, 482, 483,
	484, 533, 534, 535, 0, 486, 485, 536, 216, 2481,
	0, 0, 487, 488, 537, 489, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 216, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 494, 233, 495, 236, 234, 235, 496, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 0, 244,
	497, 498, 499, 0, 245, 246, 500, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 501, 502, 3123, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 503, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 504, 505, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 506,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 507, 0, 508, 302, 0, 303, 304,
	305, 306, 509, 510, 511, 361, 0, 307, 308, 0,
	309, 310, 312, 0, 0, 0, 311, 313, 320, 0,
	0, 314, 512, 316, 315, 317, 318, 319, 513, 0,
	514, 0, 321, 0, 515, 0, 322, 323, 324, 0,
	325, 326, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 516, 0, 335, 336, 0, 0,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 352, 350, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 517, 360, 518, 362, 363, 0, 364, 365,
	366, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 0, 373, 0, 520, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 521, 384, 522,
	385, 386, 0, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 523, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 0, 411, 412, 413, 414, 524, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 0, 432,
	433, 427, 429, 430, 431, 428, 434, 435, 436, 0,
	437, 417, 418, 438, 439, 0, 440, 441, 525, 442,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 453,
	449, 450, 451, 526, 0, 455, 456, 454, 0, 457,
	458, 459, 460, 461, 286, 462, 0, 463, 527, 528,
	529, 530, 0, 470, 0, 464, 465, 531, 466, 532,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 480, 0, 481, 0, 479,
	482, 483, 484, 533, 534, 535, 216, 486, 485, 536,
	0, 0, 0, 0, 487, 488, 537, 489, 490, 491,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 2261, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 216, 2481, 0, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 494, 233, 495, 236, 234, 235,
	496, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	0, 244, 497, 498, 499, 0, 245, 246, 500, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 501, 502, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 503,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 504,
	505, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 506, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 507, 0, 508, 302, 0,
	303, 304, 305, 306, 509, 510, 511, 361, 0, 307,
	308, 0, 309, 310, 312, 0, 0, 0, 311, 313,
	320, 0, 0, 314, 512, 316, 315, 317, 318, 319,
	513, 0, 514, 0, 321, 0, 515, 0, 322, 323,
	324, 0, 325, 326, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 516, 0, 335, 336,
	0, 0, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 352,
	350, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 517, 360, 518, 362, 363, 0,
	364, 365, 366, 0, 0, 368, 369, 2478, 0, 0,
	371, 372, 519, 0, 373, 0, 520, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 521,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 523, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 0, 411, 412, 413, 414, 524,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 427, 429, 430, 431, 428, 434, 435,
	436, 0, 437, 417, 418, 438, 439, 0, 440, 441,
	525, 442, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 453, 449, 450, 451, 526, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 462, 0, 463,
	527, 528, 529, 530, 0, 470, 0, 464, 465, 531,
	466, 532, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 480, 0, 481,
	0, 479, 482, 483, 484, 533, 534, 535, 216, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 0, 0, 0, 222, 223, 224, 225, 226,
	1947, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1937, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 586, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 1068, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 1066, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 587, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 583,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 1069, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 582, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1882, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1881, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 586, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 576, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 587, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 583,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 1351, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 582, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1337, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1336, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1284, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1283, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1269, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1268, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1264, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 1191, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 0, 486, 485, 536, 586, 0, 216, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 1068, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 1066, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 509, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 587, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 583,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 1069, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 582, 528, 529, 530, 0, 470,
	0, 464, 1067, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 216, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 222,
	223, 224, 225, 226, 1050, 227, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 494, 233, 495, 236, 234, 235, 496, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 0, 244,
	497, 498, 499, 0, 245, 246, 500, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 501, 502, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 503, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 504, 505, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 506,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 507, 0, 508, 302, 0, 303, 304,
	305, 306, 509, 510, 511, 361, 0, 307, 308, 0,
	309, 310, 312, 0, 0, 0, 311, 313, 320, 0,
	0, 314, 512, 316, 315, 317, 318, 319, 513, 0,
	514, 0, 321, 0, 515, 0, 322, 323, 324, 0,
	325, 326, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 516, 0, 335, 336, 0, 0,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 352, 350, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 517, 360, 518, 362, 363, 0, 364, 365,
	366, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 0, 373, 0, 520, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 521, 384, 522,
	385, 386, 0, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 523, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 0, 411, 412, 413, 414, 524, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 0, 432,
	433, 427, 429, 430, 431, 428, 434, 435, 436, 0,
	437, 417, 418, 438, 439, 0, 440, 441, 525, 442,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 453,
	449, 450, 451, 526, 0, 455, 456, 454, 0, 457,
	458, 459, 460, 461, 286, 462, 0, 463, 527, 528,
	529, 530, 0, 470, 0, 464, 465, 531, 466, 532,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 480, 0, 481, 0, 479,
	482, 483, 484, 533, 534, 535, 216, 486, 485, 536,
	0, 0, 0, 0, 487, 488, 537, 489, 490, 491,
	0, 0, 0, 222, 223, 224, 225, 226, 592, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 586, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 576,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 574, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 575, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 587, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 577, 415, 0, 416, 420, 421, 583, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 578, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 582, 528, 529, 530, 0, 470, 0, 464,
	580, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 570, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 571, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 568, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 562, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	0, 486, 485, 536, 540, 0, 216, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	216, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 228, 230, 229, 231, 232, 493,
	494, 233, 495, 236, 234, 235, 496, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 497, 498,
	499, 0, 245, 246, 500, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 501, 502, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 503, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 504, 505, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 506, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 507, 0, 508, 302, 0, 303, 304, 305, 306,
	509, 510, 511, 361, 0, 307, 308, 0, 309, 310,
	312, 0, 0, 0, 311, 313, 320, 0, 0, 314,
	512, 316, 315, 317, 318, 319, 513, 0, 514, 0,
	321, 0, 515, 0, 322, 323, 324, 0, 325, 326,
	0, 0, 327, 328, 329, 330, 331, 0, 333, 332,
	0, 334, 516, 0, 335, 336, 0, 0, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 344, 346,
	348, 345, 347, 349, 351, 352, 350, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	517, 360, 518, 362, 363, 0, 364, 365, 366, 0,
	0, 368, 369, 370, 0, 0, 371, 372, 519, 0,
	373, 0, 520, 374, 367, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 383, 521, 384, 522, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	523, 395, 396, 0, 397, 398, 399, 400, 401, 0,
	403, 404, 405, 402, 406, 407, 408, 409, 0, 410,
	0, 411, 412, 413, 414, 524, 415, 0, 416, 420,
	421, 422, 423, 424, 425, 426, 0, 432, 433, 427,
	429, 430, 431, 428, 434, 435, 436, 0, 437, 417,
	418, 438, 439, 0, 440, 441, 525, 442, 443, 0,
	444, 445, 446, 447, 419, 448, 452, 453, 449, 450,
	451, 526, 0, 455, 456, 454, 0, 457, 458, 459,
	460, 461, 286, 462, 0, 463, 527, 528, 529, 530,
	0, 470, 0, 464, 465, 531, 466, 532, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 480, 0, 481, 0, 479, 482, 483,
	484, 533, 534, 535, 216, 486, 485, 536, 0, 0,
	0, 0, 487, 488, 537, 489, 490, 491, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 228, 230,
	229, 231, 232, 493, 494, 233, 495, 236, 234, 235,
	496, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	0, 244, 497, 498, 499, 0, 245, 246, 500, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 501, 502, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 503,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 504,
	505, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 506, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 507, 0, 508, 302, 0,
	303, 304, 305, 306, 2798, 510, 511, 361, 0, 307,
	308, 0, 309, 310, 312, 0, 0, 0, 311, 313,
	320, 0, 0, 314, 512, 316, 315, 317, 318, 319,
	513, 0, 514, 0, 321, 0, 515, 0, 322, 323,
	324, 0, 325, 326, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 516, 0, 335, 336,
	0, 0, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 352,
	350, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 517, 360, 518, 362, 363, 0,
	364, 365, 366, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 0, 373, 0, 520, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 521,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 523, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 0, 411, 412, 413, 414, 524,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 427, 429, 430, 431, 428, 434, 435,
	436, 0, 437, 417, 418, 438, 439, 0, 440, 441,
	525, 442, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 453, 449, 450, 451, 526, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 462, 0, 463,
	527, 528, 529, 530, 0, 470, 0, 464, 465, 531,
	466, 532, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 480, 0, 481,
	0, 479, 482, 483, 484, 533, 534, 535, 216, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 2796, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 216, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 494, 233, 495, 236, 234, 235, 496, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 0, 244,
	497, 498, 499, 0, 245, 246, 500, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 501, 502, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 503, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 504, 505, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 506,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 507, 0, 508, 302, 0, 303, 304,
	305, 306, 2783, 510, 511, 361, 0, 307, 308, 0,
	309, 310, 312, 0, 0, 0, 311, 313, 320, 0,
	0, 314, 512, 316, 315, 317, 318, 319, 513, 0,
	514, 0, 321, 0, 515, 0, 322, 323, 324, 0,
	325, 326, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 516, 0, 335, 336, 0, 0,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 352, 350, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 517, 360, 518, 362, 363, 0, 364, 365,
	366, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 0, 373, 0, 520, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 521, 384, 522,
	385, 386, 0, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 523, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 0, 411, 412, 413, 414, 524, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 0, 432,
	433, 427, 429, 430, 431, 428, 434, 435, 436, 0,
	437, 417, 418, 438, 439, 0, 440, 441, 525, 442,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 453,
	449, 450, 451, 526, 0, 455, 456, 454, 0, 457,
	458, 459, 460, 461, 286, 462, 0, 463, 527, 528,
	529, 530, 0, 470, 0, 464, 465, 531, 466, 532,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 480, 0, 481, 0, 479,
	482, 483, 484, 533, 534, 535, 216, 486, 485, 536,
	0, 0, 0, 0, 487, 488, 537, 489, 490, 491,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 2442, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 395, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	216, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 228, 230, 229, 231, 232, 493,
	494, 233, 495, 236, 234, 235, 496, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 497, 498,
	499, 0, 245, 246, 500, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 501, 502, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 503, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 504, 505, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 506, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 507, 0, 508, 302, 0, 303, 304, 305, 306,
	509, 510, 511, 361, 0, 307, 308, 0, 309, 310,
	312, 0, 0, 0, 311, 313, 320, 0, 0, 314,
	512, 316, 315, 317, 318, 319, 513, 0, 514, 0,
	321, 0, 515, 0, 322, 323, 324, 0, 325, 326,
	0, 0, 327, 328, 329, 330, 331, 0, 333, 332,
	0, 334, 516, 0, 335, 336, 0, 0, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 344, 346,
	348, 345, 347, 349, 351, 352, 350, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	517, 360, 518, 362, 363, 0, 364, 365, 366, 0,
	0, 368, 369, 370, 0, 0, 371, 372, 519, 0,
	373, 0, 520, 374, 367, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 383, 521, 384, 522, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 392, 393, 394,
	523, 395, 396, 0, 397, 398, 399, 400, 401, 0,
	403, 404, 405, 402, 406, 407, 408, 409, 0, 410,
	0, 411, 412, 413, 414, 524, 415, 0, 416, 571,
	421, 422, 423, 424, 425, 426, 0, 432, 433, 427,
	429, 430, 431, 428, 434, 435, 436, 0, 437, 417,
	418, 438, 439, 0, 440, 441, 525, 442, 443, 0,
	444, 445, 446, 447, 419, 448, 452, 453, 449, 450,
	451, 526, 0, 455, 456, 454, 0, 457, 458, 459,
	460, 461, 286, 462, 0, 463, 527, 528, 529, 530,
	0, 470, 0, 464, 465, 531, 466, 532, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 480, 0, 481, 0, 479, 482, 483,
	484, 533, 534, 535, 216, 486, 485, 536, 0, 0,
	0, 0, 487, 488, 537, 489, 490, 491, 0, 0,
	0, 222, 223, 224, 225, 226, 0, 227, 0, 0,
	0, 0, 0, 492, 0, 1895, 0, 0, 228, 230,
	229, 231, 232, 493, 494, 233, 495, 236, 234, 235,
	496, 0, 237, 238, 239, 240, 241, 242, 243, 0,
	0, 244, 497, 498, 499, 0, 245, 246, 500, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 268, 269, 501, 502, 0,
	270, 271, 0, 273, 272, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 503,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 504,
	505, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 506, 295, 296, 0, 297, 0, 298, 0, 0,
	0, 299, 300, 0, 301, 507, 0, 508, 302, 0,
	303, 304, 305, 306, 509, 510, 511, 361, 0, 307,
	308, 0, 309, 310, 312, 0, 0, 0, 311, 313,
	320, 0, 0, 314, 512, 316, 315, 317, 318, 319,
	513, 0, 514, 0, 321, 0, 515, 0, 322, 323,
	324, 0, 325, 326, 0, 0, 327, 328, 329, 330,
	331, 0, 333, 332, 0, 334, 516, 0, 335, 336,
	0, 0, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 344, 346, 348, 345, 347, 349, 351, 352,
	350, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 517, 360, 518, 362, 363, 0,
	364, 365, 366, 0, 0, 368, 369, 370, 0, 0,
	371, 372, 519, 0, 373, 0, 520, 374, 367, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 383, 521,
	384, 522, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 392, 393, 394, 523, 395, 396, 0, 397, 398,
	399, 400, 401, 0, 403, 404, 405, 402, 406, 407,
	408, 409, 0, 410, 0, 411, 412, 413, 414, 524,
	415, 0, 416, 420, 421, 422, 423, 424, 425, 426,
	0, 432, 433, 427, 429, 430, 431, 428, 434, 435,
	436, 0, 0, 417, 418, 438, 439, 0, 440, 441,
	525, 442, 443, 0, 444, 445, 446, 447, 419, 448,
	452, 453, 449, 450, 451, 526, 0, 455, 456, 454,
	0, 457, 458, 459, 460, 461, 286, 462, 0, 463,
	527, 528, 529, 530, 0, 470, 0, 464, 465, 531,
	466, 532, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 480, 0, 481,
	0, 479, 482, 483, 484, 533, 534, 535, 216, 486,
	485, 536, 0, 0, 0, 0, 487, 488, 537, 489,
	490, 491, 0, 0, 0, 222, 223, 224, 225, 226,
	0, 227, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 228, 230, 229, 231, 232, 493, 494, 233,
	495, 236, 234, 235, 496, 0, 237, 238, 239, 240,
	241, 242, 243, 0, 0, 244, 497, 498, 499, 0,
	245, 246, 500, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 268,
	269, 501, 502, 0, 270, 271, 0, 273, 272, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 503, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 504, 505, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 506, 295, 296, 0, 297,
	0, 298, 0, 0, 0, 299, 300, 0, 301, 507,
	0, 508, 302, 0, 303, 304, 305, 306, 1306, 510,
	511, 361, 0, 307, 308, 0, 309, 310, 312, 0,
	0, 0, 311, 313, 320, 0, 0, 314, 512, 316,
	315, 317, 318, 319, 513, 0, 514, 0, 321, 0,
	515, 0, 322, 323, 324, 0, 325, 326, 0, 0,
	327, 328, 329, 330, 331, 0, 333, 332, 0, 334,
	516, 0, 335, 336, 0, 0, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 344, 346, 348, 345,
	347, 349, 351, 352, 350, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 517, 360,
	518, 362, 363, 0, 364, 365, 366, 0, 0, 368,
	369, 370, 0, 0, 371, 372, 519, 0, 373, 0,
	520, 374, 367, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 383, 521, 384, 522, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 392, 393, 394, 523, 395,
	396, 0, 397, 398, 399, 400, 401, 0, 403, 404,
	405, 402, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 413, 414, 524, 415, 0, 416, 420, 421, 422,
	423, 424, 425, 426, 0, 432, 433, 427, 429, 430,
	431, 428, 434, 435, 436, 0, 437, 417, 418, 438,
	439, 0, 440, 441, 525, 442, 443, 0, 444, 445,
	446, 447, 419, 448, 452, 453, 449, 450, 451, 526,
	0, 455, 456, 454, 0, 457, 458, 459, 460, 461,
	286, 462, 0, 463, 527, 528, 529, 530, 0, 470,
	0, 464, 465, 531, 466, 532, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 480, 0, 481, 0, 479, 482, 483, 484, 533,
	534, 535, 216, 486, 485, 536, 0, 0, 0, 0,
	487, 488, 537, 489, 490, 491, 0, 0, 0, 222,
	223, 224, 225, 226, 0, 227, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 228, 230, 229, 231,
	232, 493, 494, 233, 495, 236, 234, 235, 496, 0,
	237, 238, 239, 240, 241, 242, 243, 0, 0, 244,
	497, 498, 499, 0, 245, 246, 500, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 268, 269, 501, 502, 0, 270, 271,
	0, 273, 272, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 503, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 504, 505, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 506,
	295, 296, 0, 297, 0, 298, 0, 0, 0, 299,
	300, 0, 301, 507, 0, 508, 302, 0, 303, 304,
	305, 306, 1246, 510, 511, 361, 0, 307, 308, 0,
	309, 310, 312, 0, 0, 0, 311, 313, 320, 0,
	0, 314, 512, 316, 315, 317, 318, 319, 513, 0,
	514, 0, 321, 0, 515, 0, 322, 323, 324, 0,
	325, 326, 0, 0, 327, 328, 329, 330, 331, 0,
	333, 332, 0, 334, 516, 0, 335, 336, 0, 0,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	344, 346, 348, 345, 347, 349, 351, 352, 350, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 517, 360, 518, 362, 363, 0, 364, 365,
	366, 0, 0, 368, 369, 370, 0, 0, 371, 372,
	519, 0, 373, 0, 520, 374, 367, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 383, 521, 384, 522,
	385, 386, 0, 387, 0, 388, 389, 390, 391, 392,
	393, 394, 523, 395, 396, 0, 397, 398, 399, 400,
	401, 0, 403, 404, 405, 402, 406, 407, 408, 409,
	0, 410, 0, 411, 412, 413, 414, 524, 415, 0,
	416, 420, 421, 422, 423, 424, 425, 426, 0, 432,
	433, 427, 429, 430, 431, 428, 434, 435, 436, 0,
	437, 417, 418, 438, 439, 0, 440, 441, 525, 442,
	443, 0, 444, 445, 446, 447, 419, 448, 452, 453,
	449, 450, 451, 526, 0, 455, 456, 454, 0, 457,
	458, 459, 460, 461, 286, 462, 0, 463, 527, 528,
	529, 530, 0, 470, 0, 464, 465, 531, 466, 532,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 480, 0, 481, 0, 479,
	482, 483, 484, 533, 534, 535, 216, 486, 485, 536,
	0, 0, 0, 0, 487, 488, 537, 489, 490, 491,
	0, 0, 0, 222, 223, 224, 225, 226, 0, 227,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	228, 230, 229, 231, 232, 493, 494, 233, 495, 236,
	234, 235, 496, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 0, 244, 497, 498, 499, 0, 245, 246,
	500, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 268, 269, 501,
	502, 0, 270, 271, 0, 273, 272, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 503, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 506, 295, 296, 0, 297, 0, 298,
	0, 0, 0, 299, 300, 0, 301, 507, 0, 508,
	302, 0, 303, 304, 305, 306, 509, 510, 511, 361,
	0, 307, 308, 0, 309, 310, 312, 0, 0, 0,
	311, 313, 320, 0, 0, 314, 512, 316, 315, 317,
	318, 319, 513, 0, 514, 0, 321, 0, 515, 0,
	322, 323, 324, 0, 325, 326, 0, 0, 327, 328,
	329, 330, 331, 0, 333, 332, 0, 334, 516, 0,
	335, 336, 0, 0, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 344, 346, 348, 345, 347, 349,
	351, 352, 350, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 517, 360, 518, 362,
	363, 0, 364, 365, 366, 0, 0, 368, 369, 370,
	0, 0, 371, 372, 519, 0, 373, 0, 520, 374,
	367, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	383, 521, 384, 522, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 392, 393, 394, 523, 1004, 396, 0,
	397, 398, 399, 400, 401, 0, 403, 404, 405, 402,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 413,
	414, 524, 415, 0, 416, 420, 421, 422, 423, 424,
	425, 426, 0, 432, 433, 427, 429, 430, 431, 428,
	434, 435, 436, 0, 437, 417, 418, 438, 439, 0,
	440, 441, 525, 442, 443, 0, 444, 445, 446, 447,
	419, 448, 452, 453, 449, 450, 451, 526, 0, 455,
	456, 454, 0, 457, 458, 459, 460, 461, 286, 462,
	0, 463, 527, 528, 529, 530, 0, 470, 0, 464,
	465, 531, 466, 532, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 480,
	0, 481, 0, 479, 482, 483, 484, 533, 534, 535,
	216, 486, 485, 536, 0, 0, 0, 0, 487, 488,
	537, 489, 490, 491, 0, 0, 0, 222, 223, 224,
	225, 226, 0, 227, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 228, 230, 229, 231, 232, 493,
	494, 233, 495, 236, 234, 235, 496, 0, 237, 238,
	239, 240, 241, 242, 243, 0, 0, 244, 497, 498,
	499, 0, 245, 246, 500, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 501, 502, 0, 270, 271, 0, 273,
	272, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 503, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 504, 505, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 506, 295, 296,
	0, 297, 0, 298, 0, 0, 0, 299, 300, 0,
	301, 507, 0, 508, 0, 0, 303, 304, 305, 306,
	509, 510, 511, 361, 0, 307, 308, 0, 309, 310,
	312, 0, 0, 0, 311, 313, 320, 0, 0, 314,
	512, 316, 315, 317, 318, 319, 513, 0, 514, 0,
	321, 0, 515, 0, 322, 323, 324, 0, 325, 326,
	0, 0, 327, 328, 329, 330, 331, 0, 333, 332,
	0, 334, 516, 0, 335, 336, 0, 0, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 344, 346,
	348, 345, 347, 349, 351, 352, 350, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	517, 360, 518, 362, 363, 0, 364, 365, 366, 0,
	0, 368, 369, 370, 0, 0, 371, 372, 519, 0,
	373, 0, 520, 374, 367, 375, 376, 0, 378, 379,
	380, 381, 0, 382, 383, 521, 384, 522, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 0, 393, 394,
	523, 395, 396, 0, 397, 398, 399, 400, 401, 0,
	403, 404, 405, 402, 406, 407, 408, 409, 0, 410,
	0, 411, 412, 413, 414, 524, 0, 0, 416, 420,
	421, 422, 423, 424, 425, 426, 0, 432, 433, 427,
	429, 430, 431, 428, 434, 435, 436, 0, 437, 417,
	418, 438, 439, 0, 440, 441, 525, 442, 443, 0,
	444, 445, 446, 447, 419, 448, 452, 453, 449, 450,
	451, 526, 0, 455, 456, 454, 0, 457, 458, 459,
	460, 461, 286, 462, 0, 463, 527, 528, 529, 530,
	0, 470, 0, 464, 465, 531, 466, 532, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 480, 0, 481, 0, 479, 482, 483,
	484, 533, 534, 535, 0, 486, 485, 536, 0, 0,
	0, 0, 487, 488, 537, 489, 490, 491, 1481, 1482,
	0, 1514, 1515, 1516, 1524, 1525, 1526, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 1512, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 1514, 1515, 1516, 1524, 1525, 1526,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	1517, 1512, 0, 0, 0, 1503, 0, 0, 1484, 0,
	0, 0, 1500, 1530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 1531, 0,
	0, 0, 1511, 1513, 1506, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 1527, 0, 1528, 0, 0, 0, 0, 0,
	0, 1498, 1499, 0, 0, 0, 0, 0, 1521, 0,
	0, 1531, 0, 0, 0, 1511, 1513, 1519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 1527, 0, 1528, 0, 0,
	0, 0, 0, 0, 1498, 1499, 0, 0, 1529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 1518, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 1514,
	1515, 1516, 1524, 1525, 1526, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 1522, 1517, 1512, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 1530, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 1522, 0, 0,
	0, 1481, 1482, 1503, 1514, 1515, 1516, 1524, 1525, 1526,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1517, 1512, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 1530, 0, 0, 0, 0, 0, 1520,
	0, 0, 1495, 1496, 1502, 1523, 1501, 1497, 0, 1494,
	1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491, 0, 1483,
	0, 0, 0, 0, 0, 0, 2645, 0, 1503, 1506,
	1507, 1508, 1509, 0, 0, 1500, 0, 0, 0, 1489,
	0, 0, 1520, 0, 0, 1495, 1496, 1502, 1523, 1501,
	1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490,
	1491, 0, 0, 1521, 0, 0, 1531, 0, 0, 2644,
	1511, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1527, 0, 1528, 0, 1506, 1507, 1508, 1509, 0, 1498,
	1499, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 1521, 0,
	0, 1531, 0, 0, 0, 1511, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1529, 0, 0, 0,
	0, 0, 0, 0, 0, 1527, 0, 1528, 0, 0,
	0, 0, 0, 1518, 1498, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1522, 0, 0, 0, 1481, 1482, 0, 1514,
	1515, 1516, 1524, 1525, 1526, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1517, 1512, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 1530, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 1514, 1515, 1516, 1524, 1525, 1526, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 1522, 1517, 1512,
	0, 0, 0, 1503, 0, 0, 1484, 0, 0, 0,
	1500, 1530, 0, 0, 0, 0, 0, 1520, 0, 0,
	1495, 1496, 1502, 1523, 1501, 1497, 0, 1494, 1492, 1493,
	1485, 1486, 1487, 1488, 1490, 1491, 0, 1483, 0, 0,
	0, 0, 0, 0, 2125, 0, 1503, 0, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 1520, 0, 0, 1495, 1496, 1502, 1523, 1501,
	1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490,
	1491, 0, 0, 1521, 0, 3600, 1531, 0, 0, 0,
	1511, 1513, 1506, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	1527, 0, 1528, 0, 0, 0, 0, 0, 0, 1498,
	1499, 0, 0, 0, 0, 0, 1521, 0, 0, 1531,
	0, 0, 0, 1511, 1513, 1519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 1527, 0, 1528, 0, 0, 0, 0,
	0, 0, 1498, 1499, 0, 0, 1529, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 1518, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 0, 1510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 1514, 1515, 1516,
	1524, 1525, 1526, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 1522, 1517, 1512, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 1530, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 1522, 0, 0, 0, 1481,
	1482, 1503, 1514, 1515, 1516, 1524, 1525, 1526, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1517, 1512,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 1530, 0, 0, 0, 0, 0, 1520, 0, 0,
	1495, 1496, 1502, 1523, 1501, 1497, 0, 1494, 1492, 1493,
	1485, 1486, 1487, 1488, 1490, 1491, 0, 1483, 0, 0,
	3596, 0, 0, 0, 0, 0, 1503, 1506, 1507, 1508,
	1509, 0, 0, 1500, 0, 0, 0, 1489, 0, 0,
	1520, 0, 0, 1495, 1496, 1502, 1523, 1501, 1497, 0,
	1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491, 0,
	0, 1521, 0, 3515, 1531, 0, 0, 0, 1511, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 0,
	1528, 0, 1506, 1507, 1508, 1509, 0, 1498, 1499, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 1521, 0, 0, 1531,
	0, 0, 0, 1511, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1529, 0, 0, 0, 0, 0,
	0, 0, 0, 1527, 0, 1528, 0, 0, 0, 0,
	0, 1518, 1498, 1499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 1529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1518, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 0, 1481, 1482, 0, 1514, 1515, 1516,
	1524, 1525, 1526, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1517, 1512, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 1530, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	1514, 1515, 1516, 1524, 1525, 1526, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 1522, 1517, 1512, 0, 0,
	0, 1503, 0, 0, 1484, 0, 0, 0, 1500, 1530,
	0, 0, 0, 0, 0, 1520, 0, 0, 1495, 1496,
	1502, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1491, 0, 1483, 0, 0, 3514, 0,
	0, 0, 0, 0, 1503, 0, 0, 0, 0, 0,
	0, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	1520, 0, 0, 1495, 1496, 1502, 1523, 1501, 1497, 0,
	1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491, 0,
	0, 1521, 0, 3399, 1531, 0, 0, 0, 1511, 1513,
	1506, 1507, 1508, 1509, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 1527, 0,
	1528, 0, 0, 0, 0, 0, 0, 1498, 1499, 0,
	0, 0, 0, 0, 1521, 0, 0, 1531, 0, 0,
	0, 1511, 1513, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 1527, 0, 1528, 0, 0, 0, 0, 0, 0,
	1498, 1499, 0, 0, 1529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 1518, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 1514, 1515, 1516, 1524, 1525,
	1526, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	1522, 1517, 1512, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 1530, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 1522, 0, 0, 0, 1481, 1482, 1503,
	1514, 1515, 1516, 1524, 1525, 1526, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1517, 1512, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 1530,
	0, 0, 0, 0, 0, 1520, 0, 0, 1495, 1496,
	1502, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1491, 0, 1483, 0, 0, 3296, 0,
	0, 0, 0, 0, 1503, 1506, 1507, 1508, 1509, 0,
	0, 1500, 0, 0, 0, 1489, 0, 0, 1520, 0,
	0, 1495, 1496, 1502, 1523, 1501, 1497, 0, 1494, 1492,
	1493, 1485, 1486, 1487, 1488, 1490, 1491, 0, 0, 1521,
	0, 3249, 1531, 0, 0, 0, 1511, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1527, 0, 1528, 0,
	1506, 1507, 1508, 1509, 0, 1498, 1499, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 1521, 0, 0, 1531, 0, 0,
	0, 1511, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 1527, 0, 1528, 0, 0, 0, 0, 0, 1518,
	1498, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 1529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1522, 0,
	0, 0, 1481, 1482, 0, 1514, 1515, 1516, 1524, 1525,
	1526, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1517, 1512, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 1530, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 1514, 1515,
	1516, 1524, 1525, 1526, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 1522, 1517, 1512, 0, 0, 0, 1503,
	0, 0, 1484, 0, 0, 0, 1500, 1530, 0, 0,
	0, 0, 0, 1520, 0, 0, 1495, 1496, 1502, 1523,
	1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1491, 0, 1483, 0, 0, 3248, 0, 0, 0,
	0, 0, 1503, 0, 0, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 1520, 0,
	0, 1495, 1496, 1502, 1523, 1501, 1497, 0, 1494, 1492,
	1493, 1485, 1486, 1487, 1488, 1490, 1491, 0, 0, 1521,
	0, 3247, 1531, 0, 0, 0, 1511, 1513, 1506, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 1527, 0, 1528, 0,
	0, 0, 0, 0, 0, 1498, 1499, 0, 0, 0,
	0, 0, 1521, 0, 0, 1531, 0, 0, 0, 1511,
	1513, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 1527,
	0, 1528, 0, 0, 0, 0, 0, 0, 1498, 1499,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 1518,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1518, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 1514, 1515, 1516, 1524, 1525, 1526, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 1522, 1517,
	1512, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 1530, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 1522, 0, 0, 0, 1481, 1482, 1503, 1514, 1515,
	1516, 1524, 1525, 1526, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1517, 1512, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 1530, 0, 0,
	0, 0, 0, 1520, 0, 0, 1495, 1496, 1502, 1523,
	1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1491, 0, 1483, 0, 0, 3005, 0, 0, 0,
	0, 0, 1503, 1506, 1507, 1508, 1509, 0, 0, 1500,
	0, 0, 0, 1489, 0, 0, 1520, 0, 0, 1495,
	1496, 1502, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485,
	1486, 1487, 1488, 1490, 1491, 0, 0, 1521, 0, 2642,
	1531, 0, 0, 0, 1511, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1527, 0, 1528, 0, 1506, 1507,
	1508, 1509, 0, 1498, 1499, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 1521, 0, 0, 1531, 0, 0, 0, 1511,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1529, 0, 0, 0, 0, 0, 0, 0, 0, 1527,
	0, 1528, 0, 0, 0, 0, 0, 1518, 1498, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 1529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1522, 0, 0, 0,
	1481, 1482, 0, 1514, 1515, 1516, 1524, 1525, 1526, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1517,
	1512, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 1530, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 1514, 1515, 1516, 1524,
	1525, 1526, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 1522, 1517, 1512, 0, 0, 0, 1503, 0, 0,
	1484, 0, 0, 0, 1500, 1530, 0, 0, 0, 0,
	0, 1520, 0, 0, 1495, 1496, 1502, 1523, 1501, 1497,
	0, 1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491,
	0, 1483, 0, 0, 2641, 0, 0, 0, 0, 0,
	1503, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 1507, 1508, 1509, 0, 0, 0,
	0, 0, 0, 1489, 0, 0, 1520, 0, 0, 1495,
	1496, 1502, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485,
	1486, 1487, 1488, 1490, 1491, 0, 0, 1521, 0, 2640,
	1531, 0, 0, 0, 1511, 1513, 1506, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 1527, 0, 1528, 0, 0, 0,
	0, 0, 0, 1498, 1499, 0, 0, 0, 0, 0,
	1521, 0, 0, 1531, 0, 0, 0, 1511, 1513, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1527, 0, 1528,
	0, 0, 0, 0, 0, 0, 1498, 1499, 0, 0,
	1529, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 1518, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1518, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 1514, 1515, 1516, 1524, 1525, 1526, 0, 0,
	0, 0, 0, 0, 0, 1510, 1522, 0, 1517, 1512,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 1530, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 1522,
	0, 0, 0, 0, 1481, 1482, 1503, 1514, 1515, 1516,
	1524, 1525, 1526, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 1512, 0, 0, 0, 0, 2568,
	0, 1484, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 1520, 0, 0, 1495, 1496, 1502, 1523, 1501, 1497,
	0, 1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491,
	0, 0, 1483, 0, 2639, 0, 0, 0, 0, 0,
	0, 1503, 1506, 1507, 1508, 1509, 0, 0, 1500, 0,
	0, 0, 1489, 3710, 1520, 0, 0, 1495, 1496, 1502,
	1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487,
	1488, 1490, 1491, 0, 0, 2597, 1521, 0, 2569, 1531,
	0, 0, 0, 1511, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1527, 0, 1528, 0, 1506, 1507, 1508,
	1509, 0, 1498, 1499, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 1521, 0, 0, 1531, 0, 0, 0, 1511, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1529,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 0,
	1528, 0, 0, 0, 0, 0, 1518, 1498, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 3709, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 1529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 1518, 1481, 1482, 0, 1514, 1515, 1516, 1524, 1525,
	1526, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 1512, 0, 0, 1522, 0, 0, 0, 1484,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 1505, 0, 0, 2235, 0, 1503,
	0, 0, 0, 0, 1481, 1482, 1500, 1514, 1515, 1516,
	1524, 1525, 1526, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 1517, 1512, 0, 0, 0, 2234, 0,
	0, 1484, 0, 0, 0, 0, 1530, 0, 0, 0,
	1520, 0, 0, 1495, 1496, 1502, 1523, 1501, 1497, 0,
	1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491, 0,
	0, 0, 1483, 0, 0, 1506, 1507, 1508, 1509, 0,
	0, 1503, 0, 0, 0, 1489, 0, 2689, 1500, 0,
	2688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1531, 0, 0, 1520, 1511, 1513, 1495, 1496,
	1502, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1491, 0, 0, 1527, 0, 1528, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1506, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 1531, 0, 0, 0, 1511, 1513,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 1518,
	1528, 0, 0, 0, 0, 0, 0, 1498, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1529, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 1481, 1482, 0, 1514, 1515, 1516, 1524, 1525,
	1526, 0, 0, 0, 0, 0, 0, 0, 1522, 0,
	0, 1517, 1512, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 1505, 0, 0, 0, 0, 1503,
	0, 0, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 1495, 1496, 1502, 1523,
	1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1531, 0, 0, 1520, 1511, 1513, 1495, 1496,
	1502, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1491, 0, 0, 1527, 0, 1528, 0,
	0, 0, 0, 0, 0, 1498, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 1514,
	1515, 1516, 1524, 1525, 1526, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 1517, 1512, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 1530, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 1522, 0,
	0, 1481, 1482, 1503, 1514, 1515, 1516, 1524, 1525, 1526,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1517, 1512, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 1530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 1506,
	1507, 1508, 1509, 0, 0, 1500, 0, 0, 0, 1489,
	0, 0, 0, 1520, 0, 0, 1495, 1496, 1502, 1523,
	1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1491, 0, 1521, 0, 0, 1531, 0, 0, 0,
	1511, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1527, 0, 1528, 0, 1506, 1507, 1508, 1509, 0, 1498,
	1499, 0, 0, 0, 1489, 0, 0, 0, 0, 2695,
	0, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 1521, 0,
	0, 1531, 0, 0, 0, 1511, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1529, 0, 0, 0,
	0, 0, 0, 0, 0, 1527, 0, 1528, 0, 0,
	0, 0, 0, 1518, 1498, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1518, 1481,
	1482, 0, 1514, 1515, 1516, 1524, 1525, 1526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1517, 1512,
	0, 0, 1522, 2690, 0, 0, 1484, 0, 0, 0,
	0, 1530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2984, 0, 0, 0, 1483, 0, 0,
	0, 1505, 0, 0, 0, 0, 1503, 0, 0, 0,
	0, 1481, 1482, 1500, 1514, 1515, 1516, 1524, 1525, 1526,
	0, 0, 0, 0, 0, 0, 0, 1522, 0, 0,
	1517, 1512, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 1530, 0, 0, 0, 1520, 0, 0,
	1495, 1496, 1502, 1523, 1501, 1497, 0, 1494, 1492, 1493,
	1485, 1486, 1487, 1488, 1490, 1491, 0, 0, 0, 1483,
	0, 0, 1506, 1507, 1508, 1509, 0, 0, 1503, 0,
	0, 0, 1489, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1521, 0, 0, 1531,
	0, 0, 1520, 1511, 1513, 1495, 1496, 1502, 1523, 1501,
	1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490,
	1491, 0, 0, 1527, 0, 1528, 0, 0, 0, 0,
	0, 0, 1498, 1499, 1506, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 1531, 0, 0, 0, 1511, 1513, 0, 0, 1529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1527, 1518, 1528, 0, 0,
	0, 0, 0, 0, 1498, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1529, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 1481,
	1482, 0, 1514, 1515, 1516, 1524, 1525, 1526, 0, 0,
	0, 0, 0, 0, 0, 1522, 2657, 0, 1517, 1512,
	0, 0, 0, 2643, 0, 0, 1484, 0, 0, 0,
	0, 1530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 1505, 0, 0, 1481, 1482, 1503, 1514, 1515, 1516,
	1524, 1525, 1526, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 1512, 0, 0, 1522, 0, 0,
	0, 1484, 0, 0, 0, 0, 1530, 0, 0, 0,
	1520, 0, 0, 1495, 1496, 1502, 1523, 1501, 1497, 0,
	1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 1506, 1507, 1508, 1509, 0, 0, 1500, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1521, 0, 0, 1531,
	0, 0, 1520, 1511, 1513, 1495, 1496, 1502, 1523, 1501,
	1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490,
	1491, 0, 0, 1527, 0, 1528, 0, 1506, 1507, 1508,
	1509, 0, 1498, 1499, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 1521, 0, 0, 1531, 0, 0, 0, 1511, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1529,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 0,
	1528, 0, 0, 0, 0, 0, 1518, 1498, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 1529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 1518, 1481, 1482, 0, 1514, 1515, 1516, 1524, 1525,
	1526, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 1512, 0, 0, 1522, 0, 0, 0, 1484,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 1505, 0, 0, 0, 0, 1503,
	0, 0, 0, 0, 1481, 1482, 1500, 1514, 1515, 1516,
	1524, 1525, 1526, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 1530, 0, 0, 0,
	1520, 0, 0, 1495, 1496, 1502, 1523, 1501, 1497, 0,
	1494, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1491, 0,
	0, 0, 1483, 0, 0, 1506, 1507, 1508, 1509, 0,
	0, 1503, 0, 0, 0, 1489, 0, 0, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1531, 0, 0, 1520, 1511, 1513, 1495, 1496,
	1502, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1491, 0, 0, 1527, 0, 1528, 0,
	0, 0, 0, 0, 0, 1498, 1499, 1506, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 1531, 0, 0, 0, 1511, 1513,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 0,
	1528, 0, 0, 0, 0, 0, 0, 1498, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1700,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1529, 0, 0, 0, 0, 1717,
	1694, 1701, 1505, 1684, 1727, 1726, 0, 0, 0, 1686,
	1685, 0, 0, 0, 0, 0, 0, 1737, 1738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	1728, 0, 1724, 1723, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 1722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 0, 0, 0, 1721, 1719, 1720, 0,
	0, 0, 0, 1520, 0, 0, 1495, 1496, 1502, 1523,
	1501, 1497, 0, 1494, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1491, 0, 0, 0, 0, 0, 0, 0, 1696,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1710,
	1699, 1712, 1714, 1715, 1716, 1711, 0, 1704, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1733, 1734, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 1495, 1496,
	1502, 1523, 1501, 1497, 0, 1494, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1491, 1688, 0, 0, 0, 0, 0,
	0, 0, 0, 753, 0, 789, 0, 0, 0, 0,
	0, 1725, 0, 0, 0, 1697, 0, 1698, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 772, 758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1718,
	0, 0, 0, 1707, 1705, 1706, 1709, 1708, 759, 0,
	0, 0, 0, 762, 0, 0, 0, 795, 0, 0,
	0, 0, 0, 0, 769, 770, 0, 0, 0, 0,
	782, 0, 0, 0, 0, 0, 0, 0, 1689, 1690,
	1692, 1693, 0, 0, 790, 764, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1713, 1691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1736, 0, 0, 0,
	0, 0, 0, 788, 0, 0, 0, 0, 0, 0,
	0, 0, 1687, 0, 0, 1729, 1730, 1731, 1732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 1695, 0, 0, 0,
	0, 1702, 1735, 0, 0, 0, 0, 0, 766, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	774, 773, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 794, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 791, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 786, 787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 784, 0, 0,
	0, 0, 0, 0, 780, 0, 0, 777, 0, 0,
	0, 0, 0, 778, 0, 0, 0, 0, 0, 0,
	755, 0, 792, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 756, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 779, 0,
	0, 0, 776, 0, 0, 0, 0, 0, 0, 0,
	0, 793, 0, 0, 0, 0, 0, 0, 0, 781,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	783, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 785,
}
var sqlPact = [...]int{

	5958, -1000, -1000, -1000, -1000, -1000, -1000, 214, 213, 210,
	209, 206, 203, 201, 199, -1000, -1000, -1000, -1000, -1000,
	194, -1000, -1000, 192, -1000, 191, 190, 178, 176, -1000,
	172, 171, 168, -1000, -1000, -1000, -1000, 167, 165, 161,
	60568, 1926, 73702, 63618, 1717, 54872, 73262, 54432, 72822, 72382,
	160, -1000, 71942, 159, 158, 157, -1000, 71502, -1000, -1000,
	156, 1781, 45604, 155, 144, 143, 2119, 139, -1000, 138,
	-1000, 8400, 1342, -1000, 136, -1000, 5708, 5823, 62744, 2403,
	133, 130, 45163, 2317, 2328, -1000, -1000, 1709, -1000, -1000,
	120, 118, 115, 113, 110, 109, 108, 101, 100, -1000,
	99, 98, 97, 96, 93, 92, 88, -1000, 87, 85,
	82, 81, 78, 77, 76, 75, 73, 72, 71, 68,
	-1000, 84571, 1706, 1530, 1524, 1493, 1479, 1473, 918, 64,
	63, 61, 60, 59, 56, 49, -1000, 47, 42, 41,
	35, 34, -1000, 33, 32, 145, 30, 24, 22, 21,
	20, 2463, -1000, 1434, 1143, 21891, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 78042,
	74136, 19, -199, 17, -1000, 2689, 801, 37671, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 466, -1000,
	-1000, -1000, 278, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1651, 698,
	-1000, -1000, -1000, 71068, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1925, -66, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 697, -1000, 1921, 255, 1797, -1000, -1000, -1000, -1000,
	-1000, 74136, -1000, -1000, 3021, 3020, 1795, 695, 70634, -1000,
	1392, -1000, 862, 24681, -1000, 1064, -1000, 24681, 274, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 53992, 16279, 53552,
	53112, 70194, 15829, 60134, 49172, -1000, -1000, -1000, 40329, 1214,
	-1000, -1000, -1000, -1000, -1000, -5, 50054, 74136, -1000, 270,
	-1000, -1000, -1000, -1000, -1000, -1000, 31295, 1000, 30820, 794,
	30345, 768, -1000, -1000, -1000, 3019, 3017, 1063, 3015, 2628,
	77608, 1608, 3011, 1522, 1167, 980, 3009, 3006, 3005, 3004,
	3000, 2999, 1308, 69754, 2434, 69314, 1474, 48722, 60568, 60568,
	2170, 68874, 1282, 1273, -1000, -1000, -1000, -1000, 2503, 2320,
	2319, 42533, -1000, 2998, 2996, 2995, 2994, 2993, 77174, 1583,
	2992, 2061, 2990, 2987, 2986, 2985, 2981, 2980, 2979, 2977,
	2975, -1000, 59694, 59254, 58814, 58374, 68434, 48272, -1000, -1000,
	-1000, 39427, 9496, 8519, 67994, 40777, 60568, 60568, -1000, -1000,
	31758, 94, -1000, -1000, -1000, 40329, 2390, -1000, 31758, 94,
	-1000, 74136, -1000, 2432, 1632, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1831, 1447, 2851, 47822, 1800,
	1274, 2705, 2502, 2500, 1331, 2137, 2497, 2496, 2485, 2479,
	2472, 1491, 2094, 239, 21416, 1384, 1337, 2469, 2464, 2882,
	1742, 1734, 52672, 2974, 2973, 2686, 2462, 2447, 2385, -1000,
	-1000, -1000, -1000, 1304, -1000, -1000, 55740, -1000, -1000, 1135,
	-1000, -1000, 1135, -1000, -1000, -1000, -1000, -1000, 1212, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1434, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1863, -1000, 1772, -1000,
	-1000, 2063, 2661, 2661, 2661, 2730, 442, 440, -1000, 145,
	-1000, -1000, 83753, -1000, -1000, 31758, 31758, 31758, 31758, 31758,
	1665, -1000, 694, -1000, -1000, 736, -1000, 693, 554, -1000,
	-1000, -1000, -1000, -1000, -1000, 690, 2886, -1000, -1000, -1000,
	-1000, -1000, 2864, -1000, 18578, -1000, -1000, -1000, 414, 689,
	31758, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 884, -1000, 268, 889, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 604, 1589, 603, 603, 603, -1000, -1000,
	976, -1000, -1000, -1000, 328, 600, 271, 599, -1000, -1000,
	-1000, -1000, 2431, 688, 687, -1000, 686, 685, 683, 682,
	677, -1000, -1000, -1000, 676, 675, 674, 673, 672, 669,
	667, 666, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	974, -1000, 661, 660, 659, 658, 657, 656, 653, 651,
	650, -1000, -1000, -6, 74136, -1000, 466, -6, -1000, -1000,
	648, -1000, 25144, 25144, 25144, -1000, -1000, 1920, 31758, -1000,
	2587, -1000, 3, 3, 830, 38547, -1000, 36791, 830, 492,
	445, 42093, -1000, 2374, -1000, -1000, 642, 250, -1000, -1000,
	2370, 74136, 16727, 74136, 60568, 60568, 60568, 2573, 31758, -1000,
	-1000, 47372, 74136, 61002, 2801, 84315, 47372, 74136, 2425, -1000,
	-1000, -1000, 74136, -1000, 31758, -1000, 2800, 1269, 50492, 2751,
	-17, -1000, -1000, -1000, -1000, -1000, -1000, 2039, 2057, 1056,
	1947, 1236, -1000, 24681, 2616, -1000, -1000, -1000, 238, 16727,
	-1000, 2124, 2557, 1128, -1000, 1944, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1539, 2555, -1000, 3085, 2554, 1538,
	-1000, -1000, 1779, -1000, -1000, 2644, -1000, -1000, 1817, 2552,
	4, -1000, -1000, 915, 2551, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 826, -1000, 49620, 40329, 50054, -8,
	-1000, -1000, -29, -1000, 15379, 83753, -1000, -1000, -1000, 83753,
	805, -1000, -1000, 2550, -1000, 83753, 804, -1000, -1000, 2547,
	-1000, -1000, -1000, 2972, -1000, 2971, 1991, 2970, 2968, 2967,
	-1000, 1478, 1572, 2966, -1000, 2964, -1000, -1000, -1000, -1000,
	-1000, -1000, 57934, 1916, -1000, -1000, 57054, -1000, 1987, -1000,
	-1000, 57494, 979, -1000, 915, 1985, -1000, 881, -1000, 2963,
	67554, 2164, 915, 1984, -1000, -1000, -1000, -1000, -1000, 43409,
	-1000, 43409, -1000, 43409, -1000, 1389, -1000, 76740, 3, 3,
	2864, -1000, -1000, -1000, -1000, -1000, 2546, 2962, 2961, 2960,
	-1000, 74136, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 186, 2544, -1000, -1000, 186, 2543, -1000, 186, 2542,
	-1000, 184, 2541, -1000, -1000, 1873, 2540, -1000, -34, 2538,
	-1000, -1000, -23, -1000, -1000, -1000, 801, -1000, 38987, -1000,
	38987, 67114, 49620, 897, 662, 44723, 83753, -1000, -100, -1000,
	40329, 83753, -1000, 49620, 57054, -1000, 66674, 56620, -1000, -1000,
	1293, 2071, -1000, -1000, -1000, 897, 49620, 49620, 49620, -1000,
	66234, -1000, -1000, 1761, 1470, 2646, 1759, 60568, -1000, 1653,
	-1000, -1000, -1000, 2679, 2424, -1000, 46934, 62304, -1000, 61870,
	-1000, 61436, -1000, 60568, -1000, 60568, -1000, 2959, 2958, 2957,
	-1000, 2955, 2667, 83753, 2662, -1000, 2548, 1516, 1502, 74136,
	-1000, -1000, 74136, -1000, 74136, -1000, -1000, -1000, -1000, -1000,
	2035, -1000, -1000, -1000, -1000, 60568, -1000, -1000, -1000, -1000,
	-1000, -1000, 2419, -1000, 1495, -1000, 1635, -1000, 1291, -1000,
	-1000, 187, -1000, -1000, -17, -1000, 76306, -1000, 2063, -1000,
	74136, -1000, 2067, 2399, 2416, 1324, 1931, 2118, -1000, 29870,
	2102, 34073, 1940, 145, -1000, -1000, 145, 145, 24218, -1000,
	-1000, 84315, 84315, 16727, 1231, 31758, 31758, 31758, 31758, 31758,
	31758, 31758, 31758, 31758, 31758, 31758, 31758, 31758, 31758, 31758,
	31758, 31758, 31758, 31758, 31758, 31758, 31758, 31758, 31758, 31758,
	31758, 31758, 31758, 31758, 31758, 31758, 31758, 31758, 31758, 31758,
	1698, 31758, 1197, 31758, 31758, 31758, 31758, 2042, -1000, -1000,
	1666, 487, 1749, -1000, 2850, 2850, 2850, 84093, 84093, 590,
	2953, 736, -1000, 31758, -1000, 94, 31758, 17177, -1000, -1000,
	-1000, 440, 7817, 1905, -1000, 439, 17652, -1000, -1000, -1000,
	18578, 554, 29395, 31758, 963, 83753, 1338, 2868, 14931, 2445,
	2233, -1000, 2875, -1000, -1000, 2868, -1000, -1000, -1000, -1000,
	2868, 1230, 1224, 2868, -1000, 2868, 2868, 637, 718, 717,
	20941, 20466, 19991, 19516, 715, 31758, 31758, 31758, 31758, 31758,
	31758, 31758, 31758, -1000, 28932, 28457, 27982, 34536, 27507, 31758,
	19041, 27032, 26557, 74136, -6, 2796, 31758, 196, -1000, 82453,
	-1000, 196, 196, 636, -33, 83753, 2105, 2105, 38109, 1968,
	1699, 1699, 1699, -1000, 830, 11321, 830, 65362, 1685, 830,
	830, 235, 302, 438, 36353, 2587, 65362, 724, 634, 16,
	14, 13, -1000, -1000, 9, 6, -1000, -1000, 60568, 622,
	17177, 16727, 1341, -36, 234, 2111, 2109, 2106, -1000, 2103,
	1467, -38, 1195, -41, -1000, 8351, -43, -1000, 1155, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 969, 606, 605, 576, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 604, 1589, 603, 603, 603, -1000, -1000, -1000, 328,
	600, 271, 599, -1000, -1000, -1000, -1000, -1000, -1000, 2353,
	-29, 61002, 857, -44, 1077, -17, -1000, -1000, -1000, 50492,
	1135, -1000, 1420, -1000, -1000, -1000, -1000, -1000, -1000, 1311,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 884, -1000, -1000,
	-1000, -1000, -1000, -1000, 2859, 2856, -7, -1000, -1000, 16727,
	-1000, -19, 1597, -1000, 52232, 2104, 2670, 2640, 1377, -1000,
	1347, 2729, 55740, 2755, 2787, 954, -1000, 2348, -1000, -1000,
	860, 1471, 1194, 55740, 3085, -1000, 84315, -1000, 2199, 2728,
	1204, 1287, 1204, 1204, 1261, -1000, 55740, 1188, -1000, 1187,
	-1000, -24, 2754, 2761, 901, -1000, 2342, 1186, -1000, -1000,
	60568, 16727, -1000, 1339, -1000, 49620, 2141, -1000, -45, 826,
	-8, 50054, 74136, 228, -1000, 31758, 94, 31758, 94, -1000,
	-1000, 2537, -1000, -1000, -1000, 2952, 1554, 2055, -1000, -1000,
	-1000, 597, 1983, 2331, 74136, 2114, -10, 60568, -1000, 2531,
	3085, 1982, -1000, -1000, 56180, -1000, 2528, 598, 2947, -1000,
	1911, 1979, -1000, -1000, -1000, 75872, 1146, 2523, 1016, 503,
	2792, -1000, 503, 43847, -1000, 74136, -1000, -1000, 74136, -1000,
	-1000, -1000, 2946, -1000, 60568, -1000, -1000, 60568, -1000, 60568,
	-1000, 60568, -1000, 60568, 60568, -1000, 74136, 49620, 49620, 7543,
	51364, -46, -54, 436, -1000, 65800, 74136, 1013, 51798, 74136,
	2606, 897, 40329, -100, 897, 897, 826, -1000, 826, -1000,
	60568, 2413, -1000, 897, 897, 897, -1000, -1000, -1000, -1000,
	2945, 2944, -1000, -1000, -1000, 914, 60568, 74136, 60568, -1000,
	-1000, 74136, -1000, 74136, -1000, 914, 74136, 914, 74136, 914,
	74136, -1000, -1000, -1000, -1000, -1000, -1000, 94, 31758, 1400,
	-1000, 2408, -1000, 2400, -1000, 44, -1000, -1000, -1000, -1000,
	1897, 60568, 60568, 60568, 60568, 74136, 60568, -1000, 55740, -1000,
	2067, 2399, -1000, -1000, -1000, -1000, -1000, -1000, 1306, 1820,
	-1000, 2081, -1000, 1351, -1000, -1000, -1000, 83753, 34999, -1000,
	-1000, 83753, 1475, -1000, 33610, 33147, -1000, -1000, 1485, 60568,
	2117, -1000, 2117, -9, -1000, 82113, 2079, 60568, -1000, -1000,
	-1000, -1000, -1000, 856, 555, 555, 1083, 1083, 1083, 1083,
	2791, 1184, 2093, 619, 6463, 6463, 1142, 1142, 1142, 1142,
	1142, 6463, 371, 454, 454, 371, 371, 371, 371, 371,
	454, 454, 454, 6463, 6463, 6463, 84093, 84021, 7481, 31758,
	31758, 1183, 1663, 487, 7068, 31758, 437, 437, 437, 437,
	-1000, 2359, -1000, -1000, -1000, -1000, 2326, 594, 34536, 34536,
	-1000, -1000, -1000, -1000, 18115, 31758, -1000, -1000, -1000, -1000,
	26082, -1000, -1000, 81752, -247, 435, -170, 29, -1000, 31758,
	31758, 31758, 433, -1000, 225, 31758, 74136, -1000, 79255, 712,
	-51, -1000, -63, 1289, -1000, 31758, -1000, -1000, 1179, -1000,
	1164, 1162, 1158, -1000, 592, 420, -1000, 224, -1000, 1669,
	588, 587, 417, -64, 416, 849, 834, 415, 410, 404,
	31758, -1000, -1000, -1000, -1000, -1000, 81709, -1000, -1000, 81414,
	-1000, -1000, 81349, -1000, -1000, 81054, -1000, -1000, -1000, 83688,
	78960, 78917, 10801, 5463, 10323, 10236, -69, 402, -1000, 2323,
	-170, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 401,
	-1000, 396, -1000, 83420, -170, 391, 4345, -1000, 34536, 34536,
	34536, -1000, 387, -1000, 82381, -1000, 83348, 25619, 25619, 25619,
	386, 83080, 31758, -170, -72, -1000, -78, -1000, -1000, 586,
	-79, 949, 25144, 37231, 16727, -1000, 949, 949, 31758, -1000,
	31758, 2096, -1000, -1000, -1000, 2092, 1923, 2105, 38109, -1000,
	-1000, -1000, -1000, 65362, -1000, 2864, 2553, -1000, 65362, -1000,
	-1000, 74136, 466, -1000, 65362, 65362, 16727, 830, -1000, 830,
	65362, 691, -1000, -1000, -1000, -1000, -1000, 385, 41215, 29,
	197, 897, -1000, 16727, 2217, 2217, 2217, 2217, -1000, -1000,
	74136, 2823, -1000, 1609, -1000, 84315, -1000, 734, 982, 582,
	-1000, 2868, 2868, -1000, 2868, 74136, 148, 24681, -1000, 1135,
	-1000, -1000, 1405, -1000, 1561, -1000, 1220, -1000, -1000, -1000,
	-1000, 24681, -1000, 2044, 74136, 74136, 60568, -1000, -1000, 1978,
	75438, 1977, 84315, 74136, -1000, -1000, 581, 575, 2076, 2073,
	74136, 74136, 2072, 75004, 74570, 74136, 1643, 31758, 1870, 1684,
	94, 94, -1000, -1000, 94, 574, 1260, 60568, 60568, 60568,
	1534, -1000, -1000, -1000, -1000, -1000, 55306, -1000, -1000, 2873,
	2872, -1000, 1204, -1000, -1000, -1000, 1204, 3085, 1528, 60568,
	74136, 1601, 94, 94, -1000, -1000, 94, 567, 16727, 1564,
	-1000, 1339, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 46500,
	1024, 915, 897, 2310, -1000, 2141, -1000, -1000, 14483, 83753,
	-1000, 83753, -1000, 74136, -1000, 978, 74136, 51798, 887, 2520,
	42971, -29, 897, 49620, 60568, -10, 74136, -1000, 3085, 2519,
	466, 1971, -1000, -1000, 49620, 2941, 562, 2938, -1000, 60568,
	2517, 1909, 1970, 2509, 779, 74136, 949, 38109, 1551, -1000,
	41655, 992, 74136, 1496, 127, -1000, -1000, -1000, 28, 74136,
	-1000, 2937, -1000, -1000, 186, 186, 186, -1000, 184, 1873,
	-1000, -34, -1000, -1000, 7543, 7543, 897, -12, 557, -1000,
	817, 808, 39881, 49620, -80, -1000, -1000, -1000, -1000, -1000,
	60568, 74136, 668, 2163, 74136, -81, -1000, 185, 556, -1000,
	-1000, 897, 2298, -1000, -1000, 929, -1000, 1276, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1, -29, -29,
	-1000, 914, -1000, 914, -1000, 914, -1000, 83753, -1000, 1399,
	1398, 74136, -1000, 16727, 74136, 60568, 16727, 60568, 2398, 2397,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1034, -1000,
	1475, 1816, -1000, 554, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2024, -1000, -15, 24218, 1950, -1000, -1000,
	60568, -1, 31758, 31758, 6971, 6811, 31758, 34536, 34536, -1000,
	31758, 6117, -1000, -1000, -1000, -1000, -1000, 2293, 553, 31758,
	84315, 4499, 3952, -1000, 377, 9706, 371, -1000, 31758, -1000,
	374, 23755, -1000, 82721, -18, -86, -1000, 11781, -170, -87,
	-1000, -1000, 730, -1000, 2558, -1000, 31758, 83015, 2004, 1595,
	1548, 1413, 2868, 2883, 14035, -1000, 44285, 953, 1711, -1000,
	-1000, 2868, 852, -1000, -1000, -1000, 852, -1000, 81011, -1000,
	-1000, -1000, -1000, 84315, 84315, 31758, 31758, -1000, 31758, 31758,
	31758, -1000, -1000, 31758, -1000, -1000, 2291, 31758, -1000, 84315,
	84315, 34536, 34536, 34536, 34536, 34536, 34536, 34536, 34536, 34536,
	34536, 34536, 34536, 34536, 34536, 34536, 34536, 34536, 34536, 34536,
	2053, 34536, 2845, 2845, 2845, -1000, 2395, 2291, 31758, 31758,
	84315, 357, 356, 355, -1000, 31758, -170, -1000, -1000, 7543,
	-1000, 2212, -1000, 31758, -1000, -200, -1000, 2587, -1000, -1000,
	2212, 2212, -88, 83753, 38109, 38109, -1000, 547, 31758, 2088,
	-1000, -1000, 710, -241, -1000, 807, -1000, -1000, -1000, -1000,
	-1000, 466, -1000, -1000, -1000, 149, 65362, 65362, 708, -1000,
	-89, -1000, -1000, -95, -1000, 2786, 353, 16727, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -29, 1794, 2881, -1000,
	2869, 729, 705, 2868, 351, 349, 334, -29, 74136, -1000,
	-17, -1000, -1000, -1000, 31758, -1000, -1000, 2648, 1154, 1139,
	-1000, 2511, -1000, 1967, -1000, 1001, -1000, 1417, -1000, 31758,
	31758, 546, 539, 1682, 2936, 1012, 2508, 1873, 2507, 1873,
	-1000, -1000, 854, -1000, 83753, 537, 536, -1000, -19, 1489,
	928, -1000, -1000, 31758, 31758, 64928, -1000, 376, 2644, -2,
	-1000, 1138, -1000, -1000, -1000, -1000, 3085, 1134, -1000, -1000,
	-1000, 927, -1000, -1000, 31758, -1000, -24, 1133, -1000, -1000,
	-1000, 46052, -1000, -1000, 49620, 897, -1000, 2934, 2933, 2931,
	332, -98, -26, 84315, 2776, 1872, 530, 60568, 839, -1000,
	2864, -1000, -1000, -1000, -1000, 60568, 2775, 2506, 915, -1000,
	2927, -1000, 1009, 16727, 60568, 2505, 2049, 779, 50930, -1000,
	915, 1711, -56, -1000, 1496, 23280, 2642, -103, -1000, -1000,
	-1000, 949, 43847, 38109, 31758, 2926, -105, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 64494, 64494, 49620, 49620,
	49620, 897, 74136, 74136, 51798, 2924, 535, 74136, 74136, 534,
	-1000, 74136, 74136, 2922, 49620, -1000, 94, -1000, 1773, 60568,
	13587, -1000, -1000, -1000, -1000, -1000, 914, -1000, -1000, 1625,
	1938, 1625, 1508, 1500, -1000, 1802, -1000, -1000, -1000, -1000,
	2127, 2652, 16727, 2777, 437, 31758, 31758, 3985, 3883, 516,
	437, 31758, 31758, 84315, 4712, -108, 31758, 31758, -1000, 31758,
	704, 83753, 2880, 31758, 325, 324, -1000, -1000, -1000, 2865,
	-1000, -1000, -1000, 83753, 31758, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 323, -1000, 95, -1000, -1000, -1000, 78476, -1000,
	31758, 320, 319, -1000, -1000, -1000, 310, 307, 9199, 273,
	80716, 80651, 80356, 83753, 2395, 83753, -1000, -1000, 1080, 1080,
	1193, 1193, 1193, 1193, 2845, 1022, 1175, 531, 348, 348,
	348, 635, 549, 549, 348, 348, 348, 2288, 2085, 532,
	4024, -1000, -1000, 83753, 83753, 305, -1000, -1000, -1000, -170,
	292, 2206, 2723, 83753, -1000, 38109, 2206, 2206, -1000, -1000,
	1923, 74136, 83753, 38109, -1000, 2553, -1000, 12239, -1000, 16727,
	-1000, -1000, -1000, -1000, 2864, -1000, 41215, -1000, 529, -1000,
	45, -1000, -1000, 702, 2918, 726, 290, -1000, -1000, -1000,
	-29, 83753, 74136, 74136, 74136, 2504, -1000, 2708, -1000, 80313,
	-110, -1000, 82113, 31758, 74136, -1000, 1786, 2167, 1047, -1000,
	2696, 74136, -1000, 74136, -1000, -1000, 74136, 74136, 60568, 2475,
	-111, 83753, -32, -1000, 799, -1000, 1027, -1000, 13139, 60568,
	60568, 2470, -113, 16727, -1000, -1000, -34, -1000, -1000, -1000,
	-1000, 2120, -1000, 63178, 1806, 94, -1000, 64056, 2910, 518,
	-1000, 1729, -1000, 692, 3085, 94, 60568, -1000, -1000, 517,
	74136, 1907, 513, 16727, 2051, 779, 50930, -1000, 1146, 2118,
	-1000, -55, -1000, 514, 94, 1711, -1000, -56, 83753, -1000,
	792, -1000, -118, -1000, -1000, 287, -1000, 2605, 2603, -1000,
	-1000, 31758, 501, 500, 74136, 2593, -1000, -1000, -123, -1000,
	1906, -1000, -1000, -1000, -1000, -1000, 16727, 1459, -1000, 496,
	495, -1000, -1000, -1000, -1000, 2652, 437, 437, 31758, 31758,
	31758, 437, 4712, -126, -1000, 437, 437, -170, -1000, -1000,
	82721, -1000, -1000, -1000, 83753, -1000, 12691, 1634, -1000, 80018,
	-1000, -1000, -1000, -1000, 31758, 31758, -1000, -1000, -1000, -1000,
	-1000, 34536, 2263, 490, 84315, -1000, -1000, 936, 31758, 31758,
	2587, 936, 936, -1000, -129, -1000, -1000, -1000, 2864, 45,
	-1000, -1000, 2903, 16727, 719, -1000, 2900, -1000, -1000, -1000,
	-1000, 74136, -1000, 74136, -1000, 16727, 74136, 2249, 1958, -1000,
	-1000, 2070, 489, 34536, 60568, 761, 2225, 1640, 31758, 1950,
	-131, -134, 1955, -1000, -1000, 1954, 31758, -1000, 84315, 488,
	1873, 1873, -136, -139, -1000, 31758, 1132, 74136, 22817, -1000,
	2898, 2644, -1000, -1000, 31758, 1130, -1000, 1601, 2184, -1000,
	-1000, -1000, -1000, 2069, -1000, -1000, 74136, 2065, 902, -142,
	-1000, 786, 780, -1000, 51798, 887, 877, -1000, -1000, -1000,
	466, 31758, -1000, 60568, 31758, 1893, -1000, 779, 50930, -1000,
	2509, 1496, -1000, 2559, 74136, 2637, -1000, 2118, 487, -1000,
	897, 485, 484, -144, 31758, 31758, -145, 483, 897, -74,
	-1000, 753, 479, -1000, -1000, 60568, 60568, 31758, 31758, -1000,
	437, 437, 437, -1000, 283, -1000, -1000, 1711, 2722, -1000,
	79953, 79658, 853, 34536, 84315, -147, -1000, 74136, 83753, -170,
	-1000, -1000, -1000, 455, -1000, 2897, -1000, -1000, 1725, -1000,
	-1000, -1000, 74136, 1964, -1000, 1011, 31758, 4024, 481, 31758,
	-1000, -1000, 2132, 2266, 2120, 480, -1000, -1000, -1000, -1000,
	1004, 1547, -1000, -1000, 83753, 2692, 31758, -1000, -1000, 478,
	477, 83753, 475, 767, 2261, -1000, -1000, -1000, 83753, 473,
	887, -1000, 1660, 1806, 472, -1000, -1000, 1833, 2154, -1000,
	64056, 35447, 35447, 282, 2773, 877, -1000, 2840, -1000, 2765,
	-150, 1009, -152, 60568, 50930, -1000, 2049, -1000, 1191, -153,
	74136, 1496, -1000, -1000, 49620, 49620, 1004, -155, -158, -1000,
	49620, -1000, 1906, -1000, 74136, -1000, 74136, -1000, -1000, -160,
	-161, -1000, 1845, 31758, -1000, -1000, 853, -169, -1000, -101,
	-1000, 2760, -1000, -1000, -1000, -1000, 2488, 2202, 79615, 2012,
	74136, 79320, 2253, -1000, -1000, 1601, 74136, 2120, 2201, 60568,
	1007, 16727, -174, 1625, 1625, 31758, 22354, 1650, 31758, 1833,
	60568, 74136, -1000, 2676, -1000, 2591, -1000, -1000, -1000, 2120,
	94, -1000, -1000, 94, 1004, 470, 1640, 469, -1000, 2051,
	1375, -1000, 949, -1000, -1000, -177, -179, 1640, 1004, -1000,
	-180, -1000, -182, -203, -1000, -1000, 272, 32684, 32684, 32684,
	-170, -1000, 74136, 467, 2455, 912, -1000, 1871, 1569, 240,
	1030, -1000, -1000, 2225, -204, -1000, 903, 466, -1000, 31758,
	-1000, 1004, -205, -1000, 991, -206, -1000, 987, -211, -1000,
	2254, -1000, -212, -1000, 462, -213, -1000, -1000, 1849, -1000,
	1601, 902, -1000, 1640, 31758, 2120, 31758, -1000, 43847, -1000,
	897, 897, 2120, 1640, 897, -1000, -1000, -1000, 2501, -1000,
	35895, 1758, 1490, 82048, 2501, 2501, -1000, -1000, 74136, 2739,
	-1000, 1876, 1875, 1340, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2738, 2012, 83753, 2120, -1000, 1625, 2181, -1000,
	1625, 2252, -1000, 1647, -1000, 74136, -1000, 74136, 1446, 1444,
	2896, 887, 1833, 2120, -219, 1601, -224, -185, -1000, -1000,
	1601, 2120, -1000, -1000, 1603, 2807, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 759, -1000, 2578, -1000, 1028, 1842,
	1842, 652, 1871, -1000, -1000, 461, -1000, 456, -1000, -226,
	-1000, -1000, 2895, -1000, 1833, -1000, 1601, 1004, 941, 1640,
	-1000, -1000, 1601, 1487, -1000, -1000, 1765, 32221, 31758, -1000,
	2826, -1000, -1000, 2107, -1000, 31758, 2225, 31758, 31758, 1846,
	-1000, -1000, 941, 1640, -1000, 2892, 2120, -1000, -1000, -1000,
	-1000, 83753, -1000, -1000, -1000, 83753, -1000, -227, -229, -1000,
	-1000, -1000, -1000, 2120, -1000, 1601, 1601, 1111, 1601, 941,
	-1000, 444, 941, -1000, 31758, -1000, -232, 1601, -1000,
}
var sqlPgo = [...]int{

	0, 3581, 3579, 3574, 3573, 3572, 3570, 3568, 3566, 3564,
	3563, 3561, 3560, 3559, 3557, 3550, 3549, 3548, 3546, 3545,
	3544, 3543, 3541, 3538, 3536, 3535, 3527, 3520, 3516, 3514,
	3511, 3510, 3509, 3508, 3506, 3504, 3502, 3500, 3499, 3498,
	3497, 3494, 3493, 3492, 3490, 3489, 3487, 29, 3486, 3481,
	3480, 3479, 3477, 3476, 3475, 3474, 3472, 3469, 3468, 3467,
	3466, 3464, 3463, 3460, 3459, 39, 3458, 230, 3455, 3454,
	3451, 3449, 3444, 3443, 3441, 3440, 3438, 229, 3437, 143,
	3434, 3432, 3428, 3424, 3421, 228, 3420, 3419, 3418, 3417,
	3416, 3415, 3414, 3410, 165, 204, 3409, 158, 3407, 3406,
	3403, 3401, 3400, 3395, 3393, 3390, 3389, 3385, 205, 3383,
	225, 3380, 3379, 3378, 3377, 3376, 3373, 3371, 3368, 3366,
	3364, 3357, 3355, 3352, 3344, 3343, 3342, 3341, 3340, 3339,
	3336, 3331, 3328, 3327, 3324, 3323, 3322, 3321, 3319, 233,
	150, 3316, 3311, 224, 216, 3308, 3305, 3303, 133, 98,
	96, 91, 3302, 152, 52, 3301, 21, 127, 217, 4426,
	201, 3300, 3299, 3298, 198, 155, 3297, 195, 3296, 3293,
	3289, 3288, 76, 69, 144, 147, 142, 135, 134, 3285,
	3283, 75, 65, 38, 27, 3280, 3279, 3278, 2653, 101,
	3277, 223, 199, 129, 3275, 3273, 3272, 1613, 3266, 3264,
	130, 104, 100, 57, 93, 3263, 119, 19, 3262, 132,
	42, 3261, 124, 74, 34, 6717, 7203, 3260, 90, 234,
	82, 160, 176, 174, 125, 191, 189, 136, 375, 3259,
	206, 3256, 60, 163, 3252, 3250, 3249, 68, 157, 86,
	3248, 8, 18, 3, 138, 9, 114, 13, 3247, 12,
	3246, 3245, 3243, 3241, 30, 126, 3240, 111, 59, 3234,
	36, 3227, 70, 178, 3226, 187, 99, 3223, 3222, 212,
	172, 156, 3220, 16, 186, 3219, 3218, 3217, 3216, 3215,
	105, 23, 97, 3214, 3213, 108, 196, 153, 3211, 32,
	3210, 137, 78, 117, 231, 121, 188, 94, 183, 145,
	192, 3209, 3208, 3206, 184, 3205, 3203, 166, 107, 3202,
	3200, 232, 35, 61, 194, 62, 149, 123, 3198, 169,
	3196, 3194, 3193, 236, 146, 173, 6, 2, 81, 95,
	26, 11, 190, 122, 214, 92, 3191, 3748, 1541, 373,
	40, 106, 87, 56, 113, 109, 220, 51, 3190, 3189,
	1570, 3185, 3183, 3182, 3181, 148, 3180, 3177, 3173, 115,
	131, 171, 3168, 118, 71, 14, 89, 209, 222, 88,
	182, 168, 208, 3163, 162, 3160, 45, 120, 3152, 159,
	203, 73, 3149, 463, 112, 3147, 177, 3146, 3143, 3142,
	3139, 3138, 3137, 3136, 210, 3135, 110, 3133, 3126, 219,
	154, 3125, 215, 128, 197, 84, 55, 3122, 66, 281,
	3121, 161, 37, 3116, 167, 33, 0, 7810, 5819, 6987,
	3115, 1530, 3113, 170, 102, 3111, 3109, 3106, 80, 3104,
	67, 3103, 3101, 54, 3100, 15, 7, 10, 20, 17,
	1199, 950, 3098, 3097, 85, 103, 140, 3096, 227, 185,
	3092, 3089, 3088, 72, 3087, 24, 3086, 22, 3084, 3083,
	31, 5, 28, 3082, 3081, 200, 3080, 202, 3079, 3075,
	2784, 116, 3073, 3072, 213, 77, 3071, 207, 3069, 2735,
	139, 193, 3067, 3063, 3061, 3060, 211, 3059, 3034, 25,
	4, 3033, 3032, 164, 1, 2630, 3031, 3030, 64, 3027,
	3024, 151,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 11, 11, 7, 7, 8, 8,
	8, 35, 35, 9, 9, 9, 10, 10, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 25,
	25, 15, 15, 27, 27, 16, 16, 28, 28, 474,
	474, 19, 30, 20, 31, 13, 475, 475, 475, 475,
	24, 21, 32, 22, 22, 22, 22, 22, 152, 152,
	152, 152, 18, 18, 26, 26, 175, 175, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	473, 473, 177, 177, 176, 171, 171, 476, 476, 178,
	178, 178, 180, 180, 36, 36, 36, 93, 93, 93,
	94, 94, 95, 95, 153, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 81, 81, 414, 414, 415, 415,
	148, 148, 149, 149, 149, 149, 150, 150, 151, 151,
	151, 50, 38, 38, 38, 38, 38, 38, 38, 39,
	39, 39, 39, 40, 40, 40, 40, 40, 40, 41,
	41, 41, 41, 41, 41, 48, 48, 48, 48, 140,
	140, 51, 51, 51, 51, 51, 51, 51, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 484, 484,
	485, 485, 486, 486, 487, 487, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
	487, 487, 487, 487, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 62, 62, 256, 256, 231, 231, 63, 63, 63,
	64, 64, 65, 65, 52, 52, 467, 467, 270, 270,
	378, 378, 67, 67, 290, 290, 68, 68, 68, 68,
	68, 68, 69, 69, 69, 69, 69, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 75, 75, 75,
	76, 76, 76, 74, 74, 74, 72, 72, 72, 71,
	71, 71, 73, 73, 73, 271, 271, 77, 77, 77,
	77, 77, 77, 77, 77, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	380, 380, 78, 78, 78, 348, 348, 82, 82, 82,
	305, 305, 83, 83, 83, 83, 83, 84, 84, 84,
	84, 96, 96, 96, 96, 470, 470, 263, 263, 191,
	191, 191, 191, 89, 89, 89, 89, 90, 90, 90,
	91, 91, 145, 145, 102, 102, 102, 102, 102, 101,
	101, 101, 101, 101, 101, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 46, 46, 47, 47, 47, 47,
	47, 104, 104, 480, 480, 106, 103, 103, 103, 105,
	105, 105, 105, 107, 108, 108, 108, 108, 108, 108,
	108, 108, 109, 109, 408, 408, 279, 279, 406, 406,
	422, 422, 407, 407, 235, 235, 235, 235, 235, 236,
	236, 236, 413, 413, 413, 413, 413, 413, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 146, 146, 147, 129, 129, 129, 139, 139,
	139, 139, 139, 139, 139, 132, 132, 132, 119, 119,
	111, 111, 111, 111, 111, 115, 115, 115, 115, 115,
	115, 115, 115, 112, 112, 121, 121, 121, 121, 121,
	116, 116, 118, 118, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 113, 113, 113, 113, 123, 123, 123,
	123, 311, 311, 311, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 135, 135, 135, 135, 135, 135,
	362, 362, 130, 130, 130, 130, 134, 134, 134, 134,
	295, 295, 127, 127, 127, 128, 128, 128, 133, 133,
	131, 131, 136, 136, 136, 136, 114, 114, 114, 488,
	488, 488, 137, 137, 126, 126, 138, 138, 138, 138,
	138, 138, 138, 138, 125, 125, 125, 124, 124, 124,
	124, 117, 468, 468, 465, 465, 465, 465, 465, 465,
	465, 466, 466, 469, 469, 87, 87, 87, 57, 57,
	57, 58, 58, 156, 156, 156, 156, 241, 241, 241,
	241, 154, 154, 155, 155, 59, 59, 489, 489, 489,
	477, 477, 477, 478, 478, 478, 478, 478, 478, 237,
	237, 238, 238, 329, 329, 329, 329, 329, 242, 242,
	179, 179, 179, 245, 246, 246, 243, 243, 244, 244,
	244, 248, 248, 247, 250, 250, 249, 328, 429, 429,
	431, 431, 431, 431, 431, 431, 431, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 427, 427,
	427, 428, 423, 423, 424, 424, 424, 424, 239, 239,
	240, 240, 240, 240, 425, 426, 261, 261, 365, 430,
	430, 432, 432, 434, 490, 490, 490, 490, 490, 490,
	491, 491, 327, 327, 326, 326, 254, 254, 435, 435,
	435, 435, 436, 436, 436, 436, 436, 439, 438, 437,
	437, 437, 437, 437, 61, 61, 61, 292, 292, 291,
	291, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 142, 142, 194, 194,
	56, 56, 56, 12, 12, 12, 479, 479, 479, 60,
	60, 60, 60, 193, 193, 193, 193, 193, 193, 472,
	472, 471, 471, 195, 195, 493, 493, 66, 66, 66,
	66, 66, 66, 55, 55, 55, 55, 55, 494, 494,
	312, 312, 310, 310, 260, 260, 364, 198, 198, 172,
	172, 172, 23, 17, 17, 33, 33, 34, 34, 29,
	29, 481, 481, 482, 482, 88, 88, 92, 92, 92,
	100, 100, 141, 141, 141, 141, 141, 141, 141, 37,
	37, 37, 37, 49, 49, 49, 49, 98, 496, 496,
	496, 99, 99, 99, 495, 495, 192, 192, 323, 323,
	324, 324, 497, 497, 325, 325, 325, 325, 186, 185,
	187, 187, 54, 54, 54, 181, 181, 182, 182, 183,
	183, 184, 184, 498, 498, 85, 85, 85, 144, 144,
	230, 230, 230, 319, 319, 319, 255, 255, 204, 204,
	322, 322, 320, 320, 320, 320, 289, 289, 289, 143,
	143, 268, 268, 281, 281, 282, 282, 375, 375, 283,
	97, 97, 159, 159, 157, 157, 157, 157, 157, 157,
	157, 157, 164, 164, 165, 165, 166, 166, 167, 168,
	168, 168, 168, 272, 272, 169, 169, 169, 158, 158,
	158, 160, 160, 160, 160, 160, 160, 160, 163, 163,
	163, 163, 170, 170, 170, 162, 162, 446, 446, 446,
	448, 448, 449, 445, 445, 447, 447, 492, 492, 294,
	294, 294, 252, 253, 251, 251, 258, 258, 257, 259,
	259, 363, 363, 363, 173, 173, 173, 286, 286, 286,
	286, 287, 287, 315, 315, 313, 313, 313, 313, 314,
	314, 316, 316, 316, 317, 317, 318, 318, 285, 285,
	344, 344, 161, 161, 161, 265, 265, 265, 266, 266,
	335, 335, 335, 335, 335, 335, 336, 336, 334, 334,
	334, 334, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 367, 368, 368, 267, 267, 369, 321, 321, 463,
	463, 463, 464, 464, 361, 361, 370, 370, 370, 370,
	370, 370, 359, 359, 360, 360, 376, 377, 377, 298,
	298, 298, 298, 296, 296, 299, 299, 299, 299, 297,
	297, 371, 371, 371, 371, 288, 288, 372, 372, 372,
	372, 373, 330, 331, 331, 381, 381, 381, 381, 396,
	264, 264, 264, 264, 264, 499, 499, 382, 382, 382,
	382, 382, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 386, 386, 386, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 395, 395, 395, 395, 395,
	387, 387, 392, 392, 393, 393, 393, 388, 389, 394,
	394, 394, 394, 500, 500, 398, 398, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 384, 384, 384, 391,
	391, 391, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 306, 306, 308, 308, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 339, 339, 339, 339, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 440, 440, 440, 440, 440, 440, 440,
	440, 443, 443, 444, 444, 441, 441, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 441, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 441, 441, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 450, 450, 451, 451, 453, 453,
	454, 454, 455, 456, 456, 456, 457, 458, 458, 452,
	452, 459, 459, 459, 459, 460, 460, 461, 461, 461,
	461, 461, 462, 462, 462, 462, 462, 350, 350, 351,
	351, 357, 357, 357, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	196, 196, 196, 196, 196, 277, 277, 275, 275, 275,
	278, 278, 276, 276, 274, 274, 273, 273, 347, 347,
	345, 345, 349, 349, 300, 300, 397, 397, 397, 397,
	397, 397, 397, 397, 301, 301, 301, 309, 302, 302,
	303, 303, 303, 303, 303, 341, 342, 304, 304, 304,
	343, 343, 352, 356, 356, 355, 354, 354, 353, 353,
	332, 332, 333, 333, 284, 284, 501, 501, 280, 280,
	374, 374, 374, 374, 233, 233, 269, 269, 232, 232,
	225, 225, 226, 226, 226, 226, 262, 262, 358, 358,
	399, 399, 400, 400, 401, 401, 402, 402, 403, 404,
	405, 346, 346, 214, 213, 201, 202, 212, 211, 210,
	200, 203, 207, 208, 209, 205, 206, 220, 219, 218,
	224, 216, 217, 379, 199, 227, 227, 228, 228, 228,
	229, 229, 229, 229, 197, 197, 221, 221, 222, 223,
	223, 215, 215, 215, 188, 188, 188, 189, 189, 190,
	190, 412, 412, 410, 410, 410, 411, 411, 411, 411,
	409, 409, 409, 409, 409, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 418,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 421,
	421,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 1,
	3, 4, 6, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 10, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 6, 7, 2, 5, 6, 2,
	1, 3, 1, 3, 1, 6, 4, 9, 7, 12,
	12, 12, 9, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 6, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 3, 5, 3, 6, 6, 6, 6, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 3, 3,
	4, 3, 4, 7, 4, 4, 4, 3, 5, 7,
	4, 3, 3, 4, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 9, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 1, 3, 2, 2, 5,
	3, 3, 6, 6, 3, 1, 1, 2, 1, 1,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 3, 5, 7, 2, 3, 0, 3, 5, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 3, 3, 1,
	3, 1, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 2, 1, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	4, 5, 5, 5, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 5, 3, 5, 5, 5, 7, 3,
	3, 3, 4, 3, 5, 3, 6, 5, 6, 3,
	5, 6, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 2, 4, 3, 3, 5,
	4, 3, 5, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	3, 3, 4, 3, 3, 3, 3, 4, 3, 1,
	1, 1, 2, 3, 2, 3, 6, 6, 7, 9,
	7, 9, 3, 4, 10, 10, 3, 5, 5, 5,
	3, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 3, 2, 3, 6,
	3, 11, 14, 0, 2, 4, 3, 0, 4, 5,
	4, 3, 3, 1, 3, 10, 13, 0, 2, 3,
	1, 1, 0, 1, 2, 2, 2, 2, 1, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 8, 4, 2, 5, 5, 5, 2, 9, 10,
	6, 5, 3, 1, 5, 8, 7, 11, 3, 0,
	2, 4, 3, 3, 1, 5, 1, 3, 1, 2,
	0, 1, 2, 2, 0, 1, 3, 3, 2, 2,
	1, 1, 4, 0, 6, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 5, 8, 4, 1, 0, 1,
	2, 2, 1, 2, 3, 3, 2, 2, 3, 2,
	2, 2, 2, 2, 3, 1, 4, 2, 2, 2,
	4, 7, 3, 4, 6, 3, 1, 1, 1, 8,
	11, 7, 5, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 3, 0, 1, 6, 7, 6,
	5, 3, 4, 15, 18, 14, 17, 4, 0, 2,
	2, 0, 1, 0, 1, 3, 3, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 4, 2, 1, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 1, 4, 2, 1, 3, 1, 3,
	8, 5, 3, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 1, 2, 4, 4, 2, 3,
	5, 5, 1, 3, 1, 0, 1, 2, 3, 2,
	4, 2, 3, 0, 2, 0, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 3, 1,
	3, 3, 4, 5, 2, 2, 0, 2, 2, 1,
	1, 1, 0, 1, 0, 2, 2, 5, 4, 2,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 1, 1, 1, 3, 2, 4,
	4, 0, 4, 4, 3, 4, 1, 5, 3, 4,
	5, 5, 1, 5, 1, 3, 2, 0, 3, 0,
	2, 3, 1, 3, 2, 0, 3, 5, 6, 4,
	6, 4, 3, 2, 1, 0, 5, 1, 0, 2,
	2, 2, 1, 1, 0, 1, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 2, 2, 1, 0, 2, 5, 7, 2, 1,
	2, 4, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 5, 4, 1, 2, 1, 4, 1, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 2, 5,
	1, 4, 2, 5, 1, 4, 3, 3, 0, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 6, 2, 1, 1, 1, 1, 1,
	2, 1, 5, 5, 6, 3, 1, 1, 1, 2,
	2, 2, 4, 3, 5, 6, 8, 6, 5, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 8,
	8, 6, 4, 6, 6, 6, 4, 1, 3, 3,
	3, 3, 3, 4, 3, 3, 4, 3, 3, 4,
	3, 3, 4, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 3, 3, 3, 0, 1, 4, 2, 2, 2,
	2, 2, 3, 2, 2, 3, 0, 4, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 1, 2, 3,
	2, 3, 2, 3, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 1, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 3, 1,
	1, 1, 1, 5, 3, 1, 1, 3, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 7,
	1, 7, 5, 3, 1, 1, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 477, -79, -50, -48, -82, -83, -68,
	-84, -78, -96, -100, -88, -102, -141, -146, -147, -3,
	-36, -38, -51, -67, -69, -77, -86, -85, -87, -89,
	-93, -92, -81, -42, -97, -101, -110, -142, -143, -144,
	87, 73, 130, 110, 116, 163, 302, 333, 343, 327,
	-105, -106, 362, -37, -49, -99, -98, 66, 111, -4,
	-12, 27, 41, -39, -40, -41, 57, -56, -53, -62,
	-483, 89, -447, -70, -73, -487, 121, 136, 180, 294,
	-90, -91, 329, 331, 137, -44, -43, 131, -157, -159,
	-103, -104, -145, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -131,
	-127, -128, -129, -130, -132, -133, -134, -135, -136, -137,
	-138, 366, 413, 42, 376, 74, 124, 337, 21, -5,
	-6, -7, -8, -9, -10, -11, -52, -54, -55, -57,
	-58, -59, -66, -60, -61, -446, -71, -72, -74, -75,
	-76, 328, -160, -158, 474, 427, -14, -19, -20, -15,
	-16, -18, -21, -17, -25, -30, -31, -27, -28, -26,
	-29, -32, -33, -34, -35, -23, -24, -13, -22, 445,
	453, -163, -161, -162, -170, 350, 435, 390, 477, 477,
	477, 477, 477, 477, 477, 477, 477, 477, 477, 477,
	477, 477, 477, 477, 477, 477, 477, 477, -216, -221,
	-222, -223, -215, -188, -418, -421, 4, -416, -419, 142,
	187, 260, 21, 22, 23, 24, 25, 27, 38, 40,
	39, 41, 42, 45, 48, 49, 47, 52, 53, 54,
	55, 56, 57, 58, 61, 66, 67, 72, 73, 74,
	75, 76, 77, 82, 79, 80, 81, 84, 86, 87,
	88, 90, 92, 93, 101, 102, 103, 104, 105, 106,
	110, 111, 114, 113, 116, 119, 120, 121, 123, 125,
	126, 128, 130, 131, 134, 132, 396, 133, 135, 136,
	137, 138, 148, 149, 150, 152, 153, 155, 157, 161,
	162, 164, 168, 170, 171, 172, 173, 179, 180, 182,
	183, 188, 184, 189, 193, 196, 195, 197, 198, 199,
	190, 204, 208, 209, 210, 212, 213, 216, 217, 218,
	219, 220, 223, 222, 225, 228, 229, 232, 233, 236,
	237, 238, 239, 241, 242, 245, 243, 246, 244, 247,
	250, 248, 249, 252, 253, 258, 256, 254, 255, 262,
	265, 177, 267, 268, 270, 271, 272, 288, 275, 276,
	277, 280, 281, 284, 287, 289, 290, 291, 292, 293,
	294, 295, 297, 298, 300, 302, 303, 305, 307, 308,
	309, 310, 311, 312, 313, 315, 316, 318, 319, 320,
	321, 322, 327, 324, 325, 326, 328, 329, 330, 331,
	333, 335, 336, 337, 338, 340, 342, 363, 364, 378,
	343, 344, 345, 346, 347, 348, 349, 353, 357, 354,
	355, 356, 351, 352, 358, 359, 360, 362, 365, 366,
	368, 369, 371, 372, 374, 375, 376, 377, 379, 382,
	383, 384, 380, 381, 389, 387, 388, 391, 392, 393,
	394, 395, 397, 399, 407, 408, 410, 413, 414, 415,
	405, 417, 418, 421, 422, 423, 426, 424, 425, 431,
	427, 429, 432, 433, 434, 440, 439, 446, 447, 449,
	450, 451, 33, 43, 44, 46, 50, 62, 63, 64,
	68, 107, 108, 129, 139, 140, 151, 165, 167, 174,
	175, 176, 194, 200, 202, 206, 226, 264, 266, 282,
	286, 299, 301, 314, 339, 370, 385, 400, 401, 402,
	403, 409, 411, 435, 436, 437, 441, 448, 273, -209,
	2, -188, -188, 302, 26, 2, 26, 298, 352, 392,
	394, 2, -470, -263, 2, 26, -191, -188, 89, 163,
	350, -209, 2, -470, -263, 24, 2, -188, 2, -192,
	2, 343, -188, 477, 84, 233, 67, 339, 359, -108,
	408, -107, 400, 345, -109, -408, 2, 250, -188, 477,
	477, 477, 26, -199, -188, 477, 2, 390, 291, 439,
	351, 103, 311, 187, -479, 335, 166, 428, 404, -465,
	2, 4, -419, -416, -226, -225, 390, 103, -223, -215,
	467, -222, 477, 477, 477, 2, 209, 210, 310, 309,
	359, 360, 477, 477, 2, 25, 60, 83, 86, 109,
	138, 158, 161, 278, -484, 242, 288, 308, 358, 389,
	397, 410, -478, 377, 61, 345, -477, -479, 415, 119,
	-310, 103, 233, 162, 422, 394, 392, 420, 114, 193,
	425, 424, 477, 25, 60, 70, 86, 119, 138, 158,
	161, -486, 288, 308, 342, 345, 358, 389, 397, 415,
	410, 2, 439, 351, 390, 187, 103, -479, 306, -79,
	2, 474, 29, 28, 362, -153, 390, 203, 2, -188,
	209, 210, 2, 477, 477, 159, -465, 2, 209, 210,
	2, 203, 2, 61, 347, 477, 477, 477, 477, 477,
	477, 477, 477, 477, 477, 477, 477, 477, 477, 477,
	477, 477, 477, 477, 477, 477, 477, 477, 477, 477,
	477, 477, 477, 2, -139, 359, 377, 172, 41, 67,
	26, 307, 72, 292, 104, 164, 187, 188, 217, 83,
	84, -311, 40, 210, 209, -362, 391, 346, 352, 387,
	343, 408, 89, 429, 336, 451, 311, 312, 132, 4,
	103, 250, 361, 400, 233, 76, -492, 2, 390, -495,
	2, 408, 408, 2, -495, 2, -495, 2, -495, 2,
	-496, 408, 448, 477, 477, 477, 477, 477, 477, 477,
	477, 477, 477, 477, 477, 477, 477, -158, -160, -159,
	477, 477, 477, 477, 477, -139, 359, 2, 67, 26,
	-257, -258, 419, 201, 127, 279, -157, -159, 2, -446,
	-406, 2, -337, -422, -339, 465, 466, 458, 259, 452,
	-350, 109, 420, 273, -421, -340, -352, 129, 339, -278,
	8, 9, 5, 6, 7, -197, -383, -346, 412, 141,
	263, -229, 478, 10, 474, -443, -159, -351, 34, 167,
	59, -410, -228, -385, -393, -389, -390, -499, 48, 55,
	54, 397, 249, 353, 354, 371, 355, 356, 45, 431,
	184, 270, 272, 195, 4, 202, -227, -215, -440, -441,
	-416, -417, 194, 200, 196, 370, 197, 198, 199, 44,
	314, 152, 153, 151, 120, 108, 107, 266, 50, 49,
	46, 436, -394, 105, 400, 401, 402, 403, 212, 213,
	-188, -418, 70, 95, 96, 94, 99, 98, 235, 234,
	100, 97, 361, 428, 60, 33, 174, 175, 206, 264,
	176, 68, -442, 381, 91, 160, 192, 178, 205, 207,
	211, 227, 230, 251, 257, 261, 283, 285, 334, 367,
	-500, 437, 139, 140, 286, 299, 385, 409, 411, 165,
	226, 62, 63, -448, 315, -449, -209, -448, 477, 477,
	479, 477, -251, -252, -253, 2, 26, 117, 474, 2,
	-366, 2, -367, -371, -159, 221, -370, 474, -368, 472,
	-216, 274, -444, 340, -440, -441, -197, -215, -228, 4,
	-254, 474, 476, 103, 390, 71, 187, -305, 474, -188,
	26, 273, 404, 479, -348, 474, 273, 159, 276, -188,
	2, 2, 363, 2, 474, -108, 64, 408, 39, 359,
	-324, 2, -325, -185, -186, -187, -376, 208, 305, 313,
	454, 451, -406, -480, 159, 457, 404, -406, -279, 476,
	2, -371, 174, -216, 2, -213, -409, 4, -416, -419,
	-417, -420, 70, -418, 26, 28, 29, 30, 32, 34,
	35, 36, 37, 51, 59, 60, 65, 69, 71, 83,
	89, 94, 95, 97, 96, 98, 99, 100, 109, 112,
	115, 117, 118, 122, 124, 127, 141, 143, 156, 158,
	159, 163, 166, 169, 181, 191, 201, 203, 221, 224,
	231, 234, 235, 259, 263, 269, 273, 274, 278, 279,
	296, 304, 317, 332, 350, 361, 373, 386, 390, 398,
	404, 406, 412, 419, 420, 428, 430, 438, 442, 443,
	444, 445, -421, 2, -371, 174, 2, -218, 174, -371,
	-221, 2, -200, -188, 2, -212, -409, 2, -232, 174,
	-216, -217, -221, -414, 174, 2, -412, 10, -411, 5,
	4, -416, -419, -417, -94, -414, 474, 404, 479, -269,
	-225, -226, -262, -188, 476, -337, 2, -97, 2, -337,
	174, 2, -97, 174, 2, -337, 174, 2, -97, 174,
	2, 2, 2, 410, 2, 86, 174, -188, 390, 102,
	2, 326, -485, 342, 414, 439, 2, 2, 2, 2,
	2, 2, 390, -205, 2, -188, 156, -224, 174, 2,
	-188, 351, -493, 315, -414, 174, 2, -219, -221, -219,
	187, 204, -200, 174, 2, 394, 392, 394, 392, 159,
	2, 203, 2, 203, 2, -372, 2, -373, -367, -216,
	472, 2, 2, 2, 2, 2, 174, -188, 390, 102,
	2, 219, 2, 2, 2, 2, 2, 2, 2, 2,
	2, -271, 174, 2, -216, -271, 174, 2, -271, 174,
	2, -233, 174, 2, -232, -200, 174, 2, -415, 174,
	2, -414, -380, 2, -379, -411, 435, -79, 474, -79,
	474, 359, 474, -414, -216, -216, -337, -97, -95, -94,
	159, -337, -97, -153, 156, 2, 103, 390, -139, 2,
	156, 430, 2, 8, 2, -414, 346, 312, 148, 2,
	363, 2, 364, 67, -311, 451, 67, 159, 2, 159,
	2, -295, 2, 445, -468, 2, 273, 159, 2, 159,
	2, 159, 2, 159, 2, 159, 2, 309, 360, 210,
	2, -97, 442, -337, 442, 2, 407, 218, 133, 159,
	-295, 2, 159, 2, 159, 2, 5, 2, 378, 2,
	208, 305, 378, 2, -216, -488, 2, 390, 439, 351,
	2, 2, 79, 80, 159, 2, 159, 2, 159, 451,
	2, -288, -371, -323, -324, -323, 404, -257, -258, -139,
	363, 2, -164, -286, -166, 156, -313, -314, -167, 231,
	143, 269, -168, -294, 26, 117, -294, -294, 53, 475,
	475, 11, 12, 69, 38, 465, 466, 467, 468, 154,
	469, 470, 463, 464, 462, 455, 456, 460, 214, 215,
	85, 459, 457, 78, 240, 341, 144, 145, 146, 147,
	323, 185, 31, 186, 14, 15, 16, 30, 278, 230,
	452, 178, 367, 458, 17, 18, 19, 205, 207, 261,
	43, 181, -196, -234, -337, -337, -337, -337, -337, 285,
	474, -284, -332, 472, -159, 474, 474, 474, 5, -405,
	8, -159, -337, -350, 475, -276, 474, -159, -350, -345,
	474, 339, 472, 474, -353, -337, 5, 474, 476, -450,
	446, -387, 474, 301, -386, 474, -386, -386, 440, -384,
	474, 453, 447, 474, -384, 474, 474, 156, 474, 474,
	474, 474, 474, 474, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 440, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 479, -448, -254, 474, -280, -374, -337,
	467, -280, -280, 273, -273, -337, 91, -298, 211, 251,
	160, 227, 334, 192, -334, 478, -334, -361, 453, -159,
	-368, -215, -159, -370, 474, -366, -361, -80, -405, -67,
	-77, -85, -97, -110, -143, -144, 467, -216, 474, 159,
	474, 476, 159, -262, -409, -200, -216, -227, -228, -232,
	116, -273, -465, -262, -191, 35, -347, -381, -382, -383,
	-392, -388, -391, -395, 48, 55, 54, 397, 249, 353,
	354, 371, 355, 356, 45, 431, 184, 270, 272, 195,
	4, 46, 436, -394, 202, 319, 320, 318, 322, 321,
	194, 200, 196, 370, 197, 198, 199, 44, 314, 152,
	153, 151, 120, 108, 107, 266, 50, 49, 105, 400,
	401, 402, 403, 212, 213, 437, 381, 62, 63, -465,
	-262, 156, -408, -273, 35, -324, 2, 109, -412, 39,
	-497, 479, 229, -236, 239, 258, 171, 274, 449, 267,
	-413, 5, 4, -346, -358, 109, 233, 202, -399, -401,
	8, -400, 9, -402, 465, 466, -407, -406, 93, 476,
	-409, -175, 324, -174, 23, 27, 121, 433, 134, -244,
	189, 291, 129, 374, 423, -474, -475, 344, 395, 396,
	81, 267, 324, 129, -291, -293, 35, 101, 253, 287,
	56, 182, 244, 245, 376, 441, 129, 324, -475, 324,
	-475, -177, 374, 423, -474, -475, 344, 324, -176, -244,
	129, 478, -471, -445, 445, 129, -377, -376, -415, -94,
	-269, 479, 479, -409, 467, 129, 129, 129, 129, 2,
	2, 259, 2, 2, 2, 161, -477, -486, 2, 2,
	2, -216, 174, -256, 273, -467, -270, 390, -216, 259,
	-218, 174, 2, -221, 439, -471, 259, 35, 474, 2,
	-202, 174, 2, -189, -188, 187, -445, 259, -372, -230,
	-216, -367, -230, 362, -209, 35, -334, -334, 129, 2,
	2, 2, -188, -178, 479, 58, 330, 129, -178, 129,
	-178, 129, -178, 479, 129, -178, 129, 479, 129, 475,
	479, -380, -380, -414, -151, 445, 159, 89, 474, 474,
	-153, -377, 479, -95, -414, -467, -200, 2, -216, 2,
	390, 212, -151, -414, -414, -414, -408, 26, 364, 2,
	309, 360, 80, 364, 2, -216, 390, 103, 187, 73,
	-469, 156, -466, 335, -465, -216, 103, -216, 103, -216,
	103, -216, -216, 2, 2, 2, 2, 77, 77, 156,
	2, 407, 2, 407, 2, -188, -188, -188, 229, -216,
	156, 390, 187, 390, 187, 103, 390, -178, 479, -192,
	-164, -286, -408, -287, -286, -165, -164, -167, 156, 313,
	424, 253, 365, 216, -314, -313, 26, -337, -318, 150,
	252, -337, -316, -339, 465, 466, -400, -402, -272, 267,
	-158, -158, -158, -259, -363, -337, 304, 187, -396, -381,
	-381, -214, -409, 400, -337, -337, -337, -337, -337, -337,
	-337, -337, -337, -337, -337, -337, -337, -337, -337, -337,
	-337, -337, -337, -337, -337, -337, -337, -337, -337, -337,
	-337, -337, -337, -337, -337, -337, -337, -337, -337, 230,
	178, 367, 43, 181, -337, 404, -337, -337, -337, -337,
	248, 259, 263, 412, 141, 421, 117, 267, -501, 386,
	37, -343, -159, -277, 474, -357, 32, 373, 26, -350,
	474, 2, -332, -337, -333, -274, -273, -273, 475, 438,
	26, 117, 467, 2, 475, 479, 35, 475, -337, -274,
	-349, -345, -273, -356, -355, 442, -306, -307, 450, 247,
	106, 173, 246, -308, 349, -403, 8, -409, 467, -451,
	149, 166, 8, -403, -403, 400, 400, -403, -403, -403,
	474, 475, 2, 475, 2, 475, -337, 2, 475, -337,
	2, 475, -337, 2, 475, -337, 2, 475, 2, -337,
	-337, -337, -337, -337, -337, -337, -273, -300, 2, -397,
	-273, 4, 450, 247, 106, 173, 246, 349, 5, -300,
	2, -301, 2, -337, -273, -302, -338, -339, 465, 466,
	458, -350, -303, 2, -337, -274, -337, 51, 224, 406,
	-304, -337, 159, -273, -273, 2, -273, 2, -449, 35,
	-273, -265, 479, 159, 35, 4, -265, -265, 474, 475,
	479, -299, 170, 243, 238, -299, -366, -298, 211, -296,
	283, -296, -296, -361, -201, 472, 480, -409, -361, -360,
	-359, 35, -209, 280, -361, -361, 476, 475, -360, 473,
	-463, 474, 477, 477, 477, 477, 477, -216, 474, -273,
	-409, 379, 475, 476, 205, 205, 205, 205, 340, 475,
	404, 445, -79, 275, 475, 479, -264, 34, 472, -398,
	440, 474, 474, -307, 474, 159, -263, -480, 475, 408,
	-325, -235, 313, 372, 325, 357, 388, 8, 9, 8,
	9, 479, -409, 479, -481, 83, 404, 71, -328, 174,
	71, -423, -203, 83, -424, -188, 65, 420, 304, 158,
	-481, 83, 304, -481, 83, 83, 362, 377, 53, -371,
	38, 38, 26, -97, 225, 159, 451, 390, 187, 404,
	-371, -293, -381, 101, 244, 245, 53, -404, -399, 465,
	466, -404, 53, -404, -404, -404, 445, -218, -371, 404,
	404, 479, 38, 38, 26, -97, 225, 159, 404, -232,
	-201, -472, -193, 90, 254, 237, 255, -194, -195, 293,
	432, -414, -148, 183, 475, -377, -225, -188, 476, -337,
	-97, -337, -97, 129, 2, -493, 219, 474, -239, 259,
	159, -262, -378, 203, 479, -270, 129, -292, -291, 259,
	-220, 174, 2, -216, 129, 474, 125, 311, 2, 273,
	259, -202, 174, -181, 393, 129, -290, 430, -319, -97,
	474, 109, 35, -319, -281, -282, -375, -283, -203, 474,
	-209, -188, 2, -216, -271, -271, -271, -232, -233, -200,
	-414, -415, -79, -379, 475, 475, 475, -150, 277, -149,
	-188, 5, -153, 430, -238, -329, -328, -427, -428, -423,
	230, 187, 420, 204, 142, -255, -204, -203, 102, -151,
	-94, -377, -151, -151, -377, -377, -216, 156, -151, -151,
	-151, 2, 2, -295, -216, -200, -232, -216, -262, -262,
	-295, -200, -295, -200, -295, -200, -97, -337, 359, 156,
	156, 476, -295, 311, 103, 390, 291, 187, -216, -232,
	-216, -232, -200, -216, -371, -287, -165, 274, 216, 365,
	-316, -317, -339, 339, 340, -317, 339, 340, 8, 9,
	8, 9, -169, 369, 262, -271, 479, -172, 36, 115,
	216, -216, 451, 126, -337, -337, 404, -501, 386, -343,
	126, -337, 248, 263, 412, 141, 421, 117, 267, 159,
	474, -338, -338, 475, -275, -337, -337, 473, 482, 475,
	-258, 479, -257, -337, -273, -273, 475, 476, -273, -262,
	473, 473, 479, 475, -354, -355, 122, -337, 404, 404,
	404, 404, 474, 475, 476, -456, 284, 474, 474, 475,
	475, 479, 475, 451, 451, 475, 475, 475, -337, 475,
	475, 475, 475, 35, 479, 479, 479, 475, 479, 479,
	479, 475, 475, 159, 475, 475, -309, 296, 475, 11,
	12, 465, 466, 467, 468, 154, 469, 470, 463, 464,
	462, 455, 456, 457, 78, 240, 341, 14, 15, 16,
	205, 181, -338, -338, -338, 475, -341, -342, 159, 156,
	35, -304, -304, -304, 475, 159, -273, 475, 475, 474,
	475, -331, -330, 443, -374, -266, 2, -366, -211, -409,
	-331, -331, -273, -337, 211, 211, -297, 430, 273, -299,
	-366, -360, -405, -336, -335, 157, 36, 115, 256, 177,
	-360, -209, -254, -360, -360, -409, -361, -361, -359, 475,
	-464, -405, 475, -267, -369, -444, -258, 476, -151, -409,
	-140, 5, 263, -140, -140, -140, -262, 24, 297, -381,
	472, 473, 8, 474, -403, -403, -403, -262, 159, -406,
	-324, 418, 75, 313, 400, -406, -174, 324, -203, -203,
	-216, 259, -328, 174, -180, 259, -381, -210, -188, 474,
	474, 216, 216, -203, -210, 216, 174, -203, 174, -210,
	-210, -473, 313, 268, -337, 232, 311, 260, -175, 324,
	-97, -97, -97, 474, -480, 430, 116, -216, -232, -216,
	-220, 324, 257, -227, -404, -404, -291, 324, -218, -200,
	-176, -97, -97, -97, 474, -201, -177, 324, -193, -414,
	263, 426, -471, -151, 159, -148, 467, -188, 439, -188,
	-237, -240, -238, -203, -156, 447, 445, 129, -231, -216,
	472, -151, -414, -216, -224, 129, -254, 259, -414, 2,
	474, 2, -216, 129, 273, 259, -182, 123, -498, 457,
	-200, -331, -266, -289, -322, 332, 273, -255, 435, -209,
	-289, -268, 479, 159, 457, 476, -255, 2, -178, -178,
	-178, -178, -178, -79, -79, -151, 479, 474, 457, 457,
	474, -414, -414, 475, 479, -216, -202, 187, 187, -208,
	-189, 475, 479, 476, 474, -151, 159, -45, 445, 390,
	478, -295, -295, -295, 359, 359, -188, -212, -200, -216,
	-213, -232, 156, 156, 424, -317, 274, 236, -363, -173,
	265, -216, 478, -337, -337, 126, 126, -337, -338, -338,
	-337, 126, 159, 474, -337, -347, 30, 30, 475, 479,
	-333, -337, 475, 438, -258, -258, 475, 467, -409, 478,
	475, -345, 124, -337, 398, 247, 173, 246, -308, 246,
	-308, -308, -403, 5, -409, 467, -457, -206, 474, -188,
	443, -257, -403, -384, -384, 475, -396, -381, -337, -337,
	-337, -337, -337, -337, -341, -337, -396, -381, -338, -338,
	-338, -338, -338, -338, -338, -338, -338, -338, -338, -338,
	-338, -338, -338, -338, -338, -338, -338, 117, 259, 267,
	-338, -342, -341, -337, -337, -381, 475, 475, 475, -273,
	-79, -285, 166, -337, -377, 479, -285, -285, 475, -366,
	-366, 474, -337, 211, 473, 479, 481, 457, -254, 476,
	-359, -360, 473, 475, 479, 475, 479, -321, 35, 475,
	-409, 276, 5, 8, 472, 473, -403, 475, 475, 475,
	-262, -337, 404, 404, 129, 259, 432, -429, -424, -337,
	-260, -364, -337, 474, 474, -171, 121, 362, -482, 2,
	430, 129, -178, 129, -178, 449, 474, 474, 404, 445,
	-273, -337, -152, 109, -408, -475, 478, -475, 478, 404,
	404, 445, -273, 404, -414, 263, -415, -151, 2, 2,
	2, 475, 475, 479, -430, 35, 271, 474, 271, -216,
	-63, 445, -376, -405, -218, 35, 129, -471, 2, -312,
	430, -201, -216, 129, -183, 223, -498, -412, -445, -258,
	-289, -280, 260, 82, 475, -331, -282, -266, -337, 2,
	475, -149, -150, -414, -414, -414, -151, -153, -153, -329,
	2, 474, -202, -189, 474, -153, -204, 2, -415, -97,
	277, -216, 467, -295, -246, -245, 291, 267, -246, 339,
	339, 274, 150, 220, -172, -201, -337, -337, 126, 30,
	30, -337, -337, -347, 475, -337, -337, -273, 473, 5,
	-337, 475, 475, 8, -337, 475, 476, -458, -188, -337,
	475, 475, 475, 475, 479, 479, 475, 475, 475, 475,
	-342, 159, 117, 267, 474, 475, 475, -344, 169, 53,
	-366, -344, -344, -297, -262, -366, -335, -201, 472, -409,
	-405, -369, 474, 476, 473, 2, 472, 475, -203, -203,
	-328, 129, -431, 83, -433, 69, 142, 89, 259, 263,
	420, 304, 65, 109, 317, 35, 475, 475, 479, -172,
	-260, -262, 259, 383, 109, 259, 109, 102, 415, 72,
	-203, -210, -262, -262, -216, 135, 475, 479, 457, 2,
	467, 467, -220, -218, 135, 475, -201, -242, 190, -203,
	-428, -425, -426, 304, -432, -434, 142, 304, -97, -155,
	-154, -188, 5, 2, 474, -239, 277, 473, -292, -97,
	-220, 474, -188, 273, 474, -201, -184, 222, -498, -412,
	-181, -315, -313, -320, 474, 273, -97, -258, 457, 475,
	475, 102, 102, -260, 474, 474, -262, 102, 475, -46,
	-47, 187, 83, 295, -213, 390, 187, 474, 474, -172,
	-337, -337, -337, 475, -258, -409, 467, -452, 291, 475,
	-337, -337, -338, 159, 474, -347, -453, 444, -337, -273,
	-453, -453, 475, -405, 2, 472, 2, -328, -210, -214,
	-207, -188, 142, 174, 263, 216, 474, -338, -216, 474,
	2, -490, 112, 191, -327, -491, 88, 384, -364, -173,
	475, 475, 263, 263, -337, -381, 474, -178, -178, 475,
	475, -337, 404, -408, 87, -406, 2, -475, -337, 404,
	-243, -244, 181, -430, 216, -207, 216, -489, 445, 475,
	479, 457, 457, -237, -156, -64, -65, 405, -376, -254,
	-260, -216, -260, 273, -498, -412, -182, -289, 118, -262,
	83, -315, -343, -151, 474, 474, 475, -260, -260, 475,
	474, -151, 479, 26, 474, 26, 474, -216, -232, -273,
	-273, 475, -258, 53, 475, 475, -338, -347, 475, -454,
	-455, -206, 473, 2, -433, -207, 259, 430, -337, -190,
	474, -337, 191, 113, 179, -242, 474, -326, 430, 317,
	-198, 69, -260, 474, 474, 474, 457, 159, 474, -156,
	289, 474, -241, 273, 102, 253, -154, -340, -340, 475,
	35, -65, 9, 35, 475, -312, 475, -216, -412, -183,
	424, 260, 475, -210, -289, -415, -415, -326, 475, 475,
	-415, -47, -262, -262, 475, 475, -459, 311, 340, 168,
	-273, 475, 479, 35, 129, 170, 475, -435, 241, -188,
	475, 113, 179, -243, -262, -242, 170, -216, -476, 430,
	-214, 475, -248, -247, -245, -250, -249, -245, -273, -406,
	87, 289, -273, -241, -216, -261, -365, -203, 74, 102,
	-242, -97, -97, -326, 474, -327, 474, -184, 362, -330,
	475, 475, -327, -326, 475, 475, 475, 475, -460, -461,
	43, 417, 93, -337, -460, -460, -455, -457, 142, 445,
	-436, -439, -438, 273, 368, 160, 290, 475, 383, 441,
	-490, 475, 445, -254, -337, -326, 475, 479, 435, 475,
	479, 435, 475, 159, 475, 474, 475, 479, 303, 114,
	121, -243, -489, -327, -260, -242, -260, -281, -151, -151,
	-242, -327, -151, -462, 128, -461, 300, 155, 339, 300,
	155, -462, -462, -207, 47, -438, 273, -439, 273, 424,
	114, 47, -435, -242, -247, 181, -249, 159, 289, -262,
	-365, 340, 340, 2, -156, -241, -242, 475, -243, 475,
	-331, -243, -242, 93, 166, 399, 253, 30, 457, -437,
	253, 330, 58, 362, -437, 457, -436, 474, 474, 475,
	2, -241, -243, -326, -494, 443, -327, -243, 339, 281,
	-461, -337, 22, 263, 109, -337, -490, -273, -273, -179,
	58, 330, -494, -327, 2, -242, 475, 475, -242, -243,
	-243, 404, -243, -494, 474, -494, -273, 475, -243,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 25, 365,
	366, 368, 369, 370, 372, 373, 375, 377, 379, 381,
	382, 384, 386, 388, 389, 390, 391, 392, 394, 396,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	454, 456, 0, 962, 964, 966, 968, 0, 584, 27,
	28, 0, 0, 192, 194, 196, 0, 221, 223, 224,
	226, -2, 0, 322, 323, 325, -2, -2, 0, 0,
	443, 445, 0, 0, 0, 465, 466, 0, 1050, -2,
	459, 461, 463, 528, 530, 532, 534, 536, 538, 540,
	541, 543, 545, 547, 549, 551, 553, 555, 556, 558,
	560, 562, 564, 566, 568, 570, 572, 574, 576, 578,
	580, -2, -2, -2, 0, -2, -2, -2, 980, 31,
	33, 35, 37, 39, 41, 43, 274, 275, 277, 279,
	281, 283, 286, 287, 289, 1105, 327, 329, 331, 333,
	335, 0, -2, 1117, 0, 0, 45, 46, 47, 48,
	49, 50, 51, 52, 68, 69, 70, 71, 72, 73,
	74, 75, 56, 58, 59, 63, 64, 66, 54, 0,
	0, 1081, 1083, 1085, 1087, -2, 0, 0, 7, 9,
	11, 13, 15, 17, 19, 21, 367, 371, 374, 376,
	378, 380, 383, 385, 387, 393, 395, 397, 847, 1741,
	1756, 1757, 1758, 1761, 1762, 1763, 1764, 1765, 1766, 2119,
	2199, 2200, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
	1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
	2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
	2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022,
	2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032,
	2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
	2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052,
	2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
	2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
	2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
	2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092,
	2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 0, 421,
	419, 1734, 422, 1948, 424, 426, 316, 317, 318, 319,
	320, 321, 0, 436, 430, 435, 437, 439, 440, 441,
	442, 416, 414, 0, 436, 1788, 434, 960, 961, 955,
	956, 1983, 987, 455, -2, -2, -2, 2087, -2, 487,
	-2, 494, 2090, 1985, 499, 0, 501, -2, 504, 963,
	965, 967, 582, 583, 1744, 29, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 897, 898, 0, 0,
	156, -2, -2, -2, -2, 0, 0, 1829, 1702, 1758,
	1705, 1700, 193, 195, 197, 198, 0, 0, 0, 0,
	0, 0, 222, 225, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 0, 758, 750, 751, 932, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 252, 357,
	358, 0, 1106, 1106, 0, 0, 0, 0, 173, 164,
	0, 0, 727, 444, 446, 0, 0, 159, 0, 0,
	959, 0, 175, 0, 0, 460, 462, 464, 529, 531,
	533, 535, 537, 539, 542, 544, 546, 548, 550, 552,
	554, 557, 559, 561, 563, 565, 567, 569, 571, 573,
	575, 577, 579, 581, 585, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, -2, -2, -2, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 0, 588,
	590, 591, 592, 0, 643, 660, 0, 887, 1107, 989,
	970, 984, 989, 972, 973, 974, 975, 976, 981, 983,
	977, 978, 979, 32, 34, 36, 38, 40, 42, 44,
	276, 278, 280, 282, 284, 288, 290, -2, 1079, 1080,
	328, 330, 332, 334, 336, 447, 0, 449, 0, 589,
	-2, 0, 1111, 1111, 1111, 0, 0, 1080, 1078, 0,
	452, 453, 508, 509, 1349, 0, 0, 0, 0, 0,
	1599, 1433, 0, 510, -2, 1464, 1466, 2066, 2087, 1598,
	1468, 1469, 1470, 1471, 1472, 0, 0, 1475, 1476, 1477,
	1478, 1479, 0, 1481, 0, 1486, 1487, 1488, 0, 2071,
	1679, 1754, -2, 1252, 1253, 1254, 1255, 1256, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 2077, 1750, 0, 1565, 1502,
	-2, 1775, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1839, -2, -2, -2, -2, -2,
	-2, -2, 1308, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 2101, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 0, 2055, 2072, 2073, 2078, 2080,
	2074, 2063, 1527, -2, 2102, 2103, 2104, 2105, 2106, 2107,
	2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117,
	1309, -2, 2067, 2068, 2083, 2084, 2089, 2094, 2095, 2070,
	2079, -2, -2, 1097, 1958, 1100, 847, 1098, 1082, 1084,
	0, 1086, 0, 0, 0, 1091, 1114, 1112, 0, 1153,
	1095, 1096, 1171, 1171, 1195, 0, 1176, 0, 1195, 1106,
	1221, 0, 1182, 1978, 1503, 1504, 0, 1758, 1755, -2,
	0, 0, 0, 0, 0, 0, 0, 417, 0, 423,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 986,
	457, 458, 0, 482, 0, 486, 2062, -2, 1793, 1998,
	-2, 490, 990, 994, 995, 996, 997, 0, 0, 0,
	0, 0, 496, 0, 0, 483, 484, 502, 505, 0,
	53, 0, 2072, 1221, 55, 0, 1724, 1780, 1781, 1782,
	1783, 1784, 2101, 2118, 2120, 2121, 2122, 2123, 2124, 2125,
	2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135,
	2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145,
	2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155,
	2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165,
	2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175,
	2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185,
	2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195,
	2196, 2197, 2198, 57, 0, 2072, 60, 0, 2072, 0,
	-2, 65, 0, 1730, 67, 0, 1727, 76, 0, 2072,
	0, 1699, -2, -2, 2072, 895, 176, 177, 1771, 1772,
	1776, 1777, 1778, 1779, 1208, 160, 0, 0, 0, 719,
	1696, 1701, 720, 1706, 0, 199, 200, 201, 202, 203,
	2072, 205, 206, 0, 208, 209, 2072, 211, 212, 0,
	214, 228, 229, 0, 231, 0, 2072, 0, 0, 0,
	237, -2, 253, 0, 250, 0, 241, 242, 244, 245,
	246, 247, 0, 294, 292, 1735, 0, 728, 2072, 730,
	1740, 0, 0, 916, -2, 2072, 892, 921, 1738, 0,
	-2, 0, 1104, 2072, 1004, 754, 755, 756, 757, 0,
	313, 0, 1017, 0, 1019, 0, 1040, 1227, 1171, 1171,
	0, 254, 255, 256, 257, 258, 2072, 0, 0, 0,
	263, 0, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 151, 2072, 339, 355, 151, 2072, 342, 151, 2072,
	345, 151, 2072, 348, 1694, 151, 2072, 351, 352, 2072,
	354, 178, 0, -2, 410, 1743, -2, 360, 0, 361,
	0, -2, 0, 190, 0, 0, 725, 726, 1208, 162,
	0, 957, 958, 0, 0, 467, 0, 0, 586, 587,
	0, 0, 597, 598, 599, 190, 1986, 1956, 1855, 604,
	0, 607, 610, -2, 0, 0, 0, 0, 614, 0,
	619, 620, 621, 0, 724, 623, 0, 0, 625, 0,
	629, 0, 632, 0, 634, 0, 636, -2, -2, -2,
	647, -2, 0, 651, 0, 653, 0, 0, 0, 0,
	668, 669, 0, 674, 0, 677, 678, 679, 680, 681,
	0, 683, 684, 685, 686, 0, 688, 689, -2, -2,
	693, 695, 0, 702, 0, 706, 0, 710, 0, 593,
	594, 151, 1225, 969, -2, 971, 0, -2, 0, 448,
	0, 451, 1132, 1065, 1062, 0, 1129, 1130, 1066, 0,
	0, 0, 1073, 0, 1109, 1110, 0, 0, 0, 1052,
	1053, 0, 0, 0, 0, 1604, 1605, 1606, 1607, 1608,
	1609, 1612, 1613, 1610, 1611, 1614, 1615, 0, 0, 0,
	0, 0, 1616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1617, 1618, 1619, 0, 0, 1621,
	0, 1623, 0, 0, 0, 0, 0, 0, 1412, 1414,
	1687, 0, 0, 1620, 1354, 1355, 1356, 1391, 1392, 0,
	0, 1465, 1684, 1683, 1467, 0, 1635, 0, 1474, 1480,
	1720, -2, 0, 1599, 1630, 0, 0, 1489, 1490, 1491,
	0, 0, 1635, 0, 0, 1678, 1346, 0, 0, 1567,
	0, 1288, 0, 1289, 1290, 0, 1291, 1292, 1305, 1318,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 0, 1659, -2, 0,
	0, 0, 0, 0, 1099, 0, 0, 1157, 1688, 1692,
	1693, 1157, 1157, 0, 0, 1636, 1218, 1218, 0, 0,
	1214, 1214, 1214, 1212, 1195, 0, 1195, 1205, 0, 1195,
	1195, 0, -2, 1176, 0, 0, 1205, 0, 1189, 398,
	400, 402, 404, 405, 406, 408, 1222, 1223, 0, 0,
	0, 0, 0, 0, 1759, 0, 0, 0, 1746, 0,
	0, 0, 0, 428, 438, 1106, 0, 1638, 1244, 1247,
	1248, 1249, 1250, 1251, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, -2, 1306, 1308, 1329, 1295, 1296, 1297, 1298, 1299,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1301, 0, 1276, 1276, 1276, 1293, 1294, 1317, 1328,
	1320, 1328, 1324, 1245, 1246, 1311, 1312, 1313, 1314, 0,
	432, 0, 0, 0, 0, -2, 492, 497, 498, 0,
	0, 992, 0, 998, 519, 520, 521, 1000, 1001, 0,
	495, 522, 523, 524, 525, 526, 527, 0, 1708, 1709,
	1710, 1711, 1714, 1715, 0, 0, 493, 512, 500, 0,
	506, 77, 952, 116, 0, 952, 952, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 101, 112, 89, 90,
	0, 0, 0, 0, 61, 869, 0, 872, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 100, 0,
	95, 79, 0, 0, 0, 102, 114, 0, 142, 144,
	0, 0, 893, 0, 1103, 0, 181, 1207, 0, 1208,
	718, 0, 0, 1759, 1704, 0, 0, 0, 0, 230,
	232, 0, 234, 235, 236, 0, 915, 0, 243, 240,
	285, 819, 2072, 0, 0, 311, 306, 0, 308, 0,
	868, 2072, 866, 1739, 0, 890, 0, 0, 0, 922,
	0, 2072, 927, 1726, 1767, 1768, 1006, 0, 315, 0,
	1020, 1022, 0, 0, 1228, 0, 1230, 1231, 0, 260,
	261, 262, 0, 337, 0, 149, 150, 0, 340, 0,
	343, 0, 346, 0, 0, 349, 0, 0, 0, 1106,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	0, 190, 0, 1208, 190, 190, 1208, 469, 1208, 471,
	0, 0, 600, 190, 190, 190, 605, 606, 608, 609,
	-2, -2, 703, 611, 612, 671, 0, 0, 0, 670,
	622, 0, 712, 1974, 722, 671, 1829, 671, 1829, 671,
	1829, 633, 635, 638, 663, 646, 650, 0, 0, 0,
	655, 0, 657, 0, 659, 671, 672, 675, 682, 687,
	0, 0, 0, 0, 0, 0, 0, 886, 0, 982,
	1132, 1065, 450, 1056, 1131, 1057, 1064, 1067, 0, 0,
	1069, 0, 1071, 0, 1127, 1128, 1135, 1136, 0, 1146,
	1147, 1139, 0, -2, 0, 0, 1142, 1143, 1075, 0,
	1092, 1093, 1094, 1118, 1119, 941, 0, 2199, 1350, 1239,
	1351, 1352, 1723, 0, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, -2, -2, -2, -2, -2, -2,
	-2, -2, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
	1383, 1384, 1385, -2, -2, -2, 1389, 1390, -2, 1622,
	1624, 0, 1687, 0, -2, 0, -2, -2, -2, -2,
	1409, 0, 1411, 1416, 1418, 1420, 0, 0, 0, 0,
	1686, 1430, 1670, 1671, 0, 0, 1601, 1602, 1603, 1415,
	0, 1434, 1685, 1682, 0, 0, 1634, 1117, 1493, 0,
	0, 0, 0, 1500, 1485, 1632, 0, 1631, 0, 0,
	0, 1642, 0, 1677, 1673, 0, 1721, 1345, 1332, 1333,
	1334, 1335, 1336, 1337, 1347, 0, 1718, 1747, 1753, 1575,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1528, 1529, 1530, 1531, 1532, 0, 1534, 1535, 0,
	1537, 1538, 0, 1540, 1541, 0, 1543, 1544, 1545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1547, 0,
	1645, -2, -2, -2, -2, -2, -2, -2, -2, 0,
	1549, 0, 1551, 1636, 1656, 0, 0, 1435, 0, 0,
	0, 1599, 0, 1554, 1636, 1664, 0, 0, 0, 0,
	0, 1636, 0, 1669, 0, 1561, 0, 1563, 1101, 0,
	0, 1234, 0, 0, 0, 1691, 1234, 1234, 0, 1152,
	0, 0, 1215, 1216, 1217, 0, 0, 1218, 0, 1209,
	1213, 1210, 1211, 1205, 1168, 0, 0, 1725, 1205, 1174,
	1204, 0, 847, 1194, 1205, 1205, 0, -2, 1178, 1195,
	0, 0, 399, 401, 403, 407, 409, 0, 0, 1117,
	-2, 190, 846, 0, 0, 0, 0, 0, 418, 420,
	0, 0, 412, 0, 415, 0, 1235, 1238, 0, 0,
	-2, 0, 0, 1330, 0, 0, 0, 0, 485, 0,
	991, 999, 0, 516, 0, 518, 0, 1712, 1716, 1713,
	1717, 0, 507, 0, 0, 0, 0, 951, 120, 2072,
	0, 153, 0, 0, 813, 1731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 91, 0, 0, 0, 0, 0, 0,
	0, 870, 871, 873, 880, 882, 0, 876, 1719, 0,
	0, 877, 0, 879, 881, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 92, 0, 0, 0, 0,
	1698, 911, 909, 903, 904, 905, 906, 907, 908, 0,
	0, -2, 190, 0, 161, 181, 1697, 1707, 0, 204,
	207, 210, 213, 0, 238, 0, 0, 760, 733, 0,
	0, 293, 190, 0, 0, 307, 0, 864, 867, 0,
	847, 2072, 902, 1737, 0, 0, 0, 0, 920, 0,
	0, 0, 2072, 1008, 1014, 0, 1234, 0, 1038, 1023,
	0, 0, 0, 1038, 1042, 1043, 1045, 1046, 0, 0,
	1229, 0, 264, 356, 151, 151, 151, 1695, 151, 151,
	179, 353, 359, 411, 1106, 1106, 190, 188, 1933, 186,
	183, 185, 0, 0, 0, 761, 763, 764, 765, 766,
	0, 1768, 0, 1884, 1768, 0, 1026, 1028, 0, 157,
	163, 190, 0, 305, 468, 473, 595, 0, 601, 602,
	603, 640, 665, 613, 615, 616, 617, 0, 723, 721,
	624, 671, 627, 671, 630, 671, 649, 652, 654, 0,
	0, 0, 667, 0, 0, 0, 0, 0, 0, 0,
	707, 708, 709, 711, 1226, 1060, 1061, 1063, 0, 1072,
	0, 0, 1141, -2, -2, 1140, 1144, 1145, -2, -2,
	-2, -2, 1068, 0, 1077, 1074, 0, 1126, 939, 940,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 1431,
	0, -2, 1410, 1413, 1417, 1419, 1421, 0, 0, 0,
	0, 0, 0, 1625, 0, 1627, 1432, 1680, 1683, 1597,
	0, 0, 1116, 1117, 1117, 0, 1499, 0, 1633, 0,
	1640, 1641, 0, 1492, 0, 1674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 1300,
	1274, 0, 1328, 1326, 1327, 1321, 1328, 1325, 0, 1533,
	1536, 1539, 1542, 0, 0, 0, 0, 1522, 0, 0,
	0, 1526, 1546, 0, 1548, 1550, 0, 0, 1552, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 1439, 1440, 1553, 1662, 1663, 0, 0,
	0, 0, 0, 0, 1559, 0, 1668, 1560, 1562, 1106,
	1154, 1149, 1233, 0, 1689, 1208, 1156, 1158, 1690, 1728,
	1149, 1149, 0, 1637, 0, 0, 1199, 0, 0, 0,
	1201, 1172, 0, 0, 1166, 0, 1162, 1163, 1164, 1165,
	1173, 847, 1203, 1175, 1179, 1747, 0, 1205, 0, 1190,
	0, 1192, 1224, 0, 1184, 1187, 0, 0, 191, 1760,
	215, 219, 220, 216, 217, 218, 427, 0, 0, 1639,
	0, 1240, 0, 0, 0, 0, 0, 431, 0, 481,
	-2, 514, 515, 517, 0, 513, 117, 952, 0, 0,
	943, 0, 122, 2072, 131, 0, 789, 0, 1729, 0,
	0, 0, 0, 954, 0, 0, 2072, 151, 2072, 151,
	134, 137, 0, 141, 139, 0, 0, 780, 78, 952,
	81, 85, 93, 0, 0, 0, 99, 0, 0, 0,
	945, 0, 874, 875, 878, 884, 62, 0, 947, 942,
	143, 83, 87, 94, 0, 949, 80, 0, 910, 888,
	889, 0, 894, 154, 0, 190, 1703, 0, 0, 0,
	0, 0, 759, 830, 0, 0, 0, 0, 299, 295,
	0, 304, 310, 309, 729, 0, 0, 0, -2, 917,
	0, 919, 931, 0, 0, 0, 1010, 1014, 0, 1013,
	1104, 1117, 314, 1015, 1038, 0, 0, 0, 1025, 1021,
	1018, 1234, 0, 0, 0, 0, 0, 259, 338, 341,
	344, 347, 350, 362, 363, 165, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 0, 1768, 1768, 0,
	1733, 0, 0, 0, 0, 158, 0, 470, 0, 0,
	0, 626, 628, 631, 656, 658, 671, 696, 697, 775,
	0, 775, 0, 0, 1070, 0, 1138, 1076, 1120, 1121,
	0, 941, 0, 1353, 1394, 0, 0, -2, 0, 0,
	1398, 0, 0, 0, -2, 0, 0, 0, 1626, 1628,
	0, 1682, 1494, 0, 0, 0, 1498, 1482, 1483, 0,
	1600, 1643, 1672, 1676, 0, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 0, 1722, 1748, 1752, 1573, 1574, 1578, 1736,
	0, 0, 0, 1319, 1323, 1505, 0, 0, 0, 0,
	0, 0, 0, 1644, 1655, 1657, 1436, 1437, 1441, 1442,
	1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, -2, -2,
	-2, 1454, 1455, 1456, -2, -2, -2, 0, 0, 0,
	1658, 1660, 1661, 1665, 1666, 0, 1556, 1557, 1558, 1667,
	0, 1151, 0, 1232, 1155, 0, 1151, 1151, 1113, 1197,
	0, 0, 1220, 0, 1169, 0, 1170, 0, 1202, 0,
	1177, 1180, 1181, 1191, 0, 1183, 0, 1186, 0, 1494,
	-2, 429, 413, 0, 0, 1242, 0, 1303, 1307, 1331,
	433, 1206, 0, 0, 0, 0, 152, 787, 812, 0,
	0, 934, 941, 0, 0, 124, 0, 0, 0, 132,
	0, 0, 129, 0, 136, 140, 0, 0, 0, 0,
	0, 96, 97, 98, 0, 103, 0, 104, 0, 0,
	0, 0, 0, 0, 913, 914, 180, 155, 233, 901,
	239, 769, 818, 0, 820, 0, 734, 0, 0, 819,
	291, 0, 298, 0, 868, 0, 0, 891, 918, 0,
	0, 0, 0, 0, 1012, 1014, 0, 1005, 1006, 1134,
	1016, 1036, -2, 1035, 0, 1117, 1044, 1041, 1047, 1048,
	0, 187, 0, 182, 184, 0, 168, 0, 0, 762,
	767, 0, 0, 0, 0, 0, 1027, 1029, 0, 174,
	0, 596, 618, 666, 698, 774, 0, 0, 700, 0,
	0, 1137, 1124, 1125, 1122, 941, 1396, 1400, 0, 0,
	0, 1402, -2, 0, 1424, -2, -2, 1629, 1681, 1473,
	1117, 1495, 1497, 1484, 1675, 1348, 0, 1580, 1577, 0,
	1564, 1275, 1517, 1518, 0, 0, 1521, 1523, 1524, 1525,
	1654, 0, 0, 0, 0, 1555, 1102, 1569, 0, 0,
	1159, 1569, 1569, 1198, 0, 1200, 1167, 1160, 0, 1748,
	1193, 1185, 0, 0, 1236, 1241, 0, 1302, 118, 119,
	121, 0, 788, 0, 791, 0, 0, 0, 0, 798,
	799, 0, 0, 0, 0, 0, 834, 843, 0, 1126,
	0, 0, 0, 126, 146, 0, 0, 953, 0, 0,
	151, 151, 0, 0, 944, 0, 0, 0, 0, 106,
	0, 0, 946, 948, 0, 0, 950, 777, 0, 830,
	822, 823, 824, 0, 829, 831, 0, 0, 747, 0,
	743, 0, 0, 736, 760, 733, 0, 296, 865, 899,
	847, 0, 930, 0, 0, 0, 1002, 1014, 0, 1007,
	1008, 1038, 1133, 0, 0, 0, 1024, 1134, 0, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 190, 472,
	474, 0, 0, 480, 773, 0, 0, 0, 0, 1123,
	1404, -2, -2, 1425, 0, 1749, 1751, 1117, 0, 1566,
	0, 0, -2, 0, 0, 0, 1088, 0, 1150, 1148,
	1089, 1090, 1219, 0, 1188, 0, 1243, 123, 0, 792,
	793, 1732, 795, 0, 797, 800, 0, 803, 1770, 0,
	807, 814, 835, 0, 769, 0, 840, 841, 935, 936,
	845, 0, 125, 127, 145, 938, 0, 128, 135, 0,
	0, 82, 0, 0, 1822, 109, 107, 105, 84, 0,
	733, 776, 0, 821, 0, 832, 833, 737, 0, 735,
	0, 0, 0, 0, 0, 297, 300, 0, 303, 0,
	0, 931, 0, 0, 0, 1009, 1010, 312, 0, 0,
	0, 1038, 1049, 167, 0, 0, 845, 0, 0, 811,
	0, 172, 0, 476, 0, 478, 0, 699, 701, 0,
	0, 1496, 1584, 0, 1519, 1520, -2, 0, 1462, 1568,
	1570, 0, 1161, 1237, 790, 794, 0, 0, 0, 851,
	0, 0, 0, 838, 839, 777, 0, 769, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 745, 0, 748, 0, 744, 741, 742, 769,
	0, 301, 302, 0, 845, 0, 843, 0, 1011, 1012,
	0, 1031, 1032, 1034, 1039, 0, 0, 843, 845, 810,
	0, 475, 0, 0, 704, 705, 0, 0, 0, 0,
	1579, 1463, 0, 0, 0, 0, 802, 856, 0, 0,
	0, 836, 837, 834, 0, 816, 0, 847, 130, 0,
	937, 845, 0, 781, 0, 0, 784, 0, 0, 110,
	1822, 108, 0, 731, 0, 0, 826, 828, 0, 749,
	777, 747, 900, 843, 0, 769, 0, 1003, 0, 1033,
	190, 190, 769, 843, 190, 477, 479, 1576, 1596, 1585,
	-2, 2034, 1826, 0, 1596, 1596, 1571, 1572, 0, 0,
	804, 852, 853, 0, 848, 849, 850, 1769, 805, 806,
	815, 842, 0, 851, 147, 769, 778, 0, 0, 779,
	0, 0, 113, 0, 115, 0, 825, 0, 0, 0,
	0, 733, 737, 769, 0, 777, 0, 1234, 169, 170,
	777, 769, 171, 1581, 0, 0, 1587, 1588, 1589, 1590,
	1591, 1582, 1583, 796, 0, 854, 0, 855, 0, 0,
	0, 0, 856, 133, 782, 0, 785, 0, 111, 0,
	827, 738, 0, 740, 737, 746, 777, 845, 928, 843,
	1030, 808, 777, 0, 1593, 1594, 0, 0, 0, 857,
	0, 860, 861, 0, 858, 0, 834, 0, 0, 772,
	739, 732, 928, 843, 925, 0, 769, 809, 1592, 1595,
	1586, 801, 859, 862, 863, 844, 817, 0, 0, 768,
	770, 771, 923, 769, 929, 777, 777, 0, 777, 928,
	783, 0, 928, 926, 0, 924, 0, 777, 786,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 463, 3, 469, 464, 3,
	474, 475, 467, 465, 479, 466, 476, 468, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 482, 3,
	455, 457, 456, 460, 478, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 472, 3, 473, 470, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 480, 462, 481, 458,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 459, 57798, 461, 57799, 471,
	57800, 477, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1123
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1132
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1133
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1134
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1135
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1136
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1137
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1138
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1139
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1145
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1159
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1160
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1161
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1162
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1163
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1164
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1218
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1244
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1255
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1270
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1274
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1278
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1292
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1311
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1343
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1347
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1351
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1357
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1361
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1367
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1376
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1387
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1391
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1397
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1405
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1415
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1419
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1429
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1440
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1447
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1459
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1466
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1474
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1479
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1483
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1494
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1502
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1513
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1523
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1533
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1542
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1553
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1559
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1567
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1571
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1585
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1590
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1611
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1622
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1632
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1637
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1662
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1667
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1672
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1693
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1710
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1714
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1722
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1729
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1738
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1747
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1752
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1759
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1767
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1782
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1790
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1794
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1804
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1815
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1825
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1855
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1859
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1862
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1885
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1889
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1892
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1896
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1900
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1906
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1916
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1953
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1962
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1968
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1973
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1978
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1983
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1988
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1992
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2008
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2011
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2015
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2019
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2027
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2037
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2041
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2051
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2059
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2065
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2075
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2079
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2083
		{
			sqlVAL.union.val = nil
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2089
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2103
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2104
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2116
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2124
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2129
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2139
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2148
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2156
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2162
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2165
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2175
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2184
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2205
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2209
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2213
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2232
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2237
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2249
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2251
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2252
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2253
		{
			return helpWith(sqllex, "CREATE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplemented(sqllex, "create cast")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2260
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplemented(sqllex, "create operator")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplemented(sqllex, "create publication")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2271
		{
			return unimplemented(sqllex, "create rule")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2272
		{
			return unimplemented(sqllex, "create server")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2273
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2275
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2278
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2279
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2282
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2283
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2286
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2287
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2300
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2301
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2302
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2304
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2305
		{
			return unimplemented(sqllex, "drop server")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2306
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2307
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2308
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2309
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2313
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2314
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2315
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2316
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2317
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2319
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2320
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2321
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2322
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2332
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2340
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2344
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2348
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2354
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2358
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2367
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2386
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2390
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2401
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2413
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2421
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2429
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2439
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2443
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2460
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2464
		{

			sqlVAL.union.val = nil
		}
	case 312:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2478
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2488
		{
			return helpWith(sqllex, "DELETE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2491
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2492
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2500
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2503
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2504
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2505
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2506
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2516
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2517
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2518
		{
			return helpWith(sqllex, "DROP")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2521
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2522
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2523
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2524
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2525
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2537
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2548
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2552
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2555
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2567
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2570
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2578
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2586
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2593
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2601
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2609
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2616
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2624
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2628
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2631
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2635
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2640
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2663
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2670
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2672
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2680
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2688
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2696
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2704
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2715
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2719
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2722
		{
			return helpWith(sqllex, "DELETE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2724
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2725
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2726
		{
			return helpWith(sqllex, "INSERT")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2727
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2729
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2730
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2731
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2734
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2739
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2740
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2746
		{
			return helpWith(sqllex, "DELETE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2747
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2748
		{
			return helpWith(sqllex, "INSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2754
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2755
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2759
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2773
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2781
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2789
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2793
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2807
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2814
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2822
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2826
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2830
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2840
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2844
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2848
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2852
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2855
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2875
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2879
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2883
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2886
		{
			return helpWith(sqllex, "GRANT")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2906
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2910
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2914
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2917
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2926
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2936
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2954
		{
			return helpWith(sqllex, "RESET")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2955
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2963
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2967
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2970
		{
			return helpWith(sqllex, "RESET")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2978
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2981
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2992
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2995
		{
			return helpWith(sqllex, "USE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2999
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3000
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3001
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3002
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3006
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3007
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3008
		{
			return helpWith(sqllex, "USE")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3024
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3039
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3060
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3068
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3072
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3076
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3082
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3092
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3096
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3100
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3104
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3108
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3119
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3122
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3132
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3148
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3152
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3157
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3174
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3177
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3179
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3182
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3186
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3205
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3212
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3217
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3222
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3227
		{
			return unimplemented(sqllex, "set from current")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3228
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3236
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3241
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3248
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3252
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3258
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3262
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3269
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3294
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3300
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3304
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3308
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3312
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3316
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3322
		{
			sqlVAL.union.val = tree.Low
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3326
		{
			sqlVAL.union.val = tree.Normal
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3330
		{
			sqlVAL.union.val = tree.High
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3341
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3345
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3349
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3354
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3358
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3371
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3372
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3373
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3374
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3375
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3376
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3378
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3379
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3380
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3381
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3383
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3386
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3387
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3389
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3390
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3391
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3392
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3394
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3395
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3396
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3397
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3399
		{
			return helpWith(sqllex, "SHOW")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3404
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3405
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3408
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3415
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3416
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3417
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3428
		{
			sqlVAL.str = "client_encoding"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3431
		{
			sqlVAL.str = "timezone"
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3432
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3446
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3450
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3454
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3465
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3473
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3481
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3489
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3498
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3507
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3515
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3525
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3532
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3534
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3537
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3539
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3543
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3546
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3557
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3565
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3573
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3588
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3591
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3604
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3612
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3620
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3623
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3625
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3629
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3633
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3642
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3645
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3656
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3658
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3661
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3669
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3672
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3674
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3677
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = true
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3683
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3685
		{
			sqlVAL.union.val = false
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3695
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3699
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3702
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3703
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3705
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3709
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3712
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3714
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3722
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3730
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3739
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3742
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3744
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3747
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3749
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3753
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3757
		{
			sqlVAL.union.val = false
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3765
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3768
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3770
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3773
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3781
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3791
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3801
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3804
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3807
		{
			sqlVAL.union.val = true
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3808
		{
			sqlVAL.union.val = false
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3815
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3819
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3822
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3829
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3833
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3836
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3843
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3847
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3854
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3857
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3865
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3870
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3875
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3879
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3887
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3891
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3895
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3908
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3911
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3919
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3922
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3926
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3930
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3934
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3942
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3950
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3957
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3964
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3968
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3979
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3987
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3993
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4002
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4007
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4011
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4014
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4018
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4025
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4030
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4150
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4154
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4158
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4197
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4201
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4206
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4210
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4219
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4226
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4230
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4242
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4251
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4254
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4262
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4268
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4274
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4313
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4328
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4345
		{
			sqlVAL.union.val = nil
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4349
		{

			sqlVAL.union.val = nil
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4355
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4360
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4366
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4370
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4375
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4380
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4391
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4397
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4401
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4407
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4420
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4434
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4435
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4436
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = true
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4455
		{
			sqlVAL.union.val = true
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4456
		{
			sqlVAL.union.val = false
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4460
		{
			sqlVAL.union.val = true
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4461
		{
			sqlVAL.union.val = true
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4463
		{
			sqlVAL.union.val = true
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4464
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4469
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4491
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4494
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4498
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4507
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4514
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4519
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4524
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4530
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4537
		{
			sqlVAL.str = ""
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4550
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4557
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4564
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4570
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4574
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4580
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4590
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4594
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4600
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4614
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4629
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4635
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4639
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4643
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4647
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4651
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4655
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4659
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4677
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4681
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4685
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4689
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4693
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4700
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4704
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4708
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4718
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4722
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 808:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4733
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4744
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4757
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4779
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4784
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4790
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4796
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4807
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4819
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4833
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4837
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4843
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4853
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4868
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4875
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4881
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4892
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4896
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4902
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4918
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4922
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4928
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4933
		{
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4934
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4935
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4936
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4937
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4938
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4955
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4959
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4971
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4981
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5001
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5005
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5009
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5013
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5022
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5026
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5030
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5034
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5038
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5044
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5050
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5062
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5066
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5070
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 864:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5093
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5102
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5110
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5114
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5117
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5118
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5121
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5122
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5124
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5125
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5126
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5136
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5139
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5141
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5143
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5145
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5146
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5148
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5149
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5151
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5153
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5161
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5164
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5172
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5182
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5186
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5189
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5197
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5201
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5204
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5210
		{
			sqlVAL.union.val = true
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5214
		{

			sqlVAL.union.val = true
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5219
		{
			sqlVAL.union.val = false
		}
	case 899:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5229
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5240
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5250
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5251
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5263
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5267
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5275
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5285
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5289
		{
			sqlVAL.union.val = nil
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5295
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5299
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5304
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5305
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5311
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5313
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5315
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5317
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5319
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5321
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5337
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Sharded:     sqlDollar[11].union.shardedIndexDef(),
				Storing:     sqlDollar[12].union.nameList(),
				Interleave:  sqlDollar[13].union.interleave(),
				PartitionBy: sqlDollar[14].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5352
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Sharded:     sqlDollar[14].union.shardedIndexDef(),
				Storing:     sqlDollar[15].union.nameList(),
				Interleave:  sqlDollar[16].union.interleave(),
				PartitionBy: sqlDollar[17].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5368
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5382
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5396
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5399
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5400
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5404
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5419
		{
			sqlVAL.union.val = false
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5425
		{
			sqlVAL.union.val = true
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5429
		{
			sqlVAL.union.val = false
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5435
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5448
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5470
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5471
		{
			sqlVAL.str = ""
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5475
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5479
		{
			sqlVAL.union.val = tree.Descending
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5483
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 942:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5489
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5495
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5501
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5509
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5515
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5523
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5529
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5537
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5546
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5547
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5550
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5551
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5559
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5562
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5572
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5581
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5584
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5595
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5599
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5600
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5601
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5617
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5620
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5625
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5635
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5638
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5640
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5643
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5647
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5652
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5653
		{
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5654
		{
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5664
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5668
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5671
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5674
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5675
		{
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5679
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5683
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5689
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5693
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5699
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5703
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5716
		{
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5718
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5722
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5727
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5731
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5735
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5741
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5747
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5753
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5757
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5767
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5777
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5787
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5791
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5795
		{
			sqlVAL.str = ""
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5801
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5805
		{
			sqlVAL.str = ""
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5811
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5815
		{
			sqlVAL.str = ""
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5821
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.str = ""
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5830
		{
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5831
		{
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5843
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5850
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5857
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5868
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5875
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5879
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5888
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5893
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5899
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5903
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5907
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5913
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5937
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5941
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5945
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5954
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5955
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5957
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5963
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5968
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5972
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5989
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6001
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6004
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6007
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6013
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6030
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6033
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6037
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6080
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6086
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6105
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6109
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6113
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6117
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6121
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6125
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6129
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6133
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6139
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6143
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6147
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6151
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6157
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6166
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6167
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6168
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6169
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6172
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6173
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6176
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6177
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6183
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6218
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6219
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6220
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6242
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6255
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6269
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6281
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6285
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6294
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6303
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6325
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6337
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6341
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6346
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6356
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6362
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6370
		{
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6371
		{
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6375
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6379
		{
			sqlVAL.union.val = nil
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6384
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6385
		{
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6389
		{
			sqlVAL.union.val = true
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6393
		{
			sqlVAL.union.val = false
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6397
		{
			sqlVAL.union.val = false
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6403
		{
			sqlVAL.union.val = true
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6409
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6414
		{
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6415
		{
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6419
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6423
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6429
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6435
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6445
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6466
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6471
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6483
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6487
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6491
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6500
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6509
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6521
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6525
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6529
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6533
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6547
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6559
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6566
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6588
		{
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6589
		{
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6592
		{
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6593
		{
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6610
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6614
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6620
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6624
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6646
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6648
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6660
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6663
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6665
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6671
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6685
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6690
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6695
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6701
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6706
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6718
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6729
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6737
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6745
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6776
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6786
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6821
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6832
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6862
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6873
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6877
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6889
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6895
		{
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6897
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = nil
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6901
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6902
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6916
		{
			sqlVAL.union.val = true
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6920
		{
			sqlVAL.union.val = false
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6966
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6977
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6983
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6990
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.str = tree.AstFull
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.str = tree.AstRight
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.str = tree.AstInner
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7014
		{
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7015
		{
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.str = tree.AstHash
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7040
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.str = ""
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7071
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7072
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7077
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7082
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7096
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7100
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7106
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7112
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7122
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7132
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7151
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7164
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7172
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7173
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7191
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7193
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7201
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7230
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7234
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7238
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7242
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7246
		{
			sqlVAL.union.val = types.String
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7250
		{
			sqlVAL.union.val = types.Name
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7254
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7283
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = types.INet
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = types.Oid
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7303
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7334
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7342
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7350
		{
			sqlVAL.union.val = nil
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7365
		{
			sqlVAL.union.val = types.Int2
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7369
		{
			sqlVAL.union.val = types.Int2
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7373
		{
			sqlVAL.union.val = types.Int4
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7377
		{
			sqlVAL.union.val = types.Int
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = types.Int
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7385
		{
			sqlVAL.union.val = types.Int
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7389
		{
			sqlVAL.union.val = types.Float4
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7393
		{
			sqlVAL.union.val = types.Float4
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7397
		{
			sqlVAL.union.val = types.Float
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = types.Float
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7409
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7417
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7425
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = types.Bool
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = types.Bool
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = types.RegType
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7466
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7479
		{
			sqlVAL.union.val = types.Float
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7485
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7491
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7499
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7503
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7507
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7513
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7531
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7535
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7539
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7543
		{
			sqlVAL.union.val = types.String
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = true
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = false
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = types.Date
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7562
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7570
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7582
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7584
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7593
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7601
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7614
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7618
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7628
		{
			sqlVAL.union.val = true
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = false
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = false
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = types.Interval
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7642
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7653
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7677
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7685
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7693
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7717
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7741
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = nil
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7771
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7820
		{

			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7833
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7838
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7842
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7846
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7850
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7870
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7874
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7878
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7882
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7886
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7890
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7906
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7910
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7914
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7918
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7926
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8014
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8066
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8070
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8074
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8077
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8115
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8119
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8139
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8143
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8165
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8181
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8185
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8189
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8209
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8225
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8233
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8307
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8347
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8355
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8359
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8364
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8390
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8399
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8410
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8414
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8425
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8444
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8448
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8452
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8455
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8456
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8464
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8468
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8471
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8482
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8489
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8499
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8508
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8512
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8522
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8526
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8534
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8556
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8560
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8564
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8572
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8588
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8592
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8602
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8604
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8607
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8609
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8613
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8616
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8618
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8622
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8625
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8634
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8636
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8640
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8643
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8645
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8648
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8650
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8653
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8655
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8658
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8660
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8663
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8665
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8669
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8672
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8673
		{
			return unimplemented(sqllex, "treat")
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8679
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8683
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8687
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8691
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8694
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8699
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8704
		{
			return unimplemented(sqllex, "within group")
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8705
		{
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8709
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8713
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8720
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8724
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8730
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8740
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8763
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8783
		{
			sqlVAL.str = ""
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8789
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8793
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8799
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8807
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8815
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8823
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8829
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8842
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8870
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8874
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8878
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8882
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8889
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8902
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8906
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8910
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8915
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8928
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8932
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8939
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8951
		{
			sqlVAL.union.val = tree.Any
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8955
		{
			sqlVAL.union.val = tree.Some
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8959
		{
			sqlVAL.union.val = tree.All
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8964
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8965
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8966
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8967
		{
			sqlVAL.union.val = tree.Div
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8968
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8969
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8970
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8971
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8972
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8973
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8974
		{
			sqlVAL.union.val = tree.LT
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8975
		{
			sqlVAL.union.val = tree.GT
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8976
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8977
		{
			sqlVAL.union.val = tree.LE
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8978
		{
			sqlVAL.union.val = tree.GE
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8979
		{
			sqlVAL.union.val = tree.NE
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8983
		{
			sqlVAL.union.val = tree.Like
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8984
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8985
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8986
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9009
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9013
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9019
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9023
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9027
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9038
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9042
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9048
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9052
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9059
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9065
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9075
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9085
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9089
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9095
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9105
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9109
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9132
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9136
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9140
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9146
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9153
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9157
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9174
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9178
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9182
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9186
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9190
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9196
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9202
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9208
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9212
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9216
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9222
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9234
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9241
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9251
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9257
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9261
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9268
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9274
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9278
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9285
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9291
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9300
		{
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9301
		{
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9305
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9315
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9324
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9328
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9332
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9340
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9350
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9354
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9373
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9381
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9404
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9413
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9417
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9421
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9425
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9431
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9450
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9454
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9466
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9470
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9479
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9490
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9499
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9507
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9519
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9620
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9627
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9631
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1749:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9635
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1751:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9649
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9653
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9657
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9670
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9688
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9701
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9708
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9733
		{
			sqlVAL.str = ""
		}
	case 1769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9739
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9743
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
