// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:566
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8452

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	428, 57,
	-2, 904,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	170, 739,
	-2, 0,
	-1, 60,
	102, 904,
	176, 904,
	376, 904,
	377, 904,
	-2, 0,
	-1, 74,
	116, 878,
	129, 878,
	184, 878,
	211, 878,
	240, 878,
	248, 878,
	373, 878,
	-2, 867,
	-1, 108,
	121, 549,
	200, 549,
	363, 549,
	-2, 0,
	-1, 113,
	4, 906,
	20, 906,
	21, 906,
	22, 906,
	23, 906,
	25, 906,
	30, 906,
	35, 906,
	36, 906,
	37, 906,
	38, 906,
	39, 906,
	40, 906,
	41, 906,
	42, 906,
	43, 906,
	44, 906,
	46, 906,
	47, 906,
	48, 906,
	49, 906,
	50, 906,
	51, 906,
	52, 906,
	55, 906,
	56, 906,
	57, 906,
	58, 906,
	60, 906,
	61, 906,
	65, 906,
	66, 906,
	67, 906,
	68, 906,
	69, 906,
	71, 906,
	72, 906,
	73, 906,
	74, 906,
	76, 906,
	78, 906,
	79, 906,
	82, 906,
	83, 906,
	91, 906,
	92, 906,
	93, 906,
	94, 906,
	95, 906,
	96, 906,
	97, 906,
	98, 906,
	100, 906,
	102, 906,
	104, 906,
	107, 906,
	108, 906,
	109, 906,
	111, 906,
	112, 906,
	114, 906,
	115, 906,
	117, 906,
	118, 906,
	119, 906,
	120, 906,
	121, 906,
	122, 906,
	123, 906,
	124, 906,
	125, 906,
	126, 906,
	134, 906,
	135, 906,
	136, 906,
	137, 906,
	138, 906,
	139, 906,
	141, 906,
	143, 906,
	147, 906,
	149, 906,
	150, 906,
	152, 906,
	154, 906,
	155, 906,
	156, 906,
	157, 906,
	158, 906,
	159, 906,
	160, 906,
	161, 906,
	162, 906,
	165, 906,
	166, 906,
	171, 906,
	172, 906,
	173, 906,
	176, 906,
	177, 906,
	178, 906,
	179, 906,
	180, 906,
	181, 906,
	182, 906,
	183, 906,
	185, 906,
	187, 906,
	190, 906,
	191, 906,
	192, 906,
	194, 906,
	195, 906,
	198, 906,
	199, 906,
	200, 906,
	202, 906,
	203, 906,
	205, 906,
	206, 906,
	208, 906,
	209, 906,
	212, 906,
	213, 906,
	216, 906,
	218, 906,
	221, 906,
	222, 906,
	223, 906,
	224, 906,
	225, 906,
	227, 906,
	228, 906,
	229, 906,
	230, 906,
	235, 906,
	236, 906,
	237, 906,
	238, 906,
	239, 906,
	241, 906,
	242, 906,
	244, 906,
	245, 906,
	246, 906,
	249, 906,
	250, 906,
	252, 906,
	254, 906,
	255, 906,
	256, 906,
	257, 906,
	258, 906,
	259, 906,
	260, 906,
	261, 906,
	263, 906,
	264, 906,
	265, 906,
	266, 906,
	267, 906,
	269, 906,
	270, 906,
	271, 906,
	272, 906,
	273, 906,
	274, 906,
	275, 906,
	276, 906,
	277, 906,
	279, 906,
	280, 906,
	281, 906,
	282, 906,
	283, 906,
	285, 906,
	286, 906,
	287, 906,
	288, 906,
	289, 906,
	290, 906,
	291, 906,
	293, 906,
	295, 906,
	296, 906,
	297, 906,
	298, 906,
	299, 906,
	300, 906,
	302, 906,
	303, 906,
	304, 906,
	305, 906,
	306, 906,
	307, 906,
	308, 906,
	310, 906,
	311, 906,
	312, 906,
	313, 906,
	314, 906,
	315, 906,
	316, 906,
	317, 906,
	318, 906,
	320, 906,
	321, 906,
	322, 906,
	323, 906,
	325, 906,
	326, 906,
	327, 906,
	328, 906,
	330, 906,
	331, 906,
	332, 906,
	333, 906,
	334, 906,
	335, 906,
	336, 906,
	337, 906,
	338, 906,
	339, 906,
	340, 906,
	341, 906,
	343, 906,
	344, 906,
	346, 906,
	347, 906,
	348, 906,
	349, 906,
	350, 906,
	351, 906,
	352, 906,
	353, 906,
	354, 906,
	355, 906,
	357, 906,
	358, 906,
	359, 906,
	360, 906,
	363, 906,
	364, 906,
	365, 906,
	366, 906,
	368, 906,
	369, 906,
	371, 906,
	372, 906,
	375, 906,
	376, 906,
	377, 906,
	378, 906,
	380, 906,
	382, 906,
	383, 906,
	384, 906,
	385, 906,
	386, 906,
	387, 906,
	389, 906,
	390, 906,
	391, 906,
	396, 906,
	397, 906,
	398, 906,
	399, 906,
	400, 906,
	401, 906,
	-2, 0,
	-1, 135,
	116, 877,
	129, 877,
	184, 877,
	211, 877,
	240, 877,
	248, 877,
	373, 877,
	-2, 870,
	-1, 140,
	1, 800,
	190, 800,
	269, 800,
	274, 800,
	427, 800,
	428, 800,
	-2, 0,
	-1, 142,
	1, 800,
	427, 800,
	428, 800,
	-2, 0,
	-1, 143,
	1, 800,
	427, 800,
	428, 800,
	-2, 0,
	-1, 144,
	1, 804,
	427, 804,
	428, 804,
	-2, 0,
	-1, 172,
	4, 913,
	5, 913,
	6, 913,
	7, 913,
	8, 913,
	9, 913,
	20, 913,
	21, 913,
	22, 913,
	23, 913,
	25, 913,
	30, 913,
	31, 913,
	35, 913,
	36, 913,
	37, 913,
	38, 913,
	39, 913,
	40, 913,
	41, 913,
	42, 913,
	43, 913,
	44, 913,
	46, 913,
	47, 913,
	48, 913,
	49, 913,
	50, 913,
	51, 913,
	52, 913,
	53, 913,
	54, 913,
	55, 913,
	56, 913,
	57, 913,
	58, 913,
	60, 913,
	61, 913,
	63, 913,
	65, 913,
	66, 913,
	67, 913,
	68, 913,
	69, 913,
	71, 913,
	72, 913,
	73, 913,
	74, 913,
	76, 913,
	78, 913,
	79, 913,
	81, 913,
	82, 913,
	83, 913,
	84, 913,
	85, 913,
	86, 913,
	87, 913,
	88, 913,
	89, 913,
	90, 913,
	91, 913,
	92, 913,
	93, 913,
	94, 913,
	95, 913,
	96, 913,
	97, 913,
	98, 913,
	99, 913,
	100, 913,
	102, 913,
	104, 913,
	107, 913,
	108, 913,
	109, 913,
	111, 913,
	112, 913,
	114, 913,
	115, 913,
	117, 913,
	118, 913,
	119, 913,
	120, 913,
	121, 913,
	122, 913,
	123, 913,
	124, 913,
	125, 913,
	126, 913,
	127, 913,
	128, 913,
	134, 913,
	135, 913,
	136, 913,
	137, 913,
	138, 913,
	139, 913,
	141, 913,
	143, 913,
	146, 913,
	147, 913,
	149, 913,
	150, 913,
	152, 913,
	154, 913,
	155, 913,
	156, 913,
	157, 913,
	158, 913,
	159, 913,
	160, 913,
	161, 913,
	162, 913,
	163, 913,
	165, 913,
	166, 913,
	171, 913,
	172, 913,
	173, 913,
	175, 913,
	176, 913,
	177, 913,
	178, 913,
	179, 913,
	180, 913,
	181, 913,
	182, 913,
	183, 913,
	185, 913,
	187, 913,
	188, 913,
	189, 913,
	190, 913,
	191, 913,
	192, 913,
	193, 913,
	194, 913,
	195, 913,
	198, 913,
	199, 913,
	200, 913,
	202, 913,
	203, 913,
	205, 913,
	206, 913,
	207, 913,
	208, 913,
	209, 913,
	210, 913,
	212, 913,
	213, 913,
	216, 913,
	218, 913,
	219, 913,
	220, 913,
	221, 913,
	222, 913,
	223, 913,
	224, 913,
	225, 913,
	226, 913,
	227, 913,
	228, 913,
	229, 913,
	230, 913,
	231, 913,
	233, 913,
	234, 913,
	235, 913,
	236, 913,
	237, 913,
	238, 913,
	239, 913,
	241, 913,
	242, 913,
	245, 913,
	246, 913,
	249, 913,
	250, 913,
	251, 913,
	252, 913,
	253, 913,
	254, 913,
	255, 913,
	256, 913,
	257, 913,
	258, 913,
	259, 913,
	260, 913,
	261, 913,
	263, 913,
	264, 913,
	265, 913,
	266, 913,
	267, 913,
	269, 913,
	270, 913,
	271, 913,
	272, 913,
	273, 913,
	274, 913,
	275, 913,
	276, 913,
	277, 913,
	279, 913,
	280, 913,
	281, 913,
	282, 913,
	283, 913,
	285, 913,
	286, 913,
	287, 913,
	288, 913,
	289, 913,
	290, 913,
	291, 913,
	293, 913,
	294, 913,
	295, 913,
	296, 913,
	297, 913,
	298, 913,
	299, 913,
	300, 913,
	302, 913,
	303, 913,
	304, 913,
	305, 913,
	306, 913,
	307, 913,
	308, 913,
	310, 913,
	311, 913,
	312, 913,
	313, 913,
	314, 913,
	315, 913,
	316, 913,
	317, 913,
	318, 913,
	319, 913,
	320, 913,
	321, 913,
	322, 913,
	323, 913,
	324, 913,
	325, 913,
	326, 913,
	327, 913,
	328, 913,
	330, 913,
	331, 913,
	332, 913,
	333, 913,
	334, 913,
	335, 913,
	336, 913,
	337, 913,
	338, 913,
	339, 913,
	340, 913,
	341, 913,
	343, 913,
	344, 913,
	346, 913,
	347, 913,
	348, 913,
	349, 913,
	350, 913,
	351, 913,
	352, 913,
	353, 913,
	354, 913,
	355, 913,
	357, 913,
	358, 913,
	359, 913,
	360, 913,
	363, 913,
	364, 913,
	365, 913,
	366, 913,
	367, 913,
	368, 913,
	369, 913,
	371, 913,
	372, 913,
	375, 913,
	376, 913,
	377, 913,
	378, 913,
	379, 913,
	380, 913,
	382, 913,
	383, 913,
	384, 913,
	385, 913,
	386, 913,
	387, 913,
	389, 913,
	390, 913,
	391, 913,
	396, 913,
	397, 913,
	398, 913,
	399, 913,
	400, 913,
	401, 913,
	402, 913,
	410, 913,
	415, 913,
	416, 913,
	417, 913,
	424, 913,
	430, 913,
	-2, 0,
	-1, 175,
	1, 57,
	428, 57,
	-2, 904,
	-1, 208,
	426, 1491,
	429, 1491,
	-2, 592,
	-1, 209,
	426, 1493,
	429, 1493,
	-2, 593,
	-1, 210,
	426, 1492,
	429, 1492,
	-2, 594,
	-1, 211,
	429, 1443,
	-2, 595,
	-1, 628,
	145, 1611,
	361, 1611,
	407, 1611,
	426, 1611,
	-2, 0,
	-1, 629,
	145, 1531,
	361, 1531,
	407, 1531,
	426, 1531,
	-2, 0,
	-1, 631,
	145, 1685,
	361, 1685,
	407, 1685,
	426, 1685,
	-2, 0,
	-1, 633,
	145, 1714,
	361, 1714,
	407, 1714,
	426, 1714,
	-2, 0,
	-1, 640,
	145, 1616,
	361, 1616,
	407, 1616,
	426, 1616,
	-2, 426,
	-1, 673,
	1, 522,
	423, 522,
	425, 522,
	427, 522,
	428, 522,
	-2, 0,
	-1, 674,
	1, 591,
	142, 591,
	423, 591,
	425, 591,
	427, 591,
	428, 591,
	-2, 0,
	-1, 680,
	1, 536,
	423, 536,
	425, 536,
	427, 536,
	428, 536,
	-2, 0,
	-1, 682,
	1, 540,
	423, 540,
	425, 540,
	427, 540,
	428, 540,
	-2, 0,
	-1, 684,
	1, 550,
	423, 550,
	425, 550,
	427, 550,
	428, 550,
	-2, 0,
	-1, 685,
	1, 556,
	423, 556,
	425, 556,
	427, 556,
	428, 556,
	-2, 0,
	-1, 686,
	1, 559,
	423, 559,
	425, 559,
	427, 559,
	428, 559,
	-2, 0,
	-1, 690,
	1, 573,
	423, 573,
	425, 573,
	427, 573,
	428, 573,
	-2, 0,
	-1, 691,
	1, 575,
	423, 575,
	425, 575,
	427, 575,
	428, 575,
	-2, 0,
	-1, 719,
	129, 917,
	211, 917,
	240, 917,
	-2, 873,
	-1, 727,
	129, 916,
	211, 916,
	240, 916,
	-2, 871,
	-1, 754,
	424, 1790,
	-2, 1205,
	-1, 755,
	424, 1791,
	-2, 1206,
	-1, 780,
	424, 1485,
	-2, 1476,
	-1, 786,
	5, 1039,
	-2, 1521,
	-1, 787,
	5, 1040,
	-2, 1526,
	-1, 788,
	5, 1041,
	-2, 1525,
	-1, 789,
	5, 1042,
	-2, 1710,
	-1, 790,
	5, 1043,
	-2, 1618,
	-1, 791,
	5, 1044,
	-2, 1678,
	-1, 792,
	5, 1045,
	-2, 1680,
	-1, 793,
	5, 1046,
	-2, 1681,
	-1, 794,
	5, 1047,
	-2, 1682,
	-1, 795,
	5, 1048,
	-2, 1690,
	-1, 796,
	5, 1049,
	-2, 1722,
	-1, 797,
	5, 1050,
	-2, 1587,
	-1, 798,
	5, 1051,
	-2, 1520,
	-1, 799,
	5, 1052,
	-2, 1626,
	-1, 800,
	5, 1053,
	-2, 1627,
	-1, 801,
	5, 1054,
	-2, 1591,
	-1, 802,
	5, 1055,
	424, 1500,
	-2, 1491,
	-1, 803,
	5, 1103,
	424, 1103,
	-2, 1757,
	-1, 808,
	424, 1501,
	-2, 1492,
	-1, 810,
	5, 1059,
	-2, 1755,
	-1, 811,
	5, 1060,
	-2, 1590,
	-1, 812,
	5, 1061,
	-2, 1592,
	-1, 813,
	5, 1062,
	-2, 1593,
	-1, 814,
	5, 1063,
	-2, 1594,
	-1, 815,
	5, 1064,
	-2, 1756,
	-1, 816,
	5, 1065,
	-2, 1768,
	-1, 817,
	5, 1066,
	-2, 1737,
	-1, 818,
	5, 1067,
	-2, 1766,
	-1, 819,
	5, 1068,
	-2, 1574,
	-1, 820,
	5, 1069,
	-2, 1575,
	-1, 821,
	5, 1083,
	-2, 1749,
	-1, 823,
	5, 1058,
	-2, 1745,
	-1, 824,
	5, 1058,
	-2, 1744,
	-1, 825,
	5, 1058,
	-2, 1761,
	-1, 826,
	5, 1075,
	-2, 1739,
	-1, 827,
	5, 1076,
	-2, 1522,
	-1, 828,
	5, 1093,
	-2, 1738,
	-1, 830,
	5, 1094,
	-2, 1550,
	-1, 831,
	5, 1095,
	-2, 1770,
	-1, 832,
	5, 1097,
	-2, 1771,
	-1, 833,
	5, 1099,
	-2, 1772,
	-1, 834,
	5, 1101,
	-2, 1712,
	-1, 835,
	5, 1027,
	-2, 1600,
	-1, 836,
	5, 1028,
	-2, 1601,
	-1, 856,
	5, 1091,
	-2, 1700,
	-1, 873,
	5, 1093,
	-2, 1741,
	-1, 874,
	5, 1093,
	-2, 1740,
	-1, 875,
	5, 1090,
	-2, 1776,
	-1, 936,
	424, 1500,
	-2, 1491,
	-1, 951,
	285, 1473,
	417, 1473,
	-2, 1472,
	-1, 1100,
	259, 902,
	-2, 718,
	-1, 1112,
	243, 1495,
	-2, 0,
	-1, 1155,
	1, 293,
	423, 293,
	427, 293,
	428, 293,
	-2, 876,
	-1, 1158,
	4, 1775,
	10, 1775,
	11, 1775,
	13, 1775,
	14, 1775,
	15, 1775,
	16, 1775,
	17, 1775,
	18, 1775,
	20, 1775,
	21, 1775,
	22, 1775,
	23, 1775,
	25, 1775,
	28, 1775,
	30, 1775,
	32, 1775,
	35, 1775,
	36, 1775,
	37, 1775,
	38, 1775,
	39, 1775,
	40, 1775,
	41, 1775,
	42, 1775,
	43, 1775,
	44, 1775,
	46, 1775,
	47, 1775,
	48, 1775,
	49, 1775,
	50, 1775,
	51, 1775,
	52, 1775,
	55, 1775,
	56, 1775,
	57, 1775,
	58, 1775,
	60, 1775,
	61, 1775,
	62, 1775,
	65, 1775,
	66, 1775,
	67, 1775,
	68, 1775,
	69, 1775,
	70, 1775,
	71, 1775,
	72, 1775,
	73, 1775,
	74, 1775,
	76, 1775,
	77, 1775,
	78, 1775,
	79, 1775,
	81, 1775,
	82, 1775,
	83, 1775,
	91, 1775,
	92, 1775,
	93, 1775,
	94, 1775,
	95, 1775,
	96, 1775,
	97, 1775,
	98, 1775,
	100, 1775,
	102, 1775,
	104, 1775,
	107, 1775,
	108, 1775,
	109, 1775,
	111, 1775,
	112, 1775,
	114, 1775,
	115, 1775,
	117, 1775,
	118, 1775,
	119, 1775,
	120, 1775,
	121, 1775,
	122, 1775,
	123, 1775,
	124, 1775,
	125, 1775,
	126, 1775,
	130, 1775,
	131, 1775,
	132, 1775,
	133, 1775,
	134, 1775,
	135, 1775,
	136, 1775,
	137, 1775,
	138, 1775,
	139, 1775,
	140, 1775,
	141, 1775,
	143, 1775,
	146, 1775,
	147, 1775,
	149, 1775,
	150, 1775,
	152, 1775,
	154, 1775,
	155, 1775,
	156, 1775,
	157, 1775,
	158, 1775,
	159, 1775,
	160, 1775,
	161, 1775,
	162, 1775,
	163, 1775,
	164, 1775,
	165, 1775,
	166, 1775,
	167, 1775,
	168, 1775,
	169, 1775,
	171, 1775,
	172, 1775,
	173, 1775,
	175, 1775,
	176, 1775,
	177, 1775,
	178, 1775,
	179, 1775,
	180, 1775,
	181, 1775,
	182, 1775,
	183, 1775,
	185, 1775,
	187, 1775,
	188, 1775,
	189, 1775,
	190, 1775,
	191, 1775,
	192, 1775,
	193, 1775,
	194, 1775,
	195, 1775,
	196, 1775,
	197, 1775,
	198, 1775,
	199, 1775,
	200, 1775,
	202, 1775,
	203, 1775,
	205, 1775,
	206, 1775,
	207, 1775,
	208, 1775,
	209, 1775,
	210, 1775,
	212, 1775,
	213, 1775,
	216, 1775,
	217, 1775,
	218, 1775,
	221, 1775,
	222, 1775,
	223, 1775,
	224, 1775,
	225, 1775,
	226, 1775,
	227, 1775,
	228, 1775,
	229, 1775,
	230, 1775,
	233, 1775,
	235, 1775,
	236, 1775,
	237, 1775,
	238, 1775,
	239, 1775,
	241, 1775,
	242, 1775,
	245, 1775,
	246, 1775,
	247, 1775,
	249, 1775,
	250, 1775,
	252, 1775,
	254, 1775,
	255, 1775,
	256, 1775,
	257, 1775,
	258, 1775,
	259, 1775,
	260, 1775,
	261, 1775,
	263, 1775,
	264, 1775,
	265, 1775,
	266, 1775,
	267, 1775,
	269, 1775,
	270, 1775,
	271, 1775,
	272, 1775,
	273, 1775,
	274, 1775,
	275, 1775,
	276, 1775,
	277, 1775,
	279, 1775,
	280, 1775,
	281, 1775,
	282, 1775,
	283, 1775,
	284, 1775,
	285, 1775,
	286, 1775,
	287, 1775,
	288, 1775,
	289, 1775,
	290, 1775,
	291, 1775,
	293, 1775,
	294, 1775,
	295, 1775,
	296, 1775,
	297, 1775,
	298, 1775,
	299, 1775,
	300, 1775,
	301, 1775,
	302, 1775,
	303, 1775,
	304, 1775,
	305, 1775,
	306, 1775,
	307, 1775,
	308, 1775,
	310, 1775,
	311, 1775,
	312, 1775,
	313, 1775,
	314, 1775,
	315, 1775,
	316, 1775,
	317, 1775,
	318, 1775,
	320, 1775,
	321, 1775,
	322, 1775,
	323, 1775,
	324, 1775,
	325, 1775,
	326, 1775,
	327, 1775,
	328, 1775,
	330, 1775,
	331, 1775,
	332, 1775,
	333, 1775,
	334, 1775,
	335, 1775,
	336, 1775,
	337, 1775,
	338, 1775,
	339, 1775,
	340, 1775,
	341, 1775,
	343, 1775,
	344, 1775,
	346, 1775,
	347, 1775,
	348, 1775,
	349, 1775,
	350, 1775,
	351, 1775,
	352, 1775,
	353, 1775,
	354, 1775,
	355, 1775,
	357, 1775,
	358, 1775,
	359, 1775,
	360, 1775,
	363, 1775,
	364, 1775,
	365, 1775,
	366, 1775,
	368, 1775,
	369, 1775,
	371, 1775,
	372, 1775,
	375, 1775,
	376, 1775,
	377, 1775,
	378, 1775,
	380, 1775,
	382, 1775,
	383, 1775,
	384, 1775,
	385, 1775,
	386, 1775,
	387, 1775,
	389, 1775,
	390, 1775,
	391, 1775,
	396, 1775,
	397, 1775,
	398, 1775,
	399, 1775,
	400, 1775,
	401, 1775,
	402, 1775,
	403, 1775,
	405, 1775,
	406, 1775,
	407, 1775,
	408, 1775,
	409, 1775,
	410, 1775,
	412, 1775,
	413, 1775,
	414, 1775,
	415, 1775,
	416, 1775,
	417, 1775,
	418, 1775,
	419, 1775,
	420, 1775,
	422, 1775,
	425, 1775,
	426, 1775,
	429, 1775,
	430, 1775,
	-2, 0,
	-1, 1177,
	145, 1685,
	361, 1685,
	407, 1685,
	426, 1685,
	-2, 0,
	-1, 1206,
	145, 1714,
	361, 1714,
	407, 1714,
	426, 1714,
	-2, 0,
	-1, 1207,
	190, 812,
	269, 812,
	274, 812,
	-2, 413,
	-1, 1278,
	1, 1729,
	423, 1729,
	425, 1729,
	426, 1729,
	427, 1729,
	428, 1729,
	-2, 571,
	-1, 1279,
	1, 1683,
	423, 1683,
	425, 1683,
	426, 1683,
	427, 1683,
	428, 1683,
	-2, 572,
	-1, 1289,
	129, 916,
	211, 916,
	240, 916,
	-2, 874,
	-1, 1373,
	116, 878,
	129, 878,
	184, 878,
	211, 878,
	240, 878,
	248, 878,
	373, 878,
	-2, 1258,
	-1, 1427,
	425, 1378,
	-2, 0,
	-1, 1431,
	190, 812,
	269, 812,
	274, 812,
	-2, 807,
	-1, 1465,
	116, 878,
	129, 878,
	184, 878,
	211, 878,
	240, 878,
	248, 878,
	373, 878,
	-2, 986,
	-1, 1675,
	190, 812,
	269, 812,
	274, 812,
	-2, 415,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1138,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1139,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1140,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1141,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1142,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1143,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1144,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1145,
	-1, 1800,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1157,
	-1, 1801,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1158,
	-1, 1802,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1159,
	-1, 1805,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1164,
	-1, 1811,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1168,
	-1, 1813,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1176,
	-1, 1814,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1177,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1178,
	-1, 1816,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1179,
	-1, 1902,
	5, 1055,
	145, 1389,
	424, 1500,
	-2, 1491,
	-1, 1903,
	145, 1390,
	-2, 1733,
	-1, 1904,
	145, 1391,
	-2, 1615,
	-1, 1905,
	145, 1392,
	-2, 1551,
	-1, 1906,
	145, 1393,
	-2, 1582,
	-1, 1907,
	145, 1394,
	-2, 1614,
	-1, 1908,
	145, 1395,
	-2, 1677,
	-1, 1977,
	1, 987,
	81, 987,
	116, 987,
	129, 987,
	146, 987,
	151, 987,
	153, 987,
	175, 987,
	184, 987,
	193, 987,
	207, 987,
	211, 987,
	226, 987,
	240, 987,
	243, 987,
	248, 987,
	292, 987,
	294, 987,
	373, 987,
	381, 987,
	393, 987,
	394, 987,
	404, 987,
	423, 987,
	425, 987,
	427, 987,
	428, 987,
	429, 987,
	-2, 986,
	-1, 1982,
	424, 1477,
	-2, 1489,
	-1, 2066,
	425, 1448,
	429, 1448,
	-2, 1464,
	-1, 2196,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1166,
	-1, 2197,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1170,
	-1, 2203,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1172,
	-1, 2436,
	259, 902,
	-2, 718,
	-1, 2507,
	190, 812,
	269, 812,
	274, 812,
	-2, 412,
	-1, 2525,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1174,
	-1, 2532,
	188, 0,
	189, 0,
	233, 0,
	-2, 1193,
	-1, 2593,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1223,
	-1, 2594,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1224,
	-1, 2595,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1225,
	-1, 2599,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1229,
	-1, 2600,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1230,
	-1, 2601,
	13, 0,
	14, 0,
	15, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1231,
	-1, 2643,
	424, 1478,
	-2, 1490,
	-1, 2758,
	188, 0,
	189, 0,
	233, 0,
	-2, 1194,
	-1, 2761,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1197,
	-1, 2762,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1199,
	-1, 2907,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1198,
	-1, 2908,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1200,
	-1, 2918,
	188, 0,
	-2, 1232,
	-1, 3006,
	188, 0,
	-2, 1233,
	-1, 3100,
	38, 0,
	163, 0,
	210, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1736,
}

const sqlPrivate = 57344

const sqlLast = 59623

var sqlAct = [...]int{

	808, 3099, 2688, 3108, 2946, 3162, 2858, 2097, 3076, 3077,
	3079, 3109, 2935, 3064, 3110, 2126, 2563, 2189, 3010, 2873,
	2105, 1768, 2652, 3098, 1145, 1084, 2897, 2454, 2706, 929,
	2701, 1969, 1058, 1828, 2829, 2814, 955, 1536, 2446, 1292,
	2225, 210, 1605, 2653, 728, 2223, 501, 2711, 2459, 2351,
	1460, 2477, 2064, 501, 2479, 496, 2922, 2094, 1106, 2340,
	501, 1551, 2302, 501, 501, 1458, 501, 210, 2448, 501,
	501, 596, 1141, 2068, 971, 2316, 501, 2106, 1550, 2792,
	948, 1439, 1547, 1562, 501, 2067, 1985, 1559, 1994, 1970,
	2327, 2616, 3011, 736, 129, 2049, 1497, 553, 1860, 1606,
	2301, 1759, 1840, 1385, 1754, 549, 2185, 1965, 1700, 574,
	28, 2458, 2418, 1476, 1972, 1519, 1431, 1513, 804, 965,
	1934, 2859, 1478, 1548, 1440, 1825, 1866, 2023, 1209, 588,
	921, 1395, 73, 1382, 1419, 2050, 903, 1854, 2065, 1128,
	2654, 211, 2022, 957, 212, 1138, 1156, 2071, 2099, 924,
	1841, 1449, 1575, 1957, 129, 638, 1898, 1368, 1293, 1291,
	206, 1699, 618, 767, 632, 1942, 498, 501, 501, 591,
	135, 1154, 1125, 1569, 546, 497, 136, 727, 1062, 1489,
	603, 926, 901, 665, 1297, 1430, 1109, 2632, 2218, 3189,
	2633, 1459, 1577, 1951, 1577, 2358, 2098, 2520, 611, 501,
	501, 501, 960, 501, 501, 974, 974, 481, 1577, 2127,
	732, 2497, 1083, 3183, 501, 501, 484, 1951, 2051, 3182,
	3159, 3156, 3134, 1951, 2828, 1528, 2828, 605, 2466, 2051,
	3128, 3127, 2465, 481, 1951, 1951, 3124, 1308, 1309, 2431,
	3125, 3121, 484, 1589, 732, 3122, 3118, 3096, 742, 3095,
	1528, 1528, 1065, 1528, 2619, 3094, 951, 3093, 1468, 1589,
	3059, 1589, 1311, 3046, 2139, 1944, 1522, 1528, 3039, 129,
	733, 550, 2828, 3037, 3035, 3008, 968, 2828, 2828, 2139,
	2990, 904, 904, 2980, 2727, 28, 2975, 2828, 2973, 1310,
	1528, 1192, 2828, 2964, 581, 1383, 552, 1528, 2963, 2956,
	720, 2129, 1528, 1528, 1951, 40, 719, 2955, 1077, 3060,
	2928, 2828, 2909, 581, 1528, 2853, 2139, 2849, 2994, 1951,
	44, 1951, 737, 2827, 40, 1857, 1589, 2828, 2760, 941,
	945, 950, 2139, 2725, 2717, 1528, 2638, 2718, 2718, 44,
	2639, 2628, 2622, 2541, 2536, 2629, 1951, 1528, 1951, 580,
	905, 1528, 2487, 1180, 2619, 1064, 2423, 768, 1063, 2313,
	2269, 2268, 2264, 1951, 1951, 1951, 1951, 1316, 580, 2249,
	1082, 2237, 807, 2250, 907, 2157, 908, 2238, 582, 1951,
	481, 1943, 2138, 1678, 2727, 1858, 2139, 59, 584, 484,
	2038, 1951, 60, 172, 1338, 1339, 1340, 582, 1983, 2125,
	2122, 2060, 1937, 1594, 1951, 1528, 59, 584, 2423, 2274,
	2275, 60, 2292, 2293, 2294, 1950, 1593, 2188, 2168, 1951,
	1594, 1181, 1527, 1308, 1309, 2224, 63, 2756, 1435, 174,
	1578, 1845, 1578, 918, 1061, 780, 175, 2467, 1697, 1176,
	1175, 829, 1174, 1173, 1331, 63, 1578, 1172, 1311, 1171,
	1859, 1856, 1170, 1169, 1168, 1167, 2468, 2102, 1166, 1165,
	1164, 1163, 1162, 1161, 1160, 909, 1076, 906, 726, 2289,
	173, 725, 724, 1308, 1309, 1310, 723, 722, 718, 166,
	717, 716, 715, 714, 172, 713, 712, 167, 711, 710,
	709, 708, 704, 1383, 703, 1181, 702, 663, 1311, 662,
	661, 660, 659, 658, 657, 656, 655, 654, 137, 653,
	501, 501, 2465, 501, 960, 960, 501, 501, 501, 172,
	174, 501, 652, 1528, 501, 1310, 651, 650, 1332, 64,
	501, 649, 648, 647, 646, 645, 644, 1861, 643, 2280,
	501, 501, 501, 501, 501, 960, 960, 932, 64, 1943,
	642, 627, 960, 1316, 626, 174, 625, 138, 66, 624,
	67, 173, 623, 622, 537, 806, 1308, 1309, 1099, 1585,
	1149, 1576, 1110, 1110, 536, 1181, 138, 66, 172, 67,
	1338, 1339, 1340, 2807, 501, 1738, 501, 2295, 507, 583,
	506, 1311, 108, 1096, 505, 765, 173, 172, 501, 137,
	1070, 487, 1075, 1316, 1081, 166, 486, 1071, 583, 485,
	935, 108, 196, 167, 174, 172, 2290, 195, 1310, 194,
	193, 501, 192, 191, 190, 189, 1330, 1308, 1309, 1855,
	1331, 188, 501, 174, 137, 187, 186, 2087, 185, 184,
	1114, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 183, 182,
	181, 174, 1311, 2144, 1976, 173, 2771, 1178, 735, 180,
	1127, 179, 178, 1142, 166, 177, 176, 172, 2719, 2636,
	960, 2754, 167, 2354, 173, 2243, 2220, 2177, 2061, 1310,
	1132, 1135, 2054, 166, 733, 1461, 1333, 1334, 1335, 1336,
	501, 167, 173, 551, 1703, 1157, 1316, 1475, 1889, 1389,
	2291, 166, 1887, 174, 1111, 1223, 501, 1304, 3115, 167,
	1086, 1185, 137, 1067, 1332, 3097, 3001, 2976, 1190, 1885,
	1883, 2895, 1602, 1338, 1339, 1340, 2997, 2891, 2881, 2995,
	137, 1308, 1309, 2791, 2790, 1881, 2778, 1351, 1352, 1353,
	931, 2777, 2945, 2776, 173, 1217, 2775, 1308, 1309, 1221,
	1207, 2769, 2768, 166, 2767, 2766, 1311, 1316, 2739, 1357,
	1289, 167, 2041, 2737, 1290, 2274, 2275, 2642, 2613, 2612,
	933, 2611, 1311, 1331, 2543, 2422, 2349, 2309, 2300, 2273,
	2270, 2267, 2101, 1310, 1338, 1339, 1340, 1601, 2265, 2426,
	2248, 1330, 2230, 2229, 2219, 2088, 1204, 2130, 1977, 1310,
	1304, 1836, 1381, 917, 2286, 2287, 2288, 1330, 2011, 1303,
	3187, 2285, 2283, 2284, 2276, 2277, 2278, 2279, 2281, 2282,
	1556, 3170, 1386, 1533, 1371, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 1331, 3169, 1288, 2449, 1085, 2565,
	1337, 3088, 3083, 3041, 3032, 3031, 1698, 2024, 3028, 3027,
	1224, 1333, 1334, 1335, 1336, 2184, 3022, 1332, 3019, 1531,
	2993, 1316, 2992, 1830, 2941, 2920, 172, 1333, 1334, 1335,
	1336, 2867, 2863, 2861, 2274, 2275, 2806, 1316, 1312, 1313,
	1314, 1315, 1317, 1318, 1348, 1358, 2789, 3013, 1338, 1339,
	1340, 2728, 2704, 733, 2695, 2280, 2694, 2692, 501, 2670,
	2669, 2659, 174, 501, 1338, 1339, 1340, 720, 2658, 2880,
	2894, 2333, 172, 719, 172, 1300, 1301, 2624, 1332, 2531,
	2274, 2275, 1305, 2493, 2485, 2491, 1837, 2274, 2275, 501,
	1437, 1346, 2440, 2407, 2390, 2368, 2367, 2312, 1331, 2247,
	2246, 2235, 1372, 173, 2212, 1396, 1393, 2086, 174, 2146,
	174, 1980, 166, 1962, 1331, 1949, 1397, 1398, 1879, 1542,
	167, 1308, 1309, 1399, 1474, 172, 1438, 1429, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 1469, 1428, 2274,
	2275, 137, 1427, 1426, 1425, 1424, 1311, 1308, 1309, 173,
	1423, 173, 1422, 1443, 1444, 1308, 1309, 1421, 166, 1418,
	166, 174, 1417, 1416, 2280, 1337, 167, 1415, 167, 1420,
	1414, 1413, 1311, 1310, 129, 1412, 1411, 904, 1410, 1409,
	1311, 1337, 1332, 1408, 1407, 1406, 1457, 137, 1378, 137,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1332, 1310,
	1371, 2763, 173, 2368, 1203, 1349, 1187, 1310, 1182, 1159,
	2280, 166, 1968, 1153, 1456, 2736, 2631, 2280, 733, 167,
	1434, 960, 501, 1484, 2627, 2141, 1603, 2236, 974, 1963,
	1386, 2489, 1496, 766, 1432, 1466, 2274, 2275, 1470, 1369,
	137, 2290, 2886, 1220, 2730, 1436, 501, 974, 501, 501,
	1520, 1316, 2729, 2634, 1697, 2051, 210, 1697, 1403, 1286,
	1401, 1461, 1198, 2668, 1404, 1463, 1402, 1697, 2969, 2280,
	2411, 2406, 2401, 501, 501, 2156, 1543, 1316, 1684, 1391,
	501, 1888, 501, 1347, 501, 1886, 2998, 2290, 501, 2996,
	1413, 1350, 1555, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 1884, 1882, 1338, 1339, 1340, 2026, 1515, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1880, 2389,
	960, 2155, 2254, 1376, 2944, 2291, 1413, 2253, 2252, 2251,
	2276, 2277, 2278, 2279, 2281, 2282, 1566, 2194, 501, 960,
	210, 501, 501, 960, 1671, 1216, 2290, 2127, 1857, 960,
	1552, 2499, 210, 501, 1331, 899, 501, 501, 2400, 1509,
	2923, 1564, 501, 1064, 2098, 2567, 1063, 1539, 3116, 1867,
	1400, 2291, 1557, 1661, 1490, 2241, 3126, 3073, 1598, 3123,
	2461, 1380, 2648, 2702, 974, 916, 2132, 201, 481, 900,
	1663, 3149, 545, 960, 960, 1228, 501, 484, 514, 2841,
	1526, 501, 1573, 526, 2509, 2158, 210, 501, 1858, 501,
	1127, 501, 3150, 501, 1996, 501, 1546, 972, 1059, 3045,
	3117, 893, 481, 1729, 3186, 501, 891, 501, 2968, 2967,
	2291, 484, 2966, 1685, 895, 731, 501, 889, 1332, 2276,
	2277, 2278, 2279, 2281, 2282, 1580, 2965, 2682, 1582, 886,
	2677, 1584, 1568, 1262, 2676, 1587, 932, 1571, 932, 1218,
	1727, 2645, 2644, 1157, 2095, 2234, 2233, 501, 2232, 2231,
	2198, 974, 2857, 1859, 1856, 1665, 544, 527, 2128, 1446,
	2044, 2037, 513, 1675, 2284, 2276, 2277, 2278, 2279, 2281,
	2282, 1595, 2033, 1741, 2278, 2279, 2281, 2282, 1987, 1999,
	1597, 2490, 1204, 730, 1696, 1219, 481, 2014, 1812, 2673,
	1433, 1599, 1662, 1060, 1878, 484, 1877, 1672, 481, 935,
	1876, 935, 1875, 2274, 2275, 1987, 1770, 484, 1314, 1315,
	1317, 1318, 1261, 3000, 1735, 1226, 1986, 2512, 1088, 706,
	1689, 1701, 2283, 2284, 2276, 2277, 2278, 2279, 2281, 2282,
	974, 1709, 1312, 1313, 1314, 1315, 1317, 1318, 1491, 2048,
	1861, 1736, 1705, 3044, 1194, 1318, 1718, 732, 1760, 1767,
	2948, 2687, 481, 2006, 2059, 2514, 616, 617, 1827, 3091,
	2837, 484, 2005, 2289, 1572, 1488, 1712, 2161, 2513, 2661,
	2174, 1861, 2825, 617, 501, 1257, 501, 1827, 3141, 2163,
	1737, 1688, 1687, 1236, 1697, 1694, 2553, 1492, 1493, 2456,
	1739, 1740, 1834, 3112, 2397, 1479, 2142, 1832, 1480, 2822,
	974, 501, 1758, 1998, 2392, 1508, 1307, 1202, 720, 2164,
	501, 720, 720, 501, 1750, 1511, 974, 1751, 1752, 1197,
	501, 2162, 2030, 1258, 2186, 2187, 2282, 1494, 501, 931,
	1864, 931, 1855, 2280, 3024, 1195, 501, 1867, 1285, 2823,
	2510, 1978, 1698, 2024, 733, 1698, 2024, 1394, 501, 1964,
	733, 960, 1470, 1974, 1975, 1698, 2024, 529, 528, 933,
	1366, 933, 501, 974, 1541, 1838, 3149, 2457, 501, 501,
	1874, 1486, 729, 1861, 3056, 1260, 1691, 1862, 2678, 3172,
	2082, 2034, 1481, 501, 1486, 1611, 501, 2903, 2508, 1734,
	904, 3140, 2835, 1988, 2914, 1483, 1592, 1577, 2410, 2971,
	2245, 1958, 3057, 951, 3113, 1973, 1273, 2000, 2002, 1997,
	2290, 732, 1939, 501, 1693, 501, 2456, 501, 1929, 1909,
	501, 694, 501, 2078, 501, 2741, 501, 501, 2031, 501,
	960, 960, 960, 2016, 2045, 960, 1938, 543, 2017, 2010,
	733, 741, 501, 1955, 501, 1485, 1673, 1959, 1960, 1947,
	1948, 1920, 2731, 1213, 1227, 2120, 2121, 1466, 2008, 202,
	1992, 2380, 1631, 887, 1728, 2040, 2015, 1991, 887, 1630,
	2046, 2818, 3114, 897, 2819, 2671, 896, 1844, 2032, 888,
	2662, 1512, 2056, 1193, 2058, 2016, 2025, 2027, 2028, 2029,
	1692, 887, 197, 1452, 2291, 511, 2379, 1809, 2116, 1087,
	2836, 1726, 1984, 2748, 805, 501, 1611, 1611, 2821, 1064,
	695, 2949, 2052, 2131, 542, 3139, 1244, 2147, 2824, 2100,
	1296, 2100, 1455, 1992, 2904, 3165, 3111, 129, 3148, 2111,
	3146, 1486, 1214, 520, 481, 2550, 203, 1215, 129, 2123,
	1956, 2872, 2134, 484, 974, 482, 501, 517, 2118, 1954,
	499, 1237, 2870, 2109, 1453, 2501, 501, 522, 501, 2113,
	2104, 2114, 707, 2115, 548, 1448, 2200, 592, 599, 2092,
	548, 482, 2117, 592, 614, 501, 501, 501, 1157, 501,
	621, 2124, 2133, 202, 1992, 1826, 1711, 1196, 641, 2143,
	1630, 1630, 2090, 2172, 1270, 2173, 1545, 1833, 501, 1238,
	2551, 2151, 1235, 2152, 2145, 2285, 2283, 2284, 2276, 2277,
	2278, 2279, 2281, 2282, 2820, 1842, 746, 3173, 1397, 1398,
	1376, 1846, 1807, 1810, 205, 1306, 1201, 519, 1445, 1842,
	1452, 1191, 2504, 1420, 2150, 1578, 2209, 2148, 204, 545,
	1179, 1454, 696, 504, 2899, 1676, 2159, 1295, 2179, 2787,
	2415, 2602, 1524, 2419, 540, 538, 3178, 1482, 2207, 1455,
	203, 1897, 2958, 932, 1901, 1901, 1911, 1913, 1918, 1806,
	1842, 548, 548, 1271, 3016, 2957, 200, 1450, 2939, 934,
	932, 1941, 2382, 2647, 2201, 501, 2364, 1861, 2360, 541,
	1683, 1453, 1698, 1695, 1448, 2093, 1611, 2091, 1366, 1567,
	1554, 3163, 2384, 499, 499, 499, 1553, 966, 499, 2181,
	1451, 198, 1549, 2183, 1544, 2341, 2549, 1981, 482, 1066,
	2503, 1479, 2221, 544, 1480, 2840, 935, 2329, 3065, 1294,
	1732, 1295, 2839, 539, 2500, 514, 697, 1746, 1272, 2898,
	2274, 2275, 2383, 935, 1679, 201, 543, 752, 205, 2874,
	512, 2707, 1681, 2940, 2204, 199, 2370, 1245, 1296, 1452,
	2369, 2192, 204, 3164, 1706, 2205, 1682, 2330, 2018, 2210,
	1953, 1952, 2063, 510, 698, 2199, 2062, 2603, 1454, 2080,
	1630, 1124, 2788, 1808, 2604, 509, 974, 730, 1455, 2689,
	2314, 3177, 1122, 3166, 2424, 2321, 2322, 1113, 579, 36,
	200, 2342, 501, 733, 1112, 501, 1450, 2502, 1481, 516,
	3153, 3, 501, 1294, 521, 501, 501, 974, 2860, 513,
	1453, 1483, 1208, 542, 586, 501, 501, 501, 1747, 515,
	2900, 501, 2240, 1213, 501, 198, 2337, 2414, 2344, 1451,
	2937, 501, 501, 501, 501, 501, 2345, 2346, 578, 35,
	2352, 2793, 2617, 1872, 2336, 501, 931, 2869, 1225, 3155,
	694, 2919, 501, 2786, 2838, 2328, 2686, 2353, 2348, 201,
	2280, 1485, 2938, 931, 501, 960, 609, 2303, 501, 199,
	741, 2530, 2420, 2476, 2266, 974, 933, 602, 2211, 501,
	2149, 2332, 2306, 2307, 2308, 974, 2019, 2020, 2206, 577,
	32, 2043, 974, 933, 2361, 2013, 2208, 1454, 2315, 1535,
	1283, 1267, 1214, 2391, 501, 1473, 501, 1215, 501, 1284,
	1188, 960, 501, 960, 960, 960, 2343, 576, 79, 1099,
	535, 501, 2365, 501, 2304, 2432, 2335, 501, 2176, 2175,
	2338, 2171, 501, 2153, 501, 1484, 2355, 2290, 545, 695,
	1715, 501, 530, 1871, 2398, 575, 78, 1486, 2868, 2387,
	1529, 2388, 2385, 540, 3107, 1123, 2357, 1664, 501, 501,
	1484, 1992, 2463, 960, 36, 1405, 1121, 1099, 2452, 1537,
	2393, 2371, 2451, 2374, 2386, 1479, 2484, 939, 1480, 2404,
	501, 2405, 2408, 1095, 2403, 2396, 2684, 2402, 541, 2428,
	1520, 2425, 2434, 2409, 2495, 1523, 2482, 1520, 585, 2394,
	1213, 1725, 1265, 2395, 499, 1094, 2421, 499, 501, 1255,
	499, 499, 499, 3062, 35, 966, 2429, 2496, 1117, 2366,
	2811, 2291, 544, 501, 499, 2438, 2666, 2372, 1253, 2376,
	2377, 1823, 539, 2318, 499, 499, 499, 499, 966, 572,
	23, 2325, 2326, 1282, 1266, 2331, 2450, 1251, 2462, 129,
	1516, 974, 2469, 1821, 1249, 607, 608, 2664, 1247, 2646,
	2445, 2475, 1481, 2215, 733, 32, 600, 601, 2443, 2488,
	1376, 696, 2460, 1482, 974, 1483, 501, 1241, 641, 1214,
	599, 2460, 2227, 2228, 1215, 2533, 739, 1120, 694, 2096,
	2084, 1608, 499, 79, 2505, 2506, 2470, 2471, 2472, 2083,
	2473, 2474, 2545, 2546, 2547, 2507, 1704, 2511, 741, 2081,
	2494, 2077, 573, 24, 1591, 1199, 488, 2558, 2568, 2516,
	1590, 78, 1588, 2518, 2447, 1485, 641, 1586, 571, 30,
	1583, 1581, 2285, 2283, 2284, 2276, 2277, 2278, 2279, 2281,
	2282, 1724, 1579, 2985, 740, 1264, 1534, 932, 1532, 1817,
	1521, 2537, 1254, 570, 21, 932, 932, 1818, 1510, 932,
	1819, 2552, 2554, 2555, 1824, 697, 1507, 501, 2564, 2311,
	1495, 1252, 2557, 3150, 568, 20, 885, 695, 1487, 501,
	1611, 531, 2323, 932, 499, 974, 1760, 2572, 2571, 1486,
	1250, 2893, 1298, 1769, 2606, 569, 19, 1248, 2630, 2635,
	499, 1246, 2579, 698, 1760, 2582, 2581, 2892, 1702, 2987,
	935, 1486, 1608, 1608, 2569, 23, 1518, 2004, 935, 935,
	1240, 1987, 935, 558, 15, 2716, 1987, 2855, 2655, 532,
	1119, 2047, 2003, 2607, 1517, 2610, 129, 2001, 1477, 2042,
	2615, 2154, 2618, 2620, 2621, 2036, 935, 2623, 559, 16,
	2012, 1498, 567, 57, 501, 501, 2190, 501, 3026, 2685,
	913, 1514, 501, 2830, 1630, 533, 1239, 534, 2637, 1502,
	566, 56, 1868, 1299, 974, 2039, 974, 557, 55, 960,
	565, 12, 914, 1492, 1493, 2650, 2696, 1541, 24, 3003,
	556, 50, 2794, 1820, 563, 47, 501, 564, 48, 1669,
	1670, 1822, 2720, 2672, 30, 489, 490, 555, 49, 696,
	1499, 562, 7, 2713, 2021, 2709, 960, 501, 501, 890,
	892, 2712, 2007, 2016, 587, 1302, 2191, 1611, 501, 21,
	2009, 974, 501, 501, 974, 501, 3061, 1482, 2691, 2690,
	931, 2866, 2710, 501, 2693, 2699, 2708, 2698, 931, 931,
	20, 974, 931, 2641, 2103, 2085, 2076, 2665, 1982, 2667,
	561, 6, 1940, 915, 1674, 2740, 2745, 2750, 2714, 1604,
	933, 19, 2722, 2721, 1308, 1309, 931, 1503, 933, 933,
	3161, 2703, 933, 2705, 492, 491, 2483, 3176, 2733, 2734,
	560, 38, 621, 610, 1992, 1383, 501, 548, 2735, 15,
	1611, 738, 1608, 697, 2759, 2742, 933, 2746, 2556, 554,
	37, 1630, 1308, 1309, 2274, 2275, 2726, 2492, 1464, 2626,
	934, 1308, 1309, 499, 16, 2166, 1310, 2167, 57, 2166,
	2165, 493, 494, 1873, 1853, 1230, 2109, 1311, 1504, 1505,
	1229, 698, 2764, 508, 1611, 1611, 56, 1500, 2548, 1269,
	1381, 2743, 1268, 55, 1379, 501, 12, 2738, 2751, 2931,
	2884, 2724, 1611, 1611, 1310, 974, 50, 974, 2700, 2441,
	47, 2439, 2785, 48, 1501, 501, 501, 501, 2089, 1558,
	1281, 1280, 1263, 49, 1630, 1259, 1256, 7, 1242, 1200,
	501, 1677, 2798, 1611, 898, 501, 511, 501, 1375, 2352,
	501, 501, 501, 501, 501, 705, 2947, 501, 501, 960,
	1275, 2833, 2663, 974, 3072, 692, 2378, 960, 2655, 2805,
	2831, 1714, 2801, 2799, 1243, 501, 501, 2834, 1630, 1630,
	2796, 2797, 1716, 932, 520, 2334, 6, 2844, 2845, 960,
	1961, 2856, 3055, 2614, 2772, 2862, 1630, 1630, 517, 501,
	2810, 1506, 2655, 2244, 3009, 2318, 482, 2871, 501, 501,
	960, 960, 2864, 1099, 2655, 2850, 38, 2913, 1870, 2878,
	1390, 932, 2802, 53, 775, 2876, 855, 1630, 2865, 2812,
	1066, 2649, 499, 1540, 2902, 37, 2169, 2070, 2851, 2069,
	482, 2452, 977, 2800, 1686, 2885, 935, 2883, 2877, 2905,
	779, 1900, 974, 1761, 782, 1609, 2875, 1563, 1563, 785,
	2888, 784, 2887, 783, 499, 2808, 499, 1992, 499, 1610,
	2854, 1392, 548, 2675, 781, 1607, 2079, 2107, 519, 683,
	1690, 1148, 1831, 1865, 935, 2842, 2239, 1387, 974, 757,
	2681, 2910, 501, 2847, 501, 1863, 974, 501, 1186, 756,
	2339, 2455, 2640, 2879, 1745, 501, 2182, 2882, 1742, 518,
	2271, 974, 2921, 1152, 1926, 1919, 1992, 2934, 1915, 932,
	1287, 2809, 641, 1367, 482, 1066, 592, 2951, 2108, 2953,
	2929, 1222, 2952, 2926, 2927, 2350, 482, 1066, 2655, 2460,
	966, 499, 2843, 2464, 2140, 1753, 641, 912, 911, 2848,
	910, 501, 2950, 501, 3078, 3075, 960, 2901, 2795, 1680,
	2160, 501, 1360, 772, 2972, 2932, 2974, 2319, 2427, 1611,
	2978, 2655, 1092, 2655, 3025, 1359, 931, 2655, 894, 3018,
	641, 1212, 935, 1211, 974, 499, 514, 2991, 1210, 2363,
	482, 499, 2983, 499, 3171, 499, 2984, 499, 2986, 499,
	2989, 512, 2660, 171, 501, 2712, 933, 168, 170, 1730,
	501, 1731, 169, 2988, 931, 2413, 2999, 2930, 501, 82,
	499, 2960, 34, 2982, 510, 33, 107, 106, 105, 3021,
	3015, 104, 1992, 103, 2452, 102, 509, 101, 3002, 100,
	99, 3012, 98, 3007, 933, 97, 501, 501, 96, 3014,
	95, 641, 501, 1630, 94, 93, 2977, 92, 3036, 3038,
	516, 91, 90, 960, 89, 521, 88, 87, 501, 3023,
	513, 86, 932, 960, 960, 2961, 2962, 501, 2320, 501,
	515, 501, 85, 953, 84, 637, 634, 81, 80, 2933,
	3040, 31, 932, 3043, 26, 111, 3048, 3049, 3050, 3042,
	501, 3051, 112, 501, 25, 501, 77, 974, 3068, 2347,
	76, 932, 931, 29, 3052, 18, 3053, 11, 3080, 3084,
	17, 3070, 3085, 22, 3087, 3086, 134, 133, 3074, 132,
	131, 130, 14, 13, 3092, 935, 126, 128, 127, 125,
	3069, 501, 933, 3090, 3089, 932, 1608, 124, 123, 122,
	121, 2655, 10, 1749, 8, 935, 110, 932, 3106, 3105,
	9, 3104, 2896, 2498, 501, 70, 71, 1447, 3131, 27,
	3132, 3130, 501, 43, 935, 42, 41, 3119, 621, 109,
	548, 162, 3138, 161, 160, 159, 3029, 2417, 501, 3136,
	3137, 3133, 3135, 155, 2417, 934, 154, 158, 2655, 156,
	3144, 3129, 3147, 2825, 3145, 548, 157, 153, 935, 120,
	164, 3152, 934, 3151, 548, 3080, 3154, 499, 3157, 3158,
	935, 163, 151, 3160, 1995, 148, 147, 1611, 150, 152,
	2822, 149, 499, 2815, 146, 3168, 3167, 165, 119, 118,
	499, 117, 3030, 3175, 3174, 116, 2813, 115, 114, 5,
	2, 2817, 499, 1, 0, 0, 0, 3181, 0, 0,
	0, 0, 0, 3047, 0, 931, 499, 0, 3184, 3185,
	2823, 0, 482, 2053, 0, 0, 3190, 2925, 0, 1611,
	0, 932, 0, 1921, 0, 931, 0, 2066, 0, 0,
	1066, 0, 0, 1608, 0, 933, 0, 0, 0, 2816,
	0, 0, 0, 0, 931, 0, 0, 744, 0, 0,
	0, 1630, 2109, 0, 932, 933, 932, 1995, 0, 548,
	932, 499, 0, 0, 499, 0, 499, 0, 499, 581,
	499, 499, 0, 966, 933, 0, 0, 0, 931, 0,
	40, 0, 0, 0, 935, 0, 599, 0, 1995, 0,
	931, 0, 0, 2540, 1835, 44, 0, 0, 1611, 0,
	0, 0, 0, 1630, 0, 1375, 1608, 0, 933, 0,
	0, 0, 0, 0, 0, 0, 2561, 935, 0, 935,
	933, 0, 0, 935, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 1103, 0, 0, 0,
	0, 0, 2818, 0, 0, 2819, 0, 0, 0, 592,
	1608, 1608, 0, 582, 1925, 0, 0, 0, 0, 0,
	0, 0, 59, 584, 0, 0, 0, 60, 1608, 1608,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2821,
	0, 0, 1630, 0, 0, 0, 0, 0, 0, 2824,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 1608,
	1066, 63, 1066, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2274, 2275, 931, 2292, 2293, 2294, 0, 499,
	499, 499, 0, 499, 0, 0, 3058, 2643, 0, 0,
	2755, 0, 0, 0, 932, 0, 0, 0, 0, 0,
	0, 0, 499, 0, 933, 0, 0, 931, 0, 931,
	0, 0, 0, 931, 3081, 3082, 0, 2213, 2214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2289, 0, 0, 0, 0, 933, 0, 933,
	0, 932, 0, 933, 0, 2820, 0, 0, 0, 0,
	0, 1231, 0, 0, 0, 502, 0, 935, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1066,
	0, 0, 138, 66, 0, 67, 209, 0, 0, 0,
	0, 0, 2280, 0, 935, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 2297, 2298, 2299, 0, 0, 0,
	0, 0, 209, 0, 583, 0, 0, 108, 0, 0,
	0, 0, 0, 972, 0, 0, 1059, 0, 0, 0,
	0, 0, 0, 2274, 2275, 0, 2292, 2293, 2294, 174,
	2295, 0, 3179, 3180, 0, 0, 0, 1068, 0, 1072,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	3188, 0, 0, 0, 0, 0, 0, 0, 0, 2290,
	0, 809, 1921, 1921, 0, 1608, 0, 931, 0, 934,
	173, 0, 0, 0, 0, 0, 0, 934, 934, 166,
	0, 934, 0, 2289, 0, 0, 548, 167, 0, 548,
	0, 0, 0, 0, 0, 0, 548, 933, 0, 548,
	548, 0, 0, 0, 0, 1464, 0, 0, 137, 499,
	1995, 2359, 0, 0, 931, 1995, 0, 0, 2359, 0,
	0, 0, 0, 0, 0, 1995, 2359, 1995, 2359, 2359,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 499,
	975, 975, 0, 2291, 933, 0, 1540, 0, 1184, 2804,
	0, 0, 0, 2280, 0, 1189, 0, 0, 499, 1921,
	1921, 1921, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 499, 0, 0, 0, 2296, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 0, 744, 0,
	0, 0, 0, 1925, 1925, 0, 0, 0, 1563, 0,
	1563, 2295, 499, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 499, 0, 0,
	0, 966, 0, 0, 0, 0, 1995, 0, 548, 0,
	2290, 0, 0, 0, 0, 1995, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2286, 2287, 2288,
	0, 0, 2480, 1066, 2285, 2283, 2284, 2276, 2277, 2278,
	2279, 2281, 2282, 962, 1308, 1309, 976, 976, 0, 0,
	0, 2526, 2527, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2911, 0, 0, 0, 0, 1311,
	1925, 1925, 1925, 0, 0, 1361, 1362, 1363, 1364, 1365,
	0, 0, 2515, 0, 0, 0, 0, 0, 1374, 0,
	0, 0, 0, 0, 2291, 0, 1310, 499, 0, 2135,
	2911, 0, 1525, 1608, 1330, 0, 1388, 0, 1769, 0,
	40, 0, 0, 2274, 2275, 0, 2292, 2293, 2294, 0,
	0, 0, 0, 1769, 0, 44, 0, 0, 2583, 2584,
	2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594,
	2595, 2596, 2597, 2598, 2599, 2600, 2601, 0, 2605, 2529,
	2566, 0, 0, 0, 2136, 1608, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 1334, 1335, 1336, 0, 0,
	0, 0, 0, 2289, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 2137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 1059, 0, 2286, 2287,
	2288, 1338, 1339, 1340, 0, 2285, 2283, 2284, 2276, 2277,
	2278, 2279, 2281, 2282, 0, 0, 1921, 1921, 0, 0,
	1596, 0, 0, 0, 1600, 0, 0, 0, 0, 961,
	961, 63, 0, 0, 1608, 934, 0, 0, 1441, 1441,
	1441, 548, 0, 2280, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 548, 0, 0, 0, 0, 0, 0,
	961, 961, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 2657, 1707, 1708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2295, 0, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
	1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921, 1921,
	1921, 1921, 0, 1921, 0, 0, 0, 0, 1337, 1769,
	2290, 0, 0, 0, 0, 0, 0, 0, 1995, 1563,
	0, 1563, 0, 0, 64, 1332, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1925, 1925, 0,
	0, 0, 0, 0, 0, 962, 962, 0, 0, 0,
	0, 0, 138, 66, 0, 67, 0, 0, 0, 0,
	1995, 934, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 961, 962, 962, 0, 0,
	0, 599, 599, 962, 583, 0, 0, 108, 0, 0,
	0, 0, 1066, 0, 2291, 0, 966, 499, 0, 499,
	0, 0, 0, 0, 0, 0, 0, 499, 0, 174,
	0, 0, 0, 0, 1925, 1925, 1925, 1925, 1925, 1925,
	1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,
	1925, 1925, 1925, 0, 1925, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	2773, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2286, 2287,
	2288, 962, 0, 0, 0, 2285, 2283, 2284, 2276, 2277,
	2278, 2279, 2281, 2282, 934, 0, 0, 0, 0, 1066,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 744, 744, 0, 1995,
	2359, 1995, 2035, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2657, 1066, 0, 0, 0, 0, 1995,
	0, 2359, 0, 0, 1066, 1066, 499, 1995, 2359, 0,
	0, 499, 499, 0, 0, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 0, 0, 0, 2657, 0, 1066,
	2066, 0, 0, 0, 0, 0, 0, 0, 0, 2657,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1743, 1995, 1748, 0, 0, 0, 0, 0,
	1755, 2119, 2480, 2480, 495, 0, 0, 0, 2918, 0,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 2942, 1811, 0, 1813, 1814,
	1815, 1816, 0, 0, 0, 0, 0, 776, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 1839, 0, 0,
	0, 0, 0, 0, 0, 1374, 0, 0, 0, 1308,
	1309, 0, 0, 0, 0, 0, 1995, 0, 2359, 0,
	0, 2936, 0, 0, 0, 0, 0, 0, 0, 499,
	0, 0, 0, 2657, 1311, 0, 0, 0, 0, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 0, 0, 74, 0,
	0, 0, 0, 1917, 0, 1928, 1930, 1935, 0, 0,
	0, 1310, 0, 0, 0, 0, 2657, 0, 2657, 1330,
	0, 3006, 2657, 0, 0, 499, 961, 499, 0, 0,
	0, 0, 0, 975, 0, 1066, 0, 943, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 1921, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 2524, 0, 0, 721, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 2566, 1333,
	1334, 1335, 1336, 0, 548, 0, 0, 0, 0, 1316,
	1921, 0, 2936, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2055,
	0, 2057, 922, 74, 0, 0, 1338, 1339, 1340, 0,
	1995, 2359, 0, 0, 0, 961, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2359, 0, 961, 209, 0, 0, 961, 0,
	0, 1066, 962, 1066, 961, 499, 0, 209, 0, 976,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 3066, 0, 0, 1066, 976, 499,
	0, 0, 0, 0, 1925, 0, 1921, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 2657, 0, 961, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 2566, 0, 0, 0, 0,
	0, 1925, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 2657, 0, 0, 1995, 0, 0, 0,
	1332, 962, 0, 2274, 2275, 0, 2292, 2293, 2294, 0,
	0, 0, 2936, 0, 0, 0, 0, 0, 0, 0,
	962, 2535, 0, 0, 962, 0, 975, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2289, 0, 976, 0, 1925, 0, 0,
	0, 0, 0, 0, 962, 962, 2399, 0, 0, 0,
	0, 0, 0, 0, 2274, 2275, 0, 2292, 2293, 2294,
	0, 0, 0, 0, 0, 1308, 1309, 0, 1090, 0,
	0, 0, 2534, 0, 1108, 975, 0, 0, 0, 0,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	1311, 0, 2433, 0, 2435, 2436, 2437, 0, 1131, 1131,
	1131, 970, 0, 2280, 2196, 2197, 0, 0, 0, 0,
	2203, 0, 0, 0, 2289, 0, 0, 1310, 0, 0,
	0, 0, 976, 0, 0, 1330, 0, 0, 0, 2216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2222, 2486, 975, 2226, 0, 74, 0,
	74, 2295, 74, 0, 0, 0, 1183, 0, 0, 0,
	0, 975, 0, 0, 0, 2242, 0, 0, 0, 0,
	2523, 0, 0, 0, 0, 0, 0, 2255, 0, 0,
	2290, 0, 0, 0, 2280, 1333, 1334, 1335, 1336, 0,
	0, 0, 0, 0, 0, 1316, 961, 0, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 975, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 1935,
	1935, 1935, 2295, 0, 0, 0, 0, 145, 0, 0,
	0, 1441, 39, 0, 0, 0, 0, 0, 1274, 2324,
	0, 0, 0, 40, 140, 0, 0, 0, 0, 74,
	0, 2290, 0, 0, 2291, 0, 74, 0, 44, 0,
	0, 976, 1331, 0, 0, 961, 961, 961, 0, 0,
	961, 0, 0, 46, 142, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 51, 0, 0,
	0, 0, 0, 0, 2381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	0, 54, 962, 0, 0, 0, 58, 0, 0, 0,
	143, 0, 0, 0, 976, 59, 72, 0, 0, 1337,
	60, 61, 0, 0, 0, 2291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 2286, 2287,
	2288, 0, 0, 0, 63, 2285, 2283, 2284, 2276, 2277,
	2278, 2279, 2281, 2282, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 721, 0, 2453, 0, 0, 0,
	0, 962, 962, 962, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1370, 0, 1373, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2286,
	2287, 2288, 0, 744, 744, 0, 2285, 2283, 2284, 2276,
	2277, 2278, 2279, 2281, 2282, 0, 744, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 64, 0, 0,
	0, 0, 2517, 0, 65, 0, 1755, 1471, 0, 0,
	0, 0, 2521, 2522, 0, 0, 2525, 2732, 0, 0,
	2528, 0, 0, 0, 75, 138, 66, 0, 67, 2532,
	68, 0, 0, 0, 144, 976, 2538, 1308, 1309, 69,
	0, 0, 2324, 0, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 2559,
	108, 0, 1311, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 2573, 2574, 0, 2575,
	2576, 2577, 174, 0, 2578, 0, 0, 0, 0, 1310,
	2580, 0, 0, 0, 0, 0, 0, 1330, 74, 0,
	0, 1462, 0, 1465, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 1308, 1309, 139, 0, 0, 0, 0,
	0, 2608, 2609, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 1311, 0,
	167, 0, 2202, 0, 0, 0, 0, 2625, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 1333, 1334, 1335,
	1336, 137, 0, 0, 4, 1310, 1538, 1316, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 0, 0, 2651, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	1570, 0, 1570, 0, 0, 0, 0, 2674, 0, 0,
	2852, 0, 0, 0, 0, 0, 0, 0, 2195, 2679,
	0, 0, 0, 0, 2680, 0, 0, 0, 0, 2683,
	0, 0, 0, 1333, 1334, 1335, 1336, 0, 0, 0,
	961, 0, 0, 1316, 1331, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 2889, 2890, 0, 0, 0, 0, 975, 0, 0,
	1338, 1339, 1340, 0, 1441, 1667, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 2723, 961, 0, 961, 961,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 1713,
	1331, 0, 0, 0, 0, 1719, 0, 1720, 1332, 1721,
	0, 1722, 0, 1723, 0, 0, 0, 0, 961, 0,
	0, 2752, 2753, 0, 0, 0, 0, 2757, 2758, 0,
	0, 0, 2761, 2762, 1733, 0, 0, 0, 0, 0,
	0, 0, 2765, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 0, 2770, 0,
	0, 0, 0, 0, 0, 2774, 976, 1337, 0, 0,
	0, 0, 0, 976, 2274, 2275, 0, 2292, 2293, 2294,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 0, 962, 0, 962, 962, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 975,
	0, 0, 0, 0, 2289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2832, 721, 0, 0, 721, 721,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 2280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 1979, 976, 0, 0, 1373, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2906, 2907, 2908, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2916, 2917, 0,
	970, 2290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 922, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 975,
	0, 975, 0, 0, 961, 2112, 0, 2959, 1131, 0,
	1131, 0, 1131, 0, 970, 970, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 2970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2291, 976, 0, 0, 0,
	0, 961, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 975,
	74, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3017,
	0, 0, 3020, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 976, 0, 976, 0, 0,
	962, 0, 74, 0, 2170, 0, 0, 3033, 0, 2286,
	2287, 2288, 0, 0, 0, 0, 2285, 2283, 2284, 2276,
	2277, 2278, 2279, 2281, 2282, 0, 0, 0, 0, 0,
	0, 0, 0, 2178, 970, 2180, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 976, 2193, 0, 0, 0,
	975, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3103, 3103, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 975, 0,
	0, 3120, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 3103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 961, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 1357, 976, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 3103,
	0, 0, 0, 0, 0, 0, 0, 0, 1829, 1310,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 1373, 0,
	962, 0, 0, 975, 976, 0, 0, 0, 962, 0,
	0, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 1334, 1335,
	1336, 962, 962, 2356, 0, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1358, 0, 1108, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 922, 1325, 1326, 0, 0, 2412, 0, 0,
	922, 922, 0, 0, 922, 0, 0, 1346, 0, 976,
	0, 0, 0, 0, 1331, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 2430, 0, 0, 0,
	1356, 0, 976, 0, 0, 0, 0, 0, 0, 2442,
	0, 2444, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 961, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 961,
	0, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 74, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 975, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 1308, 1309, 74, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 2519, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 1357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1310, 962, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 962, 962, 0, 0, 1327, 1347,
	0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0,
	0, 0, 2781, 0, 0, 0, 2780, 0, 976, 0,
	0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 1333, 1334, 1335, 1336, 0, 1311, 0, 0, 1357,
	0, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1310, 1348, 1358, 0, 0, 1338, 1339,
	1340, 1330, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 1335, 1336, 0, 0, 0, 0, 0,
	74, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 922, 0,
	2697, 0, 0, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 1337, 0, 0, 0, 1354,
	1355, 0, 0, 1344, 0, 0, 0, 1325, 1326, 0,
	1311, 0, 1332, 1357, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 1349, 0, 1310, 0, 0,
	0, 2744, 0, 970, 1356, 1330, 0, 0, 0, 0,
	0, 2747, 1327, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 922, 1333, 1334, 1335, 1336, 0,
	0, 0, 1332, 1347, 74, 1316, 1322, 1323, 1329, 1328,
	1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 0, 0, 0, 1349, 0, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	2846, 0, 0, 1347, 0, 1108, 1322, 1323, 1329, 1328,
	1324, 1350, 1345, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 0, 0, 0, 0, 2260, 0, 0, 0,
	2261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 922, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 2943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 0, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 2779, 0, 0, 0, 0, 2979,
	0, 2981, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	3034, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1829, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3054,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3071, 259, 260, 261, 262, 978, 263,
	979, 980, 981, 982, 215, 983, 984, 985, 986, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 987,
	270, 271, 272, 273, 274, 275, 276, 988, 989, 277,
	220, 221, 222, 990, 278, 223, 991, 963, 992, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 993,
	288, 0, 289, 290, 994, 857, 291, 292, 995, 996,
	998, 997, 999, 1000, 1001, 293, 294, 503, 295, 296,
	297, 224, 225, 1002, 298, 1003, 299, 1004, 300, 1005,
	1006, 301, 302, 303, 1007, 304, 305, 1008, 306, 307,
	1009, 226, 308, 309, 311, 314, 310, 315, 316, 227,
	228, 1010, 858, 1011, 0, 0, 0, 0, 317, 318,
	319, 229, 320, 321, 0, 322, 1012, 323, 1013, 1014,
	859, 324, 1015, 325, 230, 1016, 231, 1017, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 861, 1018, 238,
	333, 0, 0, 0, 1019, 332, 334, 341, 1020, 860,
	335, 235, 337, 336, 338, 339, 340, 236, 1021, 237,
	1022, 342, 862, 863, 343, 344, 345, 864, 346, 347,
	0, 0, 348, 349, 350, 1023, 352, 351, 1024, 353,
	239, 865, 354, 355, 866, 1025, 356, 357, 1026, 1027,
	358, 0, 359, 938, 937, 360, 361, 363, 364, 362,
	867, 365, 366, 368, 367, 1028, 1029, 868, 1030, 240,
	369, 241, 370, 371, 1031, 372, 373, 1032, 1033, 374,
	375, 1034, 1035, 376, 242, 869, 377, 870, 243, 378,
	379, 380, 381, 382, 383, 384, 1036, 385, 244, 386,
	245, 387, 1037, 388, 389, 390, 391, 392, 393, 246,
	394, 395, 1038, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 1039, 408, 871, 409,
	410, 411, 412, 247, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 1040, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 1041, 433, 414, 415, 434, 872, 435,
	248, 436, 437, 1042, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 249, 1043, 448, 449, 1044,
	450, 451, 452, 453, 454, 312, 455, 313, 456, 457,
	1045, 250, 251, 252, 458, 1046, 1047, 459, 460, 253,
	254, 1048, 461, 462, 0, 463, 464, 1049, 1050, 465,
	466, 467, 469, 1051, 470, 1052, 468, 471, 472, 473,
	255, 256, 1053, 475, 474, 257, 1054, 1055, 1056, 1057,
	476, 477, 258, 478, 479, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 1966, 0, 0, 0,
	0, 0, 0, 0, 0, 1967, 259, 260, 261, 262,
	978, 263, 979, 980, 981, 982, 215, 983, 984, 985,
	986, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 987, 270, 271, 272, 273, 274, 275, 276, 988,
	989, 277, 220, 221, 222, 990, 278, 223, 991, 963,
	992, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 993, 288, 0, 289, 290, 994, 857, 291, 292,
	995, 996, 998, 997, 999, 1000, 1001, 293, 294, 503,
	295, 296, 297, 224, 225, 1002, 298, 1003, 299, 1004,
	300, 1005, 1006, 301, 302, 303, 1007, 304, 305, 1008,
	306, 307, 1009, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 1010, 858, 1011, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 1012, 323,
	1013, 1014, 859, 324, 1015, 325, 230, 1016, 231, 1017,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 861,
	1018, 238, 333, 0, 0, 0, 1019, 332, 334, 341,
	1020, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	1021, 237, 1022, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 1023, 352, 351,
	1024, 353, 239, 865, 354, 355, 866, 1025, 356, 357,
	1026, 1027, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 1028, 1029, 868,
	1030, 240, 369, 241, 370, 371, 1031, 372, 373, 1032,
	1033, 374, 375, 1034, 1035, 376, 242, 869, 377, 870,
	243, 378, 379, 380, 381, 382, 383, 384, 1036, 385,
	244, 386, 245, 387, 1037, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 1038, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 1039, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 1040, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 1041, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 1042, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 1043, 448,
	449, 1044, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 1045, 250, 251, 252, 458, 1046, 1047, 459,
	460, 253, 254, 1048, 461, 462, 0, 463, 464, 1049,
	1050, 465, 466, 467, 469, 1051, 470, 1052, 468, 471,
	472, 473, 255, 256, 1053, 475, 474, 257, 1054, 1055,
	1056, 1057, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2803, 259,
	260, 261, 262, 978, 263, 979, 980, 981, 982, 215,
	983, 984, 985, 986, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 987, 270, 271, 272, 273, 274,
	275, 276, 988, 989, 277, 220, 221, 222, 990, 278,
	223, 991, 963, 992, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 993, 288, 0, 289, 290, 994,
	857, 291, 292, 995, 996, 998, 997, 999, 1000, 1001,
	293, 294, 503, 295, 296, 297, 224, 225, 1002, 298,
	1003, 299, 1004, 300, 1005, 1006, 301, 302, 303, 1007,
	304, 305, 1008, 306, 307, 1009, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 1010, 858, 1011, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 1012, 323, 1013, 1014, 859, 324, 1015, 325, 230,
	1016, 231, 1017, 326, 327, 328, 329, 330, 331, 232,
	233, 234, 861, 1018, 238, 333, 0, 0, 0, 1019,
	332, 334, 341, 1020, 860, 335, 235, 337, 336, 338,
	339, 340, 236, 1021, 237, 1022, 342, 862, 863, 343,
	344, 345, 864, 346, 347, 0, 0, 348, 349, 350,
	1023, 352, 351, 1024, 353, 239, 865, 354, 355, 866,
	1025, 356, 357, 1026, 1027, 358, 0, 359, 938, 937,
	360, 361, 363, 364, 362, 867, 365, 366, 368, 367,
	1028, 1029, 868, 1030, 240, 369, 241, 370, 371, 1031,
	372, 373, 1032, 1033, 374, 375, 1034, 1035, 376, 242,
	869, 377, 870, 243, 378, 379, 380, 381, 382, 383,
	384, 1036, 385, 244, 386, 245, 387, 1037, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 1038, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 1039, 408, 871, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 1040, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 1041, 433,
	414, 415, 434, 872, 435, 248, 436, 437, 1042, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 1043, 448, 449, 1044, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 457, 1045, 250, 251, 252, 458,
	1046, 1047, 459, 460, 253, 254, 1048, 461, 462, 0,
	463, 464, 1049, 1050, 465, 466, 467, 469, 1051, 470,
	1052, 468, 471, 472, 473, 255, 256, 1053, 475, 474,
	257, 1054, 1055, 1056, 1057, 476, 477, 258, 478, 479,
	480, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2912, 259, 260, 261,
	262, 978, 263, 979, 980, 981, 982, 215, 983, 984,
	985, 986, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 987, 270, 271, 272, 273, 274, 275, 276,
	988, 989, 277, 220, 221, 222, 990, 278, 223, 991,
	963, 992, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 993, 288, 0, 289, 290, 994, 857, 291,
	292, 995, 996, 998, 997, 999, 1000, 1001, 293, 294,
	503, 295, 296, 297, 224, 225, 1002, 298, 1003, 299,
	1004, 300, 1005, 1006, 301, 302, 303, 1007, 304, 305,
	1008, 306, 307, 1009, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 1010, 858, 1011, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 1012,
	323, 1013, 1014, 859, 324, 1015, 325, 230, 1016, 231,
	1017, 326, 327, 328, 329, 330, 331, 232, 233, 234,
	861, 1018, 238, 333, 0, 0, 0, 1019, 332, 334,
	341, 1020, 860, 335, 235, 337, 336, 338, 339, 340,
	236, 1021, 237, 1022, 342, 862, 863, 343, 344, 345,
	864, 346, 347, 0, 0, 348, 349, 350, 1023, 352,
	351, 1024, 353, 239, 865, 354, 355, 866, 1025, 356,
	357, 1026, 1027, 358, 0, 359, 938, 937, 360, 361,
	363, 364, 362, 867, 365, 366, 368, 367, 1028, 1029,
	868, 1030, 240, 369, 241, 370, 371, 1031, 372, 373,
	1032, 1033, 374, 375, 1034, 1035, 376, 242, 869, 377,
	870, 243, 378, 379, 380, 381, 382, 383, 384, 1036,
	385, 244, 386, 245, 387, 1037, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 1038, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 1039,
	408, 871, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 1040, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 1041, 433, 414, 415,
	434, 872, 435, 248, 436, 437, 1042, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 1043,
	448, 449, 1044, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 457, 1045, 250, 251, 252, 458, 1046, 1047,
	459, 460, 253, 254, 1048, 461, 462, 0, 463, 464,
	1049, 1050, 465, 466, 467, 469, 1051, 470, 1052, 468,
	471, 472, 473, 255, 256, 1053, 475, 474, 257, 1054,
	1055, 1056, 1057, 476, 477, 258, 478, 479, 480, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2562, 259, 260, 261, 262, 978,
	263, 979, 980, 981, 982, 215, 983, 984, 985, 986,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	987, 270, 271, 272, 273, 274, 275, 276, 988, 989,
	277, 220, 221, 222, 990, 278, 223, 991, 963, 992,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	993, 288, 0, 289, 290, 994, 857, 291, 292, 995,
	996, 998, 997, 999, 1000, 1001, 293, 294, 503, 295,
	296, 297, 224, 225, 1002, 298, 1003, 299, 1004, 300,
	1005, 1006, 301, 302, 303, 1007, 304, 305, 1008, 306,
	307, 1009, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 1010, 858, 1011, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 1012, 323, 1013,
	1014, 859, 324, 1015, 325, 230, 1016, 231, 1017, 326,
	327, 328, 329, 330, 331, 232, 233, 234, 861, 1018,
	238, 333, 0, 0, 0, 1019, 332, 334, 341, 1020,
	860, 335, 235, 337, 336, 338, 339, 340, 236, 1021,
	237, 1022, 342, 862, 863, 343, 344, 345, 864, 346,
	347, 0, 0, 348, 349, 350, 1023, 352, 351, 1024,
	353, 239, 865, 354, 355, 866, 1025, 356, 357, 1026,
	1027, 358, 0, 359, 938, 937, 360, 361, 363, 364,
	362, 867, 365, 366, 368, 367, 1028, 1029, 868, 1030,
	240, 369, 241, 370, 371, 1031, 372, 373, 1032, 1033,
	374, 375, 1034, 1035, 376, 242, 869, 377, 870, 243,
	378, 379, 380, 381, 382, 383, 384, 1036, 385, 244,
	386, 245, 387, 1037, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 1038, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 1039, 408, 871,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 1040, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 1041, 433, 414, 415, 434, 872,
	435, 248, 436, 437, 1042, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 1043, 448, 449,
	1044, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	457, 1045, 250, 251, 252, 458, 1046, 1047, 459, 460,
	253, 254, 1048, 461, 462, 0, 463, 464, 1049, 1050,
	465, 466, 467, 469, 1051, 470, 1052, 468, 471, 472,
	473, 255, 256, 1053, 475, 474, 257, 1054, 1055, 1056,
	1057, 476, 477, 258, 478, 479, 480, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2539, 259, 260, 261, 262, 978, 263, 979,
	980, 981, 982, 215, 983, 984, 985, 986, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 987, 270,
	271, 272, 273, 274, 275, 276, 988, 989, 277, 220,
	221, 222, 990, 278, 223, 991, 963, 992, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 993, 288,
	0, 289, 290, 994, 857, 291, 292, 995, 996, 998,
	997, 999, 1000, 1001, 293, 294, 503, 295, 296, 297,
	224, 225, 1002, 298, 1003, 299, 1004, 300, 1005, 1006,
	301, 302, 303, 1007, 304, 305, 1008, 306, 307, 1009,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	1010, 858, 1011, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 1012, 323, 1013, 1014, 859,
	324, 1015, 325, 230, 1016, 231, 1017, 326, 327, 328,
	329, 330, 331, 232, 233, 234, 861, 1018, 238, 333,
	0, 0, 0, 1019, 332, 334, 341, 1020, 860, 335,
	235, 337, 336, 338, 339, 340, 236, 1021, 237, 1022,
	342, 862, 863, 343, 344, 345, 864, 346, 347, 0,
	0, 348, 349, 350, 1023, 352, 351, 1024, 353, 239,
	865, 354, 355, 866, 1025, 356, 357, 1026, 1027, 358,
	0, 359, 938, 937, 360, 361, 363, 364, 362, 867,
	365, 366, 368, 367, 1028, 1029, 868, 1030, 240, 369,
	241, 370, 371, 1031, 372, 373, 1032, 1033, 374, 375,
	1034, 1035, 376, 242, 869, 377, 870, 243, 378, 379,
	380, 381, 382, 383, 384, 1036, 385, 244, 386, 245,
	387, 1037, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 1038, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 1039, 408, 871, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 1040, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 1041, 433, 414, 415, 434, 872, 435, 248,
	436, 437, 1042, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 1043, 448, 449, 1044, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 457, 1045,
	250, 251, 252, 458, 1046, 1047, 459, 460, 253, 254,
	1048, 461, 462, 0, 463, 464, 1049, 1050, 465, 466,
	467, 469, 1051, 470, 1052, 468, 471, 472, 473, 255,
	256, 1053, 475, 474, 257, 1054, 1055, 1056, 1057, 476,
	477, 258, 478, 479, 480, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2416, 259, 260, 261, 262, 978, 263, 979, 980, 981,
	982, 215, 983, 984, 985, 986, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 987, 270, 271, 272,
	273, 274, 275, 276, 988, 989, 277, 220, 221, 222,
	990, 278, 223, 991, 963, 992, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 993, 288, 0, 289,
	290, 994, 857, 291, 292, 995, 996, 998, 997, 999,
	1000, 1001, 293, 294, 503, 295, 296, 297, 224, 225,
	1002, 298, 1003, 299, 1004, 300, 1005, 1006, 301, 302,
	303, 1007, 304, 305, 1008, 306, 307, 1009, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 1010, 858,
	1011, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 1012, 323, 1013, 1014, 859, 324, 1015,
	325, 230, 1016, 231, 1017, 326, 327, 328, 329, 330,
	331, 232, 233, 234, 861, 1018, 238, 333, 0, 0,
	0, 1019, 332, 334, 341, 1020, 860, 335, 235, 337,
	336, 338, 339, 340, 236, 1021, 237, 1022, 342, 862,
	863, 343, 344, 345, 864, 346, 347, 0, 0, 348,
	349, 350, 1023, 352, 351, 1024, 353, 239, 865, 354,
	355, 866, 1025, 356, 357, 1026, 1027, 358, 0, 359,
	938, 937, 360, 361, 363, 364, 362, 867, 365, 366,
	368, 367, 1028, 1029, 868, 1030, 240, 369, 241, 370,
	371, 1031, 372, 373, 1032, 1033, 374, 375, 1034, 1035,
	376, 242, 869, 377, 870, 243, 378, 379, 380, 381,
	382, 383, 384, 1036, 385, 244, 386, 245, 387, 1037,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 1038,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 1039, 408, 871, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	1040, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	1041, 433, 414, 415, 434, 872, 435, 248, 436, 437,
	1042, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 1043, 448, 449, 1044, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 457, 1045, 250, 251,
	252, 458, 1046, 1047, 459, 460, 253, 254, 1048, 461,
	462, 0, 463, 464, 1049, 1050, 465, 466, 467, 469,
	1051, 470, 1052, 468, 471, 472, 473, 255, 256, 1053,
	475, 474, 257, 1054, 1055, 1056, 1057, 476, 477, 258,
	478, 479, 480, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1869, 259,
	260, 261, 262, 978, 263, 979, 980, 981, 982, 215,
	983, 984, 985, 986, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 987, 270, 271, 272, 273, 274,
	275, 276, 988, 989, 277, 220, 221, 222, 990, 278,
	223, 991, 963, 992, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 993, 288, 0, 289, 290, 994,
	857, 291, 292, 995, 996, 998, 997, 999, 1000, 1001,
	293, 294, 503, 295, 296, 297, 224, 225, 1002, 298,
	1003, 299, 1004, 300, 1005, 1006, 301, 302, 303, 1007,
	304, 305, 1008, 306, 307, 1009, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 1010, 858, 1011, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 1012, 323, 1013, 1014, 859, 324, 1015, 325, 230,
	1016, 231, 1017, 326, 327, 328, 329, 330, 331, 232,
	233, 234, 861, 1018, 238, 333, 0, 0, 0, 1019,
	332, 334, 341, 1020, 860, 335, 235, 337, 336, 338,
	339, 340, 236, 1021, 237, 1022, 342, 862, 863, 343,
	344, 345, 864, 346, 347, 0, 0, 348, 349, 350,
	1023, 352, 351, 1024, 353, 239, 865, 354, 355, 866,
	1025, 356, 357, 1026, 1027, 358, 0, 359, 938, 937,
	360, 361, 363, 364, 362, 867, 365, 366, 368, 367,
	1028, 1029, 868, 1030, 240, 369, 241, 370, 371, 1031,
	372, 373, 1032, 1033, 374, 375, 1034, 1035, 376, 242,
	869, 377, 870, 243, 378, 379, 380, 381, 382, 383,
	384, 1036, 385, 244, 386, 245, 387, 1037, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 1038, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 1039, 408, 871, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 1040, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 1041, 433,
	414, 415, 434, 872, 435, 248, 436, 437, 1042, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 1043, 448, 449, 1044, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 457, 1045, 250, 251, 252, 458,
	1046, 1047, 459, 460, 253, 254, 1048, 461, 462, 0,
	463, 464, 1049, 1050, 465, 466, 467, 469, 1051, 470,
	1052, 468, 471, 472, 473, 255, 256, 1053, 475, 474,
	257, 1054, 1055, 1056, 1057, 476, 477, 258, 478, 479,
	480, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 259, 260, 261,
	262, 978, 263, 979, 980, 981, 982, 215, 983, 984,
	985, 986, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 987, 270, 271, 272, 273, 274, 275, 276,
	988, 989, 277, 220, 221, 222, 990, 278, 223, 991,
	963, 992, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 993, 288, 0, 289, 290, 994, 857, 291,
	292, 995, 996, 998, 997, 999, 1000, 1001, 293, 294,
	503, 295, 296, 297, 224, 225, 1002, 298, 1003, 299,
	1004, 300, 1005, 1006, 301, 302, 303, 1007, 304, 305,
	1008, 306, 307, 1009, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 1010, 858, 1011, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 1012,
	323, 1013, 1014, 859, 324, 1015, 325, 230, 1016, 231,
	1017, 326, 327, 328, 329, 330, 331, 232, 233, 234,
	861, 1018, 238, 333, 0, 0, 0, 1019, 332, 334,
	341, 1020, 860, 335, 235, 337, 336, 338, 339, 340,
	236, 1021, 237, 1022, 342, 862, 863, 343, 344, 345,
	864, 346, 347, 0, 0, 348, 349, 350, 1023, 352,
	351, 1024, 353, 239, 865, 354, 355, 866, 1025, 356,
	357, 1026, 1027, 358, 0, 359, 938, 937, 360, 361,
	363, 364, 362, 867, 365, 366, 368, 367, 1028, 1029,
	868, 1030, 240, 369, 241, 370, 371, 1031, 372, 373,
	1032, 1033, 374, 375, 1034, 1035, 376, 242, 869, 377,
	870, 243, 378, 379, 380, 381, 382, 383, 384, 1036,
	385, 244, 386, 245, 387, 1037, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 1038, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 1039,
	408, 871, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 1040, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 1041, 433, 414, 415,
	434, 872, 435, 248, 436, 437, 1042, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 1043,
	448, 449, 1044, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 457, 1045, 250, 251, 252, 458, 1046, 1047,
	459, 460, 253, 254, 1048, 461, 462, 0, 463, 464,
	1049, 1050, 465, 466, 467, 469, 1051, 470, 1052, 468,
	471, 472, 473, 255, 256, 1053, 475, 474, 257, 1054,
	1055, 1056, 1057, 476, 477, 258, 478, 479, 480, 1852,
	0, 802, 763, 764, 761, 762, 774, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 1849, 263, 0, 0, 0, 0, 848, 777, 0,
	0, 0, 264, 265, 266, 216, 817, 798, 828, 786,
	827, 826, 0, 270, 271, 788, 787, 274, 275, 276,
	778, 847, 277, 874, 873, 222, 0, 278, 854, 0,
	837, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 857, 291,
	292, 840, 838, 839, 844, 842, 841, 843, 293, 294,
	503, 295, 830, 297, 824, 823, 753, 298, 0, 299,
	0, 300, 1850, 0, 301, 822, 303, 0, 304, 305,
	0, 306, 307, 0, 758, 308, 309, 311, 314, 310,
	315, 316, 876, 877, 770, 858, 0, 0, 0, 0,
	0, 317, 318, 319, 821, 819, 820, 0, 322, 0,
	323, 0, 0, 859, 324, 0, 325, 878, 0, 231,
	0, 326, 327, 328, 329, 330, 331, 849, 850, 853,
	861, 0, 851, 797, 0, 0, 0, 0, 332, 334,
	341, 0, 860, 335, 810, 801, 811, 812, 813, 814,
	815, 0, 803, 0, 342, 862, 863, 343, 344, 345,
	864, 835, 836, 0, 0, 348, 349, 350, 0, 352,
	351, 0, 353, 879, 865, 354, 355, 866, 0, 356,
	357, 0, 0, 358, 0, 359, 755, 754, 360, 361,
	363, 790, 362, 867, 365, 366, 368, 367, 750, 0,
	868, 771, 852, 369, 825, 370, 371, 0, 799, 800,
	0, 0, 374, 375, 0, 0, 376, 242, 869, 377,
	870, 880, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 881, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 818, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 871, 409, 410, 411, 412, 759, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 791,
	792, 793, 794, 425, 431, 432, 845, 433, 414, 415,
	434, 872, 435, 816, 795, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 856, 442, 443, 444, 882, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 789, 457, 0, 831, 832, 833, 834, 0, 0,
	459, 460, 883, 884, 769, 461, 462, 0, 463, 464,
	0, 0, 465, 466, 467, 469, 846, 470, 0, 796,
	471, 472, 473, 255, 875, 1848, 475, 474, 257, 0,
	0, 0, 0, 476, 477, 258, 478, 479, 480, 751,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 747, 748, 1851, 0, 0, 0, 0, 0,
	0, 760, 1847, 0, 0, 0, 735, 773, 802, 763,
	764, 761, 762, 774, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 848, 777, 0, 0, 0, 264,
	265, 266, 216, 817, 798, 828, 786, 827, 826, 0,
	270, 271, 788, 787, 274, 275, 276, 778, 847, 277,
	874, 873, 222, 0, 278, 854, 0, 837, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 857, 291, 292, 840, 838,
	839, 844, 842, 841, 843, 293, 294, 503, 295, 830,
	297, 824, 823, 753, 298, 0, 299, 0, 300, 0,
	0, 301, 822, 303, 0, 304, 305, 0, 306, 307,
	0, 758, 308, 309, 311, 314, 310, 315, 316, 876,
	877, 770, 858, 0, 0, 0, 0, 0, 317, 318,
	319, 821, 819, 820, 0, 322, 0, 323, 0, 0,
	859, 324, 0, 325, 878, 0, 231, 0, 326, 327,
	328, 329, 330, 331, 849, 850, 853, 861, 0, 851,
	797, 0, 0, 0, 0, 332, 334, 341, 0, 860,
	335, 810, 801, 811, 812, 813, 814, 815, 0, 803,
	0, 342, 862, 863, 343, 344, 345, 864, 835, 836,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	879, 865, 354, 355, 866, 0, 356, 357, 0, 0,
	358, 0, 359, 755, 754, 360, 361, 363, 790, 362,
	867, 365, 366, 368, 367, 750, 0, 868, 771, 852,
	369, 825, 370, 371, 0, 799, 800, 0, 0, 374,
	375, 0, 0, 376, 242, 869, 377, 870, 880, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 881, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 818,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 871, 409,
	410, 411, 412, 759, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 172, 429, 430, 791, 792, 793, 794,
	425, 431, 432, 845, 433, 414, 415, 434, 872, 435,
	816, 795, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 856, 442, 443, 444, 882, 0, 448, 449, 174,
	450, 451, 452, 453, 454, 312, 455, 313, 789, 457,
	0, 831, 832, 833, 834, 0, 0, 459, 460, 883,
	884, 769, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 846, 470, 0, 796, 471, 472, 473,
	1158, 875, 0, 475, 474, 257, 0, 0, 0, 166,
	476, 477, 258, 478, 479, 480, 751, 167, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 0, 0, 747,
	748, 802, 763, 764, 761, 762, 774, 0, 1377, 0,
	0, 0, 0, 0, 773, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 848, 777, 0,
	0, 0, 264, 265, 266, 216, 817, 798, 828, 786,
	827, 826, 0, 270, 271, 788, 787, 274, 275, 276,
	778, 847, 277, 874, 873, 222, 0, 278, 854, 0,
	837, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 857, 291,
	292, 840, 838, 839, 844, 842, 841, 843, 293, 294,
	503, 295, 830, 297, 824, 823, 753, 298, 0, 299,
	0, 300, 0, 0, 301, 822, 303, 0, 304, 305,
	0, 306, 307, 0, 758, 308, 309, 311, 314, 310,
	315, 316, 876, 877, 770, 858, 0, 0, 0, 0,
	0, 317, 318, 319, 821, 819, 820, 0, 322, 0,
	323, 0, 0, 859, 324, 0, 325, 878, 0, 231,
	0, 326, 327, 328, 329, 330, 331, 849, 850, 853,
	861, 0, 851, 797, 0, 0, 0, 0, 332, 334,
	341, 0, 860, 335, 810, 801, 811, 812, 813, 814,
	815, 0, 803, 0, 342, 862, 863, 343, 344, 345,
	864, 835, 836, 0, 0, 348, 349, 350, 0, 352,
	351, 0, 353, 879, 865, 354, 355, 866, 0, 356,
	357, 0, 0, 358, 0, 359, 755, 754, 360, 361,
	363, 790, 362, 867, 365, 366, 368, 367, 750, 0,
	868, 771, 852, 369, 825, 370, 371, 0, 799, 800,
	0, 0, 374, 375, 0, 0, 376, 242, 869, 377,
	870, 880, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 881, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 818, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 871, 409, 410, 411, 412, 759, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 172, 429, 430, 791,
	792, 793, 794, 425, 431, 432, 845, 433, 414, 415,
	434, 872, 435, 816, 795, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 856, 442, 443, 444, 882, 0,
	448, 449, 174, 450, 451, 452, 453, 454, 312, 455,
	313, 789, 457, 0, 831, 832, 833, 834, 0, 0,
	459, 460, 883, 884, 769, 461, 462, 0, 463, 464,
	0, 0, 465, 466, 467, 469, 846, 470, 0, 796,
	471, 472, 473, 1158, 875, 0, 475, 474, 257, 0,
	0, 0, 166, 476, 477, 258, 478, 479, 480, 751,
	167, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 747, 748, 802, 763, 764, 761, 762, 774,
	0, 1377, 0, 0, 0, 0, 0, 773, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	848, 777, 0, 0, 0, 264, 265, 266, 216, 817,
	798, 828, 786, 827, 826, 1931, 270, 271, 788, 787,
	274, 275, 276, 778, 847, 277, 874, 873, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 503, 295, 830, 297, 824, 823, 753,
	298, 0, 299, 0, 300, 0, 0, 301, 822, 303,
	0, 304, 305, 0, 306, 307, 0, 758, 308, 309,
	311, 314, 310, 315, 316, 876, 877, 770, 858, 0,
	0, 0, 0, 0, 317, 318, 319, 821, 819, 820,
	0, 322, 0, 323, 0, 1936, 859, 324, 0, 325,
	878, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 810, 801, 811,
	812, 813, 814, 815, 0, 803, 0, 342, 862, 863,
	343, 344, 345, 864, 835, 836, 0, 0, 348, 349,
	350, 0, 352, 351, 1932, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 755,
	754, 360, 361, 363, 790, 362, 867, 365, 366, 368,
	367, 750, 0, 868, 771, 852, 369, 825, 370, 371,
	0, 799, 800, 0, 0, 374, 375, 0, 0, 376,
	242, 869, 377, 870, 880, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 881, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 818, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 871, 409, 410, 411, 412, 759,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 791, 792, 793, 794, 425, 431, 432, 845,
	433, 414, 415, 434, 872, 435, 816, 795, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 856, 442, 443,
	444, 882, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 789, 457, 0, 831, 832, 833,
	834, 0, 1933, 459, 460, 883, 884, 769, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 846,
	470, 0, 796, 471, 472, 473, 255, 875, 0, 475,
	474, 257, 0, 0, 0, 0, 476, 477, 258, 478,
	479, 480, 751, 0, 0, 0, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 747, 748, 802, 763, 764,
	761, 762, 774, 0, 760, 0, 0, 0, 0, 0,
	773, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 848, 777, 0, 0, 0, 264, 265,
	266, 216, 817, 798, 828, 786, 827, 826, 0, 270,
	271, 788, 787, 274, 275, 276, 778, 847, 277, 874,
	873, 222, 0, 278, 854, 0, 837, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 857, 291, 292, 840, 838, 839,
	844, 842, 841, 843, 293, 294, 503, 295, 830, 297,
	824, 823, 753, 298, 0, 299, 0, 300, 0, 0,
	301, 822, 303, 0, 304, 305, 0, 306, 307, 0,
	758, 308, 309, 311, 314, 310, 315, 316, 876, 877,
	770, 858, 0, 0, 0, 0, 0, 317, 318, 319,
	821, 819, 820, 0, 322, 0, 323, 0, 0, 859,
	324, 0, 325, 878, 0, 231, 0, 326, 327, 328,
	329, 330, 331, 849, 850, 853, 861, 0, 851, 797,
	0, 0, 0, 0, 332, 334, 341, 0, 860, 335,
	810, 801, 811, 812, 813, 814, 815, 0, 803, 0,
	342, 862, 863, 343, 344, 345, 864, 835, 836, 0,
	0, 348, 349, 350, 0, 352, 351, 0, 353, 879,
	865, 354, 355, 866, 0, 356, 357, 0, 0, 358,
	0, 359, 755, 754, 360, 361, 363, 790, 362, 867,
	365, 366, 368, 367, 750, 2715, 868, 771, 852, 369,
	825, 370, 371, 0, 799, 800, 0, 0, 374, 375,
	0, 0, 376, 242, 869, 377, 870, 880, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 881, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 818, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 871, 409, 410,
	411, 412, 759, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 791, 792, 793, 794, 425,
	431, 432, 845, 433, 414, 415, 434, 872, 435, 816,
	795, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	856, 442, 443, 444, 882, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 789, 457, 0,
	831, 832, 833, 834, 0, 0, 459, 460, 883, 884,
	769, 461, 462, 0, 463, 464, 0, 0, 465, 466,
	467, 469, 846, 470, 0, 796, 471, 472, 473, 255,
	875, 0, 475, 474, 257, 0, 0, 0, 0, 476,
	477, 258, 478, 479, 480, 751, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 747, 748,
	1442, 802, 763, 764, 761, 762, 774, 760, 0, 0,
	0, 0, 0, 773, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 848, 777, 0,
	0, 0, 264, 265, 266, 216, 817, 798, 828, 786,
	827, 826, 0, 270, 271, 788, 787, 274, 275, 276,
	778, 847, 277, 874, 873, 222, 0, 278, 854, 0,
	837, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 857, 291,
	292, 840, 838, 839, 844, 842, 841, 843, 293, 294,
	503, 295, 830, 297, 824, 823, 753, 298, 0, 299,
	0, 300, 0, 0, 301, 822, 303, 0, 304, 305,
	0, 306, 307, 0, 758, 308, 309, 311, 314, 310,
	315, 316, 876, 877, 770, 858, 0, 0, 0, 0,
	0, 317, 318, 319, 821, 819, 820, 0, 322, 0,
	323, 0, 0, 859, 324, 0, 325, 878, 0, 231,
	0, 326, 327, 328, 329, 330, 331, 849, 850, 853,
	861, 0, 851, 797, 0, 0, 0, 1757, 332, 334,
	341, 0, 860, 335, 810, 801, 811, 812, 813, 814,
	815, 0, 803, 0, 342, 862, 863, 343, 344, 345,
	864, 835, 836, 0, 0, 348, 349, 350, 0, 352,
	351, 0, 353, 879, 865, 354, 355, 866, 0, 356,
	357, 0, 0, 358, 0, 359, 755, 754, 360, 361,
	363, 790, 362, 867, 365, 366, 368, 367, 750, 0,
	868, 771, 852, 369, 825, 370, 371, 0, 799, 800,
	0, 0, 374, 375, 0, 0, 376, 242, 869, 377,
	870, 880, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 881, 386, 245, 387, 1756, 388, 389, 390, 391,
	392, 393, 818, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 871, 409, 410, 411, 412, 759, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 791,
	792, 793, 794, 425, 431, 432, 845, 433, 414, 415,
	434, 872, 435, 816, 795, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 856, 442, 443, 444, 882, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 789, 457, 0, 831, 832, 833, 834, 0, 0,
	459, 460, 883, 884, 769, 461, 462, 0, 463, 464,
	0, 0, 465, 466, 467, 469, 846, 470, 0, 796,
	471, 472, 473, 255, 875, 0, 475, 474, 257, 0,
	0, 0, 0, 476, 477, 258, 478, 479, 480, 751,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 747, 748, 0, 0, 0, 0, 0, 0,
	0, 760, 0, 0, 0, 0, 743, 773, 802, 763,
	764, 761, 762, 774, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 848, 777, 0, 0, 0, 264,
	265, 266, 216, 817, 798, 828, 786, 827, 826, 0,
	270, 271, 788, 787, 274, 275, 276, 778, 847, 277,
	874, 873, 222, 0, 278, 854, 0, 837, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 857, 291, 292, 840, 838,
	839, 844, 842, 841, 843, 293, 294, 503, 295, 830,
	297, 824, 823, 753, 298, 0, 299, 0, 300, 0,
	0, 301, 822, 303, 0, 304, 305, 0, 306, 307,
	0, 758, 308, 309, 311, 314, 310, 315, 316, 876,
	877, 770, 858, 0, 0, 0, 0, 0, 317, 318,
	319, 821, 819, 820, 0, 322, 0, 323, 0, 0,
	859, 324, 0, 325, 878, 0, 231, 0, 326, 327,
	328, 329, 330, 331, 849, 850, 853, 861, 0, 851,
	797, 0, 0, 0, 0, 332, 334, 341, 0, 860,
	335, 810, 801, 811, 812, 813, 814, 815, 0, 803,
	0, 342, 862, 863, 343, 344, 345, 864, 835, 836,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	879, 865, 354, 355, 866, 0, 356, 357, 0, 0,
	358, 0, 359, 755, 754, 360, 361, 363, 790, 362,
	867, 365, 366, 368, 367, 750, 0, 868, 771, 852,
	369, 825, 370, 371, 0, 799, 800, 745, 0, 374,
	375, 0, 0, 376, 242, 869, 377, 870, 880, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 881, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 818,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 871, 409,
	410, 411, 412, 759, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 791, 792, 793, 794,
	425, 431, 432, 845, 433, 414, 415, 434, 872, 435,
	816, 795, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 856, 442, 443, 444, 882, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 789, 457,
	0, 831, 832, 833, 834, 0, 0, 459, 460, 883,
	884, 769, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 846, 470, 0, 796, 471, 472, 473,
	255, 875, 0, 475, 474, 257, 0, 0, 0, 0,
	476, 477, 258, 478, 479, 480, 751, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 0, 0, 747,
	748, 802, 763, 764, 761, 762, 774, 0, 760, 0,
	0, 0, 0, 0, 773, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 848, 777, 0,
	0, 0, 264, 265, 266, 216, 817, 798, 828, 786,
	827, 826, 0, 270, 271, 788, 787, 274, 275, 276,
	778, 847, 277, 874, 873, 222, 0, 278, 854, 0,
	837, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 857, 291,
	292, 840, 838, 839, 844, 842, 841, 843, 293, 294,
	503, 295, 830, 297, 824, 823, 753, 298, 0, 299,
	0, 300, 0, 0, 301, 822, 303, 0, 304, 305,
	0, 306, 307, 0, 758, 308, 309, 311, 314, 310,
	315, 316, 876, 877, 770, 858, 0, 0, 0, 0,
	0, 317, 318, 319, 821, 819, 820, 0, 322, 0,
	323, 0, 0, 859, 324, 0, 325, 878, 0, 231,
	0, 326, 327, 328, 329, 330, 331, 849, 850, 853,
	861, 0, 851, 797, 0, 0, 0, 0, 332, 334,
	341, 0, 860, 335, 810, 801, 811, 812, 813, 814,
	815, 0, 803, 0, 342, 862, 863, 343, 344, 345,
	864, 835, 836, 0, 0, 348, 349, 350, 0, 352,
	351, 0, 353, 879, 865, 354, 355, 866, 0, 356,
	357, 0, 0, 358, 0, 359, 755, 754, 360, 361,
	363, 790, 362, 867, 365, 366, 368, 367, 750, 0,
	868, 771, 852, 369, 825, 370, 371, 0, 799, 800,
	0, 0, 374, 375, 0, 0, 376, 242, 869, 377,
	870, 880, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 881, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 818, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 871, 409, 410, 411, 412, 759, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 791,
	792, 793, 794, 425, 431, 432, 845, 433, 414, 415,
	434, 872, 435, 816, 795, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 856, 442, 443, 444, 882, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 789, 457, 0, 831, 832, 833, 834, 0, 0,
	459, 460, 883, 884, 769, 461, 462, 0, 463, 464,
	0, 0, 465, 466, 467, 469, 846, 470, 0, 796,
	471, 472, 473, 255, 875, 2544, 475, 474, 257, 0,
	0, 0, 0, 476, 477, 258, 478, 479, 480, 751,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 747, 748, 802, 763, 764, 761, 762, 774,
	0, 760, 0, 0, 0, 0, 0, 773, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	848, 777, 0, 0, 0, 264, 265, 266, 216, 817,
	798, 828, 786, 827, 826, 0, 270, 271, 788, 787,
	274, 275, 276, 778, 847, 277, 874, 873, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 503, 295, 830, 297, 824, 823, 753,
	298, 0, 299, 0, 300, 0, 0, 301, 822, 303,
	0, 304, 305, 0, 306, 307, 0, 758, 308, 309,
	311, 314, 310, 315, 316, 876, 877, 770, 858, 0,
	0, 0, 0, 0, 317, 318, 319, 821, 819, 820,
	0, 322, 0, 323, 0, 0, 859, 324, 0, 325,
	878, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 810, 801, 811,
	812, 813, 814, 815, 0, 803, 0, 342, 862, 863,
	343, 344, 345, 864, 835, 836, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 755,
	754, 360, 361, 363, 790, 362, 867, 365, 366, 368,
	367, 750, 0, 868, 771, 852, 369, 825, 370, 371,
	0, 799, 800, 745, 0, 374, 375, 0, 0, 376,
	242, 869, 377, 870, 880, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 881, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 818, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 871, 409, 410, 411, 412, 759,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 791, 792, 793, 794, 425, 431, 432, 845,
	433, 414, 415, 434, 872, 435, 816, 795, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 856, 442, 443,
	444, 882, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 789, 457, 0, 831, 832, 833,
	834, 0, 0, 459, 460, 883, 884, 769, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 846,
	470, 0, 796, 471, 472, 473, 255, 875, 0, 475,
	474, 257, 0, 0, 0, 0, 476, 477, 258, 478,
	479, 480, 751, 0, 0, 0, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 747, 748, 802, 763, 764,
	761, 762, 774, 0, 760, 0, 0, 0, 0, 0,
	773, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 848, 777, 0, 0, 0, 264, 265,
	266, 216, 817, 798, 828, 786, 827, 826, 0, 270,
	271, 788, 787, 274, 275, 276, 778, 847, 277, 874,
	873, 222, 0, 278, 854, 0, 837, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 857, 291, 292, 840, 838, 839,
	844, 842, 841, 843, 293, 294, 503, 295, 830, 297,
	824, 823, 753, 298, 0, 299, 0, 300, 0, 0,
	301, 822, 303, 0, 304, 305, 0, 306, 307, 0,
	758, 308, 309, 311, 314, 310, 315, 316, 876, 877,
	770, 858, 0, 0, 0, 0, 0, 317, 318, 319,
	821, 819, 820, 0, 322, 0, 323, 0, 0, 859,
	324, 0, 325, 878, 0, 231, 0, 326, 327, 328,
	329, 330, 331, 849, 850, 853, 861, 0, 851, 797,
	0, 0, 0, 0, 332, 334, 341, 0, 860, 335,
	810, 801, 811, 812, 813, 814, 815, 0, 803, 0,
	342, 862, 863, 343, 344, 345, 864, 835, 836, 0,
	0, 348, 349, 350, 0, 352, 351, 0, 353, 879,
	865, 354, 355, 866, 0, 356, 357, 0, 0, 358,
	0, 359, 755, 754, 360, 361, 363, 790, 362, 867,
	365, 366, 368, 367, 750, 0, 868, 771, 852, 369,
	825, 370, 371, 0, 799, 800, 0, 0, 374, 375,
	0, 0, 376, 242, 869, 377, 870, 880, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 881, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 818, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 871, 409, 410,
	411, 412, 759, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 791, 792, 793, 794, 425,
	431, 432, 845, 433, 414, 415, 434, 872, 435, 816,
	795, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	856, 442, 443, 444, 882, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 789, 457, 0,
	831, 832, 833, 834, 0, 0, 459, 460, 883, 884,
	769, 461, 462, 0, 463, 464, 0, 0, 465, 466,
	467, 469, 846, 470, 0, 796, 471, 472, 473, 255,
	875, 0, 475, 474, 257, 0, 0, 0, 0, 476,
	477, 258, 478, 479, 480, 751, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 747, 748,
	1442, 802, 763, 764, 761, 762, 774, 760, 0, 0,
	0, 0, 0, 773, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 848, 777, 0,
	0, 0, 264, 265, 266, 216, 817, 798, 828, 786,
	827, 826, 0, 270, 271, 788, 787, 274, 275, 276,
	778, 847, 277, 874, 873, 222, 0, 278, 854, 0,
	837, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 857, 291,
	292, 840, 838, 839, 844, 842, 841, 843, 293, 294,
	503, 295, 830, 297, 824, 823, 753, 298, 0, 299,
	0, 300, 0, 0, 301, 822, 303, 0, 304, 305,
	0, 306, 307, 0, 758, 308, 309, 311, 314, 310,
	315, 316, 876, 877, 770, 858, 0, 0, 0, 0,
	0, 317, 318, 319, 821, 819, 820, 0, 322, 0,
	323, 0, 1936, 859, 324, 0, 325, 878, 0, 231,
	0, 326, 327, 328, 329, 330, 331, 849, 850, 853,
	861, 0, 851, 797, 0, 0, 0, 0, 332, 334,
	341, 0, 860, 335, 810, 801, 811, 812, 813, 814,
	815, 0, 803, 0, 342, 862, 863, 343, 344, 345,
	864, 835, 836, 0, 0, 348, 349, 350, 0, 352,
	351, 0, 353, 879, 865, 354, 355, 866, 0, 356,
	357, 0, 0, 358, 0, 359, 755, 754, 360, 361,
	363, 790, 362, 867, 365, 366, 368, 367, 750, 0,
	868, 771, 852, 369, 825, 370, 371, 0, 799, 800,
	0, 0, 374, 375, 0, 0, 376, 242, 869, 377,
	870, 880, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 881, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 818, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 871, 409, 410, 411, 412, 759, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 791,
	792, 793, 794, 425, 431, 432, 845, 433, 414, 415,
	434, 872, 435, 816, 795, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 856, 442, 443, 444, 882, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 789, 457, 0, 831, 832, 833, 834, 0, 0,
	459, 460, 883, 884, 769, 461, 462, 0, 463, 464,
	0, 0, 465, 466, 467, 469, 846, 470, 0, 796,
	471, 472, 473, 255, 875, 0, 475, 474, 257, 0,
	0, 0, 0, 476, 477, 258, 478, 479, 480, 751,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 747, 748, 0, 0, 0, 0, 0, 0,
	0, 760, 0, 0, 0, 0, 1927, 773, 802, 763,
	764, 761, 762, 774, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 848, 777, 0, 0, 0, 264,
	265, 266, 216, 817, 798, 828, 786, 827, 826, 0,
	270, 271, 788, 787, 274, 275, 276, 778, 847, 277,
	874, 873, 222, 0, 278, 854, 0, 837, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 857, 291, 292, 840, 838,
	839, 844, 842, 841, 843, 293, 294, 503, 295, 830,
	297, 824, 823, 753, 298, 0, 299, 0, 300, 0,
	0, 301, 822, 303, 0, 304, 305, 0, 306, 307,
	0, 758, 308, 309, 311, 314, 310, 315, 316, 876,
	877, 770, 858, 0, 0, 0, 0, 0, 317, 318,
	319, 821, 819, 820, 0, 322, 0, 323, 0, 0,
	859, 324, 0, 325, 878, 0, 231, 0, 326, 327,
	328, 329, 330, 331, 849, 850, 853, 861, 0, 851,
	797, 0, 0, 0, 0, 332, 334, 341, 0, 860,
	335, 810, 801, 811, 812, 813, 814, 815, 0, 803,
	0, 342, 862, 863, 343, 344, 345, 864, 835, 836,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	879, 865, 354, 355, 866, 0, 356, 357, 0, 0,
	358, 0, 359, 755, 754, 360, 361, 363, 790, 362,
	867, 365, 366, 368, 367, 750, 0, 868, 771, 852,
	369, 825, 370, 371, 0, 799, 800, 0, 0, 374,
	375, 0, 0, 376, 242, 869, 377, 870, 880, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 881, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 818,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 871, 409,
	410, 411, 412, 759, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 791, 792, 793, 794,
	425, 431, 432, 845, 433, 414, 415, 434, 872, 435,
	816, 795, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 856, 442, 443, 444, 882, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 789, 457,
	0, 831, 832, 833, 834, 0, 0, 459, 460, 883,
	884, 769, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 846, 470, 0, 796, 471, 472, 473,
	255, 875, 0, 475, 474, 257, 0, 0, 0, 0,
	476, 477, 258, 478, 479, 480, 751, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 0, 0, 747,
	748, 0, 0, 0, 0, 0, 0, 0, 760, 0,
	0, 0, 0, 1916, 773, 802, 763, 764, 761, 762,
	774, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 848, 777, 0, 0, 0, 264, 265, 266, 216,
	817, 798, 828, 786, 827, 826, 0, 270, 271, 788,
	787, 274, 275, 276, 778, 847, 277, 874, 873, 222,
	0, 278, 854, 0, 837, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 857, 291, 292, 840, 838, 839, 844, 842,
	841, 843, 293, 294, 503, 295, 830, 297, 824, 823,
	753, 298, 0, 299, 0, 300, 0, 0, 301, 822,
	303, 0, 304, 305, 0, 306, 307, 0, 758, 308,
	309, 311, 314, 310, 315, 316, 876, 877, 770, 858,
	0, 0, 0, 0, 0, 317, 318, 319, 821, 819,
	820, 0, 322, 0, 323, 0, 0, 859, 324, 0,
	325, 878, 0, 231, 0, 326, 327, 328, 329, 330,
	331, 849, 850, 853, 861, 0, 851, 797, 0, 0,
	0, 0, 332, 334, 341, 0, 860, 335, 810, 801,
	811, 812, 813, 814, 815, 0, 803, 0, 342, 862,
	863, 343, 344, 345, 864, 835, 836, 0, 0, 348,
	349, 350, 0, 352, 351, 0, 353, 879, 865, 354,
	355, 866, 0, 356, 357, 0, 0, 358, 0, 359,
	755, 754, 360, 361, 363, 790, 362, 867, 365, 366,
	368, 367, 750, 0, 868, 771, 852, 369, 825, 370,
	371, 0, 799, 800, 0, 0, 374, 375, 0, 0,
	376, 242, 869, 377, 870, 880, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 881, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 818, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 871, 409, 410, 411, 412,
	759, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 791, 792, 793, 794, 425, 431, 432,
	845, 433, 414, 415, 434, 872, 435, 816, 795, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 856, 442,
	443, 444, 882, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 789, 457, 0, 831, 832,
	833, 834, 0, 0, 459, 460, 883, 884, 769, 461,
	462, 0, 463, 464, 0, 0, 465, 466, 467, 469,
	846, 470, 0, 796, 471, 472, 473, 255, 875, 0,
	475, 474, 257, 0, 0, 0, 0, 476, 477, 258,
	478, 479, 480, 751, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 0, 0, 0, 747, 748, 0, 0,
	0, 0, 0, 0, 0, 760, 0, 0, 0, 0,
	1914, 773, 802, 763, 764, 761, 762, 774, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 848, 777,
	0, 0, 0, 264, 265, 266, 216, 817, 798, 828,
	786, 827, 826, 0, 270, 271, 788, 787, 274, 275,
	276, 778, 847, 277, 874, 873, 222, 0, 278, 854,
	0, 837, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 857,
	291, 292, 840, 838, 839, 844, 842, 841, 843, 293,
	294, 503, 295, 830, 297, 824, 823, 753, 298, 0,
	299, 0, 300, 0, 0, 301, 822, 303, 0, 304,
	305, 0, 306, 307, 0, 758, 308, 309, 311, 314,
	310, 315, 316, 876, 877, 770, 858, 0, 0, 0,
	0, 0, 317, 318, 319, 821, 819, 820, 0, 322,
	0, 323, 0, 0, 859, 324, 0, 325, 878, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 849, 850,
	853, 861, 0, 851, 797, 0, 0, 0, 0, 332,
	334, 341, 0, 860, 335, 810, 801, 811, 812, 813,
	814, 815, 0, 803, 0, 342, 862, 863, 343, 344,
	345, 864, 835, 836, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 879, 865, 354, 355, 866, 0,
	356, 357, 0, 0, 358, 0, 359, 755, 754, 360,
	361, 363, 790, 362, 867, 365, 366, 368, 367, 750,
	0, 868, 771, 852, 369, 825, 370, 371, 0, 799,
	800, 0, 0, 374, 375, 0, 0, 376, 242, 869,
	377, 870, 880, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 881, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 818, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 871, 409, 410, 411, 412, 759, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	791, 792, 793, 794, 425, 431, 432, 845, 433, 414,
	415, 434, 872, 435, 816, 795, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 856, 442, 443, 444, 882,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 789, 457, 0, 831, 832, 833, 834, 0,
	0, 459, 460, 883, 884, 769, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 846, 470, 0,
	796, 471, 472, 473, 255, 875, 0, 475, 474, 257,
	0, 0, 0, 0, 476, 477, 258, 478, 479, 480,
	751, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	0, 0, 0, 747, 748, 0, 0, 0, 0, 0,
	0, 0, 760, 0, 0, 0, 0, 1912, 773, 802,
	763, 764, 761, 762, 774, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 848, 777, 0, 0, 0,
	264, 265, 266, 216, 817, 798, 828, 786, 827, 826,
	0, 270, 271, 788, 787, 274, 275, 276, 778, 847,
	277, 874, 873, 222, 0, 278, 854, 0, 837, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 857, 291, 292, 840,
	838, 839, 844, 842, 841, 843, 293, 294, 503, 295,
	830, 297, 824, 823, 753, 298, 0, 299, 0, 300,
	0, 0, 301, 822, 303, 0, 304, 305, 0, 306,
	307, 0, 758, 308, 309, 311, 314, 310, 315, 316,
	876, 877, 770, 858, 0, 0, 0, 0, 0, 317,
	318, 319, 821, 819, 820, 0, 322, 0, 323, 0,
	0, 859, 324, 0, 325, 878, 0, 231, 0, 326,
	327, 328, 329, 330, 331, 849, 850, 853, 861, 0,
	851, 797, 0, 0, 0, 0, 332, 334, 341, 0,
	860, 335, 810, 801, 811, 812, 813, 814, 815, 0,
	803, 0, 342, 862, 863, 343, 344, 345, 864, 835,
	836, 0, 0, 348, 349, 350, 0, 352, 351, 0,
	353, 879, 865, 354, 355, 866, 0, 356, 357, 0,
	0, 358, 0, 359, 755, 754, 360, 361, 363, 790,
	362, 867, 365, 366, 368, 367, 750, 0, 868, 771,
	852, 369, 825, 370, 371, 0, 799, 800, 0, 0,
	374, 375, 0, 0, 376, 242, 869, 377, 870, 880,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 881,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	818, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 871,
	409, 410, 411, 412, 759, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 791, 792, 793,
	794, 425, 431, 432, 845, 433, 414, 415, 434, 872,
	435, 816, 795, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 856, 442, 443, 444, 882, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 789,
	457, 0, 831, 832, 833, 834, 0, 0, 459, 460,
	883, 884, 769, 461, 462, 0, 463, 464, 0, 0,
	465, 466, 467, 469, 846, 470, 0, 796, 471, 472,
	473, 255, 875, 0, 475, 474, 257, 0, 0, 0,
	0, 476, 477, 258, 478, 479, 480, 751, 0, 0,
	0, 0, 0, 0, 0, 749, 0, 0, 0, 0,
	747, 748, 0, 0, 0, 0, 0, 0, 0, 760,
	0, 0, 0, 0, 1910, 773, 1902, 763, 764, 761,
	762, 774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 848, 777, 0, 0, 0, 264, 265, 266,
	216, 817, 798, 828, 786, 827, 826, 0, 270, 271,
	788, 787, 274, 275, 276, 778, 847, 277, 874, 873,
	222, 0, 278, 854, 0, 837, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 857, 291, 292, 840, 838, 839, 844,
	842, 841, 843, 293, 294, 503, 295, 830, 1905, 824,
	823, 753, 298, 0, 299, 0, 300, 0, 0, 301,
	822, 303, 0, 304, 305, 0, 306, 307, 0, 758,
	308, 309, 311, 314, 310, 315, 316, 876, 877, 770,
	858, 0, 0, 0, 0, 0, 317, 318, 319, 821,
	819, 820, 0, 322, 0, 323, 0, 0, 859, 324,
	0, 325, 878, 0, 231, 0, 326, 327, 1906, 329,
	330, 331, 849, 850, 853, 861, 0, 851, 797, 0,
	0, 0, 0, 332, 334, 341, 0, 860, 335, 810,
	801, 811, 812, 813, 814, 815, 0, 803, 0, 342,
	862, 863, 343, 344, 345, 864, 835, 836, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 879, 865,
	354, 355, 866, 0, 356, 357, 0, 0, 358, 0,
	359, 755, 754, 1907, 1904, 363, 790, 362, 867, 365,
	366, 368, 367, 750, 0, 868, 771, 852, 369, 825,
	370, 371, 0, 799, 800, 0, 0, 374, 375, 0,
	0, 376, 242, 869, 377, 870, 880, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 881, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 818, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 871, 409, 410, 411,
	412, 759, 413, 0, 417, 418, 419, 420, 421, 422,
	1908, 0, 429, 430, 791, 792, 793, 794, 425, 431,
	432, 845, 433, 414, 415, 434, 872, 435, 816, 795,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 856,
	442, 443, 444, 882, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 789, 457, 0, 831,
	832, 833, 834, 0, 0, 459, 460, 883, 884, 769,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 846, 470, 0, 796, 471, 472, 473, 255, 875,
	0, 475, 474, 257, 0, 0, 0, 0, 476, 477,
	258, 478, 1903, 480, 751, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 0, 0, 0, 747, 748, 0,
	0, 0, 0, 0, 0, 0, 760, 0, 0, 0,
	0, 1899, 773, 1902, 763, 764, 761, 762, 774, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 848,
	777, 0, 0, 0, 264, 265, 266, 216, 817, 798,
	828, 786, 827, 826, 0, 270, 271, 788, 787, 274,
	275, 276, 778, 847, 277, 874, 873, 222, 0, 278,
	854, 0, 837, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	857, 291, 292, 840, 838, 839, 844, 842, 841, 843,
	293, 294, 503, 295, 830, 1905, 824, 823, 753, 298,
	0, 299, 0, 300, 0, 0, 301, 822, 303, 0,
	304, 305, 0, 306, 307, 0, 758, 308, 309, 311,
	314, 310, 315, 316, 876, 877, 770, 858, 0, 0,
	0, 0, 0, 317, 318, 319, 821, 819, 820, 0,
	322, 0, 323, 0, 0, 859, 324, 0, 325, 878,
	0, 231, 0, 326, 327, 1906, 329, 330, 331, 849,
	850, 853, 861, 0, 851, 797, 0, 0, 0, 0,
	332, 334, 341, 0, 860, 335, 810, 801, 811, 812,
	813, 814, 815, 0, 803, 0, 342, 862, 863, 343,
	344, 345, 864, 835, 836, 0, 0, 348, 349, 350,
	0, 352, 351, 0, 353, 879, 865, 354, 355, 866,
	0, 356, 357, 0, 0, 358, 0, 359, 755, 754,
	1907, 1904, 363, 790, 362, 867, 365, 366, 368, 367,
	750, 0, 868, 771, 852, 369, 825, 370, 371, 0,
	799, 800, 0, 0, 374, 375, 0, 0, 376, 242,
	869, 377, 870, 880, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 881, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 818, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 871, 409, 410, 411, 412, 759, 413,
	0, 417, 418, 419, 420, 421, 422, 1908, 0, 429,
	430, 791, 792, 793, 794, 425, 431, 432, 845, 433,
	414, 415, 434, 872, 435, 816, 795, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 856, 442, 443, 444,
	882, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 789, 457, 0, 831, 832, 833, 834,
	0, 0, 459, 460, 883, 884, 769, 461, 462, 0,
	463, 464, 0, 0, 465, 466, 467, 469, 846, 470,
	0, 796, 471, 472, 473, 255, 875, 0, 475, 474,
	257, 0, 0, 0, 0, 476, 477, 258, 478, 1903,
	480, 751, 0, 0, 0, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 747, 748, 802, 763, 764, 761,
	762, 774, 0, 760, 0, 0, 0, 0, 0, 773,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 848, 777, 0, 0, 0, 264, 265, 266,
	216, 817, 798, 828, 786, 827, 826, 0, 270, 271,
	788, 787, 274, 275, 276, 778, 847, 277, 874, 873,
	222, 0, 278, 854, 0, 837, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 857, 291, 292, 840, 838, 839, 844,
	842, 841, 843, 293, 294, 503, 295, 830, 297, 824,
	823, 753, 298, 0, 299, 0, 300, 0, 0, 301,
	822, 303, 0, 304, 305, 0, 306, 307, 0, 758,
	308, 309, 311, 314, 310, 315, 316, 876, 877, 770,
	858, 0, 0, 0, 0, 0, 317, 318, 319, 821,
	819, 820, 0, 322, 0, 323, 0, 0, 859, 324,
	0, 325, 878, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 849, 850, 853, 861, 0, 851, 797, 0,
	0, 0, 0, 332, 334, 341, 0, 860, 335, 810,
	801, 811, 812, 813, 814, 815, 0, 803, 0, 342,
	862, 863, 343, 344, 345, 864, 835, 836, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 879, 865,
	354, 355, 866, 0, 356, 357, 0, 0, 358, 0,
	359, 755, 754, 360, 361, 363, 790, 362, 867, 365,
	366, 368, 367, 750, 0, 868, 771, 852, 369, 825,
	370, 371, 0, 799, 800, 0, 0, 374, 375, 0,
	0, 376, 242, 869, 377, 870, 880, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 881, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 818, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 871, 409, 410, 411,
	412, 759, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 791, 792, 793, 794, 425, 431,
	432, 845, 433, 414, 415, 434, 872, 435, 816, 795,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 856,
	442, 443, 444, 882, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 789, 457, 0, 831,
	832, 833, 834, 0, 0, 459, 460, 883, 884, 769,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 846, 470, 0, 796, 471, 472, 473, 255, 875,
	0, 475, 474, 257, 0, 0, 0, 0, 476, 477,
	258, 478, 479, 480, 751, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 0, 0, 0, 747, 748, 0,
	0, 0, 0, 0, 1386, 0, 760, 0, 0, 0,
	0, 0, 773, 802, 763, 764, 761, 762, 774, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 1744, 263, 0, 0, 0, 0, 848,
	777, 0, 0, 0, 264, 265, 266, 216, 817, 798,
	828, 786, 827, 826, 0, 270, 271, 788, 787, 274,
	275, 276, 778, 847, 277, 874, 873, 222, 0, 278,
	854, 0, 837, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	857, 291, 292, 840, 838, 839, 844, 842, 841, 843,
	293, 294, 503, 295, 830, 297, 824, 823, 753, 298,
	0, 299, 0, 300, 0, 0, 301, 822, 303, 0,
	304, 305, 0, 306, 307, 0, 758, 308, 309, 311,
	314, 310, 315, 316, 876, 877, 770, 858, 0, 0,
	0, 0, 0, 317, 318, 319, 821, 819, 820, 0,
	322, 0, 323, 0, 0, 859, 324, 0, 325, 878,
	0, 231, 0, 326, 327, 328, 329, 330, 331, 849,
	850, 853, 861, 0, 851, 797, 0, 0, 0, 0,
	332, 334, 341, 0, 860, 335, 810, 801, 811, 812,
	813, 814, 815, 0, 803, 0, 342, 862, 863, 343,
	344, 345, 864, 835, 836, 0, 0, 348, 349, 350,
	0, 352, 351, 0, 353, 879, 865, 354, 355, 866,
	0, 356, 357, 0, 0, 358, 0, 359, 755, 754,
	360, 361, 363, 790, 362, 867, 365, 366, 368, 367,
	750, 0, 868, 771, 852, 369, 825, 370, 371, 0,
	799, 800, 0, 0, 374, 375, 0, 0, 376, 242,
	869, 377, 870, 880, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 881, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 818, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 871, 409, 410, 411, 412, 759, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 791, 792, 793, 794, 425, 431, 432, 845, 433,
	414, 415, 434, 872, 435, 816, 795, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 856, 442, 443, 444,
	882, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 789, 457, 0, 831, 832, 833, 834,
	0, 0, 459, 460, 883, 884, 769, 461, 462, 0,
	463, 464, 0, 0, 465, 466, 467, 469, 846, 470,
	0, 796, 471, 472, 473, 255, 875, 0, 475, 474,
	257, 0, 0, 0, 0, 476, 477, 258, 478, 479,
	480, 751, 0, 0, 0, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 747, 748, 0, 0, 0, 0,
	0, 0, 0, 760, 0, 0, 0, 0, 1080, 773,
	802, 763, 764, 761, 762, 774, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 777, 0, 0,
	0, 264, 265, 266, 216, 817, 798, 828, 786, 827,
	826, 0, 270, 271, 788, 787, 274, 275, 276, 778,
	847, 277, 874, 873, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 503,
	295, 830, 297, 824, 823, 753, 298, 0, 299, 0,
	300, 0, 0, 301, 822, 303, 0, 304, 305, 0,
	306, 307, 0, 758, 308, 309, 311, 314, 310, 315,
	316, 876, 877, 770, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 821, 819, 820, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 878, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 1079, 850, 853, 861,
	0, 851, 797, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 810, 801, 811, 812, 813, 814, 815,
	0, 803, 0, 342, 862, 863, 343, 344, 345, 864,
	835, 836, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 755, 754, 360, 361, 363,
	790, 362, 867, 365, 366, 368, 367, 750, 0, 868,
	771, 852, 369, 825, 370, 371, 0, 799, 800, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	880, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	881, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 818, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 759, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 791, 792,
	793, 794, 425, 431, 432, 845, 433, 414, 415, 434,
	872, 435, 816, 795, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 856, 442, 443, 444, 882, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	789, 457, 0, 831, 832, 833, 834, 0, 0, 459,
	460, 883, 884, 769, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 846, 470, 0, 796, 471,
	472, 473, 255, 875, 0, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 751, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	0, 747, 748, 0, 0, 0, 0, 0, 0, 0,
	760, 0, 0, 0, 0, 1074, 773, 802, 763, 764,
	761, 762, 774, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 848, 777, 0, 0, 0, 264, 265,
	266, 216, 817, 798, 828, 786, 827, 826, 0, 270,
	271, 788, 787, 274, 275, 276, 778, 847, 277, 874,
	873, 222, 0, 278, 854, 0, 837, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 857, 291, 292, 840, 838, 839,
	844, 842, 841, 843, 293, 294, 503, 295, 830, 297,
	824, 823, 753, 298, 0, 299, 0, 300, 0, 0,
	301, 822, 303, 0, 304, 305, 0, 306, 307, 0,
	758, 308, 309, 311, 314, 310, 315, 316, 876, 877,
	770, 858, 0, 0, 0, 0, 0, 317, 318, 319,
	821, 819, 820, 0, 322, 0, 323, 0, 0, 859,
	324, 0, 325, 878, 0, 231, 0, 326, 327, 328,
	329, 330, 331, 1073, 850, 853, 861, 0, 851, 797,
	0, 0, 0, 0, 332, 334, 341, 0, 860, 335,
	810, 801, 811, 812, 813, 814, 815, 0, 803, 0,
	342, 862, 863, 343, 344, 345, 864, 835, 836, 0,
	0, 348, 349, 350, 0, 352, 351, 0, 353, 879,
	865, 354, 355, 866, 0, 356, 357, 0, 0, 358,
	0, 359, 755, 754, 360, 361, 363, 790, 362, 867,
	365, 366, 368, 367, 750, 0, 868, 771, 852, 369,
	825, 370, 371, 0, 799, 800, 0, 0, 374, 375,
	0, 0, 376, 242, 869, 377, 870, 880, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 881, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 818, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 871, 409, 410,
	411, 412, 759, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 791, 792, 793, 794, 425,
	431, 432, 845, 433, 414, 415, 434, 872, 435, 816,
	795, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	856, 442, 443, 444, 882, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 789, 457, 0,
	831, 832, 833, 834, 0, 0, 459, 460, 883, 884,
	769, 461, 462, 0, 463, 464, 0, 0, 465, 466,
	467, 469, 846, 470, 0, 796, 471, 472, 473, 255,
	875, 0, 475, 474, 257, 0, 0, 0, 0, 476,
	477, 258, 478, 479, 480, 751, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 747, 748,
	0, 0, 0, 0, 0, 0, 0, 760, 0, 0,
	0, 0, 1069, 773, 802, 763, 764, 761, 762, 774,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	848, 777, 0, 0, 0, 264, 265, 266, 216, 817,
	798, 828, 786, 827, 826, 0, 270, 271, 788, 787,
	274, 275, 276, 778, 847, 277, 874, 873, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 503, 295, 830, 297, 824, 823, 753,
	298, 0, 299, 0, 300, 0, 0, 301, 822, 303,
	0, 304, 305, 0, 306, 307, 0, 758, 308, 309,
	311, 314, 310, 315, 316, 876, 877, 770, 858, 0,
	0, 0, 0, 0, 317, 318, 319, 821, 819, 820,
	0, 322, 0, 323, 0, 0, 859, 324, 0, 325,
	878, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 810, 801, 811,
	812, 813, 814, 815, 0, 803, 0, 342, 862, 863,
	343, 344, 345, 864, 835, 836, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 755,
	754, 360, 361, 363, 790, 362, 867, 365, 366, 368,
	367, 750, 0, 868, 771, 852, 369, 825, 370, 371,
	0, 799, 800, 0, 0, 374, 375, 0, 0, 376,
	242, 869, 377, 870, 880, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 881, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 818, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 871, 409, 410, 411, 412, 759,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 791, 792, 793, 794, 425, 431, 432, 845,
	433, 414, 415, 434, 872, 435, 816, 795, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 856, 442, 443,
	444, 882, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 789, 457, 0, 831, 832, 833,
	834, 0, 0, 459, 460, 883, 884, 769, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 846,
	470, 0, 796, 471, 472, 473, 255, 875, 0, 475,
	474, 257, 0, 0, 0, 0, 476, 477, 258, 478,
	479, 480, 751, 0, 0, 0, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 747, 748, 802, 763, 764,
	761, 762, 774, 0, 760, 0, 0, 0, 0, 0,
	773, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 848, 777, 0, 0, 0, 264, 265,
	266, 216, 817, 798, 828, 786, 827, 826, 0, 270,
	271, 788, 787, 274, 275, 276, 778, 847, 277, 874,
	873, 222, 0, 278, 854, 0, 837, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 857, 291, 292, 840, 838, 839,
	844, 842, 841, 843, 293, 294, 503, 295, 830, 297,
	824, 823, 753, 298, 0, 299, 0, 300, 0, 0,
	301, 822, 303, 0, 304, 305, 0, 306, 307, 0,
	758, 308, 309, 311, 314, 310, 315, 316, 876, 877,
	770, 858, 0, 0, 0, 0, 0, 317, 318, 319,
	821, 819, 820, 0, 322, 0, 323, 0, 0, 859,
	324, 0, 325, 878, 0, 231, 0, 326, 327, 328,
	329, 330, 331, 849, 850, 853, 861, 0, 851, 797,
	0, 0, 0, 0, 332, 334, 341, 0, 860, 335,
	810, 801, 811, 812, 813, 814, 815, 0, 803, 0,
	342, 862, 863, 343, 344, 345, 864, 835, 836, 0,
	0, 348, 349, 350, 0, 352, 351, 0, 353, 879,
	865, 354, 355, 866, 0, 356, 357, 0, 0, 358,
	0, 359, 755, 754, 360, 361, 363, 790, 362, 867,
	365, 366, 368, 367, 750, 0, 868, 771, 852, 369,
	825, 370, 371, 0, 799, 800, 0, 0, 374, 375,
	0, 0, 376, 242, 869, 377, 870, 880, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 881, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 818, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 871, 409, 410,
	411, 412, 759, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 791, 792, 793, 794, 425,
	431, 432, 845, 433, 414, 415, 434, 872, 435, 816,
	795, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	856, 442, 443, 444, 882, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 789, 457, 0,
	831, 832, 833, 834, 0, 0, 459, 460, 883, 884,
	769, 461, 462, 0, 463, 464, 0, 0, 465, 466,
	467, 469, 846, 470, 0, 796, 471, 472, 473, 255,
	875, 0, 475, 474, 257, 0, 0, 0, 0, 476,
	477, 258, 478, 479, 480, 751, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 747, 748,
	802, 763, 764, 761, 762, 774, 0, 760, 0, 0,
	0, 0, 0, 773, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 777, 0, 0,
	0, 264, 265, 266, 216, 817, 798, 828, 786, 827,
	826, 0, 270, 271, 788, 787, 274, 275, 276, 778,
	847, 277, 874, 873, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 3102,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 503,
	295, 830, 297, 824, 823, 753, 298, 0, 299, 0,
	300, 0, 0, 301, 822, 303, 0, 304, 305, 0,
	306, 307, 0, 758, 308, 309, 311, 314, 310, 315,
	316, 876, 877, 770, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 821, 819, 820, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 878, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 797, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 810, 801, 811, 812, 813, 814, 815,
	0, 803, 0, 342, 862, 863, 343, 344, 345, 864,
	835, 836, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 755, 754, 360, 361, 363,
	790, 362, 867, 365, 366, 368, 367, 750, 0, 868,
	771, 852, 369, 825, 370, 371, 0, 799, 800, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	880, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	881, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 818, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 759, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 791, 792,
	793, 794, 425, 431, 432, 845, 433, 414, 415, 434,
	872, 435, 816, 795, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 856, 442, 443, 444, 882, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	789, 457, 0, 831, 832, 833, 834, 0, 0, 459,
	460, 883, 884, 769, 461, 462, 0, 3101, 464, 0,
	0, 465, 466, 467, 469, 846, 470, 0, 796, 471,
	472, 473, 255, 875, 0, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 751, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	0, 747, 748, 802, 763, 764, 761, 762, 774, 0,
	760, 0, 0, 0, 0, 0, 773, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 848,
	777, 0, 0, 0, 264, 265, 266, 3100, 817, 798,
	828, 786, 827, 826, 0, 270, 271, 788, 787, 274,
	275, 276, 778, 847, 277, 874, 873, 222, 0, 278,
	854, 0, 837, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	857, 291, 3102, 840, 838, 839, 844, 842, 841, 843,
	293, 294, 503, 295, 830, 297, 824, 823, 753, 298,
	0, 299, 0, 300, 0, 0, 301, 822, 303, 0,
	304, 305, 0, 306, 307, 0, 758, 308, 309, 311,
	314, 310, 315, 316, 876, 877, 770, 858, 0, 0,
	0, 0, 0, 317, 318, 319, 821, 819, 820, 0,
	322, 0, 323, 0, 0, 859, 324, 0, 325, 878,
	0, 231, 0, 326, 327, 328, 329, 330, 331, 849,
	850, 853, 861, 0, 851, 797, 0, 0, 0, 0,
	332, 334, 341, 0, 860, 335, 810, 801, 811, 812,
	813, 814, 815, 0, 803, 0, 342, 862, 863, 343,
	344, 345, 864, 835, 836, 0, 0, 348, 349, 350,
	0, 352, 351, 0, 353, 879, 865, 354, 355, 866,
	0, 356, 357, 0, 0, 358, 0, 359, 755, 754,
	360, 361, 363, 790, 362, 867, 365, 366, 368, 367,
	750, 0, 868, 771, 852, 369, 825, 370, 371, 0,
	799, 800, 0, 0, 374, 375, 0, 0, 376, 242,
	869, 377, 870, 880, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 881, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 818, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 871, 409, 410, 411, 412, 759, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 791, 792, 793, 794, 425, 431, 432, 845, 433,
	414, 415, 434, 872, 435, 816, 795, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 856, 442, 443, 444,
	882, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 789, 457, 0, 831, 832, 833, 834,
	0, 0, 459, 460, 883, 884, 769, 461, 462, 0,
	3101, 464, 0, 0, 465, 466, 467, 469, 846, 470,
	0, 796, 471, 472, 473, 255, 875, 0, 475, 474,
	257, 0, 0, 0, 0, 476, 477, 258, 478, 479,
	480, 751, 0, 0, 0, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 747, 748, 802, 763, 764, 761,
	762, 774, 0, 760, 0, 0, 0, 0, 0, 773,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 848, 777, 0, 0, 0, 264, 265, 266,
	216, 817, 798, 828, 786, 827, 826, 0, 270, 271,
	788, 787, 274, 275, 276, 778, 847, 277, 874, 873,
	222, 0, 278, 854, 0, 837, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 857, 291, 292, 840, 838, 839, 844,
	842, 841, 843, 293, 294, 503, 295, 830, 297, 824,
	823, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	822, 303, 0, 304, 305, 0, 306, 307, 0, 758,
	308, 309, 311, 314, 310, 315, 316, 876, 877, 770,
	858, 0, 0, 0, 0, 0, 317, 318, 319, 821,
	819, 820, 0, 322, 0, 323, 0, 0, 859, 324,
	0, 325, 878, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 849, 850, 853, 861, 0, 851, 797, 0,
	0, 0, 0, 332, 334, 341, 0, 860, 335, 810,
	801, 811, 812, 813, 814, 815, 0, 803, 0, 342,
	862, 863, 343, 344, 345, 864, 835, 836, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 879, 865,
	354, 355, 866, 0, 356, 357, 0, 0, 358, 0,
	359, 938, 937, 360, 361, 363, 790, 362, 867, 365,
	366, 368, 367, 0, 0, 868, 771, 852, 369, 825,
	370, 371, 0, 799, 800, 0, 0, 374, 375, 0,
	0, 376, 242, 869, 377, 870, 880, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 881, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 818, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 871, 409, 410, 411,
	412, 759, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 791, 792, 793, 794, 425, 431,
	432, 845, 433, 414, 415, 434, 872, 435, 816, 795,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 856,
	442, 443, 444, 882, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 789, 457, 0, 831,
	832, 833, 834, 0, 0, 459, 460, 883, 884, 769,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 846, 470, 0, 796, 471, 472, 473, 255, 875,
	0, 475, 474, 257, 0, 0, 0, 0, 476, 477,
	258, 478, 479, 480, 802, 763, 764, 761, 762, 774,
	0, 0, 1924, 0, 0, 0, 0, 1922, 1923, 0,
	259, 260, 261, 262, 0, 263, 760, 0, 0, 0,
	848, 777, 773, 0, 0, 264, 265, 266, 0, 817,
	798, 828, 786, 827, 826, 0, 270, 271, 788, 787,
	274, 275, 276, 778, 847, 277, 874, 873, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 3102, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 503, 295, 830, 297, 824, 823, 753,
	298, 0, 299, 0, 300, 0, 0, 301, 822, 303,
	0, 304, 305, 0, 306, 307, 0, 758, 308, 309,
	311, 314, 310, 315, 316, 876, 877, 770, 858, 0,
	0, 0, 0, 0, 317, 318, 319, 821, 819, 820,
	0, 322, 0, 323, 0, 0, 859, 324, 0, 325,
	878, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 0, 0, 851, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 810, 801, 811,
	812, 813, 814, 815, 0, 803, 0, 342, 0, 0,
	343, 344, 345, 864, 835, 836, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 879, 865, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 755,
	754, 360, 361, 363, 790, 362, 867, 365, 366, 368,
	367, 750, 0, 0, 771, 852, 369, 825, 370, 371,
	0, 799, 800, 0, 0, 374, 375, 0, 0, 376,
	242, 869, 377, 870, 880, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 881, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 818, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 871, 409, 410, 411, 412, 759,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 791, 792, 793, 794, 425, 431, 432, 845,
	433, 414, 415, 434, 0, 435, 816, 795, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 856, 442, 443,
	444, 882, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 789, 457, 0, 831, 832, 833,
	834, 0, 0, 459, 460, 883, 884, 769, 461, 462,
	0, 3101, 464, 0, 0, 465, 466, 467, 469, 846,
	470, 0, 796, 471, 472, 473, 255, 875, 0, 475,
	474, 257, 0, 0, 0, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 0, 0, 0, 0, 735, 0,
	936, 0, 0, 0, 0, 747, 748, 0, 0, 0,
	0, 0, 0, 0, 760, 0, 259, 260, 261, 262,
	773, 263, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	847, 277, 220, 221, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 876, 877, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 878, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 923, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 852, 369, 241, 370, 371, 0, 372, 373, 0,
	928, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	880, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	881, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 930, 0, 417, 418,
	419, 420, 421, 422, 423, 172, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 845, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 882, 0, 448,
	449, 174, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 883, 884, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 846, 470, 0, 468, 471,
	472, 473, 1158, 256, 0, 475, 474, 257, 0, 0,
	936, 166, 476, 477, 258, 478, 479, 480, 0, 167,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 0, 920, 0,
	1467, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	847, 277, 220, 221, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 876, 877, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 878, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 923, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 852, 369, 241, 370, 371, 0, 372, 373, 0,
	928, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	880, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	881, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 930, 0, 417, 418,
	419, 420, 421, 422, 423, 172, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 845, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 882, 0, 448,
	449, 174, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 883, 884, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 846, 470, 0, 468, 471,
	472, 473, 1158, 256, 0, 475, 474, 257, 2317, 0,
	936, 166, 476, 477, 258, 478, 479, 480, 0, 167,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 0, 920, 0,
	1467, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	847, 277, 220, 221, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 876, 877, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 878, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 923, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 852, 369, 241, 370, 371, 0, 372, 373, 0,
	928, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	880, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	881, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 930, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 845, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 882, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 883, 884, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 846, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 919, 0,
	936, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 0, 920, 0,
	925, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	847, 277, 220, 221, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 876, 877, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 878, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 923, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 852, 369, 241, 370, 371, 0, 372, 373, 0,
	928, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	880, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	881, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 930, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 845, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 882, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 883, 884, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 846, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	936, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 0, 920, 0,
	925, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	847, 277, 220, 221, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 876, 877, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 878, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 923, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 852, 369, 241, 370, 371, 0, 372, 373, 0,
	928, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	880, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	881, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 930, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 845, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 882, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 883, 884, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 846, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	936, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 0, 920, 0,
	925, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	847, 277, 220, 221, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 876, 877, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 878, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 852, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	880, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	881, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 845, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 882, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 883, 884, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 846, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	936, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 0, 0, 0,
	2656, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	847, 277, 220, 221, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 876, 877, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 878, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 852, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	880, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	881, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 930, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 845, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 882, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 883, 884, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 846, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 1155, 0,
	959, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	1371, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 172, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 174, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 1158, 256, 0, 475, 474, 257, 0, 0,
	936, 166, 476, 477, 258, 478, 479, 480, 0, 167,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 0, 0, 0,
	137, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	847, 277, 220, 221, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 876, 877, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 878, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 852, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	880, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	881, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 845, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 882, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 883, 884, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 846, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 735, 0,
	500, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 172, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 174, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 1158, 256, 0, 475, 474, 257, 0, 0,
	500, 166, 476, 477, 258, 478, 479, 480, 0, 167,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	137, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	500, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	2110, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	500, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	2565, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 1234, 0,
	959, 958, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	1472, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 858, 0, 0, 0, 0, 0,
	1233, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 1232,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 1151, 0,
	959, 958, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 1150, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 1147, 0,
	959, 958, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 1146, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 1105, 0,
	959, 958, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 1104, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 1102, 0,
	959, 958, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 1101, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 952, 0,
	959, 958, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 954, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 959, 958,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 963, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 857, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 503, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 305, 0, 306, 307,
	0, 226, 308, 309, 311, 314, 310, 315, 316, 227,
	228, 0, 858, 0, 0, 0, 0, 0, 317, 318,
	319, 229, 320, 321, 0, 322, 0, 323, 0, 0,
	859, 324, 0, 325, 230, 0, 231, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 861, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 860,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 862, 863, 343, 344, 345, 864, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 865, 354, 355, 866, 0, 356, 357, 0, 0,
	358, 0, 359, 938, 937, 360, 361, 363, 364, 362,
	867, 365, 366, 368, 367, 0, 0, 868, 0, 240,
	369, 241, 370, 371, 0, 372, 373, 0, 0, 374,
	375, 0, 0, 376, 242, 869, 377, 870, 243, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 244, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 246,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 871, 409,
	410, 411, 412, 247, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 872, 435,
	248, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 249, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 456, 457,
	0, 250, 251, 252, 458, 0, 0, 459, 460, 253,
	254, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	255, 256, 0, 475, 474, 257, 959, 958, 0, 0,
	476, 477, 258, 478, 479, 480, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 963, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 857, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	858, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 859, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 861, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 860, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	862, 863, 343, 344, 345, 864, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 865,
	354, 355, 866, 0, 356, 357, 0, 0, 358, 0,
	359, 938, 937, 360, 361, 363, 364, 362, 867, 365,
	366, 368, 367, 0, 0, 868, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 869, 377, 870, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 871, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 872, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	959, 475, 474, 257, 0, 0, 0, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 858, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 859, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 869, 377, 870,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	871, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	872, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 606, 0,
	208, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 214,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 213, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 207, 0,
	208, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 483, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 214,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 213, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 208, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 483, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 214, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 1717, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 213, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 208, 475,
	474, 257, 0, 0, 0, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 483, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 214, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 305, 0, 306, 307,
	0, 226, 308, 309, 311, 314, 310, 315, 316, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 317, 318,
	319, 229, 320, 321, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 230, 0, 231, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	369, 241, 370, 371, 0, 372, 373, 0, 0, 374,
	375, 0, 0, 376, 242, 0, 377, 0, 243, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 244, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 246,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 247, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	248, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 249, 0, 448, 449, 213,
	450, 451, 452, 453, 454, 312, 455, 313, 456, 457,
	0, 250, 251, 252, 458, 0, 0, 459, 460, 253,
	254, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	255, 256, 500, 475, 474, 257, 0, 0, 0, 0,
	476, 477, 258, 478, 479, 480, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 483, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 500, 475, 474, 257,
	0, 0, 0, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 483, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 1996, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 1993, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	2075, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 1999, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 2073, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 2072,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	1998, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 2074, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	500, 475, 474, 257, 0, 0, 0, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 1996, 278, 223, 0, 0,
	1990, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 1993, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	1999, 0, 0, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 1989, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 1998, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	1997, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 613, 0,
	500, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 612,
	590, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 593, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 594, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 595, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 0, 475, 474, 257, 589, 0,
	500, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	590, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 593, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 594, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 595, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 500, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	593, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 594, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 595,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 0, 475,
	474, 257, 1276, 0, 500, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	1279, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 1277, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 0, 1278,
	474, 257, 1126, 0, 500, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 928, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 0, 475,
	474, 257, 947, 0, 500, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	949, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 928, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 0, 475,
	474, 257, 944, 0, 500, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	946, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 928, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 0, 475,
	474, 257, 940, 0, 500, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	942, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 928, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 0, 475,
	474, 257, 598, 0, 500, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 597, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 0, 475,
	474, 257, 525, 0, 500, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 524, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 523, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 500, 475,
	474, 257, 0, 0, 0, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 1971, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 503, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 305, 0, 306, 307,
	0, 226, 308, 309, 311, 314, 310, 315, 316, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 317, 318,
	319, 229, 320, 321, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 230, 0, 231, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	369, 241, 370, 371, 0, 372, 373, 0, 0, 374,
	375, 0, 0, 376, 242, 0, 377, 0, 243, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 244, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 246,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 247, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	248, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 249, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 456, 457,
	0, 250, 251, 252, 458, 0, 0, 459, 460, 253,
	254, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	255, 256, 0, 475, 474, 257, 500, 2481, 0, 0,
	476, 477, 258, 478, 479, 480, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 500, 2481, 0, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 2478, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 500, 475,
	474, 257, 0, 0, 0, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 503, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 305, 0, 306, 307,
	0, 226, 308, 309, 311, 314, 310, 315, 316, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 317, 318,
	319, 229, 320, 321, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 230, 0, 231, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	369, 241, 370, 371, 0, 372, 373, 0, 928, 374,
	375, 0, 0, 376, 242, 0, 377, 0, 243, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 244, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 246,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 247, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	248, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 249, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 456, 457,
	0, 250, 251, 252, 458, 0, 0, 459, 460, 253,
	254, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	255, 256, 500, 475, 474, 257, 0, 0, 0, 0,
	476, 477, 258, 478, 479, 480, 0, 0, 259, 260,
	261, 262, 1710, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	1668, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	1666, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	639, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 1205, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 640, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 636, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 635, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	1561, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 1560, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	639, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 1205, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 640, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 636, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 635, 251, 252, 458, 0,
	0, 459, 1206, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	639, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 629, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 640, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 636, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 1177, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 635, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	1144, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 1143, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	1140, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 1139, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	1137, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 1136, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	1134, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 1133, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	1130, 0, 500, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 1129, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 500, 475, 474, 257,
	0, 0, 0, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 259, 260, 261, 262, 1118, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 1116, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 1115, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 1107, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 1098, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 1097, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 1093, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 1089, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 1091, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 967, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 969, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 964, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 639, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 629, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 628, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 640, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 630, 413, 0, 417, 418, 636, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 631,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 635,
	251, 252, 458, 0, 0, 459, 633, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 619, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 620, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 615, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 604, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	0, 475, 474, 257, 547, 0, 500, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	500, 475, 474, 257, 0, 0, 0, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 500, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	2375, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 500, 475,
	474, 257, 0, 0, 0, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 503, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 305, 0, 306, 307,
	0, 226, 308, 309, 311, 314, 310, 315, 316, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 317, 318,
	319, 229, 320, 321, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 230, 0, 231, 0, 326, 327,
	328, 329, 330, 331, 2373, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	369, 241, 370, 371, 0, 372, 373, 0, 0, 374,
	375, 0, 0, 376, 242, 0, 377, 0, 243, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 244, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 246,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 247, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	248, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 249, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 456, 457,
	0, 250, 251, 252, 458, 0, 0, 459, 460, 253,
	254, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	255, 256, 500, 475, 474, 257, 0, 0, 0, 0,
	476, 477, 258, 478, 479, 480, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 2362, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 500, 475, 474, 257,
	0, 0, 0, 0, 476, 477, 258, 478, 479, 480,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 503, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 0, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 230, 0, 231, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 369, 241,
	370, 371, 0, 372, 373, 0, 0, 374, 375, 0,
	0, 376, 242, 0, 377, 0, 243, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 244, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 0, 409, 410, 411,
	412, 247, 413, 0, 620, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 0, 433, 414, 415, 434, 0, 435, 248, 436,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 457, 0, 250,
	251, 252, 458, 0, 0, 459, 460, 253, 254, 0,
	461, 462, 0, 463, 464, 0, 0, 465, 466, 467,
	469, 0, 470, 0, 468, 471, 472, 473, 255, 256,
	500, 475, 474, 257, 0, 0, 0, 0, 476, 477,
	258, 478, 479, 480, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 1574, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 503,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 230, 0, 231, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 369, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 0, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 457, 0, 250, 251, 252, 458, 0, 0, 459,
	460, 253, 254, 0, 461, 462, 0, 463, 464, 0,
	0, 465, 466, 467, 469, 0, 470, 0, 468, 471,
	472, 473, 255, 256, 500, 475, 474, 257, 0, 0,
	0, 0, 476, 477, 258, 478, 479, 480, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 503, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 0, 326, 327, 328, 329, 330, 331,
	1565, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 369, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 457, 0, 250, 251, 252,
	458, 0, 0, 459, 460, 253, 254, 0, 461, 462,
	0, 463, 464, 0, 0, 465, 466, 467, 469, 0,
	470, 0, 468, 471, 472, 473, 255, 256, 500, 475,
	474, 257, 0, 0, 0, 0, 476, 477, 258, 478,
	479, 480, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 503, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 305, 0, 306, 307,
	0, 226, 308, 309, 311, 314, 310, 315, 316, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 317, 318,
	319, 229, 320, 321, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 230, 0, 231, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	369, 241, 370, 371, 0, 372, 373, 0, 0, 374,
	375, 0, 0, 376, 242, 0, 377, 0, 243, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 244, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 246,
	902, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 0, 409,
	410, 411, 412, 247, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 0, 433, 414, 415, 434, 0, 435,
	248, 436, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 249, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 456, 457,
	0, 250, 251, 252, 458, 0, 0, 459, 460, 253,
	254, 0, 461, 462, 0, 463, 464, 0, 0, 465,
	466, 467, 469, 0, 470, 0, 468, 471, 472, 473,
	255, 256, 500, 475, 474, 257, 0, 0, 0, 0,
	476, 477, 258, 478, 479, 480, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 503, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 369, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 0, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	0, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 0, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 457, 0, 250, 251, 252, 458, 0,
	0, 459, 460, 253, 254, 0, 461, 462, 0, 463,
	464, 0, 0, 465, 466, 467, 469, 0, 470, 0,
	468, 471, 472, 473, 255, 256, 0, 475, 474, 257,
	0, 0, 0, 0, 476, 477, 258, 478, 479, 480,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 1334, 1335, 1336, 1310, 0, 0, 0, 0, 0,
	1316, 0, 1330, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 1333, 1334, 1335, 1336, 0, 0, 0, 0,
	1346, 0, 1316, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1356, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1355, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 0, 1337, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 1356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 1349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 1349, 0, 0, 0,
	1311, 0, 1347, 1357, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 0, 0, 0, 0, 0, 0, 1310, 0, 2263,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 1311, 0, 1347, 1357, 0, 1322, 1323, 1329,
	1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 0, 0, 1333, 1334, 1335, 1336, 1310,
	0, 2262, 0, 0, 0, 1316, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 0, 1333, 1334, 1335,
	1336, 0, 0, 0, 0, 1346, 0, 1316, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 0, 1337,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	1356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 1349, 0, 0, 0, 1311, 0, 1347, 1357, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0,
	0, 0, 1310, 0, 2259, 0, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 1311, 0, 1347,
	1357, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0,
	1333, 1334, 1335, 1336, 1310, 0, 2258, 0, 0, 0,
	1316, 0, 1330, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 1333, 1334, 1335, 1336, 0, 0, 0, 0,
	1346, 0, 1316, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1356, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1355, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 0, 1337, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 1356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 1349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1349, 0, 0, 0,
	0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 2257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 1357,
	0, 0, 0, 0, 1347, 0, 0, 1322, 1323, 1329,
	1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 1310, 0, 0, 0, 3067, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 1357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 1335, 1336, 1310, 0, 0, 0, 0,
	0, 1316, 0, 1330, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 0, 1333, 1334, 1335, 1336, 0, 0, 0,
	0, 1346, 0, 1316, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1356, 0, 1348, 1358, 0, 0,
	1338, 1339, 1340, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1355, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 1337, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 1356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 0, 0,
	0, 0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328,
	1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 0, 0, 0, 0, 3063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1357, 0, 0, 0, 0, 1347, 0, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 1310, 0, 0, 0, 3005, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343,
	1351, 1352, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1333, 1334, 1335, 1336, 1310, 0, 0, 0,
	0, 0, 1316, 0, 1330, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1355, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 0, 1333, 1334, 1335, 1336, 0, 0,
	0, 0, 1346, 0, 1316, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 0, 1348, 1358, 0,
	0, 1338, 1339, 1340, 0, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1355, 0, 0, 0, 0, 0, 0,
	1325, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 0, 1337, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 0, 1347, 0, 0, 1322, 1323, 1329,
	1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 0, 0, 0, 0, 3004, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 1357, 0, 0, 0, 0, 1347, 0, 0, 1322,
	1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 1310, 0, 0, 0, 2954,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 0, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 1357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1333, 1334, 1335, 1336, 1310, 0, 0,
	0, 0, 0, 1316, 0, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 1358, 0, 0,
	1338, 1339, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1355, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 0, 0, 1333, 1334, 1335, 1336, 0,
	0, 0, 0, 1346, 0, 1316, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 0, 1337, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1349,
	0, 0, 0, 0, 0, 1347, 0, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 0, 0, 0, 0, 2915, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343,
	1351, 1352, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 1357, 0, 0, 0, 0, 1347, 0, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 1310, 0, 0, 0,
	2826, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 1308, 1309, 0, 1341,
	1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 1334, 1335, 1336, 1310, 0,
	0, 0, 0, 0, 1316, 0, 1330, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 1358, 0,
	0, 1338, 1339, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1355, 0, 0, 0, 0, 0, 0,
	1325, 1326, 0, 0, 0, 0, 1333, 1334, 1335, 1336,
	0, 0, 0, 0, 1346, 0, 1316, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1356, 0, 1348,
	1358, 0, 0, 1338, 1339, 1340, 0, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 1355, 0, 0, 0, 0,
	0, 0, 1325, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 0, 1337, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 1356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 1347, 0, 0, 1322,
	1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0, 2784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 1357, 0, 0, 0, 0, 1347, 0,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 1310, 0, 0,
	0, 2783, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 1357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 1334, 1335, 1336, 1310,
	0, 0, 0, 0, 0, 1316, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 0, 1333, 1334, 1335,
	1336, 0, 0, 0, 0, 1346, 0, 1316, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 0, 1337,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	1356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 1347, 0, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0,
	2782, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 1309, 0, 1341,
	1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 1357, 0, 0, 0, 0, 1347,
	0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1310, 0,
	0, 0, 2749, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1333, 1334, 1335, 1336,
	1310, 0, 0, 0, 0, 0, 1316, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1358, 0, 0, 1338, 1339, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 1355, 0, 0, 0, 0,
	0, 0, 1325, 1326, 0, 0, 0, 0, 1333, 1334,
	1335, 1336, 0, 0, 0, 0, 1346, 0, 1316, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1356,
	0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 0,
	1337, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 0, 0,
	0, 1356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 0, 1347, 0,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0,
	0, 2570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 1357, 0, 0, 0, 0,
	1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1310,
	0, 0, 0, 2542, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 1308,
	1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 1357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 1334, 1335,
	1336, 1310, 0, 0, 0, 0, 0, 1316, 0, 1330,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 0, 0, 0, 1346, 0, 1316,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1356, 0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1355, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	0, 1337, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 1356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 1349, 0, 0, 0, 0, 1311, 1347,
	0, 1357, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0,
	0, 0, 1843, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	0, 0, 2217, 1333, 1334, 1335, 1336, 0, 0, 0,
	0, 0, 0, 1316, 3143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 1309, 0, 1341,
	1342, 1343, 1351, 1352, 1353, 0, 1348, 1358, 0, 0,
	1338, 1339, 1340, 0, 1344, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 1357, 0, 0, 0, 0, 0,
	0, 1354, 1355, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 0, 0, 1346, 0, 0, 1330, 0, 0, 0,
	1331, 0, 0, 1327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3142, 0,
	0, 0, 0, 0, 0, 0, 1333, 1334, 1335, 1336,
	0, 0, 0, 0, 0, 0, 1316, 1337, 2304, 0,
	0, 2303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 1348,
	1358, 0, 0, 1338, 1339, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 1354, 1355, 0, 0, 0, 0,
	0, 0, 1325, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	1349, 2190, 0, 1311, 0, 0, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2191, 0, 0, 0, 0, 0, 0, 1347, 0,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 1333, 1334,
	1335, 1336, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 1946, 0, 0, 0, 0, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 1348, 1358, 0, 0, 1338, 1339, 1340, 1344, 0,
	0, 0, 1945, 0, 0, 1311, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 0, 0, 0, 1346, 0,
	1330, 0, 0, 0, 0, 1331, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 1334, 1335, 1336, 0, 0, 0, 0, 0, 0,
	1316, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 1349, 0, 0, 1311, 0, 0,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 0, 0, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	1311, 0, 1347, 1357, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 0, 1333, 1334, 1335, 1336, 0, 1310, 0, 0,
	0, 0, 1316, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1355, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 0, 0, 1333, 1334, 1335, 1336, 0,
	0, 0, 1346, 0, 0, 1316, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 0, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 1345,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1337, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 0, 0, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 1349,
	0, 0, 1311, 0, 1347, 1357, 0, 1322, 1323, 1329,
	1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 0, 0, 0, 0, 0, 0, 1310,
	0, 2560, 0, 0, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 2305, 0, 0, 1311, 0, 1347, 1357, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 1333, 1334, 1335,
	1336, 0, 1310, 0, 0, 0, 0, 1316, 0, 0,
	1330, 0, 2310, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 0, 0,
	1333, 1334, 1335, 1336, 0, 0, 0, 1346, 0, 0,
	1316, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1356, 0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1337, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 1357,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1310, 1349, 0, 0, 0, 0, 1347,
	0, 1330, 1322, 1323, 1329, 1328, 1324, 1350, 1327, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 1335, 1336, 0, 0, 0, 0, 0,
	0, 1316, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 0, 0, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2272, 0, 0, 0, 0, 0, 1308,
	1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 1344, 0, 0,
	0, 2256, 0, 0, 1311, 0, 0, 1357, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 1349, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 1357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 0, 0, 0, 1310, 0, 1316,
	0, 0, 0, 1347, 0, 1330, 1322, 1323, 1329, 1328,
	1324, 1350, 1327, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 1348, 1358, 0, 0, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1355, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 1334, 1335, 1336, 1346,
	0, 0, 0, 0, 0, 1316, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1356, 0, 0, 0, 0, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 1346, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 1349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 1344, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 1357, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 0, 1349,
	0, 1347, 0, 1330, 1322, 1323, 1329, 1328, 1324, 1350,
	1327, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1333, 1334, 1335, 1336, 0, 0, 0,
	0, 0, 0, 1316, 0, 0, 0, 1347, 0, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 1348, 1358, 0, 0,
	1338, 1339, 1340, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 1354, 1355, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 1311, 0, 0, 1357, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 1310,
	0, 0, 0, 0, 0, 0, 1356, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 1334, 1335,
	1336, 0, 0, 0, 1332, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 0, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1356, 0, 0, 0, 0, 1347, 0, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 0, 0, 1628, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1639, 1624, 1629, 1612, 1649, 1648, 0, 1332, 0,
	1614, 1613, 0, 0, 0, 0, 0, 0, 1658, 1657,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1650, 0, 1646,
	1645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1643,
	1641, 1642, 0, 0, 0, 0, 0, 0, 0, 1347,
	0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1623, 0,
	0, 0, 0, 0, 0, 0, 1628, 0, 0, 1632,
	1627, 1633, 1634, 1635, 1636, 1637, 0, 1631, 0, 0,
	0, 0, 0, 0, 0, 0, 1655, 1656, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1639, 1624, 1629, 1612, 1649, 1648, 0, 0, 0,
	1614, 1613, 0, 0, 0, 0, 1616, 0, 1658, 1657,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1647,
	0, 0, 0, 1625, 1626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1650, 0, 1646,
	1645, 0, 0, 0, 0, 0, 0, 1640, 0, 0,
	1644, 1764, 1762, 1763, 1766, 1765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1643,
	1641, 1642, 0, 0, 1617, 1618, 1619, 1620, 0, 0,
	0, 0, 0, 0, 664, 0, 694, 0, 1638, 1621,
	0, 0, 0, 0, 0, 0, 0, 0, 1623, 1660,
	0, 0, 0, 0, 0, 0, 671, 0, 0, 1632,
	1627, 1633, 1634, 1635, 1636, 1637, 1615, 1631, 669, 1651,
	1652, 1653, 1654, 0, 0, 0, 1655, 1656, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 670, 0, 1622, 0, 0, 672, 0, 1659,
	0, 699, 0, 0, 0, 0, 1616, 678, 679, 0,
	0, 0, 689, 0, 0, 0, 0, 0, 0, 1647,
	0, 0, 0, 1625, 1626, 695, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 0, 0, 0, 0, 1640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 674, 0, 0, 0, 0, 0, 668, 0, 0,
	0, 0, 0, 0, 1617, 1618, 1619, 1620, 0, 0,
	0, 0, 675, 676, 0, 0, 0, 0, 1638, 1621,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1660,
	0, 0, 0, 0, 682, 0, 0, 0, 0, 0,
	0, 677, 0, 0, 0, 0, 1615, 0, 0, 1651,
	1652, 1653, 1654, 0, 0, 681, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	0, 0, 0, 0, 1622, 0, 0, 0, 0, 1659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 680, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 666,
	684, 697, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 667, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 687, 0, 0, 685, 0,
	0, 0, 700, 701, 0, 0, 0, 0, 0, 698,
	0, 0, 0, 0, 0, 0, 688, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 690,
}
var sqlPact = [...]int{

	5007, -1000, 8, -1000, -1000, -1000, 239, -1000, -1000, -1000,
	-1000, 238, 235, 234, -1000, 232, 223, 222, 221, 212,
	211, 209, 208, 204, 198, 197, 196, -1000, -1000, 195,
	-1000, -1000, -1000, -1000, 193, 192, 190, -1000, 185, 1650,
	31286, 182, 179, 174, 2284, 48766, 1560, 167, 163, -1000,
	161, 2611, 37100, 1141, 2088, -1000, 147, 137, 1813, 48382,
	269, 1982, 33986, 36710, 2045, 47992, 30896, 2034, 33596, 47602,
	-1000, -1000, 1110, -1000, -1000, 47212, 136, 135, 132, 129,
	127, -1000, 124, 46822, 123, 111, 109, 108, 107, 106,
	-1000, 105, 104, 100, 99, 95, 82, 80, 79, 78,
	77, 76, 75, 74, 73, 72, 70, -1000, 59242, 69,
	67, 65, -1000, 1377, 64, 63, 62, 61, 59, -1000,
	-1000, -1000, 58, 56, 55, 54, -1000, 53, 51, 175,
	50, 49, 45, 44, 41, -1000, 1159, 656, 2254, 13464,
	1287, 1275, 1264, 1259, 1272, 831, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 51454, 48766, 40, -53,
	38, -1000, 2428, 801, 23426, 5007, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36320, 35930,
	35540, 29336, 46432, 46042, 10557, 10557, 992, -1000, -1000, -1000,
	-1000, -1000, 5, 32438, 48766, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 287, -1000, -1000, -1000, -1000, -1000, -1000, 19800,
	605, 19373, 306, 18946, 210, 414, -1000, -1000, -1000, 284,
	-1000, -1000, -1000, -1000, 1314, -1000, -1000, -1000, -1000, 45652,
	45262, 2011, 44872, 28936, 28536, 44482, 48766, 48766, 1794, 1787,
	44092, -1000, -1000, 43702, -1000, -1000, 2255, 1950, 1939, 35150,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43318,
	42928, 42538, 42148, 41758, 28136, 27736, 629, -1000, -1000, -1000,
	-1000, 24986, 625, -1000, -1000, -1000, -1000, -1000, 37, -1000,
	36, 35, -1000, 34, 33, 32, 31, 28, 27, 26,
	25, -1000, 22, 20, -1000, 16, 15, -1000, 13, 12,
	1600, 1526, 1504, 41368, 1094, 48766, -1000, 1557, -8, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 624, 48766, -1000, -1000,
	20213, 84, -1000, 622, -1000, 1935, -1000, 20213, 84, -1000,
	1548, 146, 1398, -1000, -1000, -1000, 1402, 1078, -1000, -1000,
	48766, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2657, 1465,
	620, 40978, -1000, 1980, -1000, 784, 14290, -1000, 938, -1000,
	14290, 279, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2016, 1233, 2603, 27336,
	1441, 2376, 2245, 2656, 1674, 2226, 2222, 2215, 2196, 2177,
	2654, 1165, 2653, 1172, 2650, 2170, 2069, 2617, 1564, 34760,
	2649, 2648, 2068, 1934, -1000, -1000, -1000, -1000, 1097, -1000,
	-1000, -1000, -1000, -1000, -1000, 38644, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1159,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1678, 2338,
	2338, 2338, 2448, 384, 375, -1000, 175, -1000, 1577, -1000,
	1464, -1000, -1000, -1000, 58245, -1000, -1000, 20213, 20213, 20213,
	20213, 20213, 1267, -1000, -1000, -1000, 657, -1000, 616, 518,
	11797, -1000, -1000, -1000, -1000, 604, 2619, -1000, 797, -1000,
	-1000, -1000, -1000, 2558, -1000, -1000, -1000, 400, 20213, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 273, 723, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 522, 1241, 521, 521, 521, -1000, -1000, 820, -1000,
	-1000, 703, -1000, 701, -1000, -1000, -1000, 1993, 601, 600,
	-1000, 599, 595, 594, -1000, -1000, -1000, 592, 591, 587,
	586, 583, 579, 578, 575, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 820, 820, -1000, 573, 568, 566, 561,
	560, 559, 558, 554, 543, 1423, -1000, -1000, 1423, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 989, 50302, -1000, -1000,
	-1000, -1, 48766, -1000, 414, -1, -1000, -1000, 542, -1000,
	14703, 14703, 14703, -1000, -1000, 1545, 20213, -1000, 1773, -1000,
	288, -239, 698, 24596, -1000, 22646, 698, 661, 26936, -1000,
	1930, -1000, -1000, 540, 271, -1000, -1000, -1000, -1000, -1000,
	-1000, 2123, 2231, 1095, -1000, 1202, 2223, -1000, 2389, 2219,
	1180, -1000, -1000, 804, 2211, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1356, -1000, -1000, 2101, 2203,
	-164, 2046, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1574, -1000,
	29734, 32438, -7, -1000, -1000, -78, -1000, 10159, 58245, -1000,
	-1000, -1000, 58245, 742, -1000, -1000, 2201, -1000, 58245, 706,
	-1000, -1000, 2199, -1000, 1924, 48766, 10557, 48766, 48766, -1000,
	535, 1643, 1513, -1000, -1000, 32054, 2389, 1641, -1000, -1000,
	795, 1635, -1000, -1000, 1629, -1000, 414, -1000, -1000, 788,
	-1000, 2647, 40588, 51070, 795, 1628, -1000, -1000, -1000, 38644,
	-1000, 48766, -1000, 48766, -1000, 1104, -1000, 50686, 142, 2195,
	-1000, -1000, 142, 2184, -1000, 142, 2183, -1000, 140, 2180,
	-1000, -1000, 1505, 2175, -1000, -103, 2173, -1000, -1000, -103,
	2167, -1000, -1000, 20213, -9, -1000, -1000, -1000, 801, 30506,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 40198, 29734, 32054,
	48766, 34370, 29734, 642, 58245, -1000, 2507, 59092, 29734, 58245,
	-1000, 32054, 48766, 1985, -1000, 39808, 39418, 2398, 783, -1000,
	-1000, 48766, -1000, 20213, -1000, 2502, 1803, -46, -1000, -1000,
	-1000, -1000, -1000, 1695, 1696, 874, 1437, -1000, 14290, 14290,
	2295, -1000, 268, 10557, -1000, -1000, 1057, 1730, -1000, -1000,
	-1000, -1000, 29734, 29734, -1000, 39028, -1000, -1000, -1000, 1424,
	48766, -1000, -1000, 1968, -1000, 31670, 48766, -1000, 48766, -1000,
	48766, -1000, 48766, -1000, 48766, -1000, -1000, -1000, -1000, -1000,
	2169, 1298, 1261, -1000, 48766, -1000, 48766, -1000, -1000, -1000,
	1681, -1000, -1000, -1000, -1000, 48766, -1000, -1000, -1000, -1000,
	-1000, -1000, 1204, -1000, 1056, -1000, -1000, 156, -1000, -1000,
	1678, -1000, 1440, 1762, 18519, 1761, 20213, 175, -1000, -1000,
	175, 175, 13037, -1000, -1000, -1000, 48766, -1000, 58922, 59092,
	10557, 1009, 20213, 20213, 20213, 20213, 20213, 20213, 20213, 20213,
	20213, 20213, 20213, 20213, 20213, 20213, 20213, 20213, 20213, 20213,
	20213, 20213, 20213, 20213, 20213, 20213, 20213, 20213, 20213, 20213,
	20213, 20213, 20213, 20213, 20213, 20213, 20213, 1619, 20213, 987,
	20213, 20213, 20213, 20213, 2096, -1000, -1000, 1403, 439, 1428,
	-1000, 2581, 2581, 2581, 58667, 58667, 502, 657, -1000, 20213,
	-1000, 84, 20213, 375, 55977, 1605, 2, 11384, 10957, -1000,
	2597, 1092, -1000, -1000, -1000, -1000, 18092, 817, 58245, 9761,
	1978, 1862, -1000, 2596, -1000, -1000, 2558, -1000, -1000, -1000,
	-1000, 1005, 1003, 999, 997, 534, 733, 718, 717, 700,
	696, 20213, 20213, 20213, 20213, 20213, 20213, 20213, 20213, -1000,
	-1000, 17679, 17252, 16825, 16398, 15971, 21452, 15544, 20213, 12210,
	-1000, -46, -1000, 50302, -1000, 48766, -1, 2500, 20213, 120,
	-1000, 56920, -1000, 120, 120, 531, -10, 58245, 1738, 1737,
	23816, 1507, 1310, 1310, 1310, -1000, 529, 646, 698, 7354,
	37484, 1316, 698, 698, 228, 282, 373, 22256, 1773, 37484,
	-1000, -1000, 48766, 527, 10957, 10557, -31, 1301, -1000, 33206,
	2332, 2327, 2312, 1102, -1000, 1080, 2445, 38644, 2465, 603,
	2347, 1920, -1000, -1000, 986, 38644, 2389, -1000, 59092, -1000,
	1837, 2437, 1090, 1100, 1090, 1090, 1087, 38644, 971, 1282,
	29734, 2342, 960, -39, 2410, 557, 2336, 1916, 959, -1000,
	-1000, 48766, 10557, 2328, 1054, 691, -7, 32438, 48766, 256,
	-1000, 20213, 84, 20213, 84, 1079, -24, 252, 1748, 1744,
	228, -1000, 32822, 2494, 2164, 48766, 1753, -1000, 2389, 2162,
	-1000, 1281, -1000, 2152, 2143, 2493, 523, 2646, -1000, 1509,
	1626, -1000, -1000, -1000, 1486, 1624, 956, 2142, 811, 358,
	2492, 358, 26156, -1000, 48766, -1000, 48766, -1000, -1000, 48766,
	-1000, 48766, -1000, 48766, -1000, 48766, 48766, -1000, 48766, 29734,
	29734, 29734, -25, 3224, 30506, -26, 792, 957, -94, -1000,
	372, 48766, 845, 32822, 3834, -43, -1000, 1034, -1000, -1000,
	-1000, 229, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 820,
	525, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 522, 1241, 521, 521, 521, -1000, -1000,
	-1000, 703, -1000, 701, -1000, -1000, -1000, 820, 820, -1000,
	-1000, -186, 1905, -78, 34370, 691, -1000, 691, -1000, 1961,
	-1000, 2339, 754, -50, 881, -46, -1000, 1423, -1000, 1153,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2615, -1000, 2592, -1000, -1000, 2590, -11,
	-1000, -11, -1000, 10557, -1000, 48766, 1959, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 48766, -1000, 48766, -1000, -1000,
	-1000, -1000, -1000, -1000, 1113, -1000, 1957, -1000, 1956, -1000,
	251, -1000, -1000, -1000, 48766, 48766, 48766, -1000, 38644, -1000,
	-1000, -1000, -1000, 58245, -1000, 431, -1000, -1000, 58245, 1185,
	1763, -1000, 1763, -12, -1000, 56778, 1723, 48766, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	776, 951, 951, 985, 985, 985, 985, 2572, 227, 977,
	617, 721, 721, 721, 721, 721, 721, 721, 721, 413,
	463, 463, 413, 413, 413, 413, 413, 463, 463, 463,
	721, 721, 721, 58667, 58503, 5373, 20213, 20213, 949, 1384,
	439, 5297, 20213, 737, 737, 737, 737, -1000, 1691, -1000,
	-1000, -1000, -1000, 1903, 520, 21452, 21452, -1000, -1000, -1000,
	11797, 20213, -1000, -1000, -1000, -1000, 518, 20213, -1000, 56049,
	-245, 369, -125, 250, 48766, 20213, -4, -1000, 20213, 20213,
	20213, 368, -1000, 367, -1000, 948, -1000, 947, 945, 944,
	-1000, 517, 644, -52, -1000, 1105, -1000, 20213, 249, -1000,
	1308, 516, 515, 365, -56, 768, 767, 766, 761, 20213,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	58169, 52960, 52667, 52595, 6621, 52302, 52230, -63, 363, -1000,
	1899, -125, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 356,
	-1000, -64, -1000, -65, -1000, 355, -1000, 57911, -125, 354,
	3553, -1000, 21452, 21452, 21452, -1000, 353, -1000, 56486, -1000,
	57650, 15117, 15117, 15117, 352, 57577, 20213, -125, -1000, -1000,
	513, -66, 811, 14703, 23036, 10557, -1000, 811, 811, 20213,
	-1000, 20213, 23816, 23816, 1644, 1734, 23816, -1000, -1000, -1000,
	-1000, 37484, 486, 698, 37484, -1000, 2558, 1732, -1000, -1000,
	-1000, 48766, 414, -1000, 37484, 37484, 10557, 698, -1000, 351,
	25376, -4, 247, 1433, 48766, 48766, 48766, -1000, -1000, 1617,
	49918, 1615, 59092, 48766, -1000, -1000, 512, 511, 1722, 1718,
	48766, 48766, 49534, 49150, 48766, 1382, 20213, 1630, 1859, 84,
	-1000, 84, 758, 510, 48766, 1179, -1000, -1000, -1000, -1000,
	-1000, 48766, -1000, -1000, 2588, -1000, 1090, -1000, -1000, -1000,
	1090, 2389, 1169, 48766, 29734, 803, 711, 48766, 1286, 84,
	-1000, 84, 710, 509, 10557, 1273, -1000, 709, 48766, 1838,
	-1000, 1572, -1000, -1000, 9363, 58245, -1000, 58245, -1000, -1000,
	-1000, 10557, 1808, 1808, 350, -21, -1000, -1000, -1000, -1000,
	-1000, -1000, 1784, 48766, 619, 48766, 84, 48766, 94, 792,
	29734, 48766, 29734, 29734, 29734, 84, 2639, 508, 2637, -1000,
	48766, 2121, 48766, 2113, 2182, 430, 48766, 1323, 20213, 1284,
	-1000, 25766, 834, 48766, 1157, 83, -1000, -1000, -1000, 30,
	48766, -1000, -1000, 142, 142, 142, -1000, 140, 1505, -1000,
	-103, -103, -1000, -1000, -1000, 3224, 1898, 38260, 48766, 2533,
	792, 500, 29734, -73, -1000, 848, 943, 937, -1000, 59092,
	-1000, 649, 918, -1000, 2580, 499, 2558, -1000, 792, 48766,
	66, -1000, 796, 1622, -1000, 14290, 14290, -1000, 1423, -1000,
	-1000, 1176, -1000, 1226, -1000, -1000, -1000, -1000, 14290, -1000,
	-1000, 1032, -78, -78, -1000, 1111, 1098, 48766, -1000, -1000,
	-1000, -1000, 1185, -1000, 20213, -1000, -1000, -1000, 13037, -1000,
	-1000, -1000, 48766, -233, 20213, 20213, 4845, 4459, 20213, 21452,
	21452, -1000, 20213, 3794, -1000, -1000, -1000, -1000, -1000, 1896,
	495, 20213, 59092, 4834, 4753, -81, 413, -1000, 20213, -1000,
	8965, -82, 55618, 349, 13877, -1000, 57212, -38, -38, -1000,
	2613, 1654, 1539, 1225, 1123, 2571, -1000, -1000, 648, 2174,
	-1000, 20213, 57285, 8567, -1000, 26546, 812, 1323, -1000, -1000,
	2558, -1000, -1000, -1000, -1000, 55546, 58922, 59092, 20213, 20213,
	-1000, 20213, 20213, 20213, -1000, -1000, 20213, -1000, -1000, -1000,
	-1000, 1892, 20213, -1000, 58922, 59092, 21452, 21452, 21452, 21452,
	21452, 21452, 21452, 21452, 21452, 21452, 21452, 21452, 21452, 21452,
	21452, 21452, 21452, 21452, 21452, 1706, 21452, 2574, 2574, 2574,
	-1000, 1952, 1892, 20213, 20213, 59092, 346, 344, 343, -1000,
	20213, -125, 3834, -1000, 1861, -1000, -175, -1000, 1773, -1000,
	-1000, 1861, 1861, -83, 58245, -1000, 1644, -1000, 493, 20213,
	23816, -1000, 641, -1000, -84, -1000, 37484, -1000, 633, -242,
	-1000, 686, -1000, 414, -1000, -1000, -1000, 243, 37484, -1000,
	-89, -1000, 2491, 342, 10557, -1000, -1000, 941, 940, -1000,
	2112, -1000, 1612, -1000, 839, -1000, 1195, 20213, 24206, 484,
	477, 1320, -1000, 2110, 1505, 2079, 1505, -1000, -1000, 704,
	-1000, 58245, 476, 475, -1000, -31, 1274, -1000, -1000, 20213,
	20213, -1000, 933, -1000, -1000, -1000, 2389, 929, -1000, -1000,
	1279, 20213, -1000, -1000, -1000, -1000, 20213, 20213, -1000, -39,
	926, 20213, 2037, 792, 1881, 1067, -1000, -1000, -1000, -1000,
	-1000, -1000, 1776, 32822, 48766, 473, 48766, 472, -1000, -1000,
	470, 48766, -1000, -1000, 2389, -1000, 795, -1000, -1000, -1000,
	2636, -1000, 842, 10557, 468, 10557, 1708, 430, 30122, -1000,
	795, 1762, -1000, 58245, -1000, 1157, 12623, 2321, -91, -1000,
	242, -1000, -1000, -1000, 811, 26156, 23816, 20213, 2629, -92,
	-1000, -1000, -1000, -1000, -1000, -1000, 84, -45, 467, -1000,
	685, 677, -78, 1367, -1000, 29734, 48766, 48766, -1000, 2561,
	-1000, 632, 338, 2558, 333, -1000, -78, 48766, -1000, 1339,
	10557, 48766, 48766, 10557, 48766, -1000, -1000, -46, -1000, -1000,
	-1000, -1000, 48766, -1000, -1000, -1000, 1419, 55187, -1000, 2393,
	10557, 2534, 737, 20213, 20213, 556, 3382, 399, 737, 20213,
	20213, 59092, 6521, -97, 20213, 20213, -1000, 618, 58245, -1000,
	-1000, -1000, -1000, 2607, 20213, 330, 329, 327, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 326, -1000, -1000, 58245,
	20213, 230, -1000, -1000, -1000, 51838, -1000, 20213, 321, 318,
	-1000, 316, 311, 6785, 6197, 55115, 54756, 54684, 58245, 1952,
	58245, -1000, -1000, 917, 917, 1066, 1066, 1066, 1066, 2574,
	910, 864, 969, 1353, 1353, 1353, 1890, 755, 755, 1353,
	1353, 1353, 1878, 1704, 462, 3863, -1000, -1000, 58245, 58245,
	309, -1000, -1000, -1000, -125, 308, 1858, 2415, -1000, 23816,
	1858, 1858, -1000, -1000, 48766, 58245, -1000, -239, -1000, 2558,
	-1000, -1000, 1732, -1000, 7766, -1000, 10557, -1000, -1000, 25376,
	-1000, 452, -1000, 157, 48766, 48766, 48766, 2073, -1000, 3091,
	-1000, 54325, -102, -1000, 2371, 2371, 20213, 228, 24206, 48766,
	-1000, 1321, 1793, 870, 48766, -1000, 48766, -1000, -1000, 48766,
	48766, 48766, 48766, 48766, 58245, -108, 48766, 48766, 29734, 58245,
	58245, -110, 10557, 58245, 2324, -1000, 29734, 955, 1286, 1814,
	-1000, 449, 24206, 448, 48766, 32822, 2479, -1000, -1000, -1000,
	-1000, 447, 1971, 1469, 24206, 1458, 1707, 430, 30122, -1000,
	956, 1157, -1000, -1000, -48, -1000, 485, 84, 48766, 2628,
	1323, -1000, -75, 58245, -1000, 675, -1000, 37872, 37872, 29734,
	29734, -1000, 302, 2285, 2269, 487, -1000, -1000, 296, -1000,
	-78, 1729, -1000, -1000, 1289, 1446, -1000, -1000, -1000, -1000,
	-1000, 2393, 737, 737, 20213, 20213, 20213, 737, 6521, -113,
	-1000, 737, 737, -1000, -1000, 57212, -1000, -1000, -1000, -1000,
	58245, 8169, 1296, -1000, 54253, -1000, -1000, -1000, -1000, 20213,
	20213, -1000, -1000, -1000, -1000, -1000, 21452, 1876, 441, 59092,
	-1000, -1000, 806, 20213, 20213, 1773, 806, 806, -115, 698,
	-1000, -1000, -1000, 2558, 157, -1000, 2627, 10557, -1000, -1000,
	-1000, 48766, -1000, 48766, -1000, 10557, 48766, 1872, 1604, -1000,
	-1000, 1715, 440, 21452, 48766, 740, -1000, 1331, 24206, 2393,
	10557, 2393, 53894, -118, -126, 1601, -1000, -1000, 1588, 20213,
	-1000, 59092, 1505, 1505, -127, -132, -1000, 925, 911, 908,
	-1000, -1000, -1000, 907, -1000, 707, -103, 20213, -1000, -1000,
	1303, 24206, -137, 24206, -139, 292, 84, 24206, -1000, -1000,
	48766, -142, 48766, -1000, 430, 30122, -1000, 2182, -1000, 2207,
	48766, 2304, -1000, -1000, -1000, 1762, 439, -1000, -145, -1000,
	-1000, 792, 438, 436, -1000, -1000, -111, -1000, 705, 702,
	-1000, -1000, -1000, 10557, 1028, -1000, 737, 737, 737, -1000,
	291, -1000, -1000, 1323, 2412, -1000, 53822, 53463, 5654, 21452,
	59092, -150, -1000, 48766, 58245, -125, -1000, -1000, -1000, 37484,
	464, -1000, -1000, 1400, -1000, -1000, -1000, 48766, 1603, -1000,
	-1000, 20213, 3863, 434, 20213, -1000, 1776, 432, -1000, -1000,
	-1000, -1000, -1000, -1000, 2371, -1000, 1216, -1000, -1000, 58245,
	2366, -1000, -1000, 425, 424, 48766, 48766, 421, 420, 20213,
	58245, 48766, -151, 1331, -152, -1000, 1776, -1000, -157, 842,
	-1000, 419, 30122, -1000, 1708, 1027, -162, 48766, 1157, -1000,
	-1000, -1000, 29734, 29734, 1729, -1000, 48766, -1000, 48766, -1000,
	48766, -1000, 1262, 20213, -1000, -1000, 5654, -165, -1000, -120,
	-1000, 2474, -1000, -1000, -1000, -1000, 2066, 53391, 1670, 48766,
	53032, 1286, 48766, 2393, 48766, 836, 10557, 1289, 1289, -1000,
	-1000, 20213, 20213, 58245, 418, -1000, 1776, 1331, 1286, 1331,
	417, 24206, -1000, 1707, 1099, -1000, 811, -1000, -1000, -168,
	-170, -1000, -176, -178, -1000, 290, 21039, 21039, -125, -1000,
	48766, 415, 1996, -1000, 1443, 1307, 283, 869, -1000, -179,
	-1000, 414, -1000, 20213, -1000, -184, -1000, 833, -189, -1000,
	830, -194, -195, 48766, 1286, 1776, -1000, 1776, 24206, -203,
	-1000, 26156, -1000, 792, 792, -1000, -1000, -1000, -1000, -1000,
	21850, 1410, 1139, 56343, -1000, -1000, -1000, 48766, -1000, 1447,
	1445, 1150, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1670,
	58245, -1000, 1289, 1806, -1000, 1289, 1874, -1000, -1000, -204,
	-1000, 1286, 1286, -205, -1000, -197, -1000, -1000, 2522, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2241, -1000, 855, 1633,
	1633, 1443, -1000, 411, -1000, 397, 1487, -1000, -1000, 1331,
	-1000, 20626, -1000, 2536, -1000, -1000, 1717, -1000, -1000, 20213,
	20213, -1000, -1000, -1000, 1776, -1000, -1000, -1000, -1000, -206,
	-212, 1286, 1286, 903, -1000, -1000, 386, 20213, -236, 1286,
	-1000,
}
var sqlPgo = [...]int{

	0, 3173, 3170, 1971, 3169, 2579, 3168, 3167, 3165, 3161,
	3159, 2560, 3158, 3157, 3154, 3151, 3149, 3148, 3146, 3145,
	3142, 3141, 3130, 3129, 3127, 3126, 3119, 3117, 3116, 3113,
	3105, 3104, 3103, 3101, 2530, 3099, 2481, 3096, 3095, 3093,
	3089, 3086, 3085, 3083, 3082, 26, 3080, 3076, 3074, 3072,
	3070, 2477, 3069, 3068, 2467, 3067, 3059, 2464, 3058, 3057,
	2460, 3056, 2450, 3053, 3052, 2447, 3051, 3050, 2440, 3049,
	2422, 3047, 3046, 2418, 3043, 97, 105, 3040, 2393, 3037,
	3035, 2365, 2344, 2323, 3033, 2298, 3030, 3026, 2282, 2209,
	3024, 109, 3022, 3015, 3014, 3011, 2115, 2087, 3008, 3007,
	3006, 164, 3005, 2059, 3004, 3002, 2991, 2987, 2986, 2984,
	2982, 2981, 2977, 2975, 2974, 2970, 2968, 2965, 2962, 2960,
	2959, 2957, 2955, 2953, 2951, 2948, 2947, 2946, 183, 112,
	2945, 2942, 2008, 1958, 2939, 2935, 54, 51, 15, 71,
	132, 176, 4447, 170, 2932, 2928, 2927, 2923, 2922, 17,
	122, 113, 115, 117, 152, 2914, 2909, 57, 38, 28,
	19, 78, 2908, 2903, 2901, 1664, 83, 2899, 2898, 169,
	162, 2895, 595, 2894, 34, 119, 107, 87, 140, 48,
	2892, 92, 12, 2888, 114, 195, 2887, 74, 32, 21,
	4348, 80, 186, 58, 55, 175, 166, 144, 141, 118,
	435, 2883, 173, 72, 145, 2882, 2880, 2879, 52, 138,
	2, 6, 121, 9, 2877, 8, 2875, 10, 2874, 2870,
	2868, 2867, 25, 111, 40, 44, 2865, 22, 37, 129,
	2864, 165, 2863, 75, 2855, 178, 139, 402, 150, 2851,
	81, 20, 77, 2848, 2843, 91, 159, 2840, 27, 123,
	82, 96, 184, 153, 90, 151, 156, 2838, 2835, 2834,
	120, 2833, 137, 98, 2830, 2829, 30, 39, 158, 47,
	2828, 2826, 106, 2824, 148, 2823, 2822, 2821, 185, 116,
	128, 4, 73, 85, 7, 157, 102, 65, 59, 2820,
	3087, 1611, 1776, 2819, 100, 62, 33, 79, 103, 163,
	42, 2818, 2815, 1907, 2809, 2807, 2806, 126, 2803, 2802,
	2800, 89, 31, 50, 2799, 104, 43, 258, 181, 49,
	149, 130, 172, 124, 2797, 135, 95, 2796, 146, 171,
	99, 2795, 1073, 2794, 131, 2791, 2789, 2783, 2781, 357,
	2779, 2775, 2774, 441, 2773, 101, 2771, 134, 127, 142,
	133, 108, 161, 155, 1052, 2770, 143, 36, 2764, 2801,
	24, 0, 3601, 3475, 2762, 147, 88, 2759, 2757, 2751,
	2749, 35, 13, 3, 5, 14, 11, 565, 372, 2746,
	2744, 29, 61, 93, 2743, 182, 136, 2740, 2738, 2737,
	56, 2724, 18, 2723, 16, 2714, 2712, 23, 1, 2710,
	2705, 160, 2702, 2694, 2691, 2494, 2686, 179, 2685, 2684,
	86, 2682, 2680, 2676, 2675, 2346, 2664, 2661, 68, 45,
	125,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 9, 9, 9, 33, 33, 11, 11,
	10, 10, 10, 12, 7, 7, 7, 7, 7, 7,
	7, 7, 14, 14, 24, 24, 15, 26, 407, 407,
	18, 28, 19, 29, 13, 22, 20, 20, 30, 17,
	17, 25, 25, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 406, 406, 153, 153, 152, 148,
	148, 409, 409, 154, 154, 154, 156, 156, 34, 34,
	89, 89, 89, 139, 82, 82, 82, 82, 82, 77,
	77, 359, 359, 360, 360, 135, 135, 136, 136, 136,
	136, 137, 137, 138, 138, 138, 48, 36, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 39, 39, 39, 39, 39, 39,
	46, 46, 129, 129, 49, 49, 49, 49, 49, 49,
	49, 49, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 60, 60, 50,
	327, 327, 62, 62, 63, 63, 63, 63, 63, 63,
	64, 64, 64, 64, 64, 64, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 71, 71, 71, 72,
	72, 72, 69, 69, 69, 67, 67, 67, 66, 66,
	66, 70, 70, 70, 68, 68, 68, 236, 236, 73,
	73, 73, 73, 73, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	76, 76, 76, 76, 76, 76, 76, 76, 329, 329,
	74, 74, 301, 301, 78, 78, 261, 261, 79, 79,
	79, 79, 79, 80, 80, 80, 80, 90, 90, 90,
	90, 405, 405, 229, 229, 169, 169, 169, 169, 85,
	85, 85, 85, 86, 86, 86, 87, 87, 134, 134,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	40, 40, 40, 41, 41, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 45, 45, 97, 97, 97, 99,
	96, 96, 96, 98, 98, 98, 98, 100, 100, 101,
	101, 101, 101, 101, 101, 102, 102, 353, 353, 239,
	239, 351, 351, 352, 352, 206, 206, 206, 206, 206,
	207, 207, 207, 358, 358, 358, 358, 358, 358, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 119, 119, 119, 128,
	128, 128, 128, 128, 128, 128, 121, 121, 121, 112,
	112, 104, 104, 104, 104, 108, 108, 108, 108, 108,
	105, 105, 109, 109, 111, 111, 113, 113, 113, 113,
	113, 113, 106, 106, 106, 106, 115, 115, 115, 115,
	114, 114, 124, 124, 124, 124, 124, 124, 314, 314,
	120, 120, 120, 120, 123, 123, 123, 123, 118, 118,
	118, 122, 122, 125, 125, 125, 125, 107, 107, 107,
	412, 412, 412, 126, 126, 117, 117, 127, 127, 127,
	127, 127, 127, 127, 116, 116, 116, 408, 408, 110,
	403, 403, 401, 401, 401, 401, 401, 401, 401, 402,
	402, 404, 404, 83, 83, 83, 55, 55, 56, 56,
	208, 208, 209, 209, 283, 283, 283, 283, 210, 210,
	155, 155, 155, 213, 214, 214, 211, 211, 212, 212,
	212, 216, 216, 215, 218, 218, 217, 282, 369, 369,
	370, 370, 370, 370, 370, 370, 370, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 367, 367, 367,
	368, 365, 365, 366, 366, 366, 366, 413, 413, 281,
	281, 222, 222, 372, 372, 372, 372, 373, 373, 373,
	373, 373, 376, 375, 374, 374, 374, 374, 374, 310,
	310, 310, 59, 59, 59, 250, 250, 249, 249, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 131, 131, 57, 57, 57, 161, 161, 54,
	54, 54, 58, 58, 61, 61, 61, 61, 61, 61,
	53, 53, 53, 53, 53, 266, 266, 266, 265, 265,
	227, 227, 316, 316, 316, 173, 173, 174, 174, 149,
	149, 149, 21, 23, 23, 16, 16, 16, 16, 16,
	16, 31, 31, 32, 32, 27, 27, 410, 410, 411,
	411, 84, 84, 88, 88, 88, 94, 94, 130, 130,
	130, 130, 130, 130, 130, 35, 35, 35, 35, 47,
	47, 47, 47, 92, 416, 416, 416, 93, 93, 415,
	415, 168, 168, 168, 168, 170, 170, 278, 278, 279,
	279, 417, 417, 280, 280, 280, 163, 162, 164, 164,
	52, 52, 52, 157, 157, 158, 158, 159, 159, 160,
	160, 418, 418, 81, 81, 81, 133, 133, 202, 202,
	274, 274, 274, 223, 223, 179, 179, 277, 277, 275,
	275, 275, 248, 248, 248, 132, 132, 232, 232, 241,
	241, 242, 242, 324, 324, 243, 91, 91, 142, 142,
	140, 140, 140, 140, 140, 140, 141, 141, 141, 143,
	143, 143, 143, 143, 143, 143, 146, 146, 146, 146,
	147, 147, 147, 145, 145, 383, 383, 383, 385, 385,
	386, 382, 382, 384, 384, 414, 414, 252, 252, 252,
	220, 221, 219, 219, 419, 419, 225, 225, 224, 226,
	226, 315, 315, 315, 246, 246, 246, 246, 269, 269,
	267, 267, 268, 268, 270, 270, 271, 271, 271, 272,
	272, 273, 273, 245, 245, 297, 297, 144, 144, 144,
	231, 231, 231, 233, 233, 288, 288, 288, 289, 289,
	287, 287, 287, 287, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 318, 318, 234, 234, 319, 276, 276,
	399, 399, 399, 400, 400, 313, 313, 320, 320, 320,
	320, 320, 320, 311, 311, 312, 312, 325, 326, 326,
	255, 255, 255, 255, 253, 253, 254, 254, 321, 321,
	321, 321, 247, 247, 322, 322, 322, 284, 284, 330,
	330, 330, 345, 345, 230, 230, 230, 340, 340, 331,
	331, 331, 331, 331, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 334, 334, 334, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 344, 344, 344,
	344, 344, 335, 335, 341, 342, 336, 337, 343, 343,
	343, 343, 347, 347, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 339, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 263, 263,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 292, 292, 292, 292,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 377, 377, 377, 377, 377, 377, 377,
	377, 380, 380, 381, 381, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 387, 387, 388, 388, 390, 390,
	391, 391, 392, 393, 393, 393, 394, 395, 395, 389,
	389, 396, 396, 396, 397, 397, 398, 398, 398, 398,
	398, 303, 303, 309, 309, 309, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 171, 171, 171, 171, 171, 238, 238, 237,
	237, 300, 300, 298, 298, 302, 302, 256, 256, 346,
	346, 346, 346, 346, 346, 346, 257, 257, 257, 264,
	258, 258, 259, 259, 259, 259, 259, 294, 295, 260,
	260, 260, 296, 296, 304, 308, 308, 307, 306, 306,
	305, 305, 285, 285, 286, 286, 244, 244, 420, 420,
	240, 240, 323, 323, 323, 323, 204, 204, 235, 235,
	203, 203, 197, 197, 198, 198, 198, 198, 228, 228,
	348, 348, 348, 349, 350, 299, 189, 188, 176, 177,
	187, 186, 185, 175, 178, 182, 183, 184, 180, 181,
	193, 192, 191, 190, 328, 199, 199, 200, 200, 200,
	201, 201, 201, 201, 172, 172, 194, 194, 195, 196,
	196, 165, 165, 165, 166, 166, 167, 167, 357, 357,
	355, 355, 355, 356, 356, 356, 356, 354, 354, 354,
	354, 354, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 6, 1, 1,
	5, 5, 6, 6, 7, 7, 7, 10, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 9, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 1, 2, 1, 2, 7, 3, 6,
	2, 0, 8, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 6, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 3,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 4, 7, 2, 6, 4, 7,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 3,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 5, 7, 3, 3,
	3, 3, 4, 4, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 5, 4, 6, 4, 6, 4, 1, 0,
	2, 3, 3, 3, 6, 4, 2, 3, 4, 2,
	3, 3, 3, 4, 3, 3, 3, 3, 4, 3,
	1, 1, 1, 2, 3, 2, 3, 7, 7, 8,
	10, 7, 4, 5, 5, 5, 3, 1, 1, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 8, 11, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 4, 7, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 7, 3, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 6, 3, 6, 7, 6, 5, 3, 4,
	13, 16, 9, 12, 4, 2, 2, 0, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 2, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 2,
	2, 1, 5, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	3, 1, 1, 1, 1, 5, 3, 1, 1, 3,
	1, 2, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 7,
	1, 7, 5, 3, 1, 1, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 427, -4, -34, -36, -48, -46,
	-49, -79, -62, -63, -64, -78, -73, -77, -80, -81,
	-82, -83, -74, -89, -88, -90, -94, -40, -91, -84,
	-85, -95, -103, -130, -131, -132, -133, -5, -11, 25,
	36, -37, -38, -39, 51, 78, 66, -57, -54, -51,
	-60, 80, 100, -384, 104, -65, -68, -70, 109, 118,
	123, 124, 148, 157, 260, 267, 289, 291, 293, 302,
	-42, -41, 119, -140, -142, 287, -86, -87, -96, -97,
	-98, -99, -134, 320, -104, -105, -106, -107, -108, -109,
	-110, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, 323, -35,
	-47, -93, -92, 368, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -383,
	-66, -67, -69, -71, -72, -143, -141, 424, 288, 378,
	37, 332, 67, 113, 297, 20, -14, -18, -19, -15,
	-17, -20, -16, -24, -28, -29, -26, -25, -27, -30,
	-31, -32, -33, -21, -22, -13, 395, 403, -146, -144,
	-145, -147, 309, 386, 345, 428, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 2, 345, 389,
	310, 379, 93, 170, 272, 258, -401, 2, 4, -363,
	-361, -198, -197, 345, 93, 30, 38, 39, 41, 44,
	56, 57, 58, 61, 97, 98, 117, 125, 126, 137,
	150, 152, 160, 161, 162, 177, 183, 185, 165, 206,
	235, 237, 250, 254, 264, 266, 275, 299, 326, 341,
	357, 358, 359, 365, 366, 386, 387, 391, 398, 20,
	21, 22, 23, 25, 35, 36, 37, 40, 42, 43,
	46, 47, 48, 49, 50, 51, 52, 55, 60, 65,
	66, 67, 68, 69, 74, 71, 72, 73, 76, 78,
	79, 82, 83, 91, 92, 94, 95, 96, 100, 102,
	104, 107, 108, 109, 111, 112, 114, 115, 118, 119,
	122, 120, 351, 353, 121, 123, 124, 134, 135, 136,
	138, 139, 141, 143, 147, 149, 154, 155, 156, 157,
	158, 159, 171, 166, 172, 176, 179, 178, 180, 181,
	182, 173, 187, 190, 191, 192, 194, 195, 198, 199,
	200, 203, 202, 205, 208, 209, 212, 213, 216, 218,
	221, 222, 225, 223, 224, 227, 228, 230, 229, 236,
	238, 239, 241, 242, 245, 246, 249, 252, 255, 256,
	257, 258, 259, 260, 261, 263, 265, 267, 269, 270,
	271, 272, 273, 274, 276, 277, 279, 280, 281, 282,
	283, 287, 285, 286, 288, 289, 290, 291, 293, 295,
	296, 297, 298, 300, 321, 322, 334, 302, 303, 304,
	305, 306, 307, 308, 312, 316, 313, 314, 315, 310,
	311, 317, 318, 320, 323, 325, 327, 328, 331, 332,
	333, 335, 338, 339, 340, 336, 337, 330, 343, 344,
	346, 347, 348, 349, 350, 352, 354, 355, 360, 363,
	364, 368, 369, 371, 372, 375, 376, 377, 382, 378,
	380, 383, 384, 385, 390, 389, 396, 397, 399, 400,
	401, -196, -165, 417, -195, 427, 427, 427, 2, 191,
	192, 271, 270, 317, 318, -190, -194, -195, -196, -165,
	4, -361, -363, 93, 243, 427, 427, 427, 2, 345,
	333, 55, 310, 379, 295, 389, 369, 107, -265, 187,
	93, 374, -165, 267, 24, 2, 102, 176, 377, 376,
	24, 263, 311, 347, 349, 2, 427, 427, 2, 389,
	310, 345, 170, 93, 379, 295, -184, 2, -165, -76,
	2, 424, 27, -75, -5, -51, -60, -65, -78, -73,
	-11, -34, -36, -57, -54, -62, -68, -70, -82, -81,
	-83, -85, -89, -88, -91, -96, -97, -103, -132, -133,
	80, 25, 109, 320, 119, 186, 2, -405, -229, 2,
	24, -169, -165, 80, 148, 309, -139, 345, 2, -165,
	191, 192, 2, -184, 2, -401, 2, 191, 192, 2,
	-405, -229, 23, 2, -165, 2, 306, 323, -170, 2,
	302, -165, 427, 427, 427, 427, 427, 427, 213, 60,
	299, 317, -101, 364, -100, 357, 304, -102, -353, 2,
	225, -165, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 2, -128, 317, 333, 155, 36,
	60, 24, 65, 94, 149, 170, 171, 199, 75, 76,
	270, 213, 192, -314, 318, 346, 305, 343, 364, 80,
	380, 296, -408, 120, 4, 93, 225, 319, 357, 69,
	350, 351, 427, 427, 427, -414, 2, 345, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, -141,
	-143, -142, 427, 427, 427, 427, 427, -224, -225, 373,
	184, 116, 248, -140, -142, 2, -383, -128, 317, 2,
	60, 24, -351, 2, -290, 243, -292, 415, 416, 410,
	231, 402, -303, 99, 220, 219, -293, -304, 117, 299,
	424, 7, 8, 5, 6, -172, -332, -299, -339, 367,
	127, 234, -201, 430, 9, -380, -142, 31, 53, -355,
	-200, -333, -342, -337, -338, -340, 42, 49, 48, 354,
	224, 312, 313, 314, 315, 327, 382, 166, 40, 241,
	242, 178, 4, 185, -199, -165, -377, -378, -361, -362,
	177, 179, 180, 181, 182, 183, 326, 39, 275, 138,
	139, 137, 108, 98, 97, 237, 44, 43, 41, -343,
	95, 357, 358, 359, 360, 194, 195, 63, 85, 86,
	84, 89, 88, 90, 87, 319, 379, 54, 30, 160,
	161, 165, 235, 162, 61, -379, 337, 81, 128, 146,
	175, 163, 188, 189, 193, 207, 210, 226, 233, 251,
	253, 294, 324, 57, 56, 387, 125, 126, 150, 206,
	254, 264, 341, 365, 366, -415, 2, 364, 364, 2,
	-415, 2, -415, 2, -168, 2, 364, 361, -416, 364,
	398, -385, 276, -386, -184, -385, 427, 427, 429, 427,
	-219, -220, -221, 2, 24, 105, 424, 2, -317, 2,
	422, -321, -142, 201, -320, 424, -318, -190, 244, -381,
	300, -377, -378, -172, -165, -200, 4, 220, 219, -3,
	2, -321, 160, -190, 2, -321, 160, 2, -191, 160,
	-321, -194, 2, -359, 160, -357, 9, -356, 5, 4,
	-361, -363, -362, 63, 2, -175, -165, 2, -203, 160,
	-190, -187, -354, 4, -361, -363, -362, -364, 24, 26,
	27, 28, 29, 31, 32, 33, 34, 45, 53, 54,
	59, 62, 64, 75, 80, 84, 85, 87, 86, 88,
	89, 90, 99, 101, 103, 105, 106, 110, 113, 116,
	127, 129, 142, 144, 145, 148, 151, 153, 164, 170,
	174, 184, 186, 201, 204, 211, 214, 215, 231, 232,
	234, 240, 243, 244, 247, 248, 262, 268, 278, 292,
	309, 319, 329, 342, 345, 356, 361, 362, 367, 373,
	374, 379, 381, 388, 392, 393, 394, 395, -188, -354,
	361, 429, -235, -197, -198, -228, -165, 426, -290, 2,
	-91, 2, -290, 160, 2, -91, 160, 2, -290, 160,
	2, -91, 160, 2, -222, 424, 426, 345, 64, 2,
	-190, 160, -180, 2, -165, 142, -191, 160, 2, -194,
	-359, 160, 2, -359, 160, 2, -193, 2, -190, -192,
	-194, -192, 170, 170, -175, 160, 2, -165, 24, 145,
	2, 186, 2, 186, 2, -322, 2, -321, -236, 160,
	2, -190, -236, 160, 2, -236, 160, 2, -204, 160,
	2, -203, -175, 160, 2, -360, 160, 2, -359, -360,
	160, 2, -261, 424, -329, 2, -328, -356, 386, 424,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 317, -139, 243,
	361, 429, 424, -190, -290, -91, -301, 424, 145, -290,
	-91, 243, 145, 245, 2, 93, 345, 401, 24, -165,
	2, 321, 2, 424, -101, 58, 364, -279, 2, -280,
	-162, -163, -164, 190, 269, 274, 401, -351, 361, 407,
	145, -351, -239, 426, -128, 2, 142, 381, 2, 7,
	2, -359, 273, 134, 2, 321, 2, 270, 318, 60,
	145, 2, 2, -403, 2, 243, 145, 2, 145, 2,
	145, 2, 145, 2, 145, 2, 2, 270, 318, 2,
	363, 200, 121, 2, 145, 2, 145, 2, 5, 2,
	190, 269, 334, 2, -190, -412, 2, 345, 389, 310,
	2, 2, 145, 2, 145, 401, 2, -247, -321, -224,
	-225, -246, -267, -268, 211, 129, 240, -252, 24, 105,
	-252, -252, 47, 425, 425, -128, 321, 2, 10, 11,
	62, 35, 415, 416, 417, 418, 140, 419, 420, 413,
	414, 412, 405, 406, 409, 196, 197, 77, 408, 407,
	70, 217, 301, 130, 131, 132, 133, 284, 167, 168,
	169, 13, 14, 15, 28, 247, 210, 402, 163, 324,
	410, 16, 17, 18, 188, 189, 233, 38, 164, -171,
	-205, -290, -290, -290, -290, -290, 253, -244, -285, 422,
	-142, 424, 424, -142, -290, -303, -237, 424, 424, 5,
	424, 5, -350, 7, -142, -298, 422, -305, -290, 426,
	-387, 396, -335, 424, 266, -334, 424, -334, -334, -347,
	390, 397, 403, 397, 403, 142, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, -347,
	-347, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	-278, -279, -278, 361, -170, 429, -385, -222, 424, -240,
	-323, -290, 417, -240, -240, 243, -237, -290, 81, -255,
	193, 226, 146, 207, 294, 175, -350, -76, -287, 430,
	-313, 403, -142, -318, -165, -142, -320, 424, -317, -313,
	417, -190, 424, 145, 424, 426, -151, 285, -150, 22,
	25, 109, 384, 122, -212, 172, 258, 117, 330, -407,
	119, 303, 352, 353, 285, 117, -249, -251, 32, 91,
	228, 255, 50, 158, 219, 220, 332, 117, 285, 395,
	117, 119, 285, -153, 330, -407, 119, 303, 285, -152,
	-212, 117, 430, 119, 238, -359, -235, 429, 429, -354,
	417, 117, 117, 117, 117, 145, -228, -354, -190, -199,
	-165, -200, 424, -222, 231, 243, -401, -250, -249, 231,
	-161, -382, 395, 231, 231, -222, 32, 424, 2, -177,
	160, 2, -166, -165, -177, 160, -382, 231, -322, -202,
	-190, -202, 320, -184, 32, -154, 429, 52, 290, 117,
	-154, 117, -154, 117, -154, 429, 117, -154, 117, 429,
	117, 117, -237, 425, 429, -329, -359, -401, -228, -169,
	-359, 145, 80, 424, 32, -300, -330, -331, -332, -341,
	-336, -339, 42, 49, 48, 354, 224, 312, 313, 314,
	315, 327, 382, 166, 40, 241, 242, 178, 4, 41,
	-343, 185, 177, 179, 180, 181, 182, 183, 326, 39,
	275, 138, 139, 137, 108, 98, 97, 237, 44, 43,
	95, 357, 358, 359, 360, 194, 195, 57, 56, 387,
	337, -360, -401, -228, 142, -175, 2, -190, 2, 71,
	72, 401, -353, -237, 32, -279, 2, -417, 429, 209,
	-207, 216, 230, 154, 244, 399, -358, 5, 4, -299,
	-310, 99, 213, -339, 8, 416, -348, 7, 415, -352,
	-351, -352, 83, 426, -354, 345, 194, -359, -359, -353,
	24, 322, 2, -190, -404, 142, -402, 295, -401, -190,
	-190, -190, -190, -190, 142, 2, 363, 2, 363, 2,
	-165, -165, 209, -190, 345, 170, 345, -154, 429, -246,
	-268, -267, -270, -290, 24, -273, 136, 227, -290, -292,
	-141, -141, -141, -226, -315, -290, 268, 170, -353, -345,
	-330, -344, 280, 281, 279, 283, 282, -330, -189, -354,
	357, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, 210, 163, 324, 38,
	164, -290, 361, -290, -290, -290, -290, 223, 231, 234,
	367, 127, 375, 105, 238, -420, 342, 34, -296, -142,
	424, -309, 29, 329, 24, -303, 299, 424, -285, -290,
	-286, -238, -237, 425, 32, 429, -237, 425, 388, 24,
	105, 417, 2, 7, -262, 400, 222, 96, 156, 221,
	-263, 308, -238, -302, -298, -308, -307, 392, -354, 417,
	-388, 135, 151, 7, -350, 357, 357, 357, 357, 424,
	425, 2, 425, 2, 425, 2, 425, 2, 425, 2,
	-290, -290, -290, -290, -290, -290, -290, -237, -256, 2,
	-346, -237, 4, 400, 222, 96, 156, 221, 308, -256,
	2, -237, 2, -237, 2, -257, 2, -290, -237, -258,
	-291, -292, 415, 416, 410, -303, -259, 2, -290, -238,
	-290, 45, 204, 362, -260, -290, 145, -237, -170, -386,
	32, -237, -231, 429, 145, 32, 4, -231, -231, 424,
	425, 429, 193, 193, -317, -255, 193, -253, 251, -253,
	-253, -399, 424, 423, -313, -176, 422, 431, -354, -312,
	-311, 32, -184, 249, -313, -313, 426, 425, -312, -190,
	424, -237, -354, 429, 361, -410, 75, 64, -282, 160,
	64, -365, -178, 75, -366, -165, 59, 374, 268, 144,
	-410, 75, -410, 75, 75, 320, 333, 47, -321, 35,
	-91, 205, 73, 145, 361, -321, -251, -330, 91, 219,
	220, 47, -349, -348, 416, -349, 47, -349, -349, -349,
	395, -191, -321, 361, 259, -359, 73, 361, 429, 35,
	-91, 205, 73, 145, 361, -203, -176, 73, 345, -326,
	-325, 404, -197, -165, 426, -290, -91, -290, -91, 335,
	425, 426, 188, 188, -208, -209, -165, -283, -282, -367,
	-368, -365, 187, 170, 374, 128, 32, 117, -228, -327,
	186, 117, 259, 117, 117, 32, 424, 114, 272, 2,
	243, 231, 243, 231, -157, 348, 117, -284, 393, -274,
	-91, 424, 99, 32, -274, -241, -242, -324, -243, -178,
	424, -184, -190, -236, -236, -236, -203, -204, -175, -359,
	-360, -360, 425, -76, -328, 425, -138, 395, 361, 395,
	425, -139, 381, -209, -75, 25, 80, 109, 425, 429,
	-230, 31, 422, -262, 424, -347, 424, -138, -325, 145,
	-229, -326, -326, 142, 72, 407, 361, 425, 364, -280,
	-206, 274, 328, 286, 316, 8, 7, 7, 429, -354,
	-190, 142, -228, -228, 317, 142, 142, 426, -190, -203,
	-190, -321, -271, -348, 424, -272, 299, 300, 429, -149,
	33, 103, 198, -190, 401, 115, -290, -290, 361, -420,
	342, -296, 115, -290, 223, 234, 367, 127, 375, 105,
	238, 145, 424, -291, -291, -237, -290, 423, 433, 425,
	426, -228, -290, -419, 429, -224, -290, -237, -237, 425,
	425, 361, 361, 361, 361, 424, 423, 423, 429, -306,
	-307, 110, -290, 426, -393, 252, 424, 424, 425, 425,
	429, 401, 401, 401, 401, -290, 32, 429, 429, 429,
	425, 429, 429, 429, 425, 425, 145, 425, 425, 425,
	425, -264, 262, 425, 10, 11, 415, 416, 417, 418,
	140, 419, 420, 413, 414, 412, 405, 406, 407, 70,
	217, 301, 13, 14, 15, 188, 164, -291, -291, -291,
	425, -294, -295, 145, 142, 32, -260, -260, -260, 425,
	145, -237, 424, 425, -284, -323, -233, 2, -317, -186,
	-354, -284, -284, -237, -290, -317, -317, -254, 381, 243,
	193, -317, -311, 425, -400, -350, -313, -312, -350, -289,
	-288, 143, 229, -184, -222, -312, -312, -354, -313, 425,
	-234, -319, -381, -419, 426, -150, -190, -178, -185, -165,
	231, -282, 160, -156, 231, -330, -185, 424, 424, 198,
	198, -178, -185, 160, -178, 160, -185, -185, -406, 274,
	239, -290, 212, 272, 232, -151, 285, -91, -91, 401,
	424, -193, 285, -199, -349, -349, -249, 285, -191, -359,
	395, 401, -175, -152, -91, -91, 401, 424, -176, -153,
	285, 401, -190, -135, 159, 238, 417, -354, -129, 5,
	234, -129, 425, 429, 170, -177, 170, -183, -166, -91,
	-190, 145, -138, -359, -191, -359, -359, -359, -91, 2,
	424, 2, -190, 117, -190, 117, -158, 112, -418, 407,
	-175, -225, -224, -290, -248, -277, 292, 243, -223, -179,
	-178, 386, -184, -248, -232, 429, 145, 407, 426, -223,
	-154, -154, -154, -154, -154, -76, 145, -137, 246, -136,
	-165, 5, -228, 23, -138, 424, -359, 425, -330, 422,
	423, 7, 7, 424, -350, -138, -228, 145, -43, 395,
	272, 93, 345, 258, 170, -351, -351, -279, 372, 68,
	274, -351, 345, 317, 317, -165, -272, -290, -315, -190,
	430, -290, -290, 115, 115, -290, -291, -291, -290, 115,
	145, 424, -290, -300, 28, 28, 425, -286, -290, 417,
	-354, 425, 425, 425, 388, -419, -419, -419, 5, 222,
	156, 221, -263, 221, -263, -263, 7, -298, 113, -290,
	356, -354, 417, -394, -181, 424, -165, 393, -224, -350,
	425, -345, -330, -290, -290, -290, -290, -290, -290, -294,
	-290, -345, -330, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, 105, 231, 238, -291, -295, -294, -290, -290,
	-330, 425, 425, 425, -237, -75, -245, 151, -326, 429,
	-245, -245, 425, -254, 424, -290, -317, 423, 425, 429,
	-312, 423, 429, 432, 407, -222, 426, -311, 425, 429,
	-276, 32, 425, -354, 361, 361, 117, 231, 383, -369,
	-366, -290, -227, -316, -178, -381, 424, -165, 424, 424,
	-148, 109, 320, -411, 117, -154, 117, -154, 399, 424,
	424, 361, -410, 75, -290, -237, 361, 361, 259, -290,
	-290, -237, 361, -290, 119, -138, 145, 344, -210, 173,
	-283, -166, 424, -177, 424, 424, -222, -190, -250, -161,
	2, -266, 381, -176, 424, -176, -159, 203, -418, -357,
	-382, -269, -267, -248, -240, 232, 74, 425, 429, 426,
	-284, -242, -233, -290, 2, 425, -91, 429, 424, 407,
	407, 245, -359, -139, -139, 7, 423, 425, -350, 425,
	-228, 246, -187, -175, -190, -188, -203, -190, 244, 425,
	-149, -176, -290, -290, 115, 28, 28, -290, -290, -300,
	425, -290, -290, 423, 5, -290, 425, 425, 425, 425,
	-290, 426, -395, -165, -290, 425, 425, 425, 425, 429,
	429, 425, 425, 425, 425, -295, 145, 105, 238, 424,
	425, 425, -297, 153, 47, -317, -297, -297, -228, -287,
	-350, -288, -176, 422, -354, -319, 424, 426, -178, -185,
	-282, 117, -370, 75, -371, 62, 128, 80, 231, 234,
	374, 268, 59, 99, 278, 32, 425, 425, 429, -174,
	62, -174, -290, -227, -228, 231, 339, 99, 231, 99,
	92, 369, -178, -185, -228, -228, -190, -178, -185, 425,
	-193, -191, -359, 425, -176, 73, -360, 357, -211, -212,
	164, 424, -227, 424, -228, -208, 32, 424, 147, 46,
	243, -227, 243, -160, 202, -418, -357, -157, -248, -275,
	424, 243, -91, -179, 2, -225, 407, -136, -137, -359,
	-359, 425, 92, 92, 423, 425, -44, -45, 170, 75,
	261, -214, -213, 258, 238, -149, -290, -290, -290, 425,
	-419, -354, 417, -389, 258, 425, -290, -290, -291, 145,
	424, -300, -390, 394, -290, -237, -390, -390, 425, -313,
	-350, 2, -282, -185, -189, -182, -165, 128, 160, 234,
	198, 424, -291, -190, 424, 2, -281, -413, 79, 340,
	-316, -149, -189, -149, 425, 425, 425, 234, 234, -290,
	-330, -154, -154, 425, 425, 361, 361, 361, 361, 401,
	-290, 256, -227, 425, -227, 425, 425, -91, -227, -190,
	425, -190, -418, -357, -158, 106, -228, 75, -269, -296,
	425, -138, 424, 424, 429, 24, 424, 24, 424, -188,
	345, 425, -225, 47, 425, 425, -291, -300, 425, -391,
	-392, -181, -312, 423, -371, -182, 231, -290, -167, 424,
	-290, -210, 424, -174, 278, -173, 62, 424, 424, -178,
	-185, 424, 424, -290, -190, 425, -281, 425, -210, 425,
	-266, 424, -357, -159, 376, 232, 425, -185, -248, -360,
	-360, -45, -228, -228, -190, -396, 272, 300, -237, 425,
	429, 32, 117, 425, -372, 218, -165, 425, -211, -228,
	-149, -190, -409, 381, -189, -216, -215, -213, -218, -217,
	-213, -237, -237, 424, -210, -281, -211, -281, 424, -227,
	-160, 320, -284, 425, 425, 425, 425, 425, -397, -398,
	38, 371, 83, -290, -397, -392, -394, 128, -373, -376,
	-375, 243, 146, 257, 325, 425, 339, 391, 425, -222,
	-290, 425, 429, 386, 425, 429, 386, 425, 425, -228,
	-211, -210, -210, -227, 425, -241, -138, -138, -398, 265,
	141, 299, 265, 141, -182, -375, 243, -376, 243, 376,
	102, -372, -215, 164, -217, 145, 425, -211, -211, 425,
	-284, 28, -374, 228, 290, 52, 320, -374, -373, 424,
	424, -155, 52, 290, -281, -398, 21, 234, 99, -237,
	-237, -210, 425, 425, -211, -211, 361, 424, -237, 425,
	-211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 250, 251, 253, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	390, 391, 0, 866, -2, 0, 369, 371, 380, 382,
	384, 386, 387, 0, 449, 451, 453, 455, 457, 459,
	461, 462, 464, 466, 468, 470, 472, 474, 476, 478,
	480, 482, 484, 486, 488, 490, 492, 494, -2, 778,
	780, 782, 784, -2, 62, 64, 66, 68, 70, 72,
	88, 222, 223, 225, 227, 229, 232, 233, 235, 903,
	256, 258, 260, 262, 264, -2, 917, 0, 0, 0,
	-2, 0, -2, -2, -2, 796, 73, 74, 75, 76,
	77, 78, 79, 94, 95, 96, 97, 98, 99, 100,
	81, 83, 84, 90, 91, 93, 0, 0, 879, 881,
	883, 885, -2, 0, 0, -2, 7, 13, 15, 17,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 42, 46, 52, 54, 56, 60, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, -2, -2,
	-2, -2, 0, 0, 1548, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
	1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
	1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
	1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
	1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
	1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,
	1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1444, 1488, 1447, 1442, 188, 190, 192, 193, 0,
	0, 0, 0, 0, 0, 672, 1473, 1486, 1487, 1488,
	1491, 1492, 1493, 1548, 0, 215, 217, 220, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 348, 1641, 350, 352, 0, 0, 0, 0,
	244, 245, 246, 247, 248, 249, 252, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 347, 345, 1467, 289,
	290, 0, 0, 330, 331, 332, 333, 334, 335, 337,
	294, 296, 298, 299, 301, 303, 305, 307, 309, 311,
	313, 315, 316, 318, 320, 321, 323, 325, 326, 328,
	739, 0, 0, 0, 0, 0, 170, 0, 362, 356,
	361, 363, 365, 366, 367, 368, 0, 0, 168, 163,
	0, 0, 605, 343, 341, 0, 162, 0, 0, 775,
	0, 362, 1515, 360, 776, 777, 0, 0, 771, 772,
	1671, 806, 370, 372, 381, 383, 385, 388, -2, -2,
	1767, -2, 411, -2, 419, 1770, 1673, 422, 0, 424,
	-2, 427, 450, 452, 454, 456, 458, 460, 463, 465,
	467, 469, 471, 473, 475, 477, 479, 481, 483, 485,
	487, 489, 491, 493, 495, 496, 0, 0, 0, 0,
	0, 500, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, -2, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 499, 501, 502, 503, 0, 548,
	587, 588, 779, 781, 783, 0, 713, 905, 63, 65,
	67, 69, 71, 224, 226, 228, 230, 234, 236, -2,
	877, 878, 257, 259, 261, 263, 265, -2, 0, 909,
	909, 909, 0, 0, 878, 876, 0, 373, 0, 375,
	0, 500, 378, 379, 431, 432, 1120, 0, 0, 0,
	0, 0, 1261, 1204, -2, -2, 1236, 1238, 1746, 1767,
	0, 1240, 1241, 1242, 1243, 0, 0, 1246, 0, 1248,
	1249, 1250, 1251, 0, 1253, 1257, 1258, 0, 1421, 1484,
	-2, 1034, 1035, 1036, 1037, 1038, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1480, 1475, 1325, 1272, -2, 1502,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1556, -2, -2, -2, -2, -2, -2, 1087,
	-2, -2, -2, -2, -2, -2, -2, 1779, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 0, 1735, 1752,
	1753, 1758, 1760, 1754, 1743, 1295, -2, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1792, 1793, 1794,
	1795, 1796, 1797, -2, -2, -2, 1747, 1748, 1750, 1759,
	1763, 1764, 1769, 1773, 1774, 808, 786, 799, 808, 788,
	789, 790, 791, 792, 797, 798, 801, 0, 793, 794,
	795, 895, 1648, 898, 672, 896, 880, 882, 0, 884,
	0, 0, 0, 889, 912, 910, 0, 948, 893, 894,
	904, 963, 986, 0, 968, 0, 986, 1008, 0, 973,
	1667, 1273, 1274, 0, 1488, 1485, -2, 1790, 1791, 2,
	80, 0, 1752, 1008, 82, 0, 1752, 85, 0, 1752,
	0, -2, 89, 0, 1752, 171, 172, 1498, 1499, 1503,
	1504, 1505, 1506, 1779, 92, 0, 1463, 101, 0, 1752,
	1441, 0, 1460, 1507, 1508, 1509, 1510, 1511, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 0, 1457,
	0, 0, 597, 1438, 1443, 598, 1448, 0, 194, 195,
	196, 197, 198, 1752, 200, 201, 0, 203, 204, 1752,
	206, 207, 0, 209, 0, 0, 0, 0, 0, 231,
	672, 1752, 0, 238, 1468, 0, 696, 1752, 694, 1472,
	-2, 1752, 716, 719, 1752, 721, 672, 723, 1470, 728,
	1471, 0, -2, 1495, 902, 1752, 822, 349, 351, 0,
	243, 0, 835, 0, 837, 0, 856, 1014, 155, 1752,
	268, 287, 155, 1752, 271, 155, 1752, 274, 155, 1752,
	277, 1436, 155, 1752, 280, 281, 1752, 283, 173, 284,
	1752, 286, 344, 0, 0, -2, 338, 1474, -2, 0,
	336, 295, 297, 300, 302, 304, 306, 308, 310, 312,
	314, 317, 319, 322, 324, 327, 329, -2, 0, 0,
	0, 0, 0, 0, 603, 604, 0, 0, 0, 773,
	774, 0, 0, 0, 392, 0, 0, 0, 0, 805,
	389, 0, 408, 0, 410, 1742, -2, -2, 414, 809,
	813, 814, 815, 0, 0, 0, 0, 421, 0, 0,
	0, 425, 428, 0, 497, 498, 0, 0, 508, 509,
	510, 511, 1646, 1571, 514, 0, 517, 538, 552, 0,
	0, 521, 523, 602, 525, 0, 0, 527, 0, 529,
	0, 531, 0, 533, 0, 535, 537, 539, 553, 541,
	0, 0, 0, 551, 0, 557, 0, 560, 561, 562,
	0, 564, 565, 566, 567, 0, 569, 570, -2, -2,
	574, 576, 0, 586, 0, 504, 505, 155, 1012, -2,
	0, 872, 926, 927, 0, 0, 0, 0, 907, 908,
	0, 0, 0, 868, 869, 374, 0, 377, 0, 0,
	0, 0, 1356, 1357, 1358, 1359, 1360, 1361, 1364, 1365,
	1362, 1363, 1366, 1367, 0, 0, 0, 0, 0, 1368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1369, 1370, 1371, 0, 0, 1373, 0, 1375, 0,
	0, 0, 0, 0, 0, 1183, 1185, 1429, 0, 0,
	1372, 1125, 1126, 1127, 1162, 1163, 0, 1237, 1426, 1425,
	1239, 0, 1378, -2, 1379, 1261, 0, 0, 0, 1245,
	0, 1117, 1252, 1454, 1259, 1260, 1378, 0, 1420, 0,
	1327, 0, 1070, 0, 1071, 1072, 0, 1073, 1074, 1085,
	1092, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	1089, 0, 0, 0, 0, 0, 1401, -2, 0, 0,
	785, -2, 787, 0, 803, 0, 897, 0, 0, 952,
	1430, 1434, 1435, 952, 952, 0, 0, 1379, 0, 0,
	0, 0, 1005, 1005, 1005, 1003, 980, 0, 986, 0,
	996, 0, 986, 986, 0, -2, 968, 0, 0, 996,
	1009, 1010, 0, 0, 0, 0, 102, 768, 123, 0,
	768, 768, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 119, 108, 109, 0, 0, 86, 697, 0, 700,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 121, 0, 146,
	148, 0, 0, 0, 0, 999, 596, 0, 0, 1489,
	1446, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	1475, 1476, 611, 0, 0, 0, 241, 692, 695, 0,
	714, 0, 901, 0, 0, 0, 0, 0, 729, 0,
	1752, 734, 1459, 1494, 0, 1752, 824, 0, 1018, 0,
	838, 0, 0, 1015, 0, 266, 0, 153, 154, 0,
	269, 0, 272, 0, 275, 0, 0, 278, 0, 0,
	0, 0, 0, 904, 0, 0, 185, 0, 354, 364,
	0, 0, 0, 0, 904, 0, 1381, 1026, 1029, 1030,
	1031, 1117, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1093,
	1087, 1103, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1083, 0, 1058, 1058, 1058, 1075, 1076,
	1094, 1095, 1097, 1099, 1101, 1027, 1028, 1093, 1093, 1090,
	1091, 185, 0, 358, 0, 999, 394, 999, 396, 0,
	582, 0, 0, 0, 0, -2, 416, 0, 811, 0,
	816, 440, 441, 442, 818, 819, 420, 443, 444, 445,
	446, 447, 448, 0, 689, 0, 691, 1450, 0, 417,
	433, 418, 423, 0, 429, 0, 0, 512, 513, 515,
	516, 518, 519, 520, 524, 0, 590, 1663, 600, 526,
	528, 530, 532, 534, 0, 543, 0, 545, 0, 547,
	555, 558, 563, 568, 0, 0, 0, 712, 0, 875,
	924, 925, 930, 934, 935, 938, 941, 942, 932, 1120,
	890, 891, 892, 918, 919, 751, 0, 0, 376, 1121,
	1022, 1023, 1077, 1078, 1079, 1080, 1081, 1122, 1123, 1456,
	0, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, -2, -2, -2, -2, -2, -2, -2, -2, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	-2, -2, -2, 1160, 1161, -2, 1374, 1376, 0, 1429,
	0, -2, 0, -2, -2, -2, -2, 1180, 0, 1182,
	1187, 1189, 1191, 0, 0, 0, 0, 1428, 1201, 1412,
	0, 0, 1353, 1354, 1355, 1186, 0, 0, 1427, 1424,
	0, 0, 1377, 1256, 0, 0, 915, 1263, 0, 0,
	0, 0, 1270, 0, 1455, 1104, 1105, 1106, 1107, 1108,
	1109, 1118, 0, 0, 1385, 1419, 1415, 0, 1477, 1483,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1307,
	0, 1388, -2, -2, -2, -2, -2, -2, -2, 0,
	1309, 0, 1321, 0, 1323, 0, 1311, 1379, 1398, 0,
	0, 1207, 0, 0, 0, 1261, 0, 1314, 1379, 1406,
	0, 0, 0, 0, 0, 1379, 0, 1411, 802, 899,
	0, 0, 1018, 0, 0, 0, 1433, 1018, 1018, 0,
	947, 0, 0, 0, 0, 0, 0, 1000, 1004, 1001,
	1002, 0, 0, 986, 996, 960, 0, 0, 1458, 966,
	995, 0, 672, 985, 996, 996, 0, -2, 970, 0,
	0, 915, -2, 0, 0, 0, 0, 767, 125, 1752,
	0, 157, 0, 0, 662, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 698, 699, 701, 707,
	709, 0, 703, 1453, 0, 704, 0, 706, 708, 710,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 1440, 0, 0, 176,
	998, 0, 1439, 1449, 0, 199, 202, 205, 208, 186,
	671, 0, 0, 0, 0, 610, -2, 612, 614, 615,
	616, 617, 1596, 1495, 0, 1495, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 0, 0, 0, 826, 832, 0, 917, 0, 854,
	840, 0, 0, 0, 854, 858, 859, 861, 862, 0,
	0, 1016, 288, 155, 155, 155, 1437, 155, 155, 174,
	282, 285, 346, 291, 339, 904, 0, 0, 0, 0,
	185, 0, 0, 0, 340, 0, 0, 0, 342, 0,
	1019, 1021, 0, 1032, 0, 1085, 0, 160, 185, 0,
	0, 393, 398, 0, 583, 0, 0, 409, 0, 810,
	817, 0, 437, 0, 439, 690, 1452, 1451, 0, 430,
	506, 0, 601, 599, 542, 0, 0, 0, 584, 585,
	589, 1013, 0, 936, 0, 933, 939, 940, 0, 921,
	749, 750, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 1202, 0, -2, 1181, 1184, 1188, 1190, 1192, 0,
	0, 0, 0, 0, 0, 0, 1203, 1422, 1425, 1351,
	0, 0, 1380, 0, 0, 914, 915, 915, 915, 1269,
	0, 0, 0, 0, 0, 0, 1383, 1384, 0, 0,
	1416, 0, 0, 0, 1271, 0, 0, 0, 1082, 1056,
	0, 1096, 1098, 1100, 1102, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 1294, 1306, 0, 1308, 1320, 1322,
	1310, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1210, 1211, 1212,
	1313, 1404, 1405, 0, 0, 0, 0, 0, 0, 1319,
	0, 1410, 904, 949, 944, 1431, 999, 951, 953, 1432,
	1461, 944, 944, 0, 1380, 988, 0, 990, 0, 0,
	0, 992, 0, 981, 0, 983, 996, 965, 0, 0,
	958, 0, 957, 672, 994, 967, 971, 1477, 0, 1011,
	0, 975, 978, 0, 0, 124, 755, 0, 0, 1462,
	0, 127, 1752, 136, 0, 639, 0, 0, 0, 0,
	0, 770, 137, 1752, 155, 1752, 155, 138, 141, 0,
	145, 143, 0, 0, 630, 103, 768, 106, 112, 0,
	0, 761, 0, 702, 705, 711, 87, 0, 763, 753,
	0, 0, 752, 147, 107, 113, 0, 0, 765, 105,
	0, 0, 0, 185, 0, 0, 1445, 1490, 210, 212,
	213, 211, 619, 0, 1495, 0, 1495, 0, 1466, 608,
	672, 0, 239, 240, 696, 717, -2, 720, 722, 724,
	0, 726, 737, 0, 0, 0, 828, 832, 0, 831,
	902, 929, 916, 1017, 833, 854, 0, 0, 0, 843,
	845, 842, 839, 836, 1018, 0, 0, 0, 0, 0,
	267, 270, 273, 276, 279, 292, 0, 183, 1629, 181,
	178, 180, 353, 0, 164, 0, 0, 0, 1382, 0,
	1024, 0, 0, 0, 0, 161, 357, 0, 395, 0,
	0, 0, 0, 0, 0, 406, 407, -2, 435, 436,
	438, 434, 0, 544, 546, 554, 0, 0, 920, 751,
	0, 1124, 1165, 0, 0, -2, 0, 0, 1169, 0,
	0, 0, -2, 0, 0, 0, 1413, 0, 1424, 1254,
	1255, 1262, 1352, 1264, 0, 0, 0, 0, 1247, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 0, 1386, 1414, 1418,
	0, 1478, 1482, 1333, 1334, 1338, 1469, 0, 0, 0,
	1275, 0, 0, 0, 0, 0, 0, 0, 1387, 1397,
	1399, 1208, 1209, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, -2, -2, -2, 1226, 1227, 1228, -2,
	-2, -2, 0, 0, 0, 1400, 1402, 1403, 1407, 1408,
	0, 1316, 1317, 1318, 1409, 0, 946, 0, 950, 0,
	946, 946, 911, 989, 0, 1007, 991, 963, 982, 0,
	972, 961, 0, 962, 0, 993, 0, 969, 974, 0,
	977, 0, 1264, -2, 0, 0, 0, 0, 156, 637,
	661, 0, 0, 740, 748, 748, 0, 1464, 0, 0,
	129, 0, 0, 0, 0, 134, 0, 140, 144, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 115,
	118, 0, 0, 114, 0, 158, 0, 0, 627, 0,
	613, 0, 0, 0, 0, 611, 0, 237, 693, 715,
	725, 0, 0, 0, 0, 0, 830, 832, 0, 823,
	824, 854, 928, 834, 852, 853, 851, 0, 0, 0,
	917, 860, 857, 863, 864, 0, 169, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 1025, 1033, 0, 1086,
	359, 0, 577, 578, 625, 0, 581, 507, 931, 937,
	922, 751, 1167, 1171, 0, 0, 0, 1173, -2, 0,
	1195, -2, -2, 1423, 1244, 915, 1265, 1267, 1268, 1119,
	1417, 0, 1340, 1337, 0, 1324, 1057, 1285, 1286, 0,
	0, 1289, 1291, 1292, 1293, 1396, 0, 0, 0, 0,
	1315, 900, 1329, 0, 0, 954, 1329, 1329, 0, 986,
	984, 959, 955, 0, 1478, 976, 0, 0, 757, 759,
	126, 0, 638, 0, 641, 0, 0, 0, 0, 648,
	649, 0, 0, 0, 0, 0, 663, 670, 0, 751,
	0, 751, 0, 0, 0, 0, 131, 150, 0, 0,
	769, 0, 155, 155, 0, 0, 756, 0, 0, 0,
	762, 764, 754, 0, 766, 0, 175, 0, 606, 626,
	0, 0, 0, 0, 0, 0, 0, 0, 735, 736,
	0, 0, 0, 820, 832, 0, 825, 826, 242, 0,
	0, 0, 841, 844, 846, 929, 0, 182, 0, 177,
	179, 185, 0, 0, 1020, 1084, 397, 399, 0, 0,
	405, 579, 624, 0, 0, 923, 1175, -2, -2, 1196,
	0, 1479, 1481, 917, 0, 1326, 0, 0, -2, 0,
	0, 0, 886, 0, 945, 943, 887, 888, 1006, 996,
	0, 979, 128, 0, 642, 643, 1465, 645, 0, 647,
	650, 0, 652, 1497, 0, 656, 619, 0, 667, 668,
	741, 742, 747, 743, 748, 665, 0, 130, 132, 149,
	746, 133, 139, 0, 0, 0, 0, 0, 0, 0,
	997, 0, 0, 670, 0, 660, 619, 609, 0, 737,
	732, 0, 0, 827, 828, 0, 0, 0, 854, 865,
	184, 165, 0, 0, 0, 401, 0, 403, 0, 623,
	0, 1266, 1343, 0, 1287, 1288, -2, 0, 1234, 1328,
	1330, 0, 964, 956, 640, 644, 0, 0, 676, 0,
	0, 627, 0, 751, 0, 152, 0, 0, 0, 758,
	760, 0, 0, 117, 0, 659, 619, 670, 627, 670,
	0, 0, 829, 830, 0, 848, 1018, 850, 855, 0,
	0, 400, 0, 0, 580, 0, 0, 0, 1339, 1235,
	0, 0, 0, 651, 681, 0, 0, 0, 664, 0,
	744, 672, 135, 0, 745, 0, 631, 0, 0, 634,
	0, 0, 0, 0, 627, 619, 607, 619, 0, 0,
	821, 0, 849, 185, 185, 402, 404, 1336, 1341, 1344,
	-2, 1717, 1545, 0, 1342, 1331, 1332, 0, 653, 677,
	678, 0, 673, 674, 675, 1496, 654, 655, 669, 676,
	151, 628, 0, 0, 629, 0, 0, 120, 122, 0,
	657, 627, 627, 0, 733, 1018, 166, 167, 0, 1346,
	1347, 1348, 1349, 1350, 646, 679, 0, 680, 0, 0,
	0, 681, 632, 0, 635, 0, 622, 658, 730, 670,
	847, 0, 682, 0, 685, 686, 0, 683, 666, 0,
	0, 618, 620, 621, 619, 1345, 684, 687, 688, 0,
	0, 627, 627, 0, 731, 633, 0, 0, 0, 627,
	636,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 413, 3, 419, 414, 3,
	424, 425, 417, 415, 429, 416, 426, 418, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 433, 428,
	405, 407, 406, 409, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 422, 3, 423, 420, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 431, 412, 432, 410,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 408, 57748, 411, 57749, 421,
	57750, 427, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1026
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1032
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1041
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1075
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1078
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1087
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1144
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1170
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1174
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1178
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1189
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1201
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1227
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1231
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1235
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1241
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1251
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1257
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1267
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1274
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1281
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1288
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1295
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1305
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1315
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1325
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1338
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1350
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1354
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1360
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1364
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1370
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1381
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1386
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1391
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1396
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1401
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1406
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1411
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1415
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1418
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1427
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1456
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1459
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1466
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1475
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1484
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1496
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1503
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1504
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1508
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1530
		{
			sqlVAL.union.val = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1536
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1540
		{
			sqlVAL.union.val = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1547
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1551
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1555
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1561
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1565
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1594
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1617
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1621
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1624
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1628
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1659
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1663
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1667
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1674
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1691
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1694
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1708
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1718
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1722
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1728
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1732
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1736
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1740
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1746
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1756
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1760
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1763
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1767
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1779
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1780
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1781
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1782
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1792
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1800
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1802
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1805
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1815
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1824
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1832
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1834
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1838
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1841
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1851
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1860
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1868
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1870
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1874
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1877
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1881
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1886
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1892
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1893
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1902
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1903
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1906
		{
			return helpWith(sqllex, "CREATE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1912
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1915
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1916
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1918
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1935
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1949
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1953
		{
			sqlVAL.union.val = nil
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return helpWith(sqllex, "DELETE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1983
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1986
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1987
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1988
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1989
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1990
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1999
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2000
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2001
		{
			return helpWith(sqllex, "DROP")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2007
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2008
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2020
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2023
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2031
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2035
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2038
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2046
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2050
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2053
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2061
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2069
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2084
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2092
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2099
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2107
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2111
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2114
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2122
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2133
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2158
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2161
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2174
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2177
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2178
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2180
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2181
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "DELETE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2183
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2184
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2186
		{
			return helpWith(sqllex, "INSERT")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2187
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2189
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2190
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2192
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2195
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2196
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2198
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2199
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2207
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2208
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2212
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2216
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2233
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2237
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2241
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2251
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2257
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2263
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2277
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2281
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2292
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2312
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2316
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2320
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2323
		{
			return helpWith(sqllex, "GRANT")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2343
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2347
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2351
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2354
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2359
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2363
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2374
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2392
		{
			return helpWith(sqllex, "RESET")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2393
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2401
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2405
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2408
		{
			return helpWith(sqllex, "RESET")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2416
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2419
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2430
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2433
		{
			return helpWith(sqllex, "USE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2437
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2438
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2439
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2440
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2441
		{
			return helpWith(sqllex, "USE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2442
		{
			return unimplemented(sqllex, "set local")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2458
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2473
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2476
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2502
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2510
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2516
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2526
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2530
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2553
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2560
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2582
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2586
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2608
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2611
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2613
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2616
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2620
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2631
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2648
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2655
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2661
		{
			return unimplemented(sqllex, "set from current")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2662
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2670
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2675
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2682
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2686
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2692
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2703
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2709
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2719
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2723
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2727
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2731
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2735
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2741
		{
			sqlVAL.union.val = tree.Low
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2745
		{
			sqlVAL.union.val = tree.Normal
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2749
		{
			sqlVAL.union.val = tree.High
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2760
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2764
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2773
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2777
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2794
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2796
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2797
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2799
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2800
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2801
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2802
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2803
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2804
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2806
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2807
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2808
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2809
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2810
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2811
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2813
		{
			return helpWith(sqllex, "SHOW")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2820
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2821
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2822
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2833
		{
			sqlVAL.str = "client_encoding"
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2836
		{
			sqlVAL.str = "timezone"
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2837
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2851
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2855
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2858
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2869
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2877
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2892
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2899
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2905
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2915
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2919
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2922
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2924
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2927
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2935
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2938
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2946
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2949
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2962
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2970
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2978
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2981
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2983
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2986
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2988
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2991
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2999
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3002
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3007
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3015
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3020
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3024
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3034
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3046
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3051
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3054
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3056
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3060
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3063
		{
			sqlVAL.union.val = true
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3064
		{
			sqlVAL.union.val = false
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3072
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3075
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3077
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3091
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3100
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3109
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3112
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3119
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3123
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3126
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3133
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3137
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3145
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3150
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3155
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3159
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3167
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3171
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3175
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3188
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3191
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3199
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3202
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3206
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3211
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3216
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3223
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3231
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3238
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3243
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3255
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3259
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3262
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3270
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3277
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3282
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3402
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3406
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3410
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3449
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3453
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3458
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3462
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3471
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3478
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3482
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3494
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3506
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3542
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3568
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3579
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3593
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3599
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3609
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3615
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3629
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3636
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3641
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3646
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3652
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3659
		{
			sqlVAL.str = ""
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3666
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3672
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3679
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3686
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3692
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3702
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3712
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3722
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3733
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3744
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3748
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3754
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3758
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3762
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3766
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3770
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3774
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3778
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3796
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3800
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3804
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3808
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3812
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3816
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3820
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3828
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3832
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3836
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3843
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3853
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3865
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3875
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3887
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3892
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3898
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3904
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3915
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3925
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3953
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3959
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3963
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3968
		{
			return unimplemented(sqllex, "match full")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3969
		{
			return unimplemented(sqllex, "match partial")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3970
		{
			return unimplemented(sqllex, "match simple")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3971
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3978
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3982
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3986
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3990
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3994
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4000
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4006
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4014
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4018
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4022
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4026
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4030
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4036
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4040
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4044
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4062
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4070
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4078
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4082
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4085
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4089
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4090
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4092
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4093
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4094
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4097
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4099
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4101
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4103
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4104
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4106
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4107
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4109
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4118
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4121
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4129
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4133
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4136
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4140
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4144
		{
			sqlVAL.union.val = nil
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4154
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4158
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4161
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4169
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4176
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4184
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4186
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4188
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4190
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4192
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4194
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4210
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4223
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4237
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4246
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4255
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4260
		{
			sqlVAL.union.val = true
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4264
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4268
		{
			sqlVAL.union.val = false
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4274
		{
			sqlVAL.union.val = true
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4278
		{
			sqlVAL.union.val = false
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4284
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4297
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4300
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4301
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4304
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4305
		{
			sqlVAL.str = ""
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4308
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4309
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4313
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4317
		{
			sqlVAL.union.val = tree.Descending
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4321
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4327
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4334
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4344
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4348
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4356
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4360
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4362
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4366
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4370
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4376
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4380
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4386
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4390
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4395
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4396
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4399
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4400
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4408
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4411
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4421
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4430
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4433
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4441
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4444
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4448
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4449
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4450
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4466
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4469
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4471
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4474
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4487
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4489
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4492
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4496
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4501
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4502
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4503
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4511
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4518
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4521
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4522
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4526
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4530
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4534
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4538
		{
			sqlVAL.str = ""
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4544
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4548
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4554
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4558
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4564
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4568
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4581
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4583
		{
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4587
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4591
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4595
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4601
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4607
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4613
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4617
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 820:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4627
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4637
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4647
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4651
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4655
		{
			sqlVAL.str = ""
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4661
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4665
		{
			sqlVAL.str = ""
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4671
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4675
		{
			sqlVAL.str = ""
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4681
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4685
		{
			sqlVAL.str = ""
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4690
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4691
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4703
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4710
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4717
		{
			return helpWith(sqllex, "INSERT")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4728
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4735
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4739
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4747
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4753
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4757
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4761
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4767
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4791
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4795
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4799
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4805
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4809
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4811
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4817
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4822
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4826
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 855:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4843
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4854
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4858
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4859
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4863
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4867
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4880
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4883
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4887
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4930
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4936
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4940
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4955
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4959
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4963
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4967
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4971
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4975
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4982
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5017
		{
			return helpWith(sqllex, "SELECT")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5018
		{
			return helpWith(sqllex, "VALUES")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5019
		{
			return helpWith(sqllex, "TABLE")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5041
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5054
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5068
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5080
		{
			return helpWith(sqllex, "SELECT")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5084
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5093
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5102
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5117
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5124
		{
			return helpWith(sqllex, "TABLE")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5136
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5139
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5140
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5144
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5154
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5162
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5163
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5167
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5170
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5173
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5174
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5178
		{
			sqlVAL.union.val = true
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5182
		{
			sqlVAL.union.val = false
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5186
		{
			sqlVAL.union.val = false
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5192
		{
			sqlVAL.union.val = true
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5198
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5203
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5204
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5207
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5208
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5212
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5216
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5222
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5228
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5238
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5242
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5246
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5255
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5264
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5275
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5279
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5288
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5301
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5308
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5317
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5321
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5325
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5331
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5332
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5335
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5336
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5353
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5357
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5363
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5367
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5386
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5389
		{
			return helpWith(sqllex, "VALUES")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5391
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5403
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5406
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5408
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5414
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5424
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5428
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5434
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5440
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5445
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5468
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5472
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5476
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5480
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5507
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5521
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5525
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5528
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5530
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5534
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5538
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5543
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5559
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5565
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5569
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5575
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5581
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5587
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5589
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5592
		{
			sqlVAL.union.val = nil
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5593
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5594
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5608
		{
			sqlVAL.union.val = true
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5612
		{
			sqlVAL.union.val = false
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5636
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5640
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5644
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5648
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5652
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5658
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5662
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5669
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5675
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5682
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5688
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5692
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5696
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5700
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5706
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5707
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5718
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5722
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5728
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5729
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5730
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5734
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5738
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5751
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5755
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5759
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5765
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5769
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5781
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5795
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5804
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5815
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5819
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5826
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5828
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5837
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5841
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5845
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5854
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5872
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5876
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5880
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5884
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5888
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5892
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5900
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5904
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5908
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5912
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5916
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5920
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5924
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5928
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5932
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5936
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5956
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5960
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5964
		{
			sqlVAL.union.val = nil
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5971
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5975
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5979
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5983
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5987
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5991
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5995
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5999
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6003
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6007
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6011
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6015
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6025
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6029
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6038
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6047
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6056
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6060
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6067
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6071
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6075
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6079
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6083
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6089
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6093
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6099
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6116
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6128
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6134
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6138
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6142
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6146
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6151
		{
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6152
		{
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6157
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6161
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6165
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6169
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6173
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6177
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6181
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6185
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6189
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6194
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6200
		{
			sqlVAL.union.val = tree.Year
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6204
		{
			sqlVAL.union.val = tree.Month
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6208
		{
			sqlVAL.union.val = tree.Day
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6220
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6226
		{
			sqlVAL.union.val = tree.Month
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6230
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6234
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6238
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6246
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6250
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6254
		{
			sqlVAL.union.val = nil
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6260
		{
			sqlVAL.union.val = tree.Second
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6263
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6287
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6291
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6295
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6298
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6307
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6311
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6319
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6323
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6359
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6363
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6395
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6399
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6403
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6407
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6411
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6415
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6419
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6423
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6427
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6431
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6435
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6439
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6447
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6451
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6463
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6467
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6471
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6475
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6479
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6483
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6507
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6511
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6515
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6519
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6523
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6527
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6531
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6535
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6539
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6543
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6547
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6550
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6564
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6568
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6576
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6580
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6584
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6588
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6592
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6596
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6600
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6604
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6608
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6612
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6616
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6633
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6637
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6641
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6656
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6660
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6668
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6672
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6676
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6680
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6684
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6688
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6692
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6696
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6700
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6704
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6708
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6712
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6716
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6720
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6724
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6728
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6732
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6736
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6744
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6748
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6752
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6756
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6760
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6764
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6786
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6822
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6826
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6830
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6834
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6837
		{
			return unimplemented(sqllex, "func const")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6839
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6843
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6846
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6848
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6852
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6856
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6860
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6864
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6873
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6878
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6882
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6886
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6891
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6895
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6903
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6908
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6923
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6927
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6930
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6931
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6933
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6944
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6955
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6962
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6971
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6972
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6976
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7006
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7026
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7030
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7034
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7038
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7042
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7046
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7050
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7054
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7064
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7066
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7069
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7071
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7074
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7076
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7079
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7084
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7086
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7089
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7091
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7094
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7096
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7099
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7108
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7109
		{
			return unimplemented(sqllex, "treat")
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7111
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7127
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7130
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7132
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7135
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7140
		{
			return unimplemented(sqllex, "within group")
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7141
		{
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7149
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7156
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7160
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7166
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7176
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7184
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7188
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7192
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7219
		{
			sqlVAL.str = ""
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7225
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7229
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7240
		{
			bounds := sqlDollar[2].union.windowFrameBounds()
			startBound := bounds.StartBound
			endBound := bounds.EndBound
			switch {
			case startBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			}
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: bounds,
			}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7271
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7277
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7290
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7318
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7322
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7326
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValuePreceding,
			}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7337
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValueFollowing,
			}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7353
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7357
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7363
		{
			sqlVAL.union.val = tree.Any
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7367
		{
			sqlVAL.union.val = tree.Some
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7371
		{
			sqlVAL.union.val = tree.All
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7376
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7377
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7378
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7379
		{
			sqlVAL.union.val = tree.Div
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7380
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7381
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7382
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7383
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7385
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7386
		{
			sqlVAL.union.val = tree.LT
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7387
		{
			sqlVAL.union.val = tree.GT
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = tree.LE
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7390
		{
			sqlVAL.union.val = tree.GE
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7391
		{
			sqlVAL.union.val = tree.NE
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7395
		{
			sqlVAL.union.val = tree.Like
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7396
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7397
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7398
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7416
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7426
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7446
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7450
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7456
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7460
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7482
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7486
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7490
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7496
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7503
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7507
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7524
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7528
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7532
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7536
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7540
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7546
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7552
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7558
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7562
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7566
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7572
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7587
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7594
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7604
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7610
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7614
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7621
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7627
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7631
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7638
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7644
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7653
		{
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7654
		{
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7658
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7668
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7677
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7681
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7685
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7693
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7697
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7703
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7713
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7720
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7748
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7752
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7756
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7762
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7774
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7778
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7787
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7798
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7808
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7906
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7913
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7921
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7935
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7943
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7956
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7974
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7984
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7988
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8002
		{
			sqlVAL.str = ""
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8008
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8012
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
