// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:554
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MYSQLOUTFILE = lex.MYSQLOUTFILE
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MYSQLOUTFILE",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8247

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	424, 57,
	-2, 892,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	167, 729,
	-2, 0,
	-1, 60,
	101, 892,
	173, 892,
	372, 892,
	373, 892,
	-2, 0,
	-1, 74,
	113, 866,
	127, 866,
	181, 866,
	207, 866,
	237, 866,
	245, 866,
	369, 866,
	-2, 855,
	-1, 110,
	197, 546,
	359, 546,
	-2, 0,
	-1, 115,
	4, 894,
	20, 894,
	21, 894,
	22, 894,
	23, 894,
	25, 894,
	30, 894,
	35, 894,
	36, 894,
	37, 894,
	38, 894,
	39, 894,
	40, 894,
	41, 894,
	42, 894,
	43, 894,
	44, 894,
	46, 894,
	47, 894,
	48, 894,
	49, 894,
	50, 894,
	51, 894,
	54, 894,
	55, 894,
	56, 894,
	58, 894,
	59, 894,
	63, 894,
	64, 894,
	65, 894,
	66, 894,
	67, 894,
	69, 894,
	70, 894,
	71, 894,
	72, 894,
	74, 894,
	76, 894,
	77, 894,
	80, 894,
	81, 894,
	82, 894,
	90, 894,
	91, 894,
	92, 894,
	93, 894,
	94, 894,
	95, 894,
	96, 894,
	97, 894,
	99, 894,
	101, 894,
	103, 894,
	106, 894,
	107, 894,
	109, 894,
	110, 894,
	114, 894,
	115, 894,
	116, 894,
	117, 894,
	118, 894,
	119, 894,
	120, 894,
	121, 894,
	122, 894,
	123, 894,
	124, 894,
	132, 894,
	133, 894,
	134, 894,
	135, 894,
	136, 894,
	138, 894,
	140, 894,
	144, 894,
	146, 894,
	147, 894,
	149, 894,
	151, 894,
	152, 894,
	153, 894,
	154, 894,
	155, 894,
	156, 894,
	157, 894,
	158, 894,
	159, 894,
	162, 894,
	163, 894,
	168, 894,
	169, 894,
	170, 894,
	173, 894,
	174, 894,
	175, 894,
	176, 894,
	177, 894,
	178, 894,
	179, 894,
	180, 894,
	182, 894,
	184, 894,
	187, 894,
	188, 894,
	189, 894,
	191, 894,
	192, 894,
	195, 894,
	196, 894,
	197, 894,
	199, 894,
	200, 894,
	202, 894,
	204, 894,
	205, 894,
	208, 894,
	209, 894,
	212, 894,
	214, 894,
	217, 894,
	218, 894,
	219, 894,
	220, 894,
	221, 894,
	222, 894,
	224, 894,
	225, 894,
	226, 894,
	227, 894,
	232, 894,
	233, 894,
	234, 894,
	235, 894,
	236, 894,
	238, 894,
	239, 894,
	241, 894,
	242, 894,
	243, 894,
	246, 894,
	247, 894,
	249, 894,
	251, 894,
	252, 894,
	253, 894,
	254, 894,
	255, 894,
	256, 894,
	257, 894,
	258, 894,
	260, 894,
	261, 894,
	262, 894,
	263, 894,
	264, 894,
	266, 894,
	267, 894,
	268, 894,
	269, 894,
	270, 894,
	271, 894,
	272, 894,
	273, 894,
	275, 894,
	276, 894,
	277, 894,
	278, 894,
	279, 894,
	281, 894,
	282, 894,
	283, 894,
	284, 894,
	285, 894,
	286, 894,
	287, 894,
	289, 894,
	291, 894,
	292, 894,
	293, 894,
	294, 894,
	295, 894,
	296, 894,
	298, 894,
	299, 894,
	300, 894,
	301, 894,
	302, 894,
	303, 894,
	304, 894,
	306, 894,
	307, 894,
	308, 894,
	309, 894,
	310, 894,
	311, 894,
	312, 894,
	313, 894,
	314, 894,
	316, 894,
	317, 894,
	318, 894,
	319, 894,
	321, 894,
	322, 894,
	323, 894,
	324, 894,
	326, 894,
	327, 894,
	328, 894,
	329, 894,
	330, 894,
	331, 894,
	332, 894,
	333, 894,
	334, 894,
	335, 894,
	336, 894,
	337, 894,
	339, 894,
	340, 894,
	342, 894,
	343, 894,
	344, 894,
	345, 894,
	346, 894,
	347, 894,
	348, 894,
	349, 894,
	350, 894,
	351, 894,
	353, 894,
	354, 894,
	355, 894,
	356, 894,
	359, 894,
	360, 894,
	361, 894,
	362, 894,
	364, 894,
	365, 894,
	367, 894,
	368, 894,
	371, 894,
	372, 894,
	373, 894,
	374, 894,
	376, 894,
	378, 894,
	379, 894,
	380, 894,
	381, 894,
	382, 894,
	383, 894,
	386, 894,
	387, 894,
	392, 894,
	393, 894,
	394, 894,
	395, 894,
	396, 894,
	397, 894,
	-2, 0,
	-1, 136,
	113, 865,
	127, 865,
	181, 865,
	207, 865,
	237, 865,
	245, 865,
	369, 865,
	-2, 858,
	-1, 141,
	1, 788,
	187, 788,
	266, 788,
	270, 788,
	423, 788,
	424, 788,
	-2, 0,
	-1, 143,
	1, 788,
	423, 788,
	424, 788,
	-2, 0,
	-1, 144,
	1, 788,
	423, 788,
	424, 788,
	-2, 0,
	-1, 145,
	1, 792,
	423, 792,
	424, 792,
	-2, 0,
	-1, 171,
	4, 901,
	5, 901,
	6, 901,
	7, 901,
	8, 901,
	9, 901,
	20, 901,
	21, 901,
	22, 901,
	23, 901,
	25, 901,
	30, 901,
	31, 901,
	35, 901,
	36, 901,
	37, 901,
	38, 901,
	39, 901,
	40, 901,
	41, 901,
	42, 901,
	43, 901,
	44, 901,
	46, 901,
	47, 901,
	48, 901,
	49, 901,
	50, 901,
	51, 901,
	52, 901,
	53, 901,
	54, 901,
	55, 901,
	56, 901,
	58, 901,
	59, 901,
	61, 901,
	63, 901,
	64, 901,
	65, 901,
	66, 901,
	67, 901,
	69, 901,
	70, 901,
	71, 901,
	72, 901,
	74, 901,
	76, 901,
	77, 901,
	79, 901,
	80, 901,
	81, 901,
	82, 901,
	83, 901,
	84, 901,
	85, 901,
	86, 901,
	87, 901,
	88, 901,
	89, 901,
	90, 901,
	91, 901,
	92, 901,
	93, 901,
	94, 901,
	95, 901,
	96, 901,
	97, 901,
	98, 901,
	99, 901,
	101, 901,
	103, 901,
	106, 901,
	107, 901,
	109, 901,
	110, 901,
	114, 901,
	115, 901,
	116, 901,
	117, 901,
	118, 901,
	119, 901,
	120, 901,
	121, 901,
	122, 901,
	123, 901,
	124, 901,
	125, 901,
	126, 901,
	132, 901,
	133, 901,
	134, 901,
	135, 901,
	136, 901,
	138, 901,
	140, 901,
	143, 901,
	144, 901,
	146, 901,
	147, 901,
	149, 901,
	151, 901,
	152, 901,
	153, 901,
	154, 901,
	155, 901,
	156, 901,
	157, 901,
	158, 901,
	159, 901,
	160, 901,
	162, 901,
	163, 901,
	168, 901,
	169, 901,
	170, 901,
	172, 901,
	173, 901,
	174, 901,
	175, 901,
	176, 901,
	177, 901,
	178, 901,
	179, 901,
	180, 901,
	182, 901,
	184, 901,
	185, 901,
	186, 901,
	187, 901,
	188, 901,
	189, 901,
	190, 901,
	191, 901,
	192, 901,
	195, 901,
	196, 901,
	197, 901,
	199, 901,
	200, 901,
	202, 901,
	203, 901,
	204, 901,
	205, 901,
	206, 901,
	208, 901,
	209, 901,
	212, 901,
	214, 901,
	215, 901,
	216, 901,
	217, 901,
	218, 901,
	219, 901,
	220, 901,
	221, 901,
	222, 901,
	223, 901,
	224, 901,
	225, 901,
	226, 901,
	227, 901,
	228, 901,
	230, 901,
	231, 901,
	232, 901,
	233, 901,
	234, 901,
	235, 901,
	236, 901,
	238, 901,
	239, 901,
	242, 901,
	243, 901,
	246, 901,
	247, 901,
	248, 901,
	249, 901,
	250, 901,
	251, 901,
	252, 901,
	253, 901,
	254, 901,
	255, 901,
	256, 901,
	257, 901,
	258, 901,
	260, 901,
	261, 901,
	262, 901,
	263, 901,
	264, 901,
	266, 901,
	267, 901,
	268, 901,
	269, 901,
	270, 901,
	271, 901,
	272, 901,
	273, 901,
	275, 901,
	276, 901,
	277, 901,
	278, 901,
	279, 901,
	281, 901,
	282, 901,
	283, 901,
	284, 901,
	285, 901,
	286, 901,
	287, 901,
	289, 901,
	290, 901,
	291, 901,
	292, 901,
	293, 901,
	294, 901,
	295, 901,
	296, 901,
	298, 901,
	299, 901,
	300, 901,
	301, 901,
	302, 901,
	303, 901,
	304, 901,
	306, 901,
	307, 901,
	308, 901,
	309, 901,
	310, 901,
	311, 901,
	312, 901,
	313, 901,
	314, 901,
	315, 901,
	316, 901,
	317, 901,
	318, 901,
	319, 901,
	320, 901,
	321, 901,
	322, 901,
	323, 901,
	324, 901,
	326, 901,
	327, 901,
	328, 901,
	329, 901,
	330, 901,
	331, 901,
	332, 901,
	333, 901,
	334, 901,
	335, 901,
	336, 901,
	337, 901,
	339, 901,
	340, 901,
	342, 901,
	343, 901,
	344, 901,
	345, 901,
	346, 901,
	347, 901,
	348, 901,
	349, 901,
	350, 901,
	351, 901,
	353, 901,
	354, 901,
	355, 901,
	356, 901,
	359, 901,
	360, 901,
	361, 901,
	362, 901,
	363, 901,
	364, 901,
	365, 901,
	367, 901,
	368, 901,
	371, 901,
	372, 901,
	373, 901,
	374, 901,
	375, 901,
	376, 901,
	378, 901,
	379, 901,
	380, 901,
	381, 901,
	382, 901,
	383, 901,
	386, 901,
	387, 901,
	392, 901,
	393, 901,
	394, 901,
	395, 901,
	396, 901,
	397, 901,
	398, 901,
	406, 901,
	411, 901,
	412, 901,
	413, 901,
	420, 901,
	426, 901,
	-2, 0,
	-1, 174,
	1, 57,
	424, 57,
	-2, 892,
	-1, 207,
	422, 1470,
	425, 1470,
	-2, 589,
	-1, 208,
	422, 1472,
	425, 1472,
	-2, 590,
	-1, 209,
	422, 1471,
	425, 1471,
	-2, 591,
	-1, 210,
	425, 1412,
	-2, 592,
	-1, 616,
	142, 1585,
	357, 1585,
	403, 1585,
	422, 1585,
	-2, 0,
	-1, 617,
	142, 1508,
	357, 1508,
	403, 1508,
	422, 1508,
	-2, 0,
	-1, 619,
	142, 1659,
	357, 1659,
	403, 1659,
	422, 1659,
	-2, 0,
	-1, 621,
	142, 1688,
	357, 1688,
	403, 1688,
	422, 1688,
	-2, 0,
	-1, 628,
	142, 1591,
	357, 1591,
	403, 1591,
	422, 1591,
	-2, 420,
	-1, 663,
	1, 518,
	419, 518,
	421, 518,
	423, 518,
	424, 518,
	-2, 0,
	-1, 664,
	1, 588,
	139, 588,
	419, 588,
	421, 588,
	423, 588,
	424, 588,
	-2, 0,
	-1, 670,
	1, 532,
	419, 532,
	421, 532,
	423, 532,
	424, 532,
	-2, 0,
	-1, 672,
	1, 536,
	419, 536,
	421, 536,
	423, 536,
	424, 536,
	-2, 0,
	-1, 675,
	1, 547,
	419, 547,
	421, 547,
	423, 547,
	424, 547,
	-2, 0,
	-1, 676,
	1, 553,
	419, 553,
	421, 553,
	423, 553,
	424, 553,
	-2, 0,
	-1, 677,
	1, 556,
	419, 556,
	421, 556,
	423, 556,
	424, 556,
	-2, 0,
	-1, 681,
	1, 570,
	419, 570,
	421, 570,
	423, 570,
	424, 570,
	-2, 0,
	-1, 682,
	1, 572,
	419, 572,
	421, 572,
	423, 572,
	424, 572,
	-2, 0,
	-1, 710,
	127, 905,
	207, 905,
	237, 905,
	-2, 861,
	-1, 718,
	127, 904,
	207, 904,
	237, 904,
	-2, 859,
	-1, 745,
	420, 1763,
	-2, 1184,
	-1, 746,
	420, 1764,
	-2, 1185,
	-1, 775,
	420, 1464,
	-2, 1455,
	-1, 776,
	5, 1040,
	420, 1479,
	-2, 1470,
	-1, 777,
	420, 1480,
	-2, 1471,
	-1, 784,
	5, 1024,
	-2, 1500,
	-1, 785,
	5, 1025,
	-2, 1504,
	-1, 786,
	5, 1026,
	-2, 1503,
	-1, 787,
	5, 1027,
	-2, 1684,
	-1, 788,
	5, 1028,
	-2, 1593,
	-1, 789,
	5, 1029,
	-2, 1652,
	-1, 790,
	5, 1030,
	-2, 1654,
	-1, 791,
	5, 1031,
	-2, 1655,
	-1, 792,
	5, 1032,
	-2, 1656,
	-1, 793,
	5, 1033,
	-2, 1664,
	-1, 794,
	5, 1034,
	-2, 1696,
	-1, 795,
	5, 1035,
	-2, 1562,
	-1, 796,
	5, 1036,
	-2, 1499,
	-1, 797,
	5, 1037,
	-2, 1601,
	-1, 798,
	5, 1038,
	-2, 1602,
	-1, 799,
	5, 1039,
	-2, 1566,
	-1, 800,
	5, 1088,
	420, 1088,
	-2, 1730,
	-1, 820,
	5, 1061,
	-2, 1501,
	-1, 821,
	5, 1079,
	-2, 1528,
	-1, 823,
	5, 1053,
	-2, 1549,
	-1, 824,
	5, 1054,
	-2, 1550,
	-1, 825,
	5, 1045,
	-2, 1565,
	-1, 826,
	5, 1046,
	-2, 1567,
	-1, 827,
	5, 1047,
	-2, 1568,
	-1, 828,
	5, 1048,
	-2, 1569,
	-1, 829,
	5, 1012,
	-2, 1575,
	-1, 830,
	5, 1013,
	-2, 1576,
	-1, 831,
	5, 1076,
	-2, 1674,
	-1, 832,
	5, 1086,
	-2, 1686,
	-1, 833,
	5, 1051,
	-2, 1710,
	-1, 834,
	5, 1078,
	-2, 1711,
	-1, 835,
	5, 1060,
	-2, 1712,
	-1, 836,
	5, 1078,
	-2, 1713,
	-1, 837,
	5, 1078,
	-2, 1714,
	-1, 838,
	5, 1043,
	-2, 1717,
	-1, 839,
	5, 1043,
	-2, 1718,
	-1, 842,
	5, 1068,
	-2, 1722,
	-1, 844,
	5, 1044,
	-2, 1728,
	-1, 845,
	5, 1049,
	-2, 1729,
	-1, 847,
	5, 1043,
	-2, 1734,
	-1, 850,
	5, 1052,
	-2, 1739,
	-1, 851,
	5, 1050,
	-2, 1741,
	-1, 853,
	5, 1080,
	-2, 1743,
	-1, 854,
	5, 1082,
	-2, 1744,
	-1, 855,
	5, 1084,
	-2, 1745,
	-1, 858,
	5, 1075,
	-2, 1749,
	-1, 928,
	420, 1479,
	-2, 1470,
	-1, 945,
	281, 1452,
	413, 1452,
	-2, 1451,
	-1, 1094,
	256, 890,
	-2, 715,
	-1, 1103,
	240, 1474,
	-2, 0,
	-1, 1146,
	1, 287,
	419, 287,
	421, 287,
	423, 287,
	424, 287,
	-2, 864,
	-1, 1149,
	4, 1748,
	10, 1748,
	11, 1748,
	13, 1748,
	14, 1748,
	15, 1748,
	16, 1748,
	17, 1748,
	18, 1748,
	20, 1748,
	21, 1748,
	22, 1748,
	23, 1748,
	25, 1748,
	28, 1748,
	30, 1748,
	32, 1748,
	35, 1748,
	36, 1748,
	37, 1748,
	38, 1748,
	39, 1748,
	40, 1748,
	41, 1748,
	42, 1748,
	43, 1748,
	44, 1748,
	46, 1748,
	47, 1748,
	48, 1748,
	49, 1748,
	50, 1748,
	51, 1748,
	54, 1748,
	55, 1748,
	56, 1748,
	58, 1748,
	59, 1748,
	60, 1748,
	63, 1748,
	64, 1748,
	65, 1748,
	66, 1748,
	67, 1748,
	68, 1748,
	69, 1748,
	70, 1748,
	71, 1748,
	72, 1748,
	74, 1748,
	75, 1748,
	76, 1748,
	77, 1748,
	79, 1748,
	80, 1748,
	81, 1748,
	82, 1748,
	90, 1748,
	91, 1748,
	92, 1748,
	93, 1748,
	94, 1748,
	95, 1748,
	96, 1748,
	97, 1748,
	99, 1748,
	101, 1748,
	103, 1748,
	106, 1748,
	107, 1748,
	109, 1748,
	110, 1748,
	114, 1748,
	115, 1748,
	116, 1748,
	117, 1748,
	118, 1748,
	119, 1748,
	120, 1748,
	121, 1748,
	122, 1748,
	123, 1748,
	124, 1748,
	128, 1748,
	129, 1748,
	130, 1748,
	131, 1748,
	132, 1748,
	133, 1748,
	134, 1748,
	135, 1748,
	136, 1748,
	137, 1748,
	138, 1748,
	140, 1748,
	143, 1748,
	144, 1748,
	146, 1748,
	147, 1748,
	149, 1748,
	151, 1748,
	152, 1748,
	153, 1748,
	154, 1748,
	155, 1748,
	156, 1748,
	157, 1748,
	158, 1748,
	159, 1748,
	160, 1748,
	161, 1748,
	162, 1748,
	163, 1748,
	164, 1748,
	165, 1748,
	166, 1748,
	168, 1748,
	169, 1748,
	170, 1748,
	172, 1748,
	173, 1748,
	174, 1748,
	175, 1748,
	176, 1748,
	177, 1748,
	178, 1748,
	179, 1748,
	180, 1748,
	182, 1748,
	184, 1748,
	185, 1748,
	186, 1748,
	187, 1748,
	188, 1748,
	189, 1748,
	190, 1748,
	191, 1748,
	192, 1748,
	193, 1748,
	194, 1748,
	195, 1748,
	196, 1748,
	197, 1748,
	199, 1748,
	200, 1748,
	202, 1748,
	203, 1748,
	204, 1748,
	205, 1748,
	206, 1748,
	208, 1748,
	209, 1748,
	212, 1748,
	213, 1748,
	214, 1748,
	217, 1748,
	218, 1748,
	219, 1748,
	220, 1748,
	221, 1748,
	222, 1748,
	223, 1748,
	224, 1748,
	225, 1748,
	226, 1748,
	227, 1748,
	230, 1748,
	232, 1748,
	233, 1748,
	234, 1748,
	235, 1748,
	236, 1748,
	238, 1748,
	239, 1748,
	242, 1748,
	243, 1748,
	244, 1748,
	246, 1748,
	247, 1748,
	249, 1748,
	251, 1748,
	252, 1748,
	253, 1748,
	254, 1748,
	255, 1748,
	256, 1748,
	257, 1748,
	258, 1748,
	260, 1748,
	261, 1748,
	262, 1748,
	263, 1748,
	264, 1748,
	266, 1748,
	267, 1748,
	268, 1748,
	269, 1748,
	270, 1748,
	271, 1748,
	272, 1748,
	273, 1748,
	275, 1748,
	276, 1748,
	277, 1748,
	278, 1748,
	279, 1748,
	280, 1748,
	281, 1748,
	282, 1748,
	283, 1748,
	284, 1748,
	285, 1748,
	286, 1748,
	287, 1748,
	289, 1748,
	290, 1748,
	291, 1748,
	292, 1748,
	293, 1748,
	294, 1748,
	295, 1748,
	296, 1748,
	297, 1748,
	298, 1748,
	299, 1748,
	300, 1748,
	301, 1748,
	302, 1748,
	303, 1748,
	304, 1748,
	306, 1748,
	307, 1748,
	308, 1748,
	309, 1748,
	310, 1748,
	311, 1748,
	312, 1748,
	313, 1748,
	314, 1748,
	316, 1748,
	317, 1748,
	318, 1748,
	319, 1748,
	320, 1748,
	321, 1748,
	322, 1748,
	323, 1748,
	324, 1748,
	326, 1748,
	327, 1748,
	328, 1748,
	329, 1748,
	330, 1748,
	331, 1748,
	332, 1748,
	333, 1748,
	334, 1748,
	335, 1748,
	336, 1748,
	337, 1748,
	339, 1748,
	340, 1748,
	342, 1748,
	343, 1748,
	344, 1748,
	345, 1748,
	346, 1748,
	347, 1748,
	348, 1748,
	349, 1748,
	350, 1748,
	351, 1748,
	353, 1748,
	354, 1748,
	355, 1748,
	356, 1748,
	359, 1748,
	360, 1748,
	361, 1748,
	362, 1748,
	364, 1748,
	365, 1748,
	367, 1748,
	368, 1748,
	371, 1748,
	372, 1748,
	373, 1748,
	374, 1748,
	376, 1748,
	378, 1748,
	379, 1748,
	380, 1748,
	381, 1748,
	382, 1748,
	383, 1748,
	386, 1748,
	387, 1748,
	392, 1748,
	393, 1748,
	394, 1748,
	395, 1748,
	396, 1748,
	397, 1748,
	398, 1748,
	399, 1748,
	401, 1748,
	402, 1748,
	403, 1748,
	404, 1748,
	405, 1748,
	406, 1748,
	408, 1748,
	409, 1748,
	410, 1748,
	411, 1748,
	412, 1748,
	413, 1748,
	414, 1748,
	415, 1748,
	416, 1748,
	418, 1748,
	421, 1748,
	422, 1748,
	425, 1748,
	426, 1748,
	-2, 0,
	-1, 1167,
	142, 1659,
	357, 1659,
	403, 1659,
	422, 1659,
	-2, 0,
	-1, 1197,
	142, 1688,
	357, 1688,
	403, 1688,
	422, 1688,
	-2, 0,
	-1, 1198,
	187, 800,
	266, 800,
	270, 800,
	-2, 407,
	-1, 1275,
	127, 904,
	207, 904,
	237, 904,
	-2, 862,
	-1, 1359,
	113, 866,
	127, 866,
	181, 866,
	207, 866,
	237, 866,
	245, 866,
	369, 866,
	-2, 1227,
	-1, 1409,
	421, 1347,
	-2, 0,
	-1, 1417,
	187, 800,
	266, 800,
	270, 800,
	-2, 795,
	-1, 1446,
	421, 1347,
	-2, 0,
	-1, 1454,
	113, 866,
	127, 866,
	181, 866,
	207, 866,
	237, 866,
	245, 866,
	369, 866,
	-2, 971,
	-1, 1655,
	187, 800,
	266, 800,
	270, 800,
	-2, 409,
	-1, 1763,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1123,
	-1, 1764,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1124,
	-1, 1765,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1125,
	-1, 1766,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1126,
	-1, 1767,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1127,
	-1, 1768,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1128,
	-1, 1769,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1129,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1130,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1142,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1143,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	401, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1144,
	-1, 1787,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1149,
	-1, 1793,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1151,
	-1, 1795,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1155,
	-1, 1796,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1156,
	-1, 1797,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1157,
	-1, 1798,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1158,
	-1, 1879,
	5, 1040,
	142, 1358,
	420, 1479,
	-2, 1470,
	-1, 1880,
	142, 1359,
	-2, 1706,
	-1, 1881,
	142, 1360,
	-2, 1589,
	-1, 1882,
	142, 1361,
	-2, 1529,
	-1, 1883,
	142, 1362,
	-2, 1557,
	-1, 1884,
	142, 1363,
	-2, 1588,
	-1, 1885,
	142, 1364,
	-2, 1651,
	-1, 1953,
	421, 1347,
	-2, 0,
	-1, 1963,
	1, 972,
	79, 972,
	113, 972,
	127, 972,
	143, 972,
	148, 972,
	150, 972,
	172, 972,
	181, 972,
	190, 972,
	203, 972,
	207, 972,
	223, 972,
	237, 972,
	240, 972,
	245, 972,
	288, 972,
	290, 972,
	369, 972,
	377, 972,
	389, 972,
	390, 972,
	400, 972,
	419, 972,
	421, 972,
	423, 972,
	424, 972,
	425, 972,
	-2, 971,
	-1, 1965,
	420, 1456,
	-2, 1468,
	-1, 2047,
	421, 1417,
	425, 1417,
	-2, 1444,
	-1, 2169,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1150,
	-1, 2170,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1152,
	-1, 2175,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1153,
	-1, 2404,
	256, 890,
	-2, 715,
	-1, 2469,
	187, 800,
	266, 800,
	270, 800,
	-2, 406,
	-1, 2484,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1154,
	-1, 2489,
	185, 0,
	186, 0,
	230, 0,
	-2, 1172,
	-1, 2550,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1202,
	-1, 2551,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1203,
	-1, 2552,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1204,
	-1, 2556,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1208,
	-1, 2557,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1209,
	-1, 2558,
	13, 0,
	14, 0,
	15, 0,
	401, 0,
	402, 0,
	403, 0,
	-2, 1210,
	-1, 2597,
	420, 1457,
	-2, 1469,
	-1, 2711,
	185, 0,
	186, 0,
	230, 0,
	-2, 1173,
	-1, 2714,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1176,
	-1, 2715,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1178,
	-1, 2859,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1177,
	-1, 2860,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1179,
	-1, 2870,
	185, 0,
	-2, 1211,
	-1, 2959,
	185, 0,
	-2, 1212,
	-1, 3057,
	38, 0,
	160, 0,
	206, 0,
	320, 0,
	398, 0,
	406, 0,
	-2, 1709,
}

const sqlPrivate = 57344

const sqlLast = 59383

var sqlAct = [...]int{

	777, 1824, 2812, 3056, 3065, 2073, 3119, 2646, 2898, 3032,
	3033, 3035, 3066, 3019, 3067, 2081, 2963, 2101, 2887, 2520,
	2827, 3055, 2664, 1750, 2203, 1136, 2850, 774, 773, 1078,
	949, 2606, 2419, 1810, 2163, 2659, 2767, 2205, 719, 1052,
	1278, 209, 2782, 2669, 753, 2874, 494, 2607, 2441, 2411,
	2049, 2443, 2312, 494, 2424, 2413, 2070, 2045, 1585, 964,
	494, 1444, 2082, 494, 1586, 489, 494, 209, 1168, 494,
	494, 2288, 1537, 1100, 2270, 1425, 494, 2030, 2745, 1545,
	2299, 1536, 1957, 1132, 494, 1542, 1533, 2048, 1958, 2573,
	958, 1741, 1139, 2269, 1483, 1977, 1364, 543, 942, 1367,
	1947, 2964, 1453, 727, 130, 1822, 1736, 1850, 2159, 2423,
	540, 1505, 1417, 2387, 2608, 1462, 1499, 1534, 1968, 73,
	2004, 1832, 1807, 1426, 2005, 1464, 760, 1200, 2031, 1395,
	1397, 1960, 769, 951, 1147, 1129, 1916, 578, 1680, 1844,
	913, 1119, 2075, 491, 2046, 918, 210, 211, 606, 2052,
	1435, 1823, 1924, 1939, 136, 1875, 1354, 895, 2813, 1277,
	1558, 137, 626, 205, 130, 1279, 494, 494, 768, 1679,
	581, 620, 1116, 1552, 893, 718, 1056, 1475, 490, 655,
	1416, 1283, 2589, 2190, 474, 2590, 1560, 2074, 3146, 3140,
	3139, 537, 1933, 1933, 1933, 1522, 1560, 591, 494, 494,
	494, 954, 494, 494, 967, 967, 599, 2102, 1560, 1445,
	474, 3116, 723, 494, 494, 2781, 2032, 3113, 723, 477,
	2482, 1514, 571, 2430, 564, 28, 1508, 3091, 3085, 1933,
	593, 2781, 1933, 40, 3084, 3081, 3078, 2459, 1933, 3082,
	3079, 1572, 3075, 2104, 3053, 477, 1514, 44, 1514, 3052,
	3051, 3050, 3014, 1514, 1572, 1572, 2112, 3001, 724, 2431,
	2994, 1514, 1294, 1295, 2781, 945, 2992, 3015, 2990, 2961,
	2781, 2329, 2781, 2112, 2947, 570, 2944, 1514, 130, 733,
	2685, 737, 2032, 2400, 2934, 711, 961, 1297, 2781, 899,
	2929, 900, 710, 947, 1514, 1077, 1572, 896, 896, 2927,
	775, 2917, 2916, 2781, 572, 1514, 1514, 2576, 1514, 2196,
	2576, 743, 1296, 59, 574, 2197, 2909, 2908, 60, 728,
	1514, 2781, 2880, 2861, 1925, 2807, 1514, 2112, 146, 1933,
	2803, 2780, 1926, 39, 1933, 2781, 2242, 2243, 935, 939,
	944, 897, 2713, 2683, 40, 141, 2112, 2676, 2675, 2585,
	2579, 63, 2676, 2586, 1933, 1847, 474, 2498, 44, 1058,
	1057, 1514, 1183, 2493, 2449, 2285, 766, 1933, 2392, 1933,
	1294, 1295, 46, 143, 2237, 2236, 2230, 2229, 1933, 1933,
	2231, 1933, 1658, 2130, 45, 2685, 51, 1933, 2020, 1302,
	2111, 477, 1933, 2098, 2112, 1297, 2041, 1933, 2204, 28,
	1514, 2078, 1294, 1295, 1932, 1172, 1576, 52, 1933, 1059,
	1577, 54, 1966, 1848, 2392, 58, 1324, 1325, 1326, 144,
	1296, 1561, 2162, 2141, 59, 72, 1513, 1297, 1316, 60,
	61, 1561, 1421, 1827, 1055, 174, 2432, 1166, 1165, 1164,
	1163, 1162, 1161, 1561, 1160, 1159, 1158, 1157, 1156, 1155,
	1076, 1154, 1296, 62, 64, 2433, 2242, 2243, 1153, 2260,
	2261, 2262, 63, 2248, 1152, 1317, 1151, 1150, 901, 171,
	1677, 1365, 898, 1173, 922, 717, 716, 1849, 1846, 715,
	714, 139, 66, 1071, 67, 713, 709, 708, 1319, 1320,
	1321, 1322, 707, 706, 705, 704, 703, 1302, 702, 701,
	700, 699, 171, 494, 494, 173, 494, 954, 954, 494,
	2475, 695, 494, 573, 2257, 494, 110, 694, 3072, 693,
	1173, 494, 653, 652, 1324, 1325, 1326, 651, 650, 1302,
	649, 494, 494, 494, 494, 494, 954, 954, 173, 2258,
	914, 648, 2430, 954, 647, 646, 172, 1065, 645, 1318,
	571, 644, 643, 642, 641, 819, 1324, 1325, 1326, 640,
	1568, 40, 1140, 639, 1851, 64, 1514, 638, 3054, 637,
	1559, 1093, 65, 1317, 494, 44, 636, 635, 634, 172,
	1865, 633, 1720, 2248, 138, 632, 631, 494, 165, 2242,
	2243, 75, 139, 66, 630, 67, 166, 68, 171, 1094,
	1097, 145, 1105, 570, 1090, 1317, 69, 2264, 171, 494,
	615, 614, 613, 171, 612, 1925, 611, 138, 610, 528,
	494, 527, 500, 2259, 83, 1133, 499, 110, 2242, 2243,
	498, 2263, 572, 480, 173, 479, 142, 478, 1070, 195,
	1323, 59, 574, 2760, 173, 1173, 60, 2257, 194, 173,
	193, 192, 191, 190, 189, 188, 1845, 1318, 187, 2258,
	954, 1118, 724, 1298, 1299, 1300, 1301, 1303, 1304, 186,
	1294, 1295, 115, 1123, 1126, 172, 1148, 185, 184, 63,
	2117, 183, 140, 1956, 165, 172, 182, 181, 180, 1318,
	172, 179, 166, 178, 165, 1297, 177, 494, 176, 165,
	175, 2718, 166, 2677, 2594, 2325, 2202, 166, 1064, 726,
	1069, 2192, 1075, 138, 2151, 1863, 2248, 2042, 2242, 2243,
	1296, 2035, 1452, 2077, 1861, 1859, 1857, 1683, 138, 916,
	3037, 4, 1461, 1371, 1198, 2251, 2252, 2244, 2245, 2246,
	2247, 2249, 2250, 2259, 1290, 2835, 1214, 1080, 1275, 1276,
	1061, 3026, 1222, 1362, 2954, 2248, 2950, 2242, 2243, 2930,
	2260, 2261, 2262, 1208, 2897, 2848, 2744, 1212, 1307, 1305,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 2743, 2737, 2948,
	2730, 1818, 64, 2729, 2728, 2724, 171, 2723, 2722, 2721,
	2696, 1195, 2258, 2694, 2593, 2570, 2569, 1302, 2568, 2506,
	1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 139,
	66, 2395, 67, 909, 1176, 2257, 2391, 2324, 2315, 2281,
	2268, 1181, 173, 2241, 1324, 1325, 1326, 2238, 2235, 2234,
	171, 2258, 2232, 2210, 2209, 2191, 1215, 1274, 2147, 1963,
	1290, 573, 1375, 171, 110, 2248, 1289, 2254, 2255, 2256,
	171, 1368, 1582, 1357, 2253, 2251, 2252, 2244, 2245, 2246,
	2247, 2249, 2250, 172, 3144, 3127, 173, 3126, 1079, 1294,
	1295, 724, 165, 1317, 1678, 2006, 2259, 2522, 3045, 173,
	166, 3040, 711, 2158, 2248, 2305, 173, 2996, 2987, 710,
	494, 1519, 1517, 2986, 1297, 494, 2982, 2981, 2242, 2243,
	2975, 138, 2972, 1286, 1287, 2946, 1819, 172, 2945, 1291,
	1432, 1812, 2893, 1294, 1295, 2259, 165, 2872, 2822, 1296,
	172, 2817, 494, 2815, 166, 2834, 1423, 172, 2802, 165,
	2786, 2742, 2263, 2686, 2662, 2653, 165, 166, 1297, 2652,
	2650, 2627, 2626, 2616, 166, 138, 2615, 2581, 2488, 2455,
	2453, 2376, 2360, 2339, 2338, 2284, 2219, 1318, 138, 2218,
	2258, 2215, 1457, 1296, 1393, 138, 1950, 1396, 1358, 2184,
	1399, 1398, 1403, 2119, 1953, 1944, 1931, 1855, 1406, 1429,
	1430, 1528, 1383, 1382, 1381, 1294, 1295, 2253, 2251, 2252,
	2244, 2245, 2246, 2247, 2249, 2250, 1302, 1380, 2114, 1864,
	1379, 1446, 1424, 1668, 1667, 1415, 1677, 1674, 1414, 1442,
	1297, 1409, 171, 1408, 1407, 1405, 130, 1404, 1401, 1451,
	1400, 1391, 1390, 1443, 1389, 2248, 896, 1388, 2252, 2244,
	2245, 2246, 2247, 2249, 2250, 1296, 1387, 1386, 1420, 724,
	1302, 1385, 1384, 1372, 2259, 1357, 1194, 1178, 173, 1144,
	2966, 2847, 2716, 2693, 2588, 954, 494, 2584, 2195, 1945,
	1482, 1418, 967, 1361, 2339, 1455, 2242, 2243, 1368, 1422,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 2451, 1458, 1355,
	494, 967, 494, 494, 2414, 2840, 2242, 2243, 2688, 172,
	209, 1211, 2687, 2591, 1470, 2032, 1476, 1671, 165, 1677,
	1452, 2258, 1677, 1412, 494, 494, 166, 2129, 1189, 1413,
	1410, 494, 2923, 494, 1529, 494, 1411, 1272, 1677, 494,
	1506, 2246, 2247, 2249, 2250, 2380, 2375, 138, 2371, 2625,
	1541, 860, 2359, 2276, 1862, 2275, 910, 2274, 2008, 1501,
	2242, 2243, 2273, 1860, 1858, 1856, 1575, 1511, 2254, 2255,
	2256, 2168, 2951, 2128, 1651, 2253, 2251, 2252, 2244, 2245,
	2246, 2247, 2249, 2250, 1207, 1377, 891, 1664, 494, 954,
	965, 1053, 209, 494, 494, 2949, 2102, 1538, 1549, 2461,
	954, 1611, 2896, 209, 494, 2259, 2370, 494, 494, 1495,
	1547, 2875, 2074, 494, 1583, 3073, 1653, 1386, 1386, 474,
	892, 2524, 1058, 1057, 1833, 1641, 1265, 1394, 1672, 1525,
	3083, 3080, 2426, 2248, 2602, 967, 922, 3029, 2200, 2660,
	922, 1219, 2105, 536, 507, 494, 200, 3000, 3107, 3106,
	494, 908, 1512, 474, 477, 209, 494, 2471, 494, 2794,
	494, 1263, 494, 2131, 494, 1251, 1250, 3074, 887, 885,
	1556, 1118, 3143, 1532, 494, 2922, 494, 1374, 2921, 2181,
	883, 1578, 881, 2919, 494, 494, 494, 2248, 477, 2918,
	1298, 1299, 1300, 1301, 1303, 1304, 1705, 1645, 1477, 2640,
	2179, 2635, 1447, 1551, 1563, 1264, 914, 1565, 1554, 2258,
	1567, 2634, 2599, 494, 1570, 2598, 1847, 967, 722, 2244,
	2245, 2246, 2247, 2249, 2250, 1474, 1209, 535, 506, 2214,
	1655, 1591, 2213, 1979, 2212, 474, 1300, 1301, 1303, 1304,
	1723, 1665, 2211, 767, 2811, 878, 474, 1478, 1479, 2171,
	1970, 1093, 1676, 2103, 2060, 1579, 1911, 1970, 1712, 1195,
	1673, 2630, 2025, 2019, 1581, 2015, 1642, 1996, 1969, 1794,
	477, 1419, 1210, 1054, 1848, 1652, 1910, 1909, 1217, 1742,
	1749, 477, 2452, 196, 1714, 1362, 721, 517, 1580, 1908,
	2999, 1752, 967, 2259, 1837, 2176, 1669, 2071, 474, 1643,
	1681, 2953, 2474, 1527, 1082, 2115, 2177, 1687, 2029, 1718,
	2182, 1304, 1458, 1873, 697, 587, 1685, 1982, 1696, 2645,
	2040, 1989, 1878, 1878, 604, 1809, 1889, 1891, 1249, 1896,
	1678, 1675, 2900, 477, 1690, 605, 1717, 1919, 1849, 1846,
	494, 605, 494, 1185, 3048, 1988, 1923, 1591, 1591, 1555,
	723, 2618, 1246, 1851, 1719, 1293, 1721, 2516, 711, 518,
	3098, 711, 711, 1809, 1722, 1732, 967, 2421, 1733, 1734,
	3129, 3011, 494, 201, 494, 1740, 1560, 1193, 201, 2367,
	685, 494, 967, 2472, 1816, 2362, 494, 1472, 1830, 1814,
	1494, 1448, 2250, 1480, 494, 916, 2978, 724, 3012, 1247,
	732, 1188, 494, 724, 2253, 2251, 2252, 2244, 2245, 2246,
	2247, 2249, 2250, 2379, 494, 1874, 1262, 954, 1833, 3106,
	1294, 1295, 2012, 1678, 2006, 1851, 1678, 2006, 494, 967,
	1820, 501, 1271, 1186, 494, 494, 1971, 3097, 2178, 1225,
	1828, 1981, 1678, 2006, 1851, 1297, 2180, 1392, 202, 494,
	2160, 2161, 494, 202, 2636, 2062, 1962, 1497, 2016, 2470,
	1472, 2244, 2245, 2246, 2247, 2249, 2250, 1946, 686, 1999,
	1296, 1954, 1955, 896, 720, 1434, 494, 1886, 494, 945,
	494, 1907, 534, 494, 1731, 494, 2856, 494, 1920, 494,
	494, 2866, 494, 954, 954, 954, 724, 1998, 954, 1921,
	1975, 511, 1929, 1930, 494, 1983, 1985, 2925, 1937, 2017,
	1716, 2026, 2013, 1941, 1942, 1352, 1218, 1845, 1951, 2096,
	2097, 511, 1455, 889, 504, 1656, 888, 879, 1898, 2027,
	2007, 2009, 2010, 2011, 1991, 1974, 204, 1591, 879, 1438,
	880, 204, 1997, 529, 504, 2628, 1980, 1302, 1805, 1998,
	203, 1791, 1967, 1704, 2014, 203, 1826, 533, 520, 519,
	2619, 3096, 1940, 1975, 1465, 494, 3122, 1466, 1441, 1803,
	1465, 2513, 2092, 1466, 1324, 1325, 1326, 474, 3069, 2120,
	1058, 2033, 2094, 1081, 1817, 2095, 1436, 199, 2217, 1961,
	2085, 2901, 199, 510, 2463, 1361, 2422, 1199, 687, 1439,
	130, 1259, 2107, 879, 967, 3130, 494, 2099, 130, 2087,
	1899, 1561, 477, 510, 494, 723, 494, 2080, 1975, 1437,
	1993, 1498, 197, 1317, 2089, 2093, 2090, 197, 2091, 2173,
	1204, 1148, 2100, 534, 2698, 2514, 2301, 494, 494, 494,
	1903, 494, 2689, 2124, 2421, 2125, 2022, 2059, 2106, 1467,
	1689, 2116, 1434, 698, 586, 1467, 200, 922, 2778, 2118,
	494, 200, 1469, 2037, 1799, 2039, 198, 1808, 1469, 2466,
	1292, 198, 1800, 1789, 1792, 1801, 1399, 922, 1406, 1806,
	1260, 536, 1187, 2775, 2351, 1815, 1440, 1396, 1184, 3070,
	2121, 688, 1192, 2852, 2134, 2705, 531, 2076, 3068, 2076,
	507, 1233, 2123, 3105, 1226, 2132, 2136, 1318, 533, 1205,
	1204, 1471, 3103, 1206, 2826, 505, 1438, 1471, 2350, 1788,
	507, 2153, 1851, 914, 2776, 2824, 130, 2068, 2066, 689,
	130, 532, 1531, 2148, 2187, 505, 2137, 2150, 503, 2353,
	3120, 1362, 1282, 914, 1261, 1441, 2174, 494, 2135, 1431,
	502, 1227, 1182, 2740, 1224, 2559, 3071, 2465, 503, 1171,
	2355, 2207, 2208, 1436, 1281, 535, 497, 2857, 2384, 1510,
	502, 2462, 2157, 2300, 1352, 530, 1439, 2911, 3135, 512,
	2388, 2155, 1204, 1465, 506, 2910, 1466, 2851, 2891, 1205,
	2790, 2969, 2601, 1206, 508, 2335, 1437, 1472, 1438, 512,
	2354, 3121, 2331, 1472, 506, 2069, 2793, 1802, 2067, 2145,
	1550, 2146, 1540, 2792, 508, 1804, 1539, 1535, 1530, 1305,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 1441, 1728, 2357,
	2512, 3123, 536, 1790, 2172, 1919, 1919, 1919, 1663, 1169,
	2283, 2313, 3020, 2464, 1280, 1938, 1709, 531, 967, 526,
	2286, 1281, 724, 2295, 2771, 2293, 2294, 2772, 1439, 1659,
	2665, 1205, 2828, 1440, 494, 1206, 2892, 494, 1467, 2341,
	2340, 521, 2166, 2199, 1282, 494, 494, 967, 2853, 2560,
	494, 1469, 532, 2302, 2741, 1686, 2561, 1935, 494, 494,
	494, 2774, 1934, 2044, 494, 2043, 2000, 494, 597, 1661,
	2777, 721, 590, 2647, 494, 494, 494, 494, 494, 1115,
	2322, 3134, 916, 1113, 1662, 576, 535, 494, 2393, 1729,
	2789, 1104, 1468, 3, 494, 1103, 530, 2314, 1468, 3110,
	1471, 1280, 916, 569, 36, 2814, 494, 954, 2383, 1234,
	494, 2746, 2193, 2791, 2332, 1440, 967, 2574, 1515, 2309,
	494, 1854, 2304, 2823, 568, 35, 967, 2318, 2319, 3112,
	2336, 2307, 2871, 967, 2739, 2310, 2889, 1523, 2308, 2287,
	2278, 2279, 2280, 567, 32, 494, 2644, 494, 1170, 494,
	2271, 954, 494, 954, 954, 954, 2323, 494, 2487, 494,
	2361, 2440, 1216, 494, 685, 761, 2773, 2890, 494, 1269,
	494, 1093, 2233, 2328, 1256, 877, 2389, 494, 1975, 1899,
	1899, 2321, 2326, 2183, 732, 2122, 1472, 1254, 2342, 2024,
	2345, 2001, 2002, 494, 494, 2316, 954, 2356, 1591, 2369,
	2372, 2417, 2416, 2428, 2368, 1995, 475, 1521, 2272, 1903,
	1903, 492, 1463, 494, 1244, 1470, 2377, 1093, 513, 2364,
	2363, 2366, 2373, 2365, 1270, 539, 2397, 1179, 582, 2457,
	2394, 539, 475, 2378, 582, 602, 1703, 2149, 566, 79,
	1470, 609, 494, 2401, 2144, 2403, 2404, 2405, 2390, 629,
	2402, 2126, 686, 2415, 595, 596, 1242, 494, 588, 589,
	1114, 1240, 565, 78, 1112, 1238, 575, 2450, 933, 1506,
	1706, 1684, 1899, 1899, 1899, 1506, 1693, 522, 36, 1644,
	562, 23, 2425, 967, 563, 24, 2434, 724, 2448, 561,
	30, 2425, 1378, 967, 1853, 560, 21, 3064, 1502, 35,
	2642, 2427, 1903, 1903, 1903, 1509, 2456, 2358, 494, 1268,
	1236, 1468, 558, 20, 1255, 3017, 2764, 922, 32, 882,
	884, 2508, 2509, 2510, 523, 922, 922, 1253, 2623, 922,
	2621, 539, 539, 2490, 2469, 1591, 2374, 1230, 2337, 929,
	2435, 2436, 2437, 130, 2438, 2439, 2343, 2525, 2347, 2348,
	2476, 559, 19, 1751, 1243, 2478, 2600, 2467, 2468, 2480,
	524, 2410, 525, 492, 492, 492, 2408, 959, 492, 1111,
	2473, 2072, 2398, 1702, 2571, 2064, 1742, 2528, 475, 1060,
	2406, 2063, 687, 914, 548, 15, 2494, 2500, 2061, 2446,
	2058, 914, 914, 1574, 1527, 914, 1241, 1742, 2539, 494,
	1610, 1239, 1573, 2527, 1571, 1237, 1569, 1591, 2458, 2521,
	2515, 2517, 2518, 79, 494, 1566, 967, 1564, 2534, 549,
	16, 1562, 2501, 2536, 2538, 557, 57, 1520, 1834, 556,
	56, 1518, 2567, 1507, 2563, 1496, 1472, 78, 1493, 547,
	55, 2595, 1481, 1473, 1591, 1591, 2412, 1089, 2939, 3107,
	1235, 1284, 2633, 2164, 2564, 23, 2575, 2613, 2612, 24,
	905, 2846, 1504, 2845, 30, 1591, 1591, 1682, 2639, 2580,
	21, 2941, 2572, 2577, 2578, 688, 1987, 1229, 130, 2674,
	1503, 2587, 906, 494, 494, 2809, 494, 20, 2028, 1936,
	2643, 494, 555, 12, 2631, 546, 50, 2023, 2127, 967,
	1591, 967, 2596, 1970, 954, 2018, 2637, 1500, 2592, 1110,
	2638, 1994, 2980, 689, 1986, 2641, 1610, 1610, 1965, 2654,
	2783, 494, 2165, 2604, 1228, 2678, 19, 553, 47, 1478,
	1479, 1285, 1649, 1650, 2667, 554, 48, 2956, 545, 49,
	552, 7, 577, 2671, 1899, 1899, 2747, 2670, 551, 6,
	494, 1998, 2003, 967, 494, 494, 967, 494, 2666, 15,
	1294, 1295, 907, 2649, 1990, 494, 2629, 1288, 2021, 2656,
	2648, 2651, 916, 967, 1903, 1903, 2658, 1992, 2668, 2657,
	916, 916, 2447, 2679, 916, 1297, 3016, 2672, 550, 38,
	2820, 1970, 1588, 2680, 16, 2702, 2622, 1975, 2624, 2661,
	57, 2663, 1984, 2079, 56, 2065, 2707, 2690, 2691, 2057,
	1296, 598, 2699, 494, 55, 1922, 1899, 1899, 1899, 1899,
	1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899,
	1899, 1899, 1899, 1899, 1899, 2085, 1899, 2712, 544, 37,
	2703, 1654, 2695, 1584, 2700, 3118, 1903, 1903, 1903, 1903,
	1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903,
	1903, 1903, 1903, 1903, 1903, 3133, 1903, 12, 492, 1088,
	50, 492, 494, 2708, 492, 2242, 2243, 959, 1294, 1295,
	1108, 1365, 967, 494, 2719, 967, 492, 1294, 1295, 494,
	494, 494, 2692, 922, 2139, 2138, 492, 492, 492, 492,
	959, 2738, 47, 2519, 2454, 2139, 1610, 494, 1588, 1588,
	48, 1591, 494, 49, 494, 7, 2140, 494, 494, 494,
	494, 494, 1888, 6, 1221, 494, 494, 954, 1296, 1220,
	922, 967, 2754, 2613, 2612, 954, 2752, 2787, 1843, 629,
	2142, 2763, 2784, 494, 494, 2697, 2749, 2750, 1258, 2511,
	922, 1257, 492, 1375, 1373, 2684, 2838, 954, 2682, 914,
	2810, 1267, 922, 38, 2821, 2757, 922, 494, 2613, 2612,
	1266, 922, 2816, 2753, 1190, 1252, 494, 494, 954, 954,
	2613, 2612, 2755, 1248, 2825, 629, 2758, 2830, 1245, 1231,
	1191, 1093, 2832, 1657, 890, 696, 2614, 2899, 2804, 3028,
	2979, 2819, 2855, 2761, 683, 1975, 2417, 2839, 2349, 967,
	1692, 2829, 1232, 37, 1694, 2831, 2632, 2306, 1943, 2806,
	3010, 2837, 922, 2725, 2805, 2842, 2795, 2841, 2632, 2216,
	2962, 2808, 2632, 2858, 2800, 2864, 2865, 2632, 481, 2877,
	1852, 1376, 53, 2609, 756, 2765, 2603, 2051, 2050, 494,
	970, 967, 1666, 778, 1877, 494, 1743, 494, 1975, 967,
	494, 780, 492, 1589, 783, 782, 781, 2751, 494, 1590,
	2843, 2844, 1402, 779, 967, 1587, 1145, 2083, 2907, 673,
	1670, 2425, 2886, 1813, 1831, 2878, 2879, 2198, 914, 1369,
	748, 2873, 1829, 1177, 2920, 747, 2311, 2904, 1588, 2613,
	2612, 2420, 2788, 2833, 1727, 2884, 2156, 2903, 1724, 2905,
	2620, 509, 2797, 2798, 2239, 494, 1143, 494, 1904, 2902,
	954, 1897, 1893, 1273, 1353, 494, 2084, 1213, 2429, 2113,
	1735, 2883, 904, 2613, 2612, 2613, 2612, 2926, 2818, 2928,
	2613, 2612, 903, 2882, 2932, 2881, 2924, 967, 916, 2913,
	2937, 902, 3034, 3031, 2854, 1660, 2133, 1346, 752, 2291,
	2396, 2762, 1086, 1345, 2943, 1591, 494, 922, 886, 1975,
	2670, 2938, 494, 2942, 2936, 2971, 1203, 1202, 1201, 2290,
	494, 2334, 3128, 2617, 2292, 2796, 2952, 2297, 2298, 170,
	2836, 2303, 2801, 2417, 2955, 167, 2974, 169, 2968, 168,
	2382, 82, 34, 33, 109, 108, 922, 107, 106, 494,
	494, 105, 2967, 2320, 104, 103, 494, 1591, 102, 101,
	100, 2960, 2977, 99, 482, 483, 2991, 954, 2993, 98,
	97, 96, 494, 914, 95, 2985, 954, 954, 94, 2976,
	494, 922, 494, 93, 494, 92, 2914, 2915, 3013, 91,
	90, 2998, 89, 922, 2965, 609, 88, 2997, 2988, 2995,
	539, 3004, 3005, 494, 3006, 3003, 494, 3023, 87, 494,
	86, 967, 2614, 85, 84, 625, 622, 916, 3038, 3039,
	81, 1450, 80, 3036, 31, 929, 3043, 492, 26, 3041,
	113, 3042, 2386, 3044, 3030, 1591, 114, 3049, 25, 2386,
	77, 3025, 76, 485, 484, 29, 494, 2614, 18, 3047,
	11, 1899, 17, 22, 2613, 2612, 135, 134, 3046, 2614,
	2940, 133, 3062, 2983, 3061, 132, 3063, 1484, 2885, 131,
	14, 494, 13, 128, 3087, 2931, 129, 127, 126, 494,
	3088, 1903, 3089, 730, 1488, 685, 125, 3076, 1899, 486,
	487, 3095, 124, 123, 3092, 494, 10, 8, 3093, 3094,
	112, 9, 2849, 2613, 2612, 732, 2460, 3090, 70, 71,
	3104, 3102, 922, 3101, 27, 43, 42, 41, 1903, 3109,
	3108, 3114, 3115, 3036, 3111, 1485, 111, 161, 3117, 160,
	159, 158, 154, 157, 155, 156, 153, 1610, 122, 731,
	2778, 163, 922, 3125, 3124, 162, 922, 151, 922, 148,
	150, 152, 3132, 922, 149, 3131, 147, 164, 3136, 3137,
	121, 475, 916, 120, 119, 2775, 118, 117, 2768, 3138,
	116, 3141, 3142, 686, 5, 3007, 3145, 3008, 2614, 3147,
	2, 2766, 1, 1899, 0, 1060, 2770, 492, 1526, 2497,
	1489, 0, 0, 2085, 0, 475, 0, 0, 0, 2504,
	0, 3024, 0, 0, 0, 495, 2776, 0, 2632, 1546,
	1546, 0, 2614, 1903, 2614, 0, 492, 0, 492, 2614,
	492, 2984, 0, 0, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2769, 0, 0, 0, 0, 0,
	0, 0, 0, 3002, 0, 0, 208, 0, 0, 0,
	1490, 1491, 0, 0, 922, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 3086, 0, 0, 0,
	0, 0, 208, 629, 1610, 0, 0, 475, 1060, 582,
	0, 0, 0, 0, 0, 1433, 0, 1487, 475, 1060,
	0, 0, 959, 492, 0, 2583, 0, 0, 629, 0,
	0, 0, 0, 687, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2632, 0, 2597, 0, 0, 0, 0, 922, 0, 1588,
	629, 0, 0, 0, 0, 492, 2771, 0, 0, 2772,
	475, 492, 0, 492, 0, 492, 1610, 492, 0, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1707,
	0, 1708, 0, 1492, 0, 0, 0, 0, 0, 492,
	492, 492, 0, 2774, 0, 0, 922, 0, 0, 0,
	0, 0, 2777, 1610, 1610, 0, 0, 0, 0, 1365,
	0, 0, 0, 2614, 729, 0, 688, 541, 629, 0,
	0, 0, 0, 0, 1610, 1610, 955, 571, 0, 968,
	968, 0, 0, 0, 0, 0, 0, 0, 40, 0,
	571, 0, 0, 0, 2290, 0, 735, 0, 0, 0,
	0, 40, 44, 0, 689, 0, 0, 0, 0, 1610,
	0, 0, 2614, 0, 0, 44, 2185, 2186, 920, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	570, 0, 1053, 0, 0, 0, 1588, 0, 0, 0,
	0, 0, 0, 570, 0, 0, 0, 0, 2773, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	0, 0, 0, 0, 488, 0, 0, 0, 59, 574,
	0, 0, 572, 60, 0, 0, 0, 0, 0, 0,
	0, 59, 574, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 1588, 2265,
	2266, 2267, 929, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 539, 0, 539,
	0, 0, 929, 0, 0, 0, 492, 0, 0, 2748,
	0, 1978, 0, 0, 0, 1588, 1588, 0, 0, 492,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 2759, 0, 0, 0, 0, 1588, 1588, 0, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 0, 475,
	2034, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1588, 0, 0, 2047, 0, 0, 1060, 0, 64,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 0,
	1610, 963, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 1978, 0, 539, 0, 492, 139, 66, 492, 67,
	492, 0, 492, 0, 492, 492, 0, 959, 0, 139,
	66, 0, 67, 0, 0, 0, 0, 171, 0, 1978,
	0, 0, 0, 0, 0, 0, 0, 0, 573, 0,
	171, 110, 0, 0, 0, 0, 2108, 0, 0, 0,
	0, 573, 955, 955, 110, 2862, 0, 40, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 173, 0, 0, 0,
	0, 955, 955, 0, 0, 0, 0, 0, 955, 0,
	582, 0, 0, 0, 0, 0, 0, 2862, 0, 2109,
	0, 0, 0, 0, 172, 1751, 0, 0, 1062, 0,
	1066, 0, 1072, 165, 0, 0, 0, 172, 0, 0,
	1751, 166, 0, 0, 0, 0, 165, 0, 2110, 0,
	0, 492, 0, 0, 166, 0, 0, 859, 574, 1060,
	0, 1060, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 2485, 2486, 2242, 2243, 542, 2260, 2261, 2262, 0,
	0, 0, 492, 492, 492, 571, 492, 0, 0, 0,
	0, 2710, 0, 0, 0, 63, 40, 0, 0, 0,
	0, 0, 1588, 0, 0, 492, 0, 0, 0, 0,
	44, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 2257, 0, 0, 1175, 0, 0, 0, 570, 0,
	0, 1180, 0, 2540, 2541, 2542, 2543, 2544, 2545, 2546,
	2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556,
	2557, 2558, 0, 2562, 1610, 0, 0, 572, 0, 0,
	735, 0, 0, 0, 735, 0, 59, 574, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 64, 0,
	2248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 63, 0, 1610, 1102, 0, 0,
	0, 0, 0, 0, 0, 139, 66, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 1751, 0, 1122,
	1122, 1122, 963, 0, 0, 0, 171, 0, 2263, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 956, 0,
	110, 969, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2258, 0, 0, 0,
	0, 0, 173, 0, 1347, 1348, 1349, 1350, 1351, 0,
	0, 0, 929, 0, 1610, 1174, 0, 1360, 0, 0,
	929, 929, 0, 0, 929, 1370, 0, 0, 0, 539,
	0, 0, 539, 0, 0, 0, 0, 64, 0, 0,
	539, 539, 0, 172, 0, 539, 0, 0, 0, 0,
	0, 0, 165, 492, 1978, 2330, 0, 0, 0, 1978,
	166, 0, 2330, 0, 139, 66, 0, 67, 0, 1978,
	2330, 1978, 2330, 2330, 0, 0, 1588, 0, 0, 0,
	2259, 138, 492, 0, 0, 171, 0, 0, 0, 1526,
	0, 0, 0, 0, 0, 0, 573, 0, 0, 110,
	0, 492, 0, 2242, 2243, 959, 2260, 2261, 2262, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	0, 173, 0, 1294, 1295, 0, 0, 0, 1588, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	1546, 0, 1546, 0, 492, 0, 0, 492, 1297, 0,
	0, 1343, 492, 0, 492, 757, 74, 0, 959, 0,
	0, 2257, 172, 1978, 0, 539, 0, 0, 1427, 1427,
	1427, 165, 1978, 1296, 0, 0, 0, 0, 0, 166,
	0, 1316, 0, 0, 2254, 2255, 2256, 0, 2444, 1060,
	0, 2253, 2251, 2252, 2244, 2245, 2246, 2247, 2249, 2250,
	138, 0, 0, 0, 0, 0, 1588, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2248, 0, 0, 0, 0, 0, 0, 2477, 0, 0,
	955, 1319, 1320, 1321, 1322, 0, 0, 968, 0, 0,
	1302, 0, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 0, 1334, 1344, 208, 0, 1324, 1325, 1326,
	0, 0, 0, 0, 956, 956, 712, 0, 0, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 2523, 0, 0, 2258, 0, 0, 0,
	0, 0, 0, 956, 956, 0, 0, 0, 0, 1332,
	956, 0, 0, 0, 0, 0, 1317, 0, 0, 917,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 955, 0, 0, 208, 2870, 0,
	0, 0, 0, 0, 0, 955, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 929, 0,
	2259, 0, 0, 1323, 539, 2894, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 2611, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 1450, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 735, 735, 0, 1978, 1546,
	0, 1546, 968, 0, 0, 0, 492, 0, 0, 0,
	2959, 0, 0, 0, 2254, 2255, 2256, 0, 0, 0,
	0, 2253, 2251, 2252, 2244, 2245, 2246, 2247, 2249, 2250,
	1524, 1333, 0, 0, 0, 0, 1978, 929, 0, 1336,
	0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1553, 0, 1553, 0, 1060, 1725, 0, 1730, 959,
	492, 0, 492, 0, 1737, 0, 0, 968, 0, 0,
	492, 0, 0, 0, 1753, 1754, 1755, 1756, 1757, 1758,
	1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
	1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 0,
	1793, 0, 1795, 1796, 1797, 1798, 0, 0, 2726, 0,
	0, 0, 0, 0, 0, 0, 1647, 0, 0, 0,
	0, 1821, 0, 0, 0, 0, 0, 0, 0, 1360,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 74, 0, 74, 0, 0, 0, 968, 0, 0,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 0, 1691, 0,
	0, 0, 929, 0, 1697, 0, 1698, 1060, 1699, 0,
	1700, 0, 1701, 1895, 0, 1906, 0, 0, 539, 0,
	1912, 1917, 955, 0, 1978, 2330, 1978, 0, 0, 0,
	0, 0, 1710, 1102, 968, 0, 0, 0, 725, 0,
	0, 2611, 1060, 0, 0, 0, 0, 1978, 0, 2330,
	0, 0, 1060, 1060, 492, 1978, 2330, 0, 0, 0,
	492, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2611, 0, 1060, 2047,
	0, 0, 0, 0, 0, 74, 0, 0, 2611, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 955, 955,
	955, 0, 1978, 955, 0, 0, 0, 0, 0, 0,
	0, 2444, 2444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2036, 0, 2038, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 539, 0, 0, 0, 0, 0,
	1978, 0, 2330, 0, 0, 2888, 0, 0, 969, 0,
	0, 0, 0, 492, 0, 0, 0, 2611, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 0, 0, 1964,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 2611, 0, 2611, 0, 1356, 0, 1359, 2611, 0,
	492, 0, 492, 0, 1366, 0, 0, 0, 0, 0,
	1060, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 1297, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 2523, 0, 0, 0, 0, 0, 539, 0, 0,
	0, 0, 1296, 0, 0, 2888, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 1313, 2088, 0,
	0, 1122, 969, 1122, 0, 1122, 0, 963, 963, 0,
	0, 0, 0, 0, 1978, 2330, 0, 0, 0, 1450,
	0, 492, 2242, 2243, 0, 2260, 2261, 2262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2330, 0, 0,
	2709, 0, 0, 0, 0, 1060, 0, 1060, 0, 492,
	1319, 1320, 1321, 1322, 0, 0, 0, 0, 0, 1302,
	0, 0, 0, 0, 2169, 2170, 0, 0, 3021, 0,
	2175, 1060, 0, 0, 492, 0, 0, 0, 74, 0,
	2257, 1449, 1334, 1344, 969, 1454, 1324, 1325, 1326, 2188,
	0, 0, 2611, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2194, 0, 0, 0, 0, 0, 2201,
	0, 2523, 0, 0, 2206, 1311, 1312, 0, 0, 0,
	0, 0, 0, 968, 2143, 0, 0, 0, 1332, 0,
	0, 2220, 0, 0, 0, 1317, 1060, 0, 0, 0,
	0, 2611, 0, 0, 1978, 0, 0, 0, 0, 2248,
	0, 0, 968, 0, 0, 2152, 963, 2154, 0, 969,
	2888, 0, 0, 0, 2242, 2243, 0, 2260, 2261, 2262,
	0, 0, 0, 0, 0, 0, 0, 0, 2167, 0,
	0, 0, 2492, 0, 0, 0, 0, 0, 0, 1917,
	1917, 1917, 0, 0, 0, 0, 0, 2263, 0, 0,
	0, 1427, 1323, 0, 0, 0, 0, 0, 0, 2296,
	0, 0, 955, 0, 0, 0, 0, 0, 0, 1318,
	0, 968, 2257, 0, 0, 2258, 0, 0, 0, 0,
	0, 968, 0, 969, 0, 0, 0, 0, 968, 0,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 955, 0, 955, 955,
	955, 0, 0, 0, 0, 2352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 2242,
	2243, 2248, 2260, 2261, 2262, 0, 969, 0, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 2491, 0, 2259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 0, 0, 1308, 1309, 1315, 1314, 1310, 1336, 0,
	1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 2263,
	0, 0, 0, 0, 0, 0, 0, 2257, 0, 0,
	2418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 956, 956, 0, 0, 956, 0, 2258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 735, 735, 2327, 0, 0, 0,
	0, 0, 0, 2254, 2255, 2256, 2248, 735, 0, 0,
	2253, 2251, 2252, 2244, 2245, 2246, 2247, 2249, 2250, 0,
	0, 0, 0, 0, 2479, 1102, 0, 0, 1737, 0,
	0, 0, 0, 0, 2483, 0, 0, 2484, 0, 712,
	0, 2259, 712, 712, 0, 0, 0, 0, 0, 2489,
	0, 0, 0, 0, 2263, 0, 2495, 0, 2381, 0,
	0, 969, 0, 0, 0, 0, 2502, 0, 0, 0,
	2296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2258, 0, 0, 0, 0, 2399, 0, 2529,
	2530, 0, 2531, 2532, 2533, 2407, 0, 2409, 0, 2535,
	1811, 0, 0, 0, 0, 0, 2537, 0, 0, 0,
	0, 968, 0, 725, 0, 0, 0, 0, 0, 1359,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2565, 2566, 0,
	0, 0, 0, 0, 0, 2254, 2255, 2256, 0, 0,
	0, 0, 2253, 2251, 2252, 2244, 2245, 2246, 2247, 2249,
	2250, 0, 0, 0, 0, 0, 2259, 2582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 968, 2481, 968, 0, 0, 955,
	0, 0, 0, 0, 2605, 0, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 968, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	2254, 2255, 2256, 0, 74, 0, 74, 2253, 2251, 2252,
	2244, 2245, 2246, 2247, 2249, 2250, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 654, 0, 685, 2681, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 74, 0,
	74, 0, 0, 0, 0, 0, 0, 661, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 659,
	0, 0, 74, 0, 969, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 660, 0, 2711, 0, 0, 662, 2714, 2715, 0,
	690, 0, 0, 0, 0, 0, 668, 669, 0, 2717,
	0, 680, 0, 2720, 0, 0, 0, 968, 0, 0,
	968, 0, 0, 0, 0, 686, 663, 0, 0, 0,
	2727, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 684, 674, 969, 0, 0, 0, 0, 0, 0,
	969, 0, 955, 0, 0, 0, 968, 0, 0, 2655,
	955, 0, 0, 0, 0, 0, 0, 0, 956, 664,
	956, 956, 956, 0, 0, 658, 0, 0, 0, 0,
	0, 0, 955, 0, 0, 0, 0, 0, 74, 0,
	665, 666, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 955, 955, 0, 2785, 0, 0, 0,
	0, 0, 672, 956, 0, 0, 0, 0, 0, 667,
	0, 0, 0, 2701, 0, 963, 0, 0, 0, 0,
	0, 0, 671, 2704, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 687, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 1811, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	670, 0, 0, 0, 0, 0, 0, 0, 1359, 968,
	969, 0, 0, 0, 0, 2859, 2860, 0, 0, 0,
	969, 0, 0, 0, 0, 682, 0, 0, 0, 0,
	0, 0, 0, 0, 677, 0, 0, 2868, 2869, 0,
	0, 0, 0, 0, 0, 0, 656, 675, 688, 0,
	0, 0, 2876, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 657, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 678, 0, 0, 676, 0, 0, 0, 691,
	692, 0, 968, 0, 0, 0, 689, 0, 0, 0,
	0, 0, 0, 679, 0, 0, 0, 2799, 2912, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 0,
	917, 917, 0, 0, 917, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 0, 0, 0, 0, 0, 0, 0,
	0, 955, 955, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2970,
	0, 0, 2973, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 969, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2895, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 725, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2933, 0, 2935, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3060, 3060, 1294,
	1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 3077, 0, 1330, 0, 0,
	0, 0, 0, 0, 1297, 74, 0, 1343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3060, 0, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2989, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3009, 0, 3060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1319, 1320, 1321,
	1322, 0, 0, 0, 0, 0, 1302, 3027, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 969, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 1334,
	1344, 0, 0, 1324, 1325, 1326, 0, 0, 0, 0,
	74, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 1341, 0, 0, 917, 0,
	0, 0, 1311, 1312, 0, 956, 956, 0, 0, 0,
	0, 0, 1608, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 0, 1619, 1604, 1609,
	1592, 1629, 1628, 1331, 0, 1594, 1593, 0, 0, 0,
	0, 0, 1638, 1637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 1630, 0, 1626, 1625, 1318, 0, 0, 0,
	0, 0, 0, 0, 1624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 917, 0, 1335,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 1623, 1621, 1622, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1603, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 1612, 1607, 1613, 1614, 1615, 1616, 1617, 0,
	1611, 0, 0, 0, 0, 0, 0, 0, 0, 1635,
	1636, 0, 0, 0, 0, 0, 0, 1333, 0, 0,
	1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306,
	1298, 1299, 1300, 1301, 1303, 1304, 0, 0, 0, 1596,
	2733, 0, 0, 0, 2732, 0, 0, 0, 0, 0,
	0, 0, 1627, 0, 0, 0, 1605, 1606, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 956, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 1620,
	0, 0, 0, 1746, 1744, 1745, 1748, 1747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1597, 1598, 1599, 1600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1618, 1601, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1595, 0,
	0, 1631, 1632, 1633, 1634, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1602, 0, 0, 0,
	0, 1639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1811, 258, 259, 260,
	261, 971, 262, 972, 973, 974, 975, 214, 976, 977,
	978, 979, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 980, 269, 270, 271, 272, 273, 274, 981,
	982, 219, 220, 221, 983, 275, 222, 984, 930, 985,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	986, 285, 0, 286, 287, 987, 861, 288, 289, 290,
	988, 989, 991, 990, 992, 993, 994, 291, 292, 496,
	293, 294, 295, 223, 224, 995, 296, 996, 297, 997,
	298, 998, 999, 299, 300, 1000, 301, 302, 1001, 0,
	1002, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 1003, 862, 1004, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 1005, 318, 1006, 1007,
	863, 319, 1008, 320, 229, 1009, 230, 1010, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 865, 1011, 237,
	328, 0, 0, 0, 1012, 327, 329, 336, 1013, 864,
	330, 234, 332, 331, 333, 334, 335, 235, 1014, 236,
	1015, 337, 866, 867, 338, 339, 340, 868, 341, 342,
	0, 0, 343, 344, 345, 1016, 347, 346, 1017, 238,
	869, 348, 349, 870, 1018, 350, 351, 1019, 1020, 352,
	0, 353, 932, 931, 354, 355, 356, 358, 359, 357,
	871, 360, 361, 363, 362, 1021, 1022, 872, 1023, 239,
	364, 240, 365, 366, 1024, 367, 368, 1025, 1026, 369,
	370, 1027, 1028, 371, 241, 873, 372, 874, 242, 373,
	374, 375, 376, 377, 378, 379, 1029, 380, 243, 381,
	244, 382, 1030, 383, 384, 385, 386, 387, 245, 388,
	389, 1031, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 1032, 402, 875, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 1033, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 1034, 427, 408, 409, 428, 876, 429, 247,
	430, 431, 1035, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 1036, 442, 443, 1037, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 1038,
	249, 250, 251, 452, 1039, 1040, 453, 454, 252, 253,
	1041, 455, 456, 0, 457, 458, 1042, 1043, 459, 460,
	461, 463, 1044, 464, 1045, 462, 465, 466, 467, 254,
	255, 1046, 1047, 468, 256, 1048, 1049, 1050, 1051, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 1948, 0, 0, 0, 0,
	0, 0, 0, 0, 1949, 258, 259, 260, 261, 971,
	262, 972, 973, 974, 975, 214, 976, 977, 978, 979,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	980, 269, 270, 271, 272, 273, 274, 981, 982, 219,
	220, 221, 983, 275, 222, 984, 930, 985, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 986, 285,
	0, 286, 287, 987, 861, 288, 289, 290, 988, 989,
	991, 990, 992, 993, 994, 291, 292, 496, 293, 294,
	295, 223, 224, 995, 296, 996, 297, 997, 298, 998,
	999, 299, 300, 1000, 301, 302, 1001, 0, 1002, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	1003, 862, 1004, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 1005, 318, 1006, 1007, 863, 319,
	1008, 320, 229, 1009, 230, 1010, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 865, 1011, 237, 328, 0,
	0, 0, 1012, 327, 329, 336, 1013, 864, 330, 234,
	332, 331, 333, 334, 335, 235, 1014, 236, 1015, 337,
	866, 867, 338, 339, 340, 868, 341, 342, 0, 0,
	343, 344, 345, 1016, 347, 346, 1017, 238, 869, 348,
	349, 870, 1018, 350, 351, 1019, 1020, 352, 0, 353,
	932, 931, 354, 355, 356, 358, 359, 357, 871, 360,
	361, 363, 362, 1021, 1022, 872, 1023, 239, 364, 240,
	365, 366, 1024, 367, 368, 1025, 1026, 369, 370, 1027,
	1028, 371, 241, 873, 372, 874, 242, 373, 374, 375,
	376, 377, 378, 379, 1029, 380, 243, 381, 244, 382,
	1030, 383, 384, 385, 386, 387, 245, 388, 389, 1031,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 1032, 402, 875, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	1033, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	1034, 427, 408, 409, 428, 876, 429, 247, 430, 431,
	1035, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 1036, 442, 443, 1037, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 1038, 249, 250,
	251, 452, 1039, 1040, 453, 454, 252, 253, 1041, 455,
	456, 0, 457, 458, 1042, 1043, 459, 460, 461, 463,
	1044, 464, 1045, 462, 465, 466, 467, 254, 255, 1046,
	1047, 468, 256, 1048, 1049, 1050, 1051, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2756, 258, 259, 260, 261, 971, 262,
	972, 973, 974, 975, 214, 976, 977, 978, 979, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 980,
	269, 270, 271, 272, 273, 274, 981, 982, 219, 220,
	221, 983, 275, 222, 984, 930, 985, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 986, 285, 0,
	286, 287, 987, 861, 288, 289, 290, 988, 989, 991,
	990, 992, 993, 994, 291, 292, 496, 293, 294, 295,
	223, 224, 995, 296, 996, 297, 997, 298, 998, 999,
	299, 300, 1000, 301, 302, 1001, 0, 1002, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 1003,
	862, 1004, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 1005, 318, 1006, 1007, 863, 319, 1008,
	320, 229, 1009, 230, 1010, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 865, 1011, 237, 328, 0, 0,
	0, 1012, 327, 329, 336, 1013, 864, 330, 234, 332,
	331, 333, 334, 335, 235, 1014, 236, 1015, 337, 866,
	867, 338, 339, 340, 868, 341, 342, 0, 0, 343,
	344, 345, 1016, 347, 346, 1017, 238, 869, 348, 349,
	870, 1018, 350, 351, 1019, 1020, 352, 0, 353, 932,
	931, 354, 355, 356, 358, 359, 357, 871, 360, 361,
	363, 362, 1021, 1022, 872, 1023, 239, 364, 240, 365,
	366, 1024, 367, 368, 1025, 1026, 369, 370, 1027, 1028,
	371, 241, 873, 372, 874, 242, 373, 374, 375, 376,
	377, 378, 379, 1029, 380, 243, 381, 244, 382, 1030,
	383, 384, 385, 386, 387, 245, 388, 389, 1031, 390,
	391, 392, 393, 394, 0, 396, 397, 395, 398, 399,
	400, 401, 1032, 402, 875, 403, 404, 405, 406, 246,
	407, 0, 411, 412, 413, 414, 415, 416, 417, 1033,
	423, 424, 418, 420, 421, 422, 419, 425, 426, 1034,
	427, 408, 409, 428, 876, 429, 247, 430, 431, 1035,
	441, 432, 433, 434, 410, 435, 439, 440, 436, 437,
	438, 248, 1036, 442, 443, 1037, 444, 445, 446, 447,
	448, 308, 449, 309, 450, 451, 1038, 249, 250, 251,
	452, 1039, 1040, 453, 454, 252, 253, 1041, 455, 456,
	0, 457, 458, 1042, 1043, 459, 460, 461, 463, 1044,
	464, 1045, 462, 465, 466, 467, 254, 255, 1046, 1047,
	468, 256, 1048, 1049, 1050, 1051, 469, 470, 257, 471,
	472, 473, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2863, 258, 259,
	260, 261, 971, 262, 972, 973, 974, 975, 214, 976,
	977, 978, 979, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 980, 269, 270, 271, 272, 273, 274,
	981, 982, 219, 220, 221, 983, 275, 222, 984, 930,
	985, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 986, 285, 0, 286, 287, 987, 861, 288, 289,
	290, 988, 989, 991, 990, 992, 993, 994, 291, 292,
	496, 293, 294, 295, 223, 224, 995, 296, 996, 297,
	997, 298, 998, 999, 299, 300, 1000, 301, 302, 1001,
	0, 1002, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 1003, 862, 1004, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 1005, 318, 1006,
	1007, 863, 319, 1008, 320, 229, 1009, 230, 1010, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 865, 1011,
	237, 328, 0, 0, 0, 1012, 327, 329, 336, 1013,
	864, 330, 234, 332, 331, 333, 334, 335, 235, 1014,
	236, 1015, 337, 866, 867, 338, 339, 340, 868, 341,
	342, 0, 0, 343, 344, 345, 1016, 347, 346, 1017,
	238, 869, 348, 349, 870, 1018, 350, 351, 1019, 1020,
	352, 0, 353, 932, 931, 354, 355, 356, 358, 359,
	357, 871, 360, 361, 363, 362, 1021, 1022, 872, 1023,
	239, 364, 240, 365, 366, 1024, 367, 368, 1025, 1026,
	369, 370, 1027, 1028, 371, 241, 873, 372, 874, 242,
	373, 374, 375, 376, 377, 378, 379, 1029, 380, 243,
	381, 244, 382, 1030, 383, 384, 385, 386, 387, 245,
	388, 389, 1031, 390, 391, 392, 393, 394, 0, 396,
	397, 395, 398, 399, 400, 401, 1032, 402, 875, 403,
	404, 405, 406, 246, 407, 0, 411, 412, 413, 414,
	415, 416, 417, 1033, 423, 424, 418, 420, 421, 422,
	419, 425, 426, 1034, 427, 408, 409, 428, 876, 429,
	247, 430, 431, 1035, 441, 432, 433, 434, 410, 435,
	439, 440, 436, 437, 438, 248, 1036, 442, 443, 1037,
	444, 445, 446, 447, 448, 308, 449, 309, 450, 451,
	1038, 249, 250, 251, 452, 1039, 1040, 453, 454, 252,
	253, 1041, 455, 456, 0, 457, 458, 1042, 1043, 459,
	460, 461, 463, 1044, 464, 1045, 462, 465, 466, 467,
	254, 255, 1046, 1047, 468, 256, 1048, 1049, 1050, 1051,
	469, 470, 257, 471, 472, 473, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2505, 258, 259, 260, 261, 971, 262, 972, 973,
	974, 975, 214, 976, 977, 978, 979, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 980, 269, 270,
	271, 272, 273, 274, 981, 982, 219, 220, 221, 983,
	275, 222, 984, 930, 985, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 986, 285, 0, 286, 287,
	987, 861, 288, 289, 290, 988, 989, 991, 990, 992,
	993, 994, 291, 292, 496, 293, 294, 295, 223, 224,
	995, 296, 996, 297, 997, 298, 998, 999, 299, 300,
	1000, 301, 302, 1001, 0, 1002, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 1003, 862, 1004,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 1005, 318, 1006, 1007, 863, 319, 1008, 320, 229,
	1009, 230, 1010, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 865, 1011, 237, 328, 0, 0, 0, 1012,
	327, 329, 336, 1013, 864, 330, 234, 332, 331, 333,
	334, 335, 235, 1014, 236, 1015, 337, 866, 867, 338,
	339, 340, 868, 341, 342, 0, 0, 343, 344, 345,
	1016, 347, 346, 1017, 238, 869, 348, 349, 870, 1018,
	350, 351, 1019, 1020, 352, 0, 353, 932, 931, 354,
	355, 356, 358, 359, 357, 871, 360, 361, 363, 362,
	1021, 1022, 872, 1023, 239, 364, 240, 365, 366, 1024,
	367, 368, 1025, 1026, 369, 370, 1027, 1028, 371, 241,
	873, 372, 874, 242, 373, 374, 375, 376, 377, 378,
	379, 1029, 380, 243, 381, 244, 382, 1030, 383, 384,
	385, 386, 387, 245, 388, 389, 1031, 390, 391, 392,
	393, 394, 0, 396, 397, 395, 398, 399, 400, 401,
	1032, 402, 875, 403, 404, 405, 406, 246, 407, 0,
	411, 412, 413, 414, 415, 416, 417, 1033, 423, 424,
	418, 420, 421, 422, 419, 425, 426, 1034, 427, 408,
	409, 428, 876, 429, 247, 430, 431, 1035, 441, 432,
	433, 434, 410, 435, 439, 440, 436, 437, 438, 248,
	1036, 442, 443, 1037, 444, 445, 446, 447, 448, 308,
	449, 309, 450, 451, 1038, 249, 250, 251, 452, 1039,
	1040, 453, 454, 252, 253, 1041, 455, 456, 0, 457,
	458, 1042, 1043, 459, 460, 461, 463, 1044, 464, 1045,
	462, 465, 466, 467, 254, 255, 1046, 1047, 468, 256,
	1048, 1049, 1050, 1051, 469, 470, 257, 471, 472, 473,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2496, 258, 259, 260, 261,
	971, 262, 972, 973, 974, 975, 214, 976, 977, 978,
	979, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 980, 269, 270, 271, 272, 273, 274, 981, 982,
	219, 220, 221, 983, 275, 222, 984, 930, 985, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 986,
	285, 0, 286, 287, 987, 861, 288, 289, 290, 988,
	989, 991, 990, 992, 993, 994, 291, 292, 496, 293,
	294, 295, 223, 224, 995, 296, 996, 297, 997, 298,
	998, 999, 299, 300, 1000, 301, 302, 1001, 0, 1002,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 1003, 862, 1004, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 1005, 318, 1006, 1007, 863,
	319, 1008, 320, 229, 1009, 230, 1010, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 865, 1011, 237, 328,
	0, 0, 0, 1012, 327, 329, 336, 1013, 864, 330,
	234, 332, 331, 333, 334, 335, 235, 1014, 236, 1015,
	337, 866, 867, 338, 339, 340, 868, 341, 342, 0,
	0, 343, 344, 345, 1016, 347, 346, 1017, 238, 869,
	348, 349, 870, 1018, 350, 351, 1019, 1020, 352, 0,
	353, 932, 931, 354, 355, 356, 358, 359, 357, 871,
	360, 361, 363, 362, 1021, 1022, 872, 1023, 239, 364,
	240, 365, 366, 1024, 367, 368, 1025, 1026, 369, 370,
	1027, 1028, 371, 241, 873, 372, 874, 242, 373, 374,
	375, 376, 377, 378, 379, 1029, 380, 243, 381, 244,
	382, 1030, 383, 384, 385, 386, 387, 245, 388, 389,
	1031, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 1032, 402, 875, 403, 404, 405,
	406, 246, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 1033, 423, 424, 418, 420, 421, 422, 419, 425,
	426, 1034, 427, 408, 409, 428, 876, 429, 247, 430,
	431, 1035, 441, 432, 433, 434, 410, 435, 439, 440,
	436, 437, 438, 248, 1036, 442, 443, 1037, 444, 445,
	446, 447, 448, 308, 449, 309, 450, 451, 1038, 249,
	250, 251, 452, 1039, 1040, 453, 454, 252, 253, 1041,
	455, 456, 0, 457, 458, 1042, 1043, 459, 460, 461,
	463, 1044, 464, 1045, 462, 465, 466, 467, 254, 255,
	1046, 1047, 468, 256, 1048, 1049, 1050, 1051, 469, 470,
	257, 471, 472, 473, 966, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2385,
	258, 259, 260, 261, 971, 262, 972, 973, 974, 975,
	214, 976, 977, 978, 979, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 980, 269, 270, 271, 272,
	273, 274, 981, 982, 219, 220, 221, 983, 275, 222,
	984, 930, 985, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 986, 285, 0, 286, 287, 987, 861,
	288, 289, 290, 988, 989, 991, 990, 992, 993, 994,
	291, 292, 496, 293, 294, 295, 223, 224, 995, 296,
	996, 297, 997, 298, 998, 999, 299, 300, 1000, 301,
	302, 1001, 0, 1002, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1003, 862, 1004, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 1005,
	318, 1006, 1007, 863, 319, 1008, 320, 229, 1009, 230,
	1010, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	865, 1011, 237, 328, 0, 0, 0, 1012, 327, 329,
	336, 1013, 864, 330, 234, 332, 331, 333, 334, 335,
	235, 1014, 236, 1015, 337, 866, 867, 338, 339, 340,
	868, 341, 342, 0, 0, 343, 344, 345, 1016, 347,
	346, 1017, 238, 869, 348, 349, 870, 1018, 350, 351,
	1019, 1020, 352, 0, 353, 932, 931, 354, 355, 356,
	358, 359, 357, 871, 360, 361, 363, 362, 1021, 1022,
	872, 1023, 239, 364, 240, 365, 366, 1024, 367, 368,
	1025, 1026, 369, 370, 1027, 1028, 371, 241, 873, 372,
	874, 242, 373, 374, 375, 376, 377, 378, 379, 1029,
	380, 243, 381, 244, 382, 1030, 383, 384, 385, 386,
	387, 245, 388, 389, 1031, 390, 391, 392, 393, 394,
	0, 396, 397, 395, 398, 399, 400, 401, 1032, 402,
	875, 403, 404, 405, 406, 246, 407, 0, 411, 412,
	413, 414, 415, 416, 417, 1033, 423, 424, 418, 420,
	421, 422, 419, 425, 426, 1034, 427, 408, 409, 428,
	876, 429, 247, 430, 431, 1035, 441, 432, 433, 434,
	410, 435, 439, 440, 436, 437, 438, 248, 1036, 442,
	443, 1037, 444, 445, 446, 447, 448, 308, 449, 309,
	450, 451, 1038, 249, 250, 251, 452, 1039, 1040, 453,
	454, 252, 253, 1041, 455, 456, 0, 457, 458, 1042,
	1043, 459, 460, 461, 463, 1044, 464, 1045, 462, 465,
	466, 467, 254, 255, 1046, 1047, 468, 256, 1048, 1049,
	1050, 1051, 469, 470, 257, 471, 472, 473, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1835, 258, 259, 260, 261, 971, 262,
	972, 973, 974, 975, 214, 976, 977, 978, 979, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 980,
	269, 270, 271, 272, 273, 274, 981, 982, 219, 220,
	221, 983, 275, 222, 984, 930, 985, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 986, 285, 0,
	286, 287, 987, 861, 288, 289, 290, 988, 989, 991,
	990, 992, 993, 994, 291, 292, 496, 293, 294, 295,
	223, 224, 995, 296, 996, 297, 997, 298, 998, 999,
	299, 300, 1000, 301, 302, 1001, 0, 1002, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 1003,
	862, 1004, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 1005, 318, 1006, 1007, 863, 319, 1008,
	320, 229, 1009, 230, 1010, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 865, 1011, 237, 328, 0, 0,
	0, 1012, 327, 329, 336, 1013, 864, 330, 234, 332,
	331, 333, 334, 335, 235, 1014, 236, 1015, 337, 866,
	867, 338, 339, 340, 868, 341, 342, 0, 0, 343,
	344, 345, 1016, 347, 346, 1017, 238, 869, 348, 349,
	870, 1018, 350, 351, 1019, 1020, 352, 0, 353, 932,
	931, 354, 355, 356, 358, 359, 357, 871, 360, 361,
	363, 362, 1021, 1022, 872, 1023, 239, 364, 240, 365,
	366, 1024, 367, 368, 1025, 1026, 369, 370, 1027, 1028,
	371, 241, 873, 372, 874, 242, 373, 374, 375, 376,
	377, 378, 379, 1029, 380, 243, 381, 244, 382, 1030,
	383, 384, 385, 386, 387, 245, 388, 389, 1031, 390,
	391, 392, 393, 394, 0, 396, 397, 395, 398, 399,
	400, 401, 1032, 402, 875, 403, 404, 405, 406, 246,
	407, 0, 411, 412, 413, 414, 415, 416, 417, 1033,
	423, 424, 418, 420, 421, 422, 419, 425, 426, 1034,
	427, 408, 409, 428, 876, 429, 247, 430, 431, 1035,
	441, 432, 433, 434, 410, 435, 439, 440, 436, 437,
	438, 248, 1036, 442, 443, 1037, 444, 445, 446, 447,
	448, 308, 449, 309, 450, 451, 1038, 249, 250, 251,
	452, 1039, 1040, 453, 454, 252, 253, 1041, 455, 456,
	0, 457, 458, 1042, 1043, 459, 460, 461, 463, 1044,
	464, 1045, 462, 465, 466, 467, 254, 255, 1046, 1047,
	468, 256, 1048, 1049, 1050, 1051, 469, 470, 257, 471,
	472, 473, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1516, 258, 259,
	260, 261, 971, 262, 972, 973, 974, 975, 214, 976,
	977, 978, 979, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 980, 269, 270, 271, 272, 273, 274,
	981, 982, 219, 220, 221, 983, 275, 222, 984, 930,
	985, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 986, 285, 0, 286, 287, 987, 861, 288, 289,
	290, 988, 989, 991, 990, 992, 993, 994, 291, 292,
	496, 293, 294, 295, 223, 224, 995, 296, 996, 297,
	997, 298, 998, 999, 299, 300, 1000, 301, 302, 1001,
	0, 1002, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 1003, 862, 1004, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 1005, 318, 1006,
	1007, 863, 319, 1008, 320, 229, 1009, 230, 1010, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 865, 1011,
	237, 328, 0, 0, 0, 1012, 327, 329, 336, 1013,
	864, 330, 234, 332, 331, 333, 334, 335, 235, 1014,
	236, 1015, 337, 866, 867, 338, 339, 340, 868, 341,
	342, 0, 0, 343, 344, 345, 1016, 347, 346, 1017,
	238, 869, 348, 349, 870, 1018, 350, 351, 1019, 1020,
	352, 0, 353, 932, 931, 354, 355, 356, 358, 359,
	357, 871, 360, 361, 363, 362, 1021, 1022, 872, 1023,
	239, 364, 240, 365, 366, 1024, 367, 368, 1025, 1026,
	369, 370, 1027, 1028, 371, 241, 873, 372, 874, 242,
	373, 374, 375, 376, 377, 378, 379, 1029, 380, 243,
	381, 244, 382, 1030, 383, 384, 385, 386, 387, 245,
	388, 389, 1031, 390, 391, 392, 393, 394, 0, 396,
	397, 395, 398, 399, 400, 401, 1032, 402, 875, 403,
	404, 405, 406, 246, 407, 0, 411, 412, 413, 414,
	415, 416, 417, 1033, 423, 424, 418, 420, 421, 422,
	419, 425, 426, 1034, 427, 408, 409, 428, 876, 429,
	247, 430, 431, 1035, 441, 432, 433, 434, 410, 435,
	439, 440, 436, 437, 438, 248, 1036, 442, 443, 1037,
	444, 445, 446, 447, 448, 308, 449, 309, 450, 451,
	1038, 249, 250, 251, 452, 1039, 1040, 453, 454, 252,
	253, 1041, 455, 456, 0, 457, 458, 1042, 1043, 459,
	460, 461, 463, 1044, 464, 1045, 462, 465, 466, 467,
	254, 255, 1046, 1047, 468, 256, 1048, 1049, 1050, 1051,
	469, 470, 257, 471, 472, 473, 1842, 0, 776, 764,
	765, 762, 763, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 1839, 262,
	0, 0, 0, 0, 812, 758, 0, 0, 0, 263,
	264, 265, 215, 833, 796, 834, 784, 820, 835, 0,
	269, 786, 785, 272, 273, 274, 759, 811, 836, 837,
	221, 0, 275, 818, 0, 801, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 861, 288, 289, 290, 804, 802, 803,
	808, 806, 805, 807, 291, 292, 496, 293, 821, 295,
	838, 839, 744, 296, 0, 297, 0, 298, 1840, 0,
	822, 300, 0, 301, 302, 0, 0, 0, 749, 306,
	303, 304, 307, 310, 305, 311, 312, 840, 841, 771,
	862, 0, 0, 0, 0, 0, 313, 314, 842, 823,
	824, 0, 317, 0, 318, 0, 0, 863, 319, 0,
	320, 843, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 813, 814, 817, 865, 0, 815, 795, 0, 0,
	0, 0, 327, 329, 336, 0, 864, 330, 844, 799,
	825, 826, 827, 828, 845, 0, 800, 0, 337, 866,
	867, 338, 339, 340, 868, 829, 830, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 846, 869, 348, 349,
	870, 0, 350, 351, 0, 0, 352, 0, 353, 746,
	745, 354, 355, 356, 358, 788, 357, 871, 360, 361,
	363, 362, 741, 0, 872, 772, 816, 364, 847, 365,
	366, 0, 797, 798, 0, 0, 369, 370, 0, 0,
	371, 241, 873, 372, 874, 848, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 849, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 850, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 395, 398, 399,
	400, 401, 0, 402, 875, 403, 404, 405, 406, 750,
	407, 0, 411, 412, 413, 414, 415, 416, 417, 0,
	423, 424, 789, 790, 791, 792, 419, 425, 426, 809,
	427, 408, 409, 428, 876, 429, 851, 793, 431, 0,
	441, 432, 433, 434, 410, 435, 439, 831, 436, 437,
	438, 852, 0, 442, 443, 0, 444, 445, 446, 447,
	448, 308, 449, 309, 787, 451, 0, 853, 854, 855,
	832, 0, 0, 453, 454, 856, 857, 770, 455, 456,
	0, 457, 458, 0, 0, 459, 460, 461, 463, 810,
	464, 0, 794, 465, 466, 467, 254, 858, 1838, 0,
	468, 256, 0, 0, 0, 0, 469, 470, 257, 471,
	472, 473, 742, 0, 0, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 738, 739, 1841, 0, 0,
	0, 0, 0, 0, 751, 1836, 0, 0, 0, 726,
	754, 776, 764, 765, 762, 763, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 171, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 173, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 1149,
	858, 0, 0, 468, 256, 0, 0, 0, 165, 469,
	470, 257, 471, 472, 473, 742, 166, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	776, 764, 765, 762, 763, 755, 0, 1363, 0, 0,
	0, 0, 0, 754, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 812, 758, 0, 0,
	0, 263, 264, 265, 215, 833, 796, 834, 784, 820,
	835, 0, 269, 786, 785, 272, 273, 274, 759, 811,
	836, 837, 221, 0, 275, 818, 0, 801, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 861, 288, 289, 290, 804,
	802, 803, 808, 806, 805, 807, 291, 292, 496, 293,
	821, 295, 838, 839, 744, 296, 0, 297, 0, 298,
	0, 0, 822, 300, 0, 301, 302, 0, 0, 0,
	749, 306, 303, 304, 307, 310, 305, 311, 312, 840,
	841, 771, 862, 0, 0, 0, 0, 0, 313, 314,
	842, 823, 824, 0, 317, 0, 318, 0, 0, 863,
	319, 0, 320, 843, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 813, 814, 817, 865, 0, 815, 795,
	0, 0, 0, 0, 327, 329, 336, 0, 864, 330,
	844, 799, 825, 826, 827, 828, 845, 0, 800, 0,
	337, 866, 867, 338, 339, 340, 868, 829, 830, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 846, 869,
	348, 349, 870, 0, 350, 351, 0, 0, 352, 0,
	353, 746, 745, 354, 355, 356, 358, 788, 357, 871,
	360, 361, 363, 362, 741, 0, 872, 772, 816, 364,
	847, 365, 366, 0, 797, 798, 0, 0, 369, 370,
	0, 0, 371, 241, 873, 372, 874, 848, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 849, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 850, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 0, 402, 875, 403, 404, 405,
	406, 750, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 171, 423, 424, 789, 790, 791, 792, 419, 425,
	426, 809, 427, 408, 409, 428, 876, 429, 851, 793,
	431, 0, 441, 432, 433, 434, 410, 435, 439, 831,
	436, 437, 438, 852, 0, 442, 443, 173, 444, 445,
	446, 447, 448, 308, 449, 309, 787, 451, 0, 853,
	854, 855, 832, 0, 0, 453, 454, 856, 857, 770,
	455, 456, 0, 457, 458, 0, 0, 459, 460, 461,
	463, 810, 464, 0, 794, 465, 466, 467, 1149, 858,
	0, 0, 468, 256, 0, 0, 0, 165, 469, 470,
	257, 471, 472, 473, 742, 166, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 738, 739, 776,
	764, 765, 762, 763, 755, 0, 1363, 0, 0, 0,
	0, 0, 754, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 812, 758, 0, 0, 0,
	263, 264, 265, 215, 833, 796, 834, 784, 820, 835,
	1913, 269, 786, 785, 272, 273, 274, 759, 811, 836,
	837, 221, 0, 275, 818, 0, 801, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 804, 802,
	803, 808, 806, 805, 807, 291, 292, 496, 293, 821,
	295, 838, 839, 744, 296, 0, 297, 0, 298, 0,
	0, 822, 300, 0, 301, 302, 0, 0, 0, 749,
	306, 303, 304, 307, 310, 305, 311, 312, 840, 841,
	771, 862, 0, 0, 0, 0, 0, 313, 314, 842,
	823, 824, 0, 317, 0, 318, 0, 1918, 863, 319,
	0, 320, 843, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 813, 814, 817, 865, 0, 815, 795, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 844,
	799, 825, 826, 827, 828, 845, 0, 800, 0, 337,
	866, 867, 338, 339, 340, 868, 829, 830, 0, 0,
	343, 344, 345, 0, 347, 346, 1914, 846, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	746, 745, 354, 355, 356, 358, 788, 357, 871, 360,
	361, 363, 362, 741, 0, 872, 772, 816, 364, 847,
	365, 366, 0, 797, 798, 0, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 848, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 849, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 850, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	750, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 789, 790, 791, 792, 419, 425, 426,
	809, 427, 408, 409, 428, 876, 429, 851, 793, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 831, 436,
	437, 438, 852, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 787, 451, 0, 853, 854,
	855, 832, 0, 1915, 453, 454, 856, 857, 770, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	810, 464, 0, 794, 465, 466, 467, 254, 858, 0,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 742, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 738, 739, 776, 764,
	765, 762, 763, 755, 0, 751, 0, 0, 0, 0,
	0, 754, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 812, 758, 0, 0, 0, 263,
	264, 265, 215, 833, 796, 834, 784, 820, 835, 0,
	269, 786, 785, 272, 273, 274, 759, 811, 836, 837,
	221, 0, 275, 818, 0, 801, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 861, 288, 289, 290, 804, 802, 803,
	808, 806, 805, 807, 291, 292, 496, 293, 821, 295,
	838, 839, 744, 296, 0, 297, 0, 298, 0, 0,
	822, 300, 0, 301, 302, 0, 0, 0, 749, 306,
	303, 304, 307, 310, 305, 311, 312, 840, 841, 771,
	862, 0, 0, 0, 0, 0, 313, 314, 842, 823,
	824, 0, 317, 0, 318, 0, 0, 863, 319, 0,
	320, 843, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 813, 814, 817, 865, 0, 815, 795, 0, 0,
	0, 0, 327, 329, 336, 0, 864, 330, 844, 799,
	825, 826, 827, 828, 845, 0, 800, 0, 337, 866,
	867, 338, 339, 340, 868, 829, 830, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 846, 869, 348, 349,
	870, 0, 350, 351, 0, 0, 352, 0, 353, 746,
	745, 354, 355, 356, 358, 788, 357, 871, 360, 361,
	363, 362, 741, 2673, 872, 772, 816, 364, 847, 365,
	366, 0, 797, 798, 0, 0, 369, 370, 0, 0,
	371, 241, 873, 372, 874, 848, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 849, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 850, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 395, 398, 399,
	400, 401, 0, 402, 875, 403, 404, 405, 406, 750,
	407, 0, 411, 412, 413, 414, 415, 416, 417, 0,
	423, 424, 789, 790, 791, 792, 419, 425, 426, 809,
	427, 408, 409, 428, 876, 429, 851, 793, 431, 0,
	441, 432, 433, 434, 410, 435, 439, 831, 436, 437,
	438, 852, 0, 442, 443, 0, 444, 445, 446, 447,
	448, 308, 449, 309, 787, 451, 0, 853, 854, 855,
	832, 0, 0, 453, 454, 856, 857, 770, 455, 456,
	0, 457, 458, 0, 0, 459, 460, 461, 463, 810,
	464, 0, 794, 465, 466, 467, 254, 858, 0, 0,
	468, 256, 0, 0, 0, 0, 469, 470, 257, 471,
	472, 473, 742, 0, 0, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 738, 739, 1428, 776, 764,
	765, 762, 763, 755, 751, 0, 0, 0, 0, 0,
	754, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 812, 758, 0, 0, 0, 263,
	264, 265, 215, 833, 796, 834, 784, 820, 835, 0,
	269, 786, 785, 272, 273, 274, 759, 811, 836, 837,
	221, 0, 275, 818, 0, 801, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 861, 288, 289, 290, 804, 802, 803,
	808, 806, 805, 807, 291, 292, 496, 293, 821, 295,
	838, 839, 744, 296, 0, 297, 0, 298, 0, 0,
	822, 300, 0, 301, 302, 0, 0, 0, 749, 306,
	303, 304, 307, 310, 305, 311, 312, 840, 841, 771,
	862, 0, 0, 0, 0, 0, 313, 314, 842, 823,
	824, 0, 317, 0, 318, 0, 0, 863, 319, 0,
	320, 843, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 813, 814, 817, 865, 0, 815, 795, 0, 0,
	0, 1739, 327, 329, 336, 0, 864, 330, 844, 799,
	825, 826, 827, 828, 845, 0, 800, 0, 337, 866,
	867, 338, 339, 340, 868, 829, 830, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 846, 869, 348, 349,
	870, 0, 350, 351, 0, 0, 352, 0, 353, 746,
	745, 354, 355, 356, 358, 788, 357, 871, 360, 361,
	363, 362, 741, 0, 872, 772, 816, 364, 847, 365,
	366, 0, 797, 798, 0, 0, 369, 370, 0, 0,
	371, 241, 873, 372, 874, 848, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 849, 381, 244, 382, 1738,
	383, 384, 385, 386, 387, 850, 388, 389, 0, 390,
	391, 392, 393, 394, 0, 396, 397, 395, 398, 399,
	400, 401, 0, 402, 875, 403, 404, 405, 406, 750,
	407, 0, 411, 412, 413, 414, 415, 416, 417, 0,
	423, 424, 789, 790, 791, 792, 419, 425, 426, 809,
	427, 408, 409, 428, 876, 429, 851, 793, 431, 0,
	441, 432, 433, 434, 410, 435, 439, 831, 436, 437,
	438, 852, 0, 442, 443, 0, 444, 445, 446, 447,
	448, 308, 449, 309, 787, 451, 0, 853, 854, 855,
	832, 0, 0, 453, 454, 856, 857, 770, 455, 456,
	0, 457, 458, 0, 0, 459, 460, 461, 463, 810,
	464, 0, 794, 465, 466, 467, 254, 858, 0, 0,
	468, 256, 0, 0, 0, 0, 469, 470, 257, 471,
	472, 473, 742, 0, 0, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 738, 739, 0, 0, 0,
	0, 0, 0, 0, 751, 0, 0, 0, 0, 734,
	754, 776, 764, 765, 762, 763, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 736, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 254,
	858, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 742, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	776, 764, 765, 762, 763, 755, 0, 751, 0, 0,
	0, 0, 0, 754, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 812, 758, 0, 0,
	0, 263, 264, 265, 215, 833, 796, 834, 784, 820,
	835, 0, 269, 786, 785, 272, 273, 274, 759, 811,
	836, 837, 221, 0, 275, 818, 0, 801, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 861, 288, 289, 290, 804,
	802, 803, 808, 806, 805, 807, 291, 292, 496, 293,
	821, 295, 838, 839, 744, 296, 0, 297, 0, 298,
	0, 0, 822, 300, 0, 301, 302, 0, 0, 0,
	749, 306, 303, 304, 307, 310, 305, 311, 312, 840,
	841, 771, 862, 0, 0, 0, 0, 0, 313, 314,
	842, 823, 824, 0, 317, 0, 318, 0, 0, 863,
	319, 0, 320, 843, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 813, 814, 817, 865, 0, 815, 795,
	0, 0, 0, 0, 327, 329, 336, 0, 864, 330,
	844, 799, 825, 826, 827, 828, 845, 0, 800, 0,
	337, 866, 867, 338, 339, 340, 868, 829, 830, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 846, 869,
	348, 349, 870, 0, 350, 351, 0, 0, 352, 0,
	353, 746, 745, 354, 355, 356, 358, 788, 357, 871,
	360, 361, 363, 362, 741, 0, 872, 772, 816, 364,
	847, 365, 366, 0, 797, 798, 0, 0, 369, 370,
	0, 0, 371, 241, 873, 372, 874, 848, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 849, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 850, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 0, 402, 875, 403, 404, 405,
	406, 750, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 0, 423, 424, 789, 790, 791, 792, 419, 425,
	426, 809, 427, 408, 409, 428, 876, 429, 851, 793,
	431, 0, 441, 432, 433, 434, 410, 435, 439, 831,
	436, 437, 438, 852, 0, 442, 443, 0, 444, 445,
	446, 447, 448, 308, 449, 309, 787, 451, 0, 853,
	854, 855, 832, 0, 0, 453, 454, 856, 857, 770,
	455, 456, 0, 457, 458, 0, 0, 459, 460, 461,
	463, 810, 464, 0, 794, 465, 466, 467, 254, 858,
	2507, 0, 468, 256, 0, 0, 0, 0, 469, 470,
	257, 471, 472, 473, 742, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 738, 739, 776,
	764, 765, 762, 763, 755, 0, 751, 0, 0, 0,
	0, 0, 754, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 812, 758, 0, 0, 0,
	263, 264, 265, 215, 833, 796, 834, 784, 820, 835,
	0, 269, 786, 785, 272, 273, 274, 759, 811, 836,
	837, 221, 0, 275, 818, 0, 801, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 804, 802,
	803, 808, 806, 805, 807, 291, 292, 496, 293, 821,
	295, 838, 839, 744, 296, 0, 297, 0, 298, 0,
	0, 822, 300, 0, 301, 302, 0, 0, 0, 749,
	306, 303, 304, 307, 310, 305, 311, 312, 840, 841,
	771, 862, 0, 0, 0, 0, 0, 313, 314, 842,
	823, 824, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 843, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 813, 814, 817, 865, 0, 815, 795, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 844,
	799, 825, 826, 827, 828, 845, 0, 800, 0, 337,
	866, 867, 338, 339, 340, 868, 829, 830, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 846, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	746, 745, 354, 355, 356, 358, 788, 357, 871, 360,
	361, 363, 362, 741, 0, 872, 772, 816, 364, 847,
	365, 366, 0, 797, 798, 736, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 848, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 849, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 850, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	750, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 789, 790, 791, 792, 419, 425, 426,
	809, 427, 408, 409, 428, 876, 429, 851, 793, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 831, 436,
	437, 438, 852, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 787, 451, 0, 853, 854,
	855, 832, 0, 0, 453, 454, 856, 857, 770, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	810, 464, 0, 794, 465, 466, 467, 254, 858, 0,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 742, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 738, 739, 0, 0,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 0,
	2317, 754, 776, 764, 765, 762, 763, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 812, 758,
	0, 0, 0, 263, 264, 265, 215, 833, 796, 834,
	784, 820, 835, 0, 269, 786, 785, 272, 273, 274,
	759, 811, 836, 837, 221, 0, 275, 818, 0, 801,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 861, 288, 289,
	290, 804, 802, 803, 808, 806, 805, 807, 291, 292,
	496, 293, 821, 295, 838, 839, 744, 296, 0, 297,
	0, 298, 0, 0, 822, 300, 0, 301, 302, 0,
	0, 0, 749, 306, 303, 304, 307, 310, 305, 311,
	312, 840, 841, 771, 862, 0, 0, 0, 0, 0,
	313, 314, 842, 823, 824, 0, 317, 0, 318, 0,
	0, 863, 319, 0, 320, 843, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 813, 814, 817, 865, 0,
	815, 795, 0, 0, 0, 0, 327, 329, 336, 0,
	864, 330, 844, 799, 825, 826, 827, 828, 845, 0,
	800, 0, 337, 866, 867, 338, 339, 340, 868, 829,
	830, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	846, 869, 348, 349, 870, 0, 350, 351, 0, 0,
	352, 0, 353, 746, 745, 354, 355, 356, 358, 788,
	357, 871, 360, 361, 363, 362, 741, 0, 872, 772,
	816, 364, 847, 365, 366, 0, 797, 798, 0, 0,
	369, 370, 0, 0, 371, 241, 873, 372, 874, 848,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 849,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 850,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 395, 398, 399, 400, 401, 0, 402, 875, 403,
	404, 405, 406, 750, 407, 0, 411, 412, 413, 414,
	415, 416, 417, 0, 423, 424, 789, 790, 791, 792,
	419, 425, 426, 809, 427, 408, 409, 428, 876, 429,
	851, 793, 431, 0, 441, 432, 433, 434, 410, 435,
	439, 831, 436, 437, 438, 852, 0, 442, 443, 0,
	444, 445, 446, 447, 448, 308, 449, 309, 787, 451,
	0, 853, 854, 855, 832, 0, 0, 453, 454, 856,
	857, 770, 455, 456, 0, 457, 458, 0, 0, 459,
	460, 461, 463, 810, 464, 0, 794, 465, 466, 467,
	254, 858, 0, 0, 468, 256, 0, 0, 0, 0,
	469, 470, 257, 471, 472, 473, 742, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 738,
	739, 776, 764, 765, 762, 763, 755, 0, 751, 0,
	0, 0, 0, 0, 754, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 254,
	858, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 742, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	1428, 776, 764, 765, 762, 763, 755, 751, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 1918,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 254,
	858, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 742, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 0,
	0, 0, 1952, 754, 776, 764, 765, 762, 763, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	812, 758, 0, 0, 0, 263, 264, 265, 215, 833,
	796, 834, 784, 820, 835, 0, 269, 786, 785, 272,
	273, 274, 759, 811, 836, 837, 221, 0, 275, 818,
	0, 801, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 861,
	288, 289, 290, 804, 802, 803, 808, 806, 805, 807,
	291, 292, 496, 293, 821, 295, 838, 839, 744, 296,
	0, 297, 0, 298, 0, 0, 822, 300, 0, 301,
	302, 0, 0, 0, 749, 306, 303, 304, 307, 310,
	305, 311, 312, 840, 841, 771, 862, 0, 0, 0,
	0, 0, 313, 314, 842, 823, 824, 0, 317, 0,
	318, 0, 0, 863, 319, 0, 320, 843, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 813, 814, 817,
	865, 0, 815, 795, 0, 0, 0, 0, 327, 329,
	336, 0, 864, 330, 844, 799, 825, 826, 827, 828,
	845, 0, 800, 0, 337, 866, 867, 338, 339, 340,
	868, 829, 830, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 846, 869, 348, 349, 870, 0, 350, 351,
	0, 0, 352, 0, 353, 746, 745, 354, 355, 356,
	358, 788, 357, 871, 360, 361, 363, 362, 741, 0,
	872, 772, 816, 364, 847, 365, 366, 0, 797, 798,
	0, 0, 369, 370, 0, 0, 371, 241, 873, 372,
	874, 848, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 849, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 850, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 395, 398, 399, 400, 401, 0, 402,
	875, 403, 404, 405, 406, 750, 407, 0, 411, 412,
	413, 414, 415, 416, 417, 0, 423, 424, 789, 790,
	791, 792, 419, 425, 426, 809, 427, 408, 409, 428,
	876, 429, 851, 793, 431, 0, 441, 432, 433, 434,
	410, 435, 439, 831, 436, 437, 438, 852, 0, 442,
	443, 0, 444, 445, 446, 447, 448, 308, 449, 309,
	787, 451, 0, 853, 854, 855, 832, 0, 0, 453,
	454, 856, 857, 770, 455, 456, 0, 457, 458, 0,
	0, 459, 460, 461, 463, 810, 464, 0, 794, 465,
	466, 467, 254, 858, 0, 0, 468, 256, 0, 0,
	0, 0, 469, 470, 257, 471, 472, 473, 742, 0,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 738, 739, 0, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 0, 0, 1905, 754, 776, 764, 765,
	762, 763, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 812, 758, 0, 0, 0, 263, 264,
	265, 215, 833, 796, 834, 784, 820, 835, 0, 269,
	786, 785, 272, 273, 274, 759, 811, 836, 837, 221,
	0, 275, 818, 0, 801, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 804, 802, 803, 808,
	806, 805, 807, 291, 292, 496, 293, 821, 295, 838,
	839, 744, 296, 0, 297, 0, 298, 0, 0, 822,
	300, 0, 301, 302, 0, 0, 0, 749, 306, 303,
	304, 307, 310, 305, 311, 312, 840, 841, 771, 862,
	0, 0, 0, 0, 0, 313, 314, 842, 823, 824,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	843, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	813, 814, 817, 865, 0, 815, 795, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 844, 799, 825,
	826, 827, 828, 845, 0, 800, 0, 337, 866, 867,
	338, 339, 340, 868, 829, 830, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 846, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 746, 745,
	354, 355, 356, 358, 788, 357, 871, 360, 361, 363,
	362, 741, 0, 872, 772, 816, 364, 847, 365, 366,
	0, 797, 798, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 848, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 849, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 850, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 750, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 789, 790, 791, 792, 419, 425, 426, 809, 427,
	408, 409, 428, 876, 429, 851, 793, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 831, 436, 437, 438,
	852, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 787, 451, 0, 853, 854, 855, 832,
	0, 0, 453, 454, 856, 857, 770, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 810, 464,
	0, 794, 465, 466, 467, 254, 858, 0, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 742, 0, 0, 0, 0, 0, 0, 0, 740,
	0, 0, 0, 0, 738, 739, 0, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 0, 1894, 754,
	776, 764, 765, 762, 763, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 812, 758, 0, 0,
	0, 263, 264, 265, 215, 833, 796, 834, 784, 820,
	835, 0, 269, 786, 785, 272, 273, 274, 759, 811,
	836, 837, 221, 0, 275, 818, 0, 801, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 861, 288, 289, 290, 804,
	802, 803, 808, 806, 805, 807, 291, 292, 496, 293,
	821, 295, 838, 839, 744, 296, 0, 297, 0, 298,
	0, 0, 822, 300, 0, 301, 302, 0, 0, 0,
	749, 306, 303, 304, 307, 310, 305, 311, 312, 840,
	841, 771, 862, 0, 0, 0, 0, 0, 313, 314,
	842, 823, 824, 0, 317, 0, 318, 0, 0, 863,
	319, 0, 320, 843, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 813, 814, 817, 865, 0, 815, 795,
	0, 0, 0, 0, 327, 329, 336, 0, 864, 330,
	844, 799, 825, 826, 827, 828, 845, 0, 800, 0,
	337, 866, 867, 338, 339, 340, 868, 829, 830, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 846, 869,
	348, 349, 870, 0, 350, 351, 0, 0, 352, 0,
	353, 746, 745, 354, 355, 356, 358, 788, 357, 871,
	360, 361, 363, 362, 741, 0, 872, 772, 816, 364,
	847, 365, 366, 0, 797, 798, 0, 0, 369, 370,
	0, 0, 371, 241, 873, 372, 874, 848, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 849, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 850, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 0, 402, 875, 403, 404, 405,
	406, 750, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 0, 423, 424, 789, 790, 791, 792, 419, 425,
	426, 809, 427, 408, 409, 428, 876, 429, 851, 793,
	431, 0, 441, 432, 433, 434, 410, 435, 439, 831,
	436, 437, 438, 852, 0, 442, 443, 0, 444, 445,
	446, 447, 448, 308, 449, 309, 787, 451, 0, 853,
	854, 855, 832, 0, 0, 453, 454, 856, 857, 770,
	455, 456, 0, 457, 458, 0, 0, 459, 460, 461,
	463, 810, 464, 0, 794, 465, 466, 467, 254, 858,
	0, 0, 468, 256, 0, 0, 0, 0, 469, 470,
	257, 471, 472, 473, 742, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 738, 739, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 1892, 754, 776, 764, 765, 762, 763, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 812,
	758, 0, 0, 0, 263, 264, 265, 215, 833, 796,
	834, 784, 820, 835, 0, 269, 786, 785, 272, 273,
	274, 759, 811, 836, 837, 221, 0, 275, 818, 0,
	801, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 804, 802, 803, 808, 806, 805, 807, 291,
	292, 496, 293, 821, 295, 838, 839, 744, 296, 0,
	297, 0, 298, 0, 0, 822, 300, 0, 301, 302,
	0, 0, 0, 749, 306, 303, 304, 307, 310, 305,
	311, 312, 840, 841, 771, 862, 0, 0, 0, 0,
	0, 313, 314, 842, 823, 824, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 843, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 813, 814, 817, 865,
	0, 815, 795, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 844, 799, 825, 826, 827, 828, 845,
	0, 800, 0, 337, 866, 867, 338, 339, 340, 868,
	829, 830, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 846, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 746, 745, 354, 355, 356, 358,
	788, 357, 871, 360, 361, 363, 362, 741, 0, 872,
	772, 816, 364, 847, 365, 366, 0, 797, 798, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	848, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	849, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	850, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 750, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 789, 790, 791,
	792, 419, 425, 426, 809, 427, 408, 409, 428, 876,
	429, 851, 793, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 831, 436, 437, 438, 852, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 787,
	451, 0, 853, 854, 855, 832, 0, 0, 453, 454,
	856, 857, 770, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 810, 464, 0, 794, 465, 466,
	467, 254, 858, 0, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 742, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	738, 739, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 1890, 754, 776, 764, 765, 762,
	763, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 812, 758, 0, 0, 0, 263, 264, 265,
	215, 833, 796, 834, 784, 820, 835, 0, 269, 786,
	785, 272, 273, 274, 759, 811, 836, 837, 221, 0,
	275, 818, 0, 801, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 861, 288, 289, 290, 804, 802, 803, 808, 806,
	805, 807, 291, 292, 496, 293, 821, 295, 838, 839,
	744, 296, 0, 297, 0, 298, 0, 0, 822, 300,
	0, 301, 302, 0, 0, 0, 749, 306, 303, 304,
	307, 310, 305, 311, 312, 840, 841, 771, 862, 0,
	0, 0, 0, 0, 313, 314, 842, 823, 824, 0,
	317, 0, 318, 0, 0, 863, 319, 0, 320, 843,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 813,
	814, 817, 865, 0, 815, 795, 0, 0, 0, 0,
	327, 329, 336, 0, 864, 330, 844, 799, 825, 826,
	827, 828, 845, 0, 800, 0, 337, 866, 867, 338,
	339, 340, 868, 829, 830, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 846, 869, 348, 349, 870, 0,
	350, 351, 0, 0, 352, 0, 353, 746, 745, 354,
	355, 356, 358, 788, 357, 871, 360, 361, 363, 362,
	741, 0, 872, 772, 816, 364, 847, 365, 366, 0,
	797, 798, 0, 0, 369, 370, 0, 0, 371, 241,
	873, 372, 874, 848, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 849, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 850, 388, 389, 0, 390, 391, 392,
	393, 394, 0, 396, 397, 395, 398, 399, 400, 401,
	0, 402, 875, 403, 404, 405, 406, 750, 407, 0,
	411, 412, 413, 414, 415, 416, 417, 0, 423, 424,
	789, 790, 791, 792, 419, 425, 426, 809, 427, 408,
	409, 428, 876, 429, 851, 793, 431, 0, 441, 432,
	433, 434, 410, 435, 439, 831, 436, 437, 438, 852,
	0, 442, 443, 0, 444, 445, 446, 447, 448, 308,
	449, 309, 787, 451, 0, 853, 854, 855, 832, 0,
	0, 453, 454, 856, 857, 770, 455, 456, 0, 457,
	458, 0, 0, 459, 460, 461, 463, 810, 464, 0,
	794, 465, 466, 467, 254, 858, 0, 0, 468, 256,
	0, 0, 0, 0, 469, 470, 257, 471, 472, 473,
	742, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 738, 739, 0, 0, 0, 0, 0,
	0, 0, 751, 0, 0, 0, 0, 1887, 754, 1879,
	764, 765, 762, 763, 755, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 812, 758, 0, 0, 0,
	263, 264, 265, 215, 833, 796, 834, 784, 820, 835,
	0, 269, 786, 785, 272, 273, 274, 759, 811, 836,
	837, 221, 0, 275, 818, 0, 801, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 804, 802,
	803, 808, 806, 805, 807, 291, 292, 496, 293, 821,
	1882, 838, 839, 744, 296, 0, 297, 0, 298, 0,
	0, 822, 300, 0, 301, 302, 0, 0, 0, 749,
	306, 303, 304, 307, 310, 305, 311, 312, 840, 841,
	771, 862, 0, 0, 0, 0, 0, 313, 314, 842,
	823, 824, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 843, 0, 230, 0, 321, 322, 1883, 324,
	325, 326, 813, 814, 817, 865, 0, 815, 795, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 844,
	799, 825, 826, 827, 828, 845, 0, 800, 0, 337,
	866, 867, 338, 339, 340, 868, 829, 830, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 846, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	746, 745, 1884, 1881, 356, 358, 788, 357, 871, 360,
	361, 363, 362, 741, 0, 872, 772, 816, 364, 847,
	365, 366, 0, 797, 798, 0, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 848, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 849, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 850, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	750, 407, 0, 411, 412, 413, 414, 415, 416, 1885,
	0, 423, 424, 789, 790, 791, 792, 419, 425, 426,
	809, 427, 408, 409, 428, 876, 429, 851, 793, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 831, 436,
	437, 438, 852, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 787, 451, 0, 853, 854,
	855, 832, 0, 0, 453, 454, 856, 857, 770, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	810, 464, 0, 794, 465, 466, 467, 254, 858, 0,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 1880, 473, 742, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 738, 739, 0, 0,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 0,
	1876, 754, 1879, 764, 765, 762, 763, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 812, 758,
	0, 0, 0, 263, 264, 265, 215, 833, 796, 834,
	784, 820, 835, 0, 269, 786, 785, 272, 273, 274,
	759, 811, 836, 837, 221, 0, 275, 818, 0, 801,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 861, 288, 289,
	290, 804, 802, 803, 808, 806, 805, 807, 291, 292,
	496, 293, 821, 1882, 838, 839, 744, 296, 0, 297,
	0, 298, 0, 0, 822, 300, 0, 301, 302, 0,
	0, 0, 749, 306, 303, 304, 307, 310, 305, 311,
	312, 840, 841, 771, 862, 0, 0, 0, 0, 0,
	313, 314, 842, 823, 824, 0, 317, 0, 318, 0,
	0, 863, 319, 0, 320, 843, 0, 230, 0, 321,
	322, 1883, 324, 325, 326, 813, 814, 817, 865, 0,
	815, 795, 0, 0, 0, 0, 327, 329, 336, 0,
	864, 330, 844, 799, 825, 826, 827, 828, 845, 0,
	800, 0, 337, 866, 867, 338, 339, 340, 868, 829,
	830, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	846, 869, 348, 349, 870, 0, 350, 351, 0, 0,
	352, 0, 353, 746, 745, 1884, 1881, 356, 358, 788,
	357, 871, 360, 361, 363, 362, 741, 0, 872, 772,
	816, 364, 847, 365, 366, 0, 797, 798, 0, 0,
	369, 370, 0, 0, 371, 241, 873, 372, 874, 848,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 849,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 850,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 395, 398, 399, 400, 401, 0, 402, 875, 403,
	404, 405, 406, 750, 407, 0, 411, 412, 413, 414,
	415, 416, 1885, 0, 423, 424, 789, 790, 791, 792,
	419, 425, 426, 809, 427, 408, 409, 428, 876, 429,
	851, 793, 431, 0, 441, 432, 433, 434, 410, 435,
	439, 831, 436, 437, 438, 852, 0, 442, 443, 0,
	444, 445, 446, 447, 448, 308, 449, 309, 787, 451,
	0, 853, 854, 855, 832, 0, 0, 453, 454, 856,
	857, 770, 455, 456, 0, 457, 458, 0, 0, 459,
	460, 461, 463, 810, 464, 0, 794, 465, 466, 467,
	254, 858, 0, 0, 468, 256, 0, 0, 0, 0,
	469, 470, 257, 471, 1880, 473, 742, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 738,
	739, 776, 764, 765, 762, 763, 755, 0, 751, 0,
	0, 0, 0, 0, 754, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 254,
	858, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 742, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	0, 0, 0, 0, 0, 1368, 0, 751, 0, 0,
	0, 0, 0, 754, 776, 764, 765, 762, 763, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 1726, 262, 0, 0, 0, 0,
	812, 758, 0, 0, 0, 263, 264, 265, 215, 833,
	796, 834, 784, 820, 835, 0, 269, 786, 785, 272,
	273, 274, 759, 811, 836, 837, 221, 0, 275, 818,
	0, 801, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 861,
	288, 289, 290, 804, 802, 803, 808, 806, 805, 807,
	291, 292, 496, 293, 821, 295, 838, 839, 744, 296,
	0, 297, 0, 298, 0, 0, 822, 300, 0, 301,
	302, 0, 0, 0, 749, 306, 303, 304, 307, 310,
	305, 311, 312, 840, 841, 771, 862, 0, 0, 0,
	0, 0, 313, 314, 842, 823, 824, 0, 317, 0,
	318, 0, 0, 863, 319, 0, 320, 843, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 813, 814, 817,
	865, 0, 815, 795, 0, 0, 0, 0, 327, 329,
	336, 0, 864, 330, 844, 799, 825, 826, 827, 828,
	845, 0, 800, 0, 337, 866, 867, 338, 339, 340,
	868, 829, 830, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 846, 869, 348, 349, 870, 0, 350, 351,
	0, 0, 352, 0, 353, 746, 745, 354, 355, 356,
	358, 788, 357, 871, 360, 361, 363, 362, 741, 0,
	872, 772, 816, 364, 847, 365, 366, 0, 797, 798,
	0, 0, 369, 370, 0, 0, 371, 241, 873, 372,
	874, 848, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 849, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 850, 388, 389, 0, 390, 391, 392, 393, 394,
	0, 396, 397, 395, 398, 399, 400, 401, 0, 402,
	875, 403, 404, 405, 406, 750, 407, 0, 411, 412,
	413, 414, 415, 416, 417, 0, 423, 424, 789, 790,
	791, 792, 419, 425, 426, 809, 427, 408, 409, 428,
	876, 429, 851, 793, 431, 0, 441, 432, 433, 434,
	410, 435, 439, 831, 436, 437, 438, 852, 0, 442,
	443, 0, 444, 445, 446, 447, 448, 308, 449, 309,
	787, 451, 0, 853, 854, 855, 832, 0, 0, 453,
	454, 856, 857, 770, 455, 456, 0, 457, 458, 0,
	0, 459, 460, 461, 463, 810, 464, 0, 794, 465,
	466, 467, 254, 858, 0, 0, 468, 256, 0, 0,
	0, 0, 469, 470, 257, 471, 472, 473, 742, 0,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 738, 739, 0, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 0, 0, 1074, 754, 776, 764, 765,
	762, 763, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 812, 758, 0, 0, 0, 263, 264,
	265, 215, 833, 796, 834, 784, 820, 835, 0, 269,
	786, 785, 272, 273, 274, 759, 811, 836, 837, 221,
	0, 275, 818, 0, 801, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 804, 802, 803, 808,
	806, 805, 807, 291, 292, 496, 293, 821, 295, 838,
	839, 744, 296, 0, 297, 0, 298, 0, 0, 822,
	300, 0, 301, 302, 0, 0, 0, 749, 306, 303,
	304, 307, 310, 305, 311, 312, 840, 841, 771, 862,
	0, 0, 0, 0, 0, 313, 314, 842, 823, 824,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	843, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1073, 814, 817, 865, 0, 815, 795, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 844, 799, 825,
	826, 827, 828, 845, 0, 800, 0, 337, 866, 867,
	338, 339, 340, 868, 829, 830, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 846, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 746, 745,
	354, 355, 356, 358, 788, 357, 871, 360, 361, 363,
	362, 741, 0, 872, 772, 816, 364, 847, 365, 366,
	0, 797, 798, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 848, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 849, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 850, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 750, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 789, 790, 791, 792, 419, 425, 426, 809, 427,
	408, 409, 428, 876, 429, 851, 793, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 831, 436, 437, 438,
	852, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 787, 451, 0, 853, 854, 855, 832,
	0, 0, 453, 454, 856, 857, 770, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 810, 464,
	0, 794, 465, 466, 467, 254, 858, 0, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 742, 0, 0, 0, 0, 0, 0, 0, 740,
	0, 0, 0, 0, 738, 739, 0, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 0, 1068, 754,
	776, 764, 765, 762, 763, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 812, 758, 0, 0,
	0, 263, 264, 265, 215, 833, 796, 834, 784, 820,
	835, 0, 269, 786, 785, 272, 273, 274, 759, 811,
	836, 837, 221, 0, 275, 818, 0, 801, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 861, 288, 289, 290, 804,
	802, 803, 808, 806, 805, 807, 291, 292, 496, 293,
	821, 295, 838, 839, 744, 296, 0, 297, 0, 298,
	0, 0, 822, 300, 0, 301, 302, 0, 0, 0,
	749, 306, 303, 304, 307, 310, 305, 311, 312, 840,
	841, 771, 862, 0, 0, 0, 0, 0, 313, 314,
	842, 823, 824, 0, 317, 0, 318, 0, 0, 863,
	319, 0, 320, 843, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 1067, 814, 817, 865, 0, 815, 795,
	0, 0, 0, 0, 327, 329, 336, 0, 864, 330,
	844, 799, 825, 826, 827, 828, 845, 0, 800, 0,
	337, 866, 867, 338, 339, 340, 868, 829, 830, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 846, 869,
	348, 349, 870, 0, 350, 351, 0, 0, 352, 0,
	353, 746, 745, 354, 355, 356, 358, 788, 357, 871,
	360, 361, 363, 362, 741, 0, 872, 772, 816, 364,
	847, 365, 366, 0, 797, 798, 0, 0, 369, 370,
	0, 0, 371, 241, 873, 372, 874, 848, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 849, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 850, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 0, 402, 875, 403, 404, 405,
	406, 750, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 0, 423, 424, 789, 790, 791, 792, 419, 425,
	426, 809, 427, 408, 409, 428, 876, 429, 851, 793,
	431, 0, 441, 432, 433, 434, 410, 435, 439, 831,
	436, 437, 438, 852, 0, 442, 443, 0, 444, 445,
	446, 447, 448, 308, 449, 309, 787, 451, 0, 853,
	854, 855, 832, 0, 0, 453, 454, 856, 857, 770,
	455, 456, 0, 457, 458, 0, 0, 459, 460, 461,
	463, 810, 464, 0, 794, 465, 466, 467, 254, 858,
	0, 0, 468, 256, 0, 0, 0, 0, 469, 470,
	257, 471, 472, 473, 742, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 738, 739, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 1063, 754, 776, 764, 765, 762, 763, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 812,
	758, 0, 0, 0, 263, 264, 265, 215, 833, 796,
	834, 784, 820, 835, 0, 269, 786, 785, 272, 273,
	274, 759, 811, 836, 837, 221, 0, 275, 818, 0,
	801, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 804, 802, 803, 808, 806, 805, 807, 291,
	292, 496, 293, 821, 295, 838, 839, 744, 296, 0,
	297, 0, 298, 0, 0, 822, 300, 0, 301, 302,
	0, 0, 0, 749, 306, 303, 304, 307, 310, 305,
	311, 312, 840, 841, 771, 862, 0, 0, 0, 0,
	0, 313, 314, 842, 823, 824, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 843, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 813, 814, 817, 865,
	0, 815, 795, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 844, 799, 825, 826, 827, 828, 845,
	0, 800, 0, 337, 866, 867, 338, 339, 340, 868,
	829, 830, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 846, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 746, 745, 354, 355, 356, 358,
	788, 357, 871, 360, 361, 363, 362, 741, 0, 872,
	772, 816, 364, 847, 365, 366, 0, 797, 798, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	848, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	849, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	850, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 750, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 789, 790, 791,
	792, 419, 425, 426, 809, 427, 408, 409, 428, 876,
	429, 851, 793, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 831, 436, 437, 438, 852, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 787,
	451, 0, 853, 854, 855, 832, 0, 0, 453, 454,
	856, 857, 770, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 810, 464, 0, 794, 465, 466,
	467, 254, 858, 0, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 742, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	738, 739, 776, 764, 765, 762, 763, 755, 0, 751,
	0, 0, 0, 0, 0, 754, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 812, 758,
	0, 0, 0, 263, 264, 265, 215, 833, 796, 834,
	784, 820, 835, 0, 269, 786, 785, 272, 273, 274,
	759, 811, 836, 837, 221, 0, 275, 818, 0, 801,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 861, 288, 289,
	290, 804, 802, 803, 808, 806, 805, 807, 291, 292,
	496, 293, 821, 295, 838, 839, 744, 296, 0, 297,
	0, 298, 0, 0, 822, 300, 0, 301, 302, 0,
	0, 0, 749, 306, 303, 304, 307, 310, 305, 311,
	312, 840, 841, 771, 862, 0, 0, 0, 0, 0,
	313, 314, 842, 823, 824, 0, 317, 0, 318, 0,
	0, 863, 319, 0, 320, 843, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 813, 814, 817, 865, 0,
	815, 795, 0, 0, 0, 0, 327, 329, 336, 0,
	864, 330, 844, 799, 825, 826, 827, 828, 845, 0,
	800, 0, 337, 866, 867, 338, 339, 340, 868, 829,
	830, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	846, 869, 348, 349, 870, 0, 350, 351, 0, 0,
	352, 0, 353, 746, 745, 354, 355, 356, 358, 788,
	357, 871, 360, 361, 363, 362, 741, 0, 872, 772,
	816, 364, 847, 365, 366, 0, 797, 798, 0, 0,
	369, 370, 0, 0, 371, 241, 873, 372, 874, 848,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 849,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 850,
	388, 389, 0, 390, 391, 392, 393, 394, 0, 396,
	397, 395, 398, 399, 400, 401, 0, 402, 875, 403,
	404, 405, 406, 750, 407, 0, 411, 412, 413, 414,
	415, 416, 417, 0, 423, 424, 789, 790, 791, 792,
	419, 425, 426, 809, 427, 408, 409, 428, 876, 429,
	851, 793, 431, 0, 441, 432, 433, 434, 410, 435,
	439, 831, 436, 437, 438, 852, 0, 442, 443, 0,
	444, 445, 446, 447, 448, 308, 449, 309, 787, 451,
	0, 853, 854, 855, 832, 0, 0, 453, 454, 856,
	857, 770, 455, 456, 0, 457, 458, 0, 0, 459,
	460, 461, 463, 810, 464, 0, 794, 465, 466, 467,
	254, 858, 0, 0, 468, 256, 0, 0, 0, 0,
	469, 470, 257, 471, 472, 473, 742, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 738,
	739, 776, 764, 765, 762, 763, 755, 0, 751, 0,
	0, 0, 0, 0, 754, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 812, 758, 0,
	0, 0, 263, 264, 265, 215, 833, 796, 834, 784,
	820, 835, 0, 269, 786, 785, 272, 273, 274, 759,
	811, 836, 837, 221, 0, 275, 818, 0, 801, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 3059,
	804, 802, 803, 808, 806, 805, 807, 291, 292, 496,
	293, 821, 295, 838, 839, 744, 296, 0, 297, 0,
	298, 0, 0, 822, 300, 0, 301, 302, 0, 0,
	0, 749, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 771, 862, 0, 0, 0, 0, 0, 313,
	314, 842, 823, 824, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 813, 814, 817, 865, 0, 815,
	795, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 844, 799, 825, 826, 827, 828, 845, 0, 800,
	0, 337, 866, 867, 338, 339, 340, 868, 829, 830,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 746, 745, 354, 355, 356, 358, 788, 357,
	871, 360, 361, 363, 362, 741, 0, 872, 772, 816,
	364, 847, 365, 366, 0, 797, 798, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 850, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 750, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 789, 790, 791, 792, 419,
	425, 426, 809, 427, 408, 409, 428, 876, 429, 851,
	793, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	831, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 787, 451, 0,
	853, 854, 855, 832, 0, 0, 453, 454, 856, 857,
	770, 455, 456, 0, 3058, 458, 0, 0, 459, 460,
	461, 463, 810, 464, 0, 794, 465, 466, 467, 254,
	858, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 742, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 738, 739,
	776, 764, 765, 762, 763, 755, 0, 751, 0, 0,
	0, 0, 0, 754, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 812, 758, 0, 0,
	0, 263, 264, 265, 3057, 833, 796, 834, 784, 820,
	835, 0, 269, 786, 785, 272, 273, 274, 759, 811,
	836, 837, 221, 0, 275, 818, 0, 801, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 861, 288, 289, 3059, 804,
	802, 803, 808, 806, 805, 807, 291, 292, 496, 293,
	821, 295, 838, 839, 744, 296, 0, 297, 0, 298,
	0, 0, 822, 300, 0, 301, 302, 0, 0, 0,
	749, 306, 303, 304, 307, 310, 305, 311, 312, 840,
	841, 771, 862, 0, 0, 0, 0, 0, 313, 314,
	842, 823, 824, 0, 317, 0, 318, 0, 0, 863,
	319, 0, 320, 843, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 813, 814, 817, 865, 0, 815, 795,
	0, 0, 0, 0, 327, 329, 336, 0, 864, 330,
	844, 799, 825, 826, 827, 828, 845, 0, 800, 0,
	337, 866, 867, 338, 339, 340, 868, 829, 830, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 846, 869,
	348, 349, 870, 0, 350, 351, 0, 0, 352, 0,
	353, 746, 745, 354, 355, 356, 358, 788, 357, 871,
	360, 361, 363, 362, 741, 0, 872, 772, 816, 364,
	847, 365, 366, 0, 797, 798, 0, 0, 369, 370,
	0, 0, 371, 241, 873, 372, 874, 848, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 849, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 850, 388, 389,
	0, 390, 391, 392, 393, 394, 0, 396, 397, 395,
	398, 399, 400, 401, 0, 402, 875, 403, 404, 405,
	406, 750, 407, 0, 411, 412, 413, 414, 415, 416,
	417, 0, 423, 424, 789, 790, 791, 792, 419, 425,
	426, 809, 427, 408, 409, 428, 876, 429, 851, 793,
	431, 0, 441, 432, 433, 434, 410, 435, 439, 831,
	436, 437, 438, 852, 0, 442, 443, 0, 444, 445,
	446, 447, 448, 308, 449, 309, 787, 451, 0, 853,
	854, 855, 832, 0, 0, 453, 454, 856, 857, 770,
	455, 456, 0, 3058, 458, 0, 0, 459, 460, 461,
	463, 810, 464, 0, 794, 465, 466, 467, 254, 858,
	0, 0, 468, 256, 0, 0, 0, 0, 469, 470,
	257, 471, 472, 473, 742, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 738, 739, 776,
	764, 765, 762, 763, 755, 0, 751, 0, 0, 0,
	0, 0, 754, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 812, 758, 0, 0, 0,
	263, 264, 265, 215, 833, 796, 834, 784, 820, 835,
	0, 269, 786, 785, 272, 273, 274, 759, 811, 836,
	837, 221, 0, 275, 818, 0, 801, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 804, 802,
	803, 808, 806, 805, 807, 291, 292, 496, 293, 821,
	295, 838, 839, 0, 296, 0, 297, 0, 298, 0,
	0, 822, 300, 0, 301, 302, 0, 0, 0, 749,
	306, 303, 304, 307, 310, 305, 311, 312, 840, 841,
	771, 862, 0, 0, 0, 0, 0, 313, 314, 842,
	823, 824, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 843, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 813, 814, 817, 865, 0, 815, 795, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 844,
	799, 825, 826, 827, 828, 845, 0, 800, 0, 337,
	866, 867, 338, 339, 340, 868, 829, 830, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 846, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	932, 931, 354, 355, 356, 358, 788, 357, 871, 360,
	361, 363, 362, 0, 0, 872, 772, 816, 364, 847,
	365, 366, 0, 797, 798, 0, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 848, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 849, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 850, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	750, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 789, 790, 791, 792, 419, 425, 426,
	809, 427, 408, 409, 428, 876, 429, 851, 793, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 831, 436,
	437, 438, 852, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 787, 451, 0, 853, 854,
	855, 832, 0, 0, 453, 454, 856, 857, 770, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	810, 464, 0, 794, 465, 466, 467, 254, 858, 0,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 776, 764, 765, 762, 763, 755, 0,
	0, 1902, 0, 0, 0, 0, 1900, 1901, 0, 258,
	259, 260, 261, 0, 262, 751, 0, 0, 0, 812,
	758, 754, 0, 0, 263, 264, 265, 0, 833, 796,
	834, 784, 820, 835, 0, 269, 786, 785, 272, 273,
	274, 759, 811, 836, 837, 221, 0, 275, 818, 0,
	801, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 3059, 804, 802, 803, 808, 806, 805, 807, 291,
	292, 496, 293, 821, 295, 838, 839, 744, 296, 0,
	297, 0, 298, 0, 0, 822, 300, 0, 301, 302,
	0, 0, 0, 749, 306, 303, 304, 307, 310, 305,
	311, 312, 840, 841, 771, 862, 0, 0, 0, 0,
	0, 313, 314, 842, 823, 824, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 843, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 813, 814, 817, 0,
	0, 815, 795, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 844, 799, 825, 826, 827, 828, 845,
	0, 800, 0, 337, 0, 0, 338, 339, 340, 868,
	829, 830, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 846, 869, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 746, 745, 354, 355, 356, 358,
	788, 357, 871, 360, 361, 363, 362, 741, 0, 0,
	772, 816, 364, 847, 365, 366, 0, 797, 798, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	848, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	849, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	850, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 750, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 789, 790, 791,
	792, 419, 425, 426, 809, 427, 408, 409, 428, 0,
	429, 851, 793, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 831, 436, 437, 438, 852, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 787,
	451, 0, 853, 854, 855, 832, 0, 0, 453, 454,
	856, 857, 770, 455, 456, 0, 3058, 458, 0, 0,
	459, 460, 461, 463, 810, 464, 0, 794, 465, 466,
	467, 254, 858, 0, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 726, 0, 928, 0, 0, 0, 0,
	738, 739, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 258, 259, 260, 261, 754, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 930, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	861, 288, 289, 290, 0, 923, 924, 0, 926, 925,
	927, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 840, 841, 0, 862, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 863, 319, 0, 320, 843, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 865, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 864, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 866, 867, 338, 339,
	340, 868, 341, 342, 0, 0, 343, 344, 345, 915,
	347, 346, 0, 846, 869, 348, 349, 870, 0, 350,
	351, 0, 0, 352, 0, 353, 932, 931, 354, 355,
	356, 358, 359, 357, 871, 360, 361, 363, 362, 0,
	0, 872, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 921, 369, 370, 0, 0, 371, 241, 873,
	372, 874, 848, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 849, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 875, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 171, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 876, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 852, 0,
	442, 443, 173, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 856, 857, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 1149, 255, 0, 0, 468, 256, 0,
	0, 928, 165, 469, 470, 257, 471, 472, 473, 0,
	166, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 912,
	0, 1456, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 930, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	0, 923, 924, 0, 926, 925, 927, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 0, 862, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 865, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 866, 867, 338, 339, 340, 868, 341, 342,
	0, 0, 343, 344, 345, 915, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 932, 931, 354, 355, 356, 358, 359, 357,
	871, 360, 361, 363, 362, 0, 0, 872, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 921, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 171, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 876, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 852, 0, 442, 443, 173, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 856, 857,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 1149,
	255, 0, 0, 468, 256, 0, 0, 928, 165, 469,
	470, 257, 471, 472, 473, 0, 166, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 812, 0, 912, 0, 1456, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 811, 219, 220, 221,
	0, 275, 818, 0, 801, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 804, 802, 803, 808,
	806, 805, 807, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 840, 841, 0, 862,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	843, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	813, 814, 817, 865, 0, 815, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 866, 867,
	338, 339, 340, 868, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 846, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 932, 931,
	354, 355, 356, 358, 359, 357, 871, 360, 361, 363,
	362, 0, 0, 872, 0, 816, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 848, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 849, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 809, 427,
	408, 409, 428, 876, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	852, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 856, 857, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 810, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 2289, 0, 928, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 2610, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	930, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 0, 923, 924, 0, 926, 925, 927, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 840, 841, 0, 862, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 843, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 865,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 866, 867, 338, 339, 340, 868,
	341, 342, 0, 0, 343, 344, 345, 915, 347, 346,
	0, 846, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 932, 931, 354, 355, 356, 358,
	359, 357, 871, 360, 361, 363, 362, 0, 0, 872,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	921, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	848, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	849, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 876,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 852, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	856, 857, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 911, 0, 928,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 912, 0, 919,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 930, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 0, 923,
	924, 0, 926, 925, 927, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 840, 841,
	0, 862, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 843, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 865, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	866, 867, 338, 339, 340, 868, 341, 342, 0, 0,
	343, 344, 345, 915, 347, 346, 0, 846, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	932, 931, 354, 355, 356, 358, 359, 357, 871, 360,
	361, 363, 362, 0, 0, 872, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 921, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 848, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 849, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 876, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 852, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 856, 857, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 0, 0, 928, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 912, 0, 919, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 930, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	861, 288, 289, 290, 0, 923, 924, 0, 926, 925,
	927, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 840, 841, 0, 862, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 863, 319, 0, 320, 843, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 865, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 864, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 866, 867, 338, 339,
	340, 868, 341, 342, 0, 0, 343, 344, 345, 915,
	347, 346, 0, 846, 869, 348, 349, 870, 0, 350,
	351, 0, 0, 352, 0, 353, 932, 931, 354, 355,
	356, 358, 359, 357, 871, 360, 361, 363, 362, 0,
	0, 872, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 921, 369, 370, 0, 0, 371, 241, 873,
	372, 874, 848, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 849, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 875, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 876, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 852, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 856, 857, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 0,
	0, 928, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 912,
	0, 919, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 930, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	0, 923, 924, 0, 926, 925, 927, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	840, 841, 0, 862, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 843, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 865, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 866, 867, 338, 339, 340, 868, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 846,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 932, 931, 354, 355, 356, 358, 359, 357,
	871, 360, 361, 363, 362, 0, 0, 872, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 848, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 849, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 876, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 852, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 856, 857,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 1146, 0, 953, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 1357, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 930, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 862,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 865, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 866, 867,
	338, 339, 340, 868, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 932, 931,
	354, 355, 356, 358, 359, 357, 871, 360, 361, 363,
	362, 0, 0, 872, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 171, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 876, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 173, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 1149, 255, 0, 0, 468,
	256, 726, 0, 493, 165, 469, 470, 257, 471, 472,
	473, 0, 166, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 138, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 171, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	173, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 1149, 255, 0, 0, 468, 256, 0, 0, 0,
	165, 469, 470, 257, 471, 472, 473, 0, 166, 776,
	764, 765, 762, 763, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 138,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 833, 796, 834, 784, 820, 835,
	0, 269, 786, 785, 272, 273, 274, 0, 0, 836,
	837, 221, 0, 275, 222, 0, 930, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 821,
	295, 838, 839, 0, 296, 0, 297, 0, 298, 0,
	0, 822, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	771, 862, 0, 0, 0, 0, 0, 313, 314, 842,
	823, 824, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 865, 0, 237, 795, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 844,
	799, 825, 826, 827, 828, 845, 0, 800, 0, 337,
	866, 867, 338, 339, 340, 868, 829, 830, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	932, 931, 354, 355, 356, 358, 788, 357, 871, 360,
	361, 363, 362, 0, 0, 872, 772, 239, 364, 847,
	365, 366, 0, 797, 798, 0, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 850, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 789, 790, 791, 792, 419, 425, 426,
	0, 427, 408, 409, 428, 876, 429, 851, 793, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 831, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 787, 451, 0, 853, 854,
	855, 832, 0, 0, 453, 454, 252, 253, 770, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 794, 465, 466, 467, 254, 858, 493,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 0, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 2086, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 0,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 2522, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 1223, 0, 953, 952, 0,
	0, 0, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 1460, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 930, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 862,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 865, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 866, 867,
	338, 339, 340, 868, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 932, 931,
	354, 355, 356, 358, 359, 357, 871, 360, 361, 363,
	362, 0, 0, 872, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 876, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 1142, 0, 953, 952, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	930, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 861, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 862, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 863, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1141, 232, 233, 865,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 864, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 866, 867, 338, 339, 340, 868,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 869, 348, 349, 870, 0, 350, 351, 0,
	0, 352, 0, 353, 932, 931, 354, 355, 356, 358,
	359, 357, 871, 360, 361, 363, 362, 0, 0, 872,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 873, 372, 874,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 875,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 876,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 0, 0, 0,
	0, 469, 470, 257, 471, 472, 473, 1138, 0, 953,
	952, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 930, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 861, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 862, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 863, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1137, 232, 233, 865, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 864, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	866, 867, 338, 339, 340, 868, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 869, 348,
	349, 870, 0, 350, 351, 0, 0, 352, 0, 353,
	932, 931, 354, 355, 356, 358, 359, 357, 871, 360,
	361, 363, 362, 0, 0, 872, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 873, 372, 874, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 875, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 876, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 1099, 0, 953, 952, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 930, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	861, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 862, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 863, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1098, 232,
	233, 865, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 864, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 866, 867, 338, 339,
	340, 868, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 869, 348, 349, 870, 0, 350,
	351, 0, 0, 352, 0, 353, 932, 931, 354, 355,
	356, 358, 359, 357, 871, 360, 361, 363, 362, 0,
	0, 872, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 873,
	372, 874, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 875, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 876, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 0,
	0, 0, 0, 469, 470, 257, 471, 472, 473, 1096,
	0, 953, 952, 0, 0, 0, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 930, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 861, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 862, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	863, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1095, 232, 233, 865, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 864,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 866, 867, 338, 339, 340, 868, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	869, 348, 349, 870, 0, 350, 351, 0, 0, 352,
	0, 353, 932, 931, 354, 355, 356, 358, 359, 357,
	871, 360, 361, 363, 362, 0, 0, 872, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 873, 372, 874, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 875, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 876, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 946, 0, 953, 952, 0,
	0, 0, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 930, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 862,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	948, 232, 233, 865, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 866, 867,
	338, 339, 340, 868, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 932, 931,
	354, 355, 356, 358, 359, 357, 871, 360, 361, 363,
	362, 0, 0, 872, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 876, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 953, 952, 468,
	256, 0, 950, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 930, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 862,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 865, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 866, 867,
	338, 339, 340, 868, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 932, 931,
	354, 355, 356, 358, 359, 357, 871, 360, 361, 363,
	362, 0, 0, 872, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 876, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 953, 952, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 930, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 862,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 865, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 866, 867,
	338, 339, 340, 868, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 932, 931,
	354, 355, 356, 358, 359, 357, 871, 360, 361, 363,
	362, 0, 0, 872, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 876, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 953, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 930, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 861, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 862,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 863, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 865, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 864, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 866, 867,
	338, 339, 340, 868, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 869, 348, 349, 870,
	0, 350, 351, 0, 0, 352, 0, 353, 932, 931,
	354, 355, 356, 358, 359, 357, 871, 360, 361, 363,
	362, 0, 0, 872, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 873, 372, 874, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 875, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 876, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 594, 0, 207, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 213, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	212, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 206, 0, 207,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 476, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 213, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 212, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 207,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 476, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 213, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 1695, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 212, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 207,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 476, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 213, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 212, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 493,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 476, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 493,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 476, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 1979, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 1976, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 2056, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 1982, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 2054, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 2053,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	1981, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 2055, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 493,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 1979, 275, 222, 0, 0, 1973, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 1976, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 1982, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1972, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	1981, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 1980, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 601, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 600, 580, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 583,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 584, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 585, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 579,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 580, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 583, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 584, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 585, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 493, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 583, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 584, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 585, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 1117, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 921, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 941, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 943, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	921, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 938, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 940, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 921, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 934, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 936, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 921, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 516,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 515, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 514, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 493, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 1959,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 493, 2445, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 493, 2445, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	2442, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 493, 0, 468, 256, 0, 0, 0, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 921, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 1715, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 1713, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 1711, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 493,
	0, 468, 256, 0, 0, 0, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 258, 259, 260, 261, 1688,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 1648, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 1646,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 627, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 1196,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 628, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 624, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 623, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 1544, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1543, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 627, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 1196, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 628, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 624, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 623, 250,
	251, 452, 0, 0, 453, 1197, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 627, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 617,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 628, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 624, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 1167, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 623, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 1135,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1134, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 1131, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1130, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 1128, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1127, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 1125, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1124, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 1121, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1120, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 493, 0, 468, 256, 0,
	0, 0, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 258, 259, 260, 261, 1109, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 1107,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1106, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 1101, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 1092, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1091, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 246, 407, 0, 411, 412, 413,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 425, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 249, 250, 251, 452, 0, 0, 453, 454,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 1087, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 411, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 1083, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1085, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 960,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 962, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 957, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 627, 0, 493, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 617, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 496, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 616, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 358,
	359, 628, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	245, 388, 389, 0, 390, 391, 392, 393, 394, 0,
	396, 397, 395, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 618, 407, 0, 411, 412, 624,
	414, 415, 416, 417, 0, 423, 424, 418, 420, 421,
	422, 419, 619, 426, 0, 427, 408, 409, 428, 0,
	429, 247, 430, 431, 0, 441, 432, 433, 434, 410,
	435, 439, 440, 436, 437, 438, 248, 0, 442, 443,
	0, 444, 445, 446, 447, 448, 308, 449, 309, 450,
	451, 0, 623, 250, 251, 452, 0, 0, 453, 621,
	252, 253, 0, 455, 456, 0, 457, 458, 0, 0,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 254, 255, 0, 0, 468, 256, 607, 0, 493,
	0, 469, 470, 257, 471, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 496, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 245, 388, 389, 0,
	390, 391, 392, 393, 394, 0, 396, 397, 395, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	246, 407, 0, 608, 412, 413, 414, 415, 416, 417,
	0, 423, 424, 418, 420, 421, 422, 419, 425, 426,
	0, 427, 408, 409, 428, 0, 429, 247, 430, 431,
	0, 441, 432, 433, 434, 410, 435, 439, 440, 436,
	437, 438, 248, 0, 442, 443, 0, 444, 445, 446,
	447, 448, 308, 449, 309, 450, 451, 0, 249, 250,
	251, 452, 0, 0, 453, 454, 252, 253, 0, 455,
	456, 0, 457, 458, 0, 0, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 254, 255, 0,
	0, 468, 256, 603, 0, 493, 0, 469, 470, 257,
	471, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 496, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 245, 388, 389, 0, 390, 391, 392, 393,
	394, 0, 396, 397, 395, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 246, 407, 0, 411,
	412, 413, 414, 415, 416, 417, 0, 423, 424, 418,
	420, 421, 422, 419, 425, 426, 0, 427, 408, 409,
	428, 0, 429, 247, 430, 431, 0, 441, 432, 433,
	434, 410, 435, 439, 440, 436, 437, 438, 248, 0,
	442, 443, 0, 444, 445, 446, 447, 448, 308, 449,
	309, 450, 451, 0, 249, 250, 251, 452, 0, 0,
	453, 454, 252, 253, 0, 455, 456, 0, 457, 458,
	0, 0, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 254, 255, 0, 0, 468, 256, 592,
	0, 493, 0, 469, 470, 257, 471, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 496,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 245, 388,
	389, 0, 390, 391, 392, 393, 394, 0, 396, 397,
	395, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 246, 407, 0, 411, 412, 413, 414, 415,
	416, 417, 0, 423, 424, 418, 420, 421, 422, 419,
	425, 426, 0, 427, 408, 409, 428, 0, 429, 247,
	430, 431, 0, 441, 432, 433, 434, 410, 435, 439,
	440, 436, 437, 438, 248, 0, 442, 443, 0, 444,
	445, 446, 447, 448, 308, 449, 309, 450, 451, 0,
	249, 250, 251, 452, 0, 0, 453, 454, 252, 253,
	0, 455, 456, 0, 457, 458, 0, 0, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 254,
	255, 0, 0, 468, 256, 538, 0, 493, 0, 469,
	470, 257, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	2346, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	2344, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	2333, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 608, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 1557, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 0,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1548, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 245, 894, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 407,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 493, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 496, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 0, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 0, 387, 245, 388, 389, 0, 390, 391,
	392, 393, 394, 0, 396, 397, 395, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 246, 0,
	0, 411, 412, 413, 414, 415, 416, 417, 0, 423,
	424, 418, 420, 421, 422, 419, 425, 426, 0, 427,
	408, 409, 428, 0, 429, 247, 430, 431, 0, 441,
	432, 433, 434, 410, 435, 439, 440, 436, 437, 438,
	248, 0, 442, 443, 0, 444, 445, 446, 447, 448,
	308, 449, 309, 450, 451, 0, 249, 250, 251, 452,
	0, 0, 453, 454, 252, 253, 0, 455, 456, 0,
	457, 458, 0, 0, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 254, 255, 0, 0, 468,
	256, 0, 0, 0, 0, 469, 470, 257, 471, 472,
	473, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 1297, 0, 0, 1343,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 1330, 1316,
	0, 0, 0, 0, 0, 1297, 1313, 0, 1343, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1319,
	1320, 1321, 1322, 0, 0, 0, 0, 0, 1302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1334, 1344, 0, 0, 1324, 1325, 1326, 1319, 1320,
	1321, 1322, 0, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 1341, 0, 0,
	0, 0, 0, 0, 1311, 1312, 0, 0, 0, 0,
	1334, 1344, 0, 0, 1324, 1325, 1326, 1332, 0, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 1341, 0, 0, 0,
	0, 1342, 0, 1311, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 1332, 0, 0, 0,
	0, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 1330, 0, 0, 0, 0, 0, 0, 1297, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 1333,
	0, 1316, 1308, 1309, 1315, 1314, 1310, 1336, 1313, 1307,
	1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 0,
	0, 0, 2225, 0, 0, 0, 2226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 0,
	0, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 0, 0,
	0, 1319, 1320, 1321, 1322, 2731, 0, 0, 0, 0,
	1302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338,
	1339, 0, 0, 1334, 1344, 0, 0, 1324, 1325, 1326,
	1330, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 1340, 1341,
	0, 0, 0, 0, 0, 0, 1311, 1312, 0, 0,
	0, 0, 1296, 0, 0, 0, 0, 0, 0, 1332,
	1316, 0, 0, 0, 0, 0, 1317, 1313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1319, 1320, 1321, 1322, 0, 0, 0, 0, 0, 1302,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 1340, 1341, 0,
	0, 0, 0, 0, 0, 1311, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 0, 0, 1308, 1309, 1315, 1314, 1310, 1336,
	0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304,
	0, 0, 1323, 0, 0, 0, 0, 0, 2228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1318,
	0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	0, 0, 1335, 0, 0, 0, 1297, 0, 0, 1343,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 1297, 0,
	1333, 1343, 0, 1308, 1309, 1315, 1314, 1310, 1336, 0,
	1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 1319,
	1320, 1321, 1322, 1296, 0, 0, 0, 2227, 1302, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 1341, 0, 0,
	0, 0, 0, 0, 1311, 1312, 0, 0, 0, 0,
	0, 1319, 1320, 1321, 1322, 0, 0, 1332, 0, 0,
	1302, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 1334, 1344, 0, 0, 1324, 1325, 1326,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1341,
	0, 0, 0, 0, 0, 0, 1311, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 1323, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 1335, 0, 0, 0, 1297, 0, 1333,
	1343, 0, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307,
	1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 0,
	0, 0, 1296, 0, 0, 0, 2224, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 1294, 1295, 0, 1327, 1328, 1329,
	1337, 1338, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 1297,
	0, 1333, 1343, 0, 1308, 1309, 1315, 1314, 1310, 1336,
	0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304,
	1319, 1320, 1321, 1322, 1296, 0, 0, 0, 2223, 1302,
	0, 0, 1316, 0, 0, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 1341, 0,
	0, 0, 0, 0, 0, 1311, 1312, 0, 0, 0,
	0, 0, 1319, 1320, 1321, 1322, 0, 0, 1332, 0,
	0, 1302, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 1334, 1344, 0, 0, 1324, 1325,
	1326, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	1341, 0, 0, 0, 0, 0, 0, 1311, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 1323, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1318, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 1335, 0, 0, 0, 1297, 0,
	1333, 1343, 0, 1308, 1309, 1315, 1314, 1310, 1336, 0,
	1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 0,
	0, 0, 0, 1296, 0, 0, 0, 2222, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 1294, 1295, 0, 1327,
	1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1297, 1333, 0, 1343, 1308, 1309, 1315, 1314, 1310,
	1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303,
	1304, 1319, 1320, 1321, 1322, 3022, 1296, 0, 0, 0,
	1302, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 1344, 0, 0, 1324, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1341,
	0, 0, 0, 0, 0, 0, 1311, 1312, 0, 0,
	0, 0, 0, 0, 1319, 1320, 1321, 1322, 0, 1332,
	0, 0, 0, 1302, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 1334, 1344, 0, 0,
	1324, 1325, 1326, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 1341, 0, 0, 0, 0, 0, 0, 1311,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 1323, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1318, 0, 1294, 1295, 0, 1327, 1328,
	1329, 1337, 1338, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 1335, 0, 0, 0,
	1297, 1333, 0, 1343, 1308, 1309, 1315, 1314, 1310, 1336,
	0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304,
	0, 0, 0, 0, 3018, 1296, 0, 0, 0, 0,
	0, 0, 0, 1316, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 1294, 1295,
	0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1297, 1333, 0, 1343, 1308, 1309, 1315,
	1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300,
	1301, 1303, 1304, 1319, 1320, 1321, 1322, 2958, 1296, 0,
	0, 0, 1302, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 1344, 0, 0, 1324,
	1325, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 1341, 0, 0, 0, 0, 0, 0, 1311, 1312,
	0, 0, 0, 0, 0, 0, 1319, 1320, 1321, 1322,
	0, 1332, 0, 0, 0, 1302, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 0, 1334, 1344,
	0, 0, 1324, 1325, 1326, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 1341, 0, 0, 0, 0, 0,
	0, 1311, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1323, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 1294, 1295, 0,
	1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 1335, 0,
	0, 0, 1297, 1333, 0, 1343, 1308, 1309, 1315, 1314,
	1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301,
	1303, 1304, 0, 0, 0, 0, 2957, 1296, 0, 0,
	0, 0, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 0,
	1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1297, 1333, 0, 1343, 1308,
	1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298,
	1299, 1300, 1301, 1303, 1304, 1319, 1320, 1321, 1322, 2906,
	1296, 0, 0, 0, 1302, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1334, 1344, 0,
	0, 1324, 1325, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1341, 0, 0, 0, 0, 0, 0,
	1311, 1312, 0, 0, 0, 0, 0, 0, 1319, 1320,
	1321, 1322, 0, 1332, 0, 0, 0, 1302, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 1341, 0, 0, 0,
	0, 0, 0, 1311, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 1323, 0, 0,
	0, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 1294,
	1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 0,
	1335, 0, 0, 0, 1297, 1333, 0, 1343, 1308, 1309,
	1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299,
	1300, 1301, 1303, 1304, 0, 0, 0, 0, 2867, 1296,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 1297, 1333, 0,
	1343, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 1319, 1320, 1321,
	1322, 2779, 1296, 0, 0, 0, 1302, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	1344, 0, 0, 1324, 1325, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 1341, 0, 0, 0, 0,
	0, 0, 1311, 1312, 0, 0, 0, 0, 0, 0,
	1319, 1320, 1321, 1322, 0, 1332, 0, 0, 0, 1302,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 1341, 0,
	0, 0, 0, 0, 0, 1311, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 1323,
	0, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 1342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1318,
	0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	0, 0, 1335, 0, 0, 0, 1297, 1333, 0, 1343,
	1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306,
	1298, 1299, 1300, 1301, 1303, 1304, 0, 0, 0, 0,
	2736, 1296, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 0, 1294, 1295, 0, 1327, 1328, 1329,
	1337, 1338, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 1297,
	1333, 0, 1343, 1308, 1309, 1315, 1314, 1310, 1336, 0,
	1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 1319,
	1320, 1321, 1322, 2735, 1296, 0, 0, 0, 1302, 0,
	0, 0, 1316, 0, 0, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 1341, 0, 0,
	0, 0, 0, 0, 1311, 1312, 0, 0, 0, 0,
	0, 0, 1319, 1320, 1321, 1322, 0, 1332, 0, 0,
	0, 1302, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 0, 1334, 1344, 0, 0, 1324, 1325,
	1326, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	1341, 0, 0, 0, 0, 0, 0, 1311, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 1323, 0, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1318, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337,
	1338, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 1335, 0, 0, 0, 1297, 1333,
	0, 1343, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307,
	1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 0,
	0, 0, 2734, 1296, 0, 0, 0, 0, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 1294, 1295, 0, 1327,
	1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1297, 1333, 0, 1343, 1308, 1309, 1315, 1314, 1310,
	1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303,
	1304, 1319, 1320, 1321, 1322, 2706, 1296, 0, 0, 0,
	1302, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 1344, 0, 0, 1324, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1341,
	0, 0, 0, 0, 0, 0, 1311, 1312, 0, 0,
	0, 0, 0, 0, 1319, 1320, 1321, 1322, 0, 1332,
	0, 0, 0, 1302, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 1334, 1344, 0, 0,
	1324, 1325, 1326, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 1341, 0, 0, 0, 0, 0, 0, 1311,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 1323, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1318, 0, 1294, 1295, 0, 1327, 1328,
	1329, 1337, 1338, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 1335, 0, 0, 0,
	1297, 1333, 0, 1343, 1308, 1309, 1315, 1314, 1310, 1336,
	0, 1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304,
	0, 0, 0, 0, 2526, 1296, 0, 0, 0, 0,
	0, 0, 0, 1316, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 1294, 1295,
	0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1297, 1333, 0, 1343, 1308, 1309, 1315,
	1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300,
	1301, 1303, 1304, 1319, 1320, 1321, 1322, 2499, 1296, 0,
	0, 0, 1302, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 1344, 0, 0, 1324,
	1325, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 1341, 0, 0, 0, 0, 0, 0, 1311, 1312,
	0, 0, 0, 0, 0, 0, 1319, 1320, 1321, 1322,
	0, 1332, 0, 0, 0, 1302, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 0, 1334, 1344,
	0, 0, 1324, 1325, 1326, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 1341, 0, 0, 0, 0, 0,
	0, 1311, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1323, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 1333, 0, 0, 1308, 1309, 1315, 1314,
	1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301,
	1303, 1304, 0, 0, 0, 0, 1825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1294, 1295, 0, 1327, 1328,
	1329, 1337, 1338, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 1343, 0, 0, 1333, 0, 0, 1308,
	1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298,
	1299, 1300, 1301, 1303, 1304, 1296, 0, 2189, 0, 0,
	0, 0, 0, 1316, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1319, 1320, 1321, 1322, 1296, 0, 0,
	0, 0, 1302, 3100, 0, 1316, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 1344, 0, 0, 1324,
	1325, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 1341, 0, 0, 0, 0, 0, 0, 1311, 1312,
	0, 0, 0, 0, 0, 1319, 1320, 1321, 1322, 0,
	0, 1332, 0, 0, 1302, 0, 2272, 0, 1317, 2271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 1334, 1344, 0,
	0, 1324, 1325, 1326, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1341, 0, 0, 0, 3099, 0, 0,
	1311, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 1323, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 1294, 1295, 0, 1327,
	1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 1335, 0, 2164,
	0, 1297, 0, 1333, 1343, 0, 1308, 1309, 1315, 1314,
	1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300, 1301,
	1303, 1304, 0, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 1313, 1928, 0, 0, 0, 0, 0, 1294, 1295,
	0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 2165, 0,
	1927, 0, 0, 1297, 0, 1333, 1343, 0, 1308, 1309,
	1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299,
	1300, 1301, 1303, 1304, 1319, 1320, 1321, 1322, 1296, 0,
	0, 0, 0, 1302, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1344, 0, 0,
	1324, 1325, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 1341, 0, 0, 0, 0, 0, 0, 1311,
	1312, 0, 0, 0, 0, 0, 1319, 1320, 1321, 1322,
	0, 0, 1332, 0, 0, 1302, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 1334, 1344,
	0, 0, 1324, 1325, 1326, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 1341, 0, 0, 0, 0, 0,
	0, 1311, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 1323, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1318, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 1294, 1295, 0,
	1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 1335, 0,
	0, 0, 1297, 0, 1333, 1343, 0, 1308, 1309, 1315,
	1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299, 1300,
	1301, 1303, 1304, 0, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1297, 0, 1333, 1343, 0, 1308,
	1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298,
	1299, 1300, 1301, 1303, 1304, 1319, 1320, 1321, 1322, 1296,
	0, 0, 0, 0, 1302, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1334, 1344, 0,
	0, 1324, 1325, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1341, 0, 0, 0, 0, 0, 0,
	1311, 1312, 0, 0, 0, 0, 0, 1319, 1320, 1321,
	1322, 0, 0, 1332, 0, 0, 1302, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 1334,
	1344, 0, 0, 1324, 1325, 1326, 0, 0, 0, 0,
	0, 1331, 723, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 1341, 0, 0, 0, 0,
	0, 0, 1311, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 1323, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 1294, 1295,
	0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 1335,
	0, 0, 0, 1297, 0, 1333, 1343, 0, 1308, 1309,
	1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298, 1299,
	1300, 1301, 1303, 1304, 0, 0, 0, 0, 1296, 0,
	0, 2503, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 2277, 0, 0, 1297, 0, 1333, 1343, 0,
	1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306,
	1298, 1299, 1300, 1301, 1303, 1304, 1319, 1320, 1321, 1322,
	1296, 0, 0, 0, 0, 1302, 0, 0, 1316, 0,
	2282, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 1344,
	0, 0, 1324, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 1341, 0, 0, 0, 0, 0,
	0, 1311, 1312, 0, 0, 0, 0, 0, 1319, 1320,
	1321, 1322, 0, 0, 1332, 0, 0, 1302, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 1341, 0, 0, 0,
	0, 0, 0, 1311, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 1323, 0,
	0, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 1294,
	1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 0,
	1335, 0, 0, 0, 1297, 0, 1333, 1343, 0, 1308,
	1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306, 1298,
	1299, 1300, 1301, 1303, 1304, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	0, 0, 0, 2221, 0, 0, 1297, 0, 1333, 1343,
	0, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 1319, 1320, 1321,
	1322, 1296, 0, 0, 0, 0, 1302, 0, 0, 1316,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	1344, 0, 0, 1324, 1325, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 1341, 0, 0, 0, 0,
	0, 0, 1311, 1312, 0, 0, 0, 0, 0, 1319,
	1320, 1321, 1322, 0, 0, 1332, 0, 0, 1302, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 1341, 2240, 0,
	0, 0, 0, 0, 1311, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 0, 1323,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 1342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 1335, 0, 0, 0, 1297, 0, 1333, 1343, 0,
	1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305, 1306,
	1298, 1299, 1300, 1301, 1303, 1304, 0, 0, 0, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 1297, 0, 1333,
	1343, 0, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307,
	1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 1319, 1320,
	1321, 1322, 1296, 0, 0, 0, 0, 1302, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 1341, 0, 0, 0,
	0, 0, 0, 1311, 1312, 0, 0, 0, 0, 0,
	1319, 1320, 1321, 1322, 0, 0, 1332, 0, 0, 1302,
	0, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 1341, 0,
	0, 0, 0, 0, 0, 1311, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	1323, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 1342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1318,
	0, 1294, 1295, 0, 1327, 1328, 1329, 1337, 1338, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 1297, 0, 1333, 1343,
	0, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307, 1305,
	1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 0, 0, 1308, 1309, 1315, 1314, 1310, 1336, 0,
	1307, 1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 1319,
	1320, 1321, 1322, 0, 0, 0, 0, 0, 1302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1608, 0, 0, 0, 0, 0, 0,
	0, 1334, 1344, 0, 0, 1324, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 1341, 1619, 1604,
	1609, 1592, 1629, 1628, 1311, 1312, 1594, 1593, 0, 0,
	0, 0, 0, 1638, 1637, 0, 0, 1332, 0, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1630, 0, 1626, 1625, 0, 0, 0,
	0, 0, 0, 0, 0, 1624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 1623, 1621, 1622, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1603, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 1612, 1607, 1613, 1614, 1615, 1616, 1617,
	0, 1611, 0, 0, 0, 0, 0, 0, 0, 0,
	1635, 1636, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1627, 0, 0, 0, 1605, 1606, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	0, 0, 1308, 1309, 1315, 1314, 1310, 1336, 0, 1307,
	1305, 1306, 1298, 1299, 1300, 1301, 1303, 1304, 0, 0,
	1620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1597, 1598, 1599,
	1600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1618, 1601, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1595,
	0, 0, 1631, 1632, 1633, 1634, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1602, 0, 0,
	0, 0, 1639,
}
var sqlPact = [...]int{

	308, -1000, 11, -1000, -1000, -1000, 277, -1000, -1000, -1000,
	-1000, 275, 273, 270, -1000, 268, 265, 264, 263, 258,
	255, 254, 246, 235, 232, 231, 230, -1000, -1000, 229,
	-1000, -1000, -1000, -1000, 228, 227, 225, -1000, 216, 1361,
	31495, 214, 212, 210, 2746, 49173, 1606, 207, 203, -1000,
	199, 1509, 36477, 1266, 1927, -1000, 198, 196, 1621, 48793,
	3365, 1993, 34167, 1393, 1980, 48407, 31109, 1976, 33781, 48021,
	-1000, -1000, 1102, -1000, -1000, 47635, 195, 193, 191, 189,
	188, -1000, 187, 47249, 171, 163, 162, 158, 155, 154,
	153, 146, -1000, 144, 140, 136, 131, 130, 129, 128,
	125, 122, 121, 118, 107, 105, 104, 100, 99, -1000,
	5683, 96, 94, 88, -1000, 1392, 78, 77, 76, 75,
	73, -1000, -1000, 72, 71, 70, 69, 64, 63, -1000,
	164, 62, 57, 56, 53, 52, -1000, 1185, 707, 3051,
	13017, 1323, 1260, 1258, 1247, 1246, 806, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51833, 49173, 49, -134, 45,
	-1000, 2368, 811, 24115, 308, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36091, 35705, 35319,
	29583, 46863, 46477, 10138, 10138, 996, -1000, -1000, -1000, -1000,
	-1000, 9, 32635, 49173, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 328, -1000, -1000, -1000, -1000,
	-1000, -1000, 20139, 545, 19716, 481, 19293, 293, 448, -1000,
	-1000, -1000, 325, -1000, -1000, -1000, -1000, 1322, -1000, -1000,
	-1000, -1000, 46091, 45705, 2248, 45319, 29187, 28791, 44933, 1838,
	1834, 44547, -1000, -1000, 44161, -1000, -1000, 2277, 1991, 1987,
	34933, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	43781, 43395, 43009, 42623, 42237, 28395, 27999, 629, -1000, -1000,
	-1000, -1000, 25273, -1000, -1000, -1000, -1000, -1000, 44, -1000,
	43, 41, -1000, 35, 28, 26, 25, 24, 23, 22,
	21, -1000, 19, 18, -1000, 17, 16, -1000, 15, 14,
	1489, 1366, 1470, 41851, 1096, 1839, -1000, 1599, 48, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49173, -1000, 20548, 538,
	-1000, 627, -1000, 1995, -1000, 20548, 538, -1000, 1592, 220,
	1526, -1000, -1000, -1000, 1421, 1084, -1000, -1000, 49173, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2698, 1455, 626, 41465,
	-1000, 1675, -1000, 767, 13835, -1000, 949, -1000, 13835, 324,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2070, 1219, 2632, 27603,
	1517, 2376, 2245, 2697, 1779, 2218, 2173, 2169, 2164, 2122,
	2696, 1165, 2691, 1049, 886, 2683, 2095, 2082, 2656, 1494,
	900, 2678, 2669, 2077, 1992, -1000, -1000, -1000, -1000, 1115,
	-1000, -1000, -1000, -1000, -1000, -1000, 37997, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1185, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1717,
	2337, 2337, 2337, 2431, 425, 419, -1000, 164, -1000, 1456,
	-1000, 1433, -1000, -1000, -1000, 58490, -1000, -1000, 20548, 20548,
	20548, 20548, 20548, 1345, -1000, -1000, -1000, 661, -1000, 625,
	548, 11366, -1000, -1000, 2584, -1000, -1000, -1000, 433, 20548,
	-1000, 311, -1000, -1000, -1000, -1000, 623, 2659, -1000, 837,
	-1000, -1000, -1000, 773, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2063, 580, 577, -1000, 564, 563, 562, -1000, -1000,
	-1000, 622, 621, 617, 616, 607, 604, 602, 601, -1000,
	-1000, -1000, 1264, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 821, -1000, 821, 821, 551, 551,
	600, 598, 552, 597, -1000, -1000, 595, 551, 594, 593,
	-1000, -1000, 591, 717, -1000, 710, 588, 585, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1523, -1000, -1000,
	1523, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 994, 50693,
	-1000, -1000, -1000, 7, 49173, -1000, 448, 7, -1000, -1000,
	582, -1000, 14667, 14667, 14667, -1000, -1000, 1589, 20548, -1000,
	1653, -1000, 3352, -217, 581, 24887, 701, 701, -1000, 22957,
	665, 27207, -1000, 580, 577, 564, 563, 562, -1000, 310,
	-1000, -1000, -1000, -1000, -1000, 1841, 2239, 979, -1000, 1192,
	2238, -1000, 3005, 2234, 1189, -1000, -1000, 798, 2231, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1420, -1000,
	-1000, 2091, 2229, -200, 2098, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1614, -1000, 29963, 32635, 1, -1000, -1000, -117,
	-1000, 9744, 58490, -1000, -1000, -1000, 58490, 778, -1000, -1000,
	2227, -1000, 58490, 777, -1000, -1000, 2223, -1000, 1975, 49173,
	10138, 49173, 49173, -1000, 561, 1670, 1572, -1000, -1000, 32255,
	3005, 1669, -1000, -1000, 786, 1668, -1000, -1000, 1664, -1000,
	448, -1000, -1000, 41079, 51453, 786, 1662, -1000, -1000, -1000,
	37997, -1000, 49173, -1000, 49173, -1000, 1113, -1000, 51073, 145,
	2217, -1000, -1000, 145, 2213, -1000, 145, 2211, -1000, 135,
	2202, -1000, -1000, 1405, 2200, -1000, -129, 2198, -1000, -1000,
	-129, 2189, -1000, -1000, 20548, -15, -1000, -1000, -1000, 811,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 40693, 29963, -1000,
	-1000, 32255, 49173, 34547, 774, 58490, -1000, 2521, 58999, 29963,
	58490, -1000, 32255, 49173, 2050, -1000, 40307, 39921, 2373, 757,
	-1000, -1000, 49173, -1000, 20548, -1000, 2519, 1603, -43, -1000,
	-1000, -1000, -1000, -1000, 1734, 1767, 926, 999, -1000, 13835,
	13835, 2295, -1000, 305, 10138, -1000, -1000, 1055, 1774, -1000,
	-1000, -1000, -1000, -1000, 39535, -1000, -1000, -1000, 1412, 49173,
	-1000, -1000, 2047, -1000, 31875, 49173, -1000, 49173, -1000, 49173,
	-1000, 49173, -1000, 49173, -1000, -1000, -1000, -1000, -1000, 2144,
	1274, 2041, -1000, 49173, -1000, 49173, -1000, -1000, -1000, 1721,
	-1000, -1000, -1000, 39155, 38769, 38383, -1000, -1000, 1249, -1000,
	1048, -1000, -1000, 157, -1000, -1000, 1717, -1000, 1585, 1804,
	18870, 1775, 20548, 164, -1000, -1000, 164, 164, 12594, -1000,
	-1000, -1000, 49173, -1000, 6458, 58999, 10138, 1018, 20548, 20548,
	20548, 20548, 20548, 20548, 20548, 20548, 20548, 20548, 20548, 20548,
	20548, 20548, 20548, 20548, 20548, 20548, 20548, 20548, 20548, 20548,
	20548, 20548, 20548, 20548, 20548, 20548, 20548, 20548, 20548, 20548,
	20548, 20548, 20548, 1593, 20548, 992, 20548, 20548, 20548, 20548,
	1524, -1000, -1000, 1409, 491, 1440, -1000, 2587, 2587, 2587,
	58851, 58851, 486, 661, -1000, 20548, -1000, 538, 20548, 419,
	56255, 1604, 8, 10957, -1000, -1000, -1000, -1000, 18447, 816,
	58490, 9350, 10534, -1000, 2641, 1201, 2072, 1883, 557, 724,
	723, 722, 713, 578, 20548, 20548, 20548, 20548, 20548, 20548,
	20548, 20548, -1000, -1000, -1000, -1000, -1000, -1000, 2584, -1000,
	18038, 17615, -1000, 2625, 17192, 16769, -1000, 16346, 21775, 15923,
	1016, 1004, 1003, 983, 20548, 11775, -1000, -43, -1000, 50693,
	-1000, 49173, 7, 2493, 20548, 190, -1000, 57118, -1000, 190,
	190, 556, -17, 58490, 1782, 1777, 24501, 1735, 1394, 1394,
	1394, -1000, 555, 640, 701, 6967, 15500, 554, 701, 701,
	261, 36857, 1423, 36857, 323, 418, 22571, 1653, -1000, -1000,
	49173, 10138, -13, 1275, -1000, 33395, 2439, 2351, 2313, 1109,
	-1000, 1072, 2428, 37997, 2452, 538, 2350, 1973, -1000, -1000,
	990, 37997, 3005, -1000, 58999, -1000, 1886, 2416, 1095, 1092,
	1095, 1095, 1111, 37997, 988, 1282, 29963, 2344, 986, -37,
	2443, 538, 2336, 1957, 985, -1000, -1000, 49173, 10138, 2327,
	1047, 695, 1, 32635, 49173, 299, -1000, 20548, 538, 20548,
	538, 1069, -25, 295, 1790, 1788, 261, -1000, 33015, 2487,
	2186, 49173, 977, -1000, 3005, 2184, -1000, 1279, -1000, 2177,
	2171, 2483, 1568, 1660, -1000, -1000, -1000, 1567, 1657, 1033,
	2167, 803, 303, 2481, 303, 26435, -1000, 49173, -1000, 49173,
	-1000, -1000, 49173, -1000, 49173, -1000, 49173, -1000, 49173, 49173,
	-1000, 49173, 29963, 29963, 29963, -28, 3770, 30723, 785, 976,
	-148, -1000, 845, 33015, 3651, -31, -1000, 967, -1000, -1000,
	-1000, 260, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 821,
	553, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 552, 1264, 551, 551, 551, -1000, -1000,
	-1000, 717, -1000, 710, -1000, -1000, -1000, 821, 821, -1000,
	-1000, -184, 1953, -117, 34547, 695, -1000, 695, -1000, 2022,
	-1000, 2338, 750, -38, 883, -43, -1000, 1523, -1000, 1504,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2658, -1000, 2597, -1000, -1000, 2619, -2,
	-1000, -2, -1000, 10138, -1000, 49173, 2015, -1000, -1000, -1000,
	-1000, -1000, -1000, 49173, -1000, 49173, -1000, -1000, -1000, -1000,
	-1000, -1000, 525, -1000, 2008, -1000, 3770, 292, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49173, 49173, 49173, -1000,
	37997, -1000, -1000, -1000, -1000, 58490, -1000, 463, -1000, -1000,
	58490, 1235, 1800, -1000, 1800, -3, -1000, 57046, 1757, 49173,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 754, 903, 903, 975, 975, 975, 975, 2460,
	660, 252, 1490, 4103, 4103, 4103, 4103, 4103, 4103, 4103,
	4103, 392, 859, 859, 392, 392, 392, 392, 392, 859,
	859, 859, 4103, 4103, 4103, 58851, 58562, 360, 20548, 20548,
	972, 1371, 491, 360, 20548, 360, 360, 360, 360, -1000,
	1155, -1000, -1000, -1000, -1000, 1951, 549, 21775, 21775, -1000,
	-1000, -1000, 11366, 20548, -1000, -1000, -1000, -1000, 548, 20548,
	-1000, 56328, -246, 414, -196, 289, 49173, 20548, 639, -110,
	-1000, 1110, -1000, 20548, 284, -1000, -1000, -27, 20548, 20548,
	20548, 413, -1000, 412, -1000, 965, -1000, 957, 955, 952,
	-1000, 541, 1419, 539, 536, 20548, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 58201, 53722, 53433, 53361,
	52601, 53072, 52933, -44, -45, 411, -1000, 1940, -196, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 408, -1000, 407, -46,
	-1000, -47, -1000, 406, -1000, 58129, -196, 402, 446, -1000,
	21775, 21775, 21775, -1000, 399, -1000, 56757, -1000, 745, 740,
	738, 736, 57840, 15077, 15077, 15077, 398, 57768, 20548, -196,
	-1000, -1000, 535, -56, 803, 14667, 23729, 10138, -1000, 803,
	803, 20548, -1000, 20548, 24501, 24501, 1476, 1773, 24501, -1000,
	-1000, -1000, -1000, 36857, 464, 701, 36857, -1000, 2584, 1781,
	-1000, 397, -1000, 14258, 36857, 36857, 10138, -1000, -1000, 49173,
	448, -1000, -1000, 701, 396, 283, 1622, 49173, 49173, 49173,
	-1000, -1000, 1654, 50313, 1647, 58999, 49173, -1000, -1000, 534,
	533, 1755, 1754, 49173, 49173, 49933, 49553, 49173, 1528, 20548,
	1611, 1628, 538, -1000, 735, 532, 49173, 1184, -1000, -1000,
	-1000, -1000, -1000, 49173, -1000, -1000, 2608, -1000, 1095, -1000,
	-1000, -1000, 1095, 3005, 1178, 49173, 29963, 795, 731, 49173,
	1285, 538, -1000, 729, 531, 10138, 1212, -1000, 728, 49173,
	1862, -1000, 1613, -1000, -1000, 8956, 58490, -1000, 58490, -1000,
	-1000, -1000, 10138, 1855, 1855, 395, -11, -1000, -1000, -1000,
	-1000, -1000, -1000, 1831, 49173, 644, 49173, 538, 49173, 141,
	29963, 49173, 29963, 29963, 29963, 538, 49173, 2162, 49173, 2157,
	2246, 681, 49173, 1450, 20548, 1436, -1000, 25659, 830, 49173,
	1159, 117, -1000, -1000, -1000, 33, 49173, -1000, -1000, 145,
	145, 145, -1000, 135, 1405, -1000, -129, -129, -1000, -1000,
	-1000, 1929, 37617, 49173, 2469, 29963, -57, -1000, 851, 933,
	932, -1000, 58999, -1000, 659, 943, -1000, 2607, 529, 2584,
	-1000, 785, 49173, 95, -1000, 788, 1582, -1000, 13835, 13835,
	-1000, 1523, -1000, -1000, 1171, -1000, 1193, -1000, -1000, -1000,
	-1000, 13835, -1000, -1000, 1041, -117, -117, -1000, -1000, 197,
	-1000, 49173, -1000, -1000, -1000, -1000, 1235, -1000, 20548, -1000,
	-1000, -1000, 12594, -1000, -1000, -1000, 49173, -206, 20548, 360,
	360, 20548, 21775, 21775, -1000, 360, -1000, -1000, -1000, -1000,
	-1000, 1926, 528, 20548, 58999, 5259, 5134, -58, 392, -1000,
	20548, -1000, 8562, -64, 55966, -1000, -1000, 650, 2221, -1000,
	20548, 57479, 8168, 378, 13426, -1000, 57407, -33, -33, -1000,
	2654, 1692, 1498, 1220, 1129, 2606, -1000, 26821, 812, 1450,
	55893, 6458, 58999, 20548, 20548, -1000, 20548, 20548, 20548, -1000,
	-1000, 2584, -1000, 20548, -1000, -1000, -1000, -1000, -1000, 1918,
	20548, -1000, 6458, 58999, 21775, 21775, 21775, 21775, 21775, 21775,
	21775, 21775, 21775, 21775, 21775, 21775, 21775, 21775, 21775, 21775,
	21775, 21775, 21775, 1731, 21775, 2575, 2575, 2575, -1000, 1979,
	1918, 20548, 20548, -1000, -1000, -1000, -1000, 58999, 377, 375,
	374, -1000, 20548, -196, 3651, -1000, 1879, -1000, -118, -1000,
	1653, -1000, -1000, 1879, 1879, -71, 58490, -1000, 1476, -1000,
	527, 20548, 24501, -1000, 638, -1000, -72, -1000, 36857, -1000,
	635, -243, -1000, 690, -1000, 701, 373, -1000, -1000, -1000,
	282, 448, -1000, 36857, -1000, 10138, -1000, -1000, 938, 935,
	-1000, 2152, -1000, 1644, -1000, 835, -1000, 1256, 20548, 23343,
	526, 523, 1324, -1000, 2126, 1405, 2124, 1405, -1000, -1000,
	734, -1000, 58490, 522, 521, -1000, -13, 1268, -1000, 26055,
	20548, -1000, 934, -1000, -1000, -1000, 3005, 924, -1000, -1000,
	1278, 26055, -1000, -1000, -1000, 26055, 20548, -1000, -37, 922,
	26055, 2093, 785, 1914, 1059, -1000, -1000, -1000, -1000, -1000,
	-1000, 1813, 33015, 49173, 520, 49173, 519, -1000, -1000, 515,
	49173, 695, 3005, -1000, 786, -1000, -1000, 842, 10138, 514,
	10138, 1740, 681, 30343, -1000, 786, 1804, -1000, 58490, -1000,
	1159, 12184, 2317, -73, -1000, 281, -1000, -1000, -1000, 803,
	26435, 24501, 20548, 2666, -78, -1000, -1000, -1000, -1000, -1000,
	538, -40, 513, -1000, 689, 685, -117, 1480, 1839, 1839,
	-1000, 2595, -1000, 634, 372, 2584, 369, -1000, -117, 49173,
	-1000, 1471, 10138, 49173, 49173, 10138, 49173, -1000, -1000, -43,
	-1000, -1000, -1000, -1000, 49173, -1000, -1000, -1000, 1534, 55604,
	-1000, 2330, 10138, 2578, 360, 4992, 3773, 20548, 58999, 4902,
	-79, 20548, 20548, -1000, 633, 58490, -1000, -1000, -1000, -1000,
	-1000, -1000, 58490, 20548, 279, -1000, 2589, 20548, 368, 367,
	366, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 364,
	-1000, -1000, 52213, -1000, 20548, 363, -1000, 362, 359, 52640,
	6259, 55531, 55242, 55169, 357, 58490, 1979, 58490, -1000, -1000,
	708, 708, 1056, 1056, 1056, 1056, 2575, 618, 888, 326,
	579, 579, 579, 1076, 1130, 1130, 579, 579, 579, 1902,
	1729, 511, 747, -1000, -1000, 58490, 58490, 356, -1000, -1000,
	-1000, -196, 345, 1871, 2410, -1000, 24501, 1871, 1871, -1000,
	-1000, 49173, 58490, -1000, -217, -1000, 2584, -1000, -1000, 1781,
	-1000, 7375, 36857, 701, 10138, -1000, -1000, 221, 49173, 49173,
	49173, 2112, -1000, 3078, -1000, 54880, -90, -1000, 2370, 2370,
	20548, 261, -1000, -1000, 510, 23343, 49173, -1000, 1772, 1795,
	874, 49173, -1000, 49173, -1000, -1000, 49173, 49173, 49173, 49173,
	49173, -1000, 508, -91, 49173, 49173, 29963, -1000, -1000, -96,
	10138, -1000, 2324, -1000, 29963, 971, 1285, 1854, -1000, 503,
	23343, 501, 49173, 33015, 2468, -1000, 785, -1000, -1000, 498,
	1889, 1565, 23343, 1554, 1743, 681, 30343, -1000, 1033, 1159,
	-1000, -1000, -101, -1000, 505, 538, 49173, 2664, 1450, -1000,
	-115, 58490, -1000, 682, -1000, 37237, 37237, 29963, 29963, -1000,
	2282, 2280, 632, -1000, -1000, 344, -1000, -117, 1700, -1000,
	-1000, 1311, 1612, -1000, -1000, -1000, -1000, -1000, 2330, 20548,
	20548, 4902, -98, -1000, 360, 360, -1000, 58490, 7774, -1000,
	57407, -1000, -1000, -1000, -1000, 1316, -1000, 54807, -1000, -1000,
	-1000, 20548, 20548, -1000, -1000, -1000, -1000, -1000, -1000, 21775,
	1900, 497, 58999, -1000, -1000, 801, 20548, 20548, 1653, 801,
	801, -99, 701, -1000, -1000, -1000, 2584, -1000, 36857, 221,
	10138, -1000, -1000, -1000, 49173, -1000, 49173, -1000, 10138, 49173,
	1920, 1637, -1000, -1000, 1751, 492, 21775, 49173, 762, -1000,
	1335, 23343, 2330, 10138, 2330, 54518, 10534, -104, -105, 1634,
	-1000, 1626, 20548, -1000, 58999, 1405, 1405, -119, -120, -1000,
	912, 906, 20548, 901, -1000, -1000, -1000, 898, -1000, 715,
	-129, 26055, -1000, -1000, 1334, 23343, -122, 23343, -131, 338,
	538, -1000, 23343, -1000, 49173, -137, 49173, -1000, 681, 30343,
	-1000, 2246, -1000, 2253, 49173, 2308, -1000, -1000, -1000, 1804,
	491, -1000, -145, -1000, -1000, 488, 485, -1000, -1000, -151,
	-1000, 755, 732, -1000, -1000, -1000, 10138, 1040, -1000, 360,
	360, -1000, -1000, -1000, 333, 1450, 2401, -1000, 54445, 54156,
	4083, 21775, 58999, -152, -1000, 49173, 58490, -196, -1000, -1000,
	-1000, 36857, 631, -1000, -1000, 1706, -1000, -1000, -1000, 49173,
	1643, -1000, -1000, 20548, 747, 482, 20548, -1000, 1813, 480,
	-1000, -1000, -1000, -1000, -1000, -1000, 2370, -27, -1000, 1202,
	-1000, -1000, 58490, 2362, -1000, -1000, 477, 476, 49173, 49173,
	-33, 473, 468, 26055, -1000, 49173, -153, 1335, -155, -1000,
	1813, -1000, -161, 842, -1000, 467, 30343, -1000, 1740, 998,
	-164, 49173, 1159, -1000, -1000, 29963, 29963, 1700, -1000, 49173,
	-1000, 49173, -1000, 49173, -1000, 1182, 20548, -1000, -1000, 4083,
	-169, -1000, -158, -1000, 2464, -1000, -1000, -1000, -1000, 2111,
	54083, 1708, 49173, 53794, 1285, 49173, 2330, 330, 49173, 840,
	10138, 1311, 1311, -1000, -1000, 309, 20548, 20548, -1000, 461,
	-1000, 1813, 1335, 1285, 1335, 458, 23343, -1000, 1743, 1108,
	-1000, 803, -1000, -1000, -170, -171, -1000, -172, -177, -1000,
	147, 21366, 21366, -196, -1000, 49173, 457, 2081, -1000, 1538,
	1515, 97, 860, -1000, -179, -1000, -1000, 448, -1000, 20548,
	-1000, -185, -1000, 829, -186, -1000, 828, 2589, -187, -193,
	49173, 1285, 1813, -1000, 1813, 23343, -194, -1000, 26435, -1000,
	785, 785, -1000, -1000, -1000, -1000, -1000, 22169, 1379, 1145,
	56685, -1000, -1000, -1000, 49173, -1000, 1552, 1543, 1127, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1708, 58490, -1000, 1311,
	1848, -1000, 1311, 1897, -1000, -1000, -204, -1000, 1285, 1285,
	-210, -1000, -202, -1000, -1000, 2527, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2258, -1000, 857, 1595, 1595, 1538, -1000,
	447, -1000, 445, 1399, -1000, -1000, 1335, -1000, 20957, -1000,
	2554, -1000, -1000, 1760, -1000, -1000, 20548, 20548, -1000, -1000,
	-1000, 1813, -1000, -1000, -1000, -1000, -231, -232, 1285, 1285,
	895, -1000, -1000, 444, 20548, -233, 1285, -1000,
}
var sqlPgo = [...]int{

	0, 3152, 3150, 2003, 3144, 2548, 3140, 3137, 3136, 3134,
	3133, 2498, 3130, 3127, 3126, 3124, 3121, 3120, 3119, 3117,
	3115, 3111, 3108, 3106, 3105, 3104, 3103, 3102, 3101, 3100,
	3099, 3097, 2458, 3096, 2450, 3087, 3086, 3085, 3084, 3079,
	3078, 3076, 3072, 26, 3071, 3070, 3067, 3066, 2448, 3063,
	3062, 2445, 3056, 3048, 2437, 3047, 3046, 3043, 2405, 2402,
	3042, 3040, 2349, 3039, 3035, 2339, 3031, 2335, 3027, 3026,
	2329, 3023, 97, 110, 3022, 2294, 3020, 3018, 2261, 2222,
	2205, 3015, 2199, 3012, 3010, 2194, 2190, 3008, 224, 3006,
	3000, 2998, 2994, 2172, 2148, 2992, 2990, 2986, 171, 2985,
	2053, 2984, 2983, 2980, 2978, 2966, 2962, 2960, 2959, 2955,
	2953, 2948, 2944, 2941, 2940, 2939, 2933, 2930, 2929, 2928,
	2925, 2924, 2921, 2918, 2917, 2915, 2914, 179, 113, 2913,
	2912, 2034, 2013, 2911, 2910, 51, 48, 17, 68, 119,
	161, 4145, 154, 2909, 2907, 2905, 2899, 2893, 34, 125,
	115, 111, 116, 2893, 160, 2892, 2891, 56, 49, 22,
	20, 81, 2888, 2887, 2886, 2075, 79, 2885, 2878, 170,
	148, 2873, 366, 42, 90, 100, 85, 114, 54, 2872,
	101, 18, 2870, 131, 271, 2869, 59, 39, 23, 3418,
	98, 73, 65, 178, 143, 147, 146, 126, 300, 2868,
	173, 83, 135, 2867, 2866, 2865, 57, 144, 7, 2,
	158, 10, 2864, 9, 2863, 11, 2862, 2861, 2852, 2842,
	29, 109, 37, 38, 2840, 31, 195, 137, 2839, 152,
	2838, 71, 176, 141, 1, 151, 2837, 75, 15, 62,
	2836, 2834, 89, 159, 2833, 32, 117, 86, 94, 181,
	153, 80, 150, 155, 2832, 2831, 2828, 136, 2826, 139,
	107, 2824, 2821, 118, 35, 2820, 40, 165, 43, 2818,
	2816, 108, 2814, 142, 2813, 2811, 180, 112, 127, 8,
	50, 87, 5, 156, 105, 61, 52, 2806, 3255, 1608,
	281, 44, 2805, 93, 74, 33, 78, 99, 168, 58,
	2803, 2802, 311, 2800, 2799, 2797, 121, 2794, 2793, 2790,
	88, 82, 102, 2789, 106, 47, 962, 145, 140, 172,
	123, 2787, 128, 77, 134, 2786, 64, 2785, 1323, 2783,
	130, 2782, 2779, 2776, 2775, 132, 2774, 2773, 2771, 1131,
	2766, 91, 2764, 129, 124, 120, 96, 138, 169, 162,
	966, 2763, 133, 30, 2762, 92, 25, 0, 3767, 3175,
	2760, 149, 95, 2758, 2757, 2756, 2755, 36, 13, 4,
	6, 14, 12, 28, 27, 555, 2754, 2753, 72, 103,
	2752, 174, 157, 2751, 2750, 2746, 45, 2740, 16, 2739,
	19, 2733, 2730, 21, 3, 2728, 2727, 163, 2724, 2722,
	2720, 2452, 2718, 177, 2714, 2710, 2709, 2707, 2705, 2085,
	2704, 2703, 55, 24, 122,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 403, 403, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 402,
	402, 152, 152, 151, 147, 147, 405, 405, 406, 406,
	154, 154, 154, 156, 156, 153, 153, 32, 32, 86,
	86, 86, 138, 138, 79, 79, 79, 74, 74, 355,
	355, 356, 356, 134, 134, 135, 135, 135, 135, 136,
	136, 137, 137, 137, 46, 34, 34, 34, 34, 34,
	34, 34, 35, 35, 35, 35, 36, 36, 36, 36,
	36, 36, 37, 37, 37, 37, 37, 37, 44, 44,
	128, 128, 47, 47, 47, 47, 47, 47, 47, 47,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 58, 58, 56, 59, 59, 60,
	60, 60, 60, 60, 60, 61, 61, 61, 61, 61,
	61, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 68, 68, 68, 69, 69, 69, 66, 66, 66,
	64, 64, 64, 63, 63, 63, 67, 67, 67, 65,
	65, 65, 233, 233, 70, 70, 70, 70, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 73, 73, 73, 73, 73, 73,
	73, 73, 325, 325, 71, 71, 300, 300, 75, 75,
	258, 258, 76, 76, 76, 76, 76, 77, 77, 77,
	77, 87, 87, 87, 87, 401, 401, 227, 227, 169,
	169, 169, 169, 82, 82, 82, 82, 83, 83, 83,
	84, 84, 133, 133, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 38, 38, 38, 39, 39, 40,
	40, 41, 41, 42, 42, 43, 43, 43, 43, 43,
	94, 94, 94, 96, 93, 93, 93, 95, 95, 95,
	95, 97, 97, 98, 98, 98, 98, 98, 98, 99,
	99, 349, 349, 236, 236, 347, 347, 348, 348, 204,
	204, 204, 204, 204, 205, 205, 205, 354, 354, 354,
	354, 354, 354, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 118, 118, 118, 127, 127, 127,
	127, 127, 127, 127, 120, 120, 120, 111, 111, 101,
	101, 107, 107, 107, 107, 107, 102, 102, 108, 108,
	110, 110, 112, 112, 112, 112, 112, 112, 103, 103,
	103, 103, 114, 114, 114, 114, 113, 113, 123, 123,
	123, 123, 123, 123, 123, 313, 313, 119, 119, 119,
	119, 122, 122, 122, 122, 117, 117, 117, 121, 121,
	124, 124, 124, 124, 104, 104, 105, 105, 106, 106,
	125, 125, 116, 116, 126, 126, 126, 126, 126, 126,
	126, 115, 115, 115, 404, 404, 109, 399, 399, 397,
	397, 397, 397, 397, 397, 397, 398, 398, 400, 400,
	80, 80, 80, 52, 52, 53, 53, 206, 206, 207,
	207, 281, 281, 281, 281, 208, 208, 155, 155, 155,
	211, 212, 212, 209, 209, 210, 210, 210, 214, 214,
	213, 216, 216, 215, 280, 365, 365, 366, 366, 366,
	366, 366, 366, 366, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 363, 363, 363, 364, 361, 361,
	362, 362, 362, 362, 407, 407, 279, 279, 220, 220,
	368, 368, 368, 368, 369, 369, 369, 369, 369, 372,
	371, 370, 370, 370, 370, 370, 309, 309, 309, 57,
	57, 57, 247, 247, 246, 246, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 130,
	130, 54, 54, 54, 161, 161, 51, 51, 51, 55,
	55, 50, 50, 50, 50, 50, 264, 264, 262, 262,
	225, 225, 315, 315, 315, 173, 173, 148, 148, 148,
	20, 22, 22, 16, 16, 16, 16, 16, 16, 29,
	29, 30, 30, 26, 26, 263, 263, 265, 265, 81,
	81, 85, 85, 85, 91, 91, 129, 129, 129, 129,
	129, 129, 129, 33, 33, 33, 33, 45, 45, 45,
	45, 89, 410, 410, 410, 90, 90, 409, 409, 168,
	168, 168, 168, 170, 170, 276, 276, 277, 277, 411,
	411, 278, 278, 278, 163, 162, 164, 164, 49, 49,
	49, 157, 157, 158, 158, 159, 159, 160, 160, 412,
	412, 78, 78, 78, 132, 132, 200, 200, 273, 273,
	273, 221, 221, 178, 178, 275, 275, 274, 274, 274,
	245, 245, 245, 131, 131, 230, 230, 238, 238, 239,
	239, 321, 321, 240, 88, 88, 141, 141, 139, 139,
	139, 139, 139, 139, 140, 140, 140, 142, 142, 142,
	142, 142, 142, 142, 145, 145, 145, 145, 146, 146,
	146, 144, 144, 379, 379, 379, 381, 381, 382, 378,
	378, 380, 380, 408, 408, 249, 249, 249, 218, 219,
	217, 217, 413, 413, 223, 223, 222, 224, 224, 314,
	314, 314, 243, 243, 243, 243, 268, 268, 266, 266,
	267, 267, 269, 269, 270, 270, 270, 271, 271, 272,
	272, 242, 242, 296, 296, 143, 143, 143, 229, 229,
	229, 231, 231, 286, 286, 286, 287, 287, 285, 285,
	285, 285, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 395, 395, 395, 396, 396,
	312, 312, 317, 317, 317, 317, 317, 317, 310, 310,
	311, 311, 322, 323, 323, 252, 252, 252, 252, 250,
	250, 251, 251, 318, 318, 318, 318, 244, 244, 319,
	319, 319, 282, 282, 326, 326, 326, 341, 341, 228,
	228, 228, 336, 336, 327, 327, 327, 327, 327, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 330, 330, 330, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 340, 340, 340, 340, 340, 331, 331, 337,
	338, 332, 333, 339, 339, 339, 339, 343, 343, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 335, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 260, 260, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 290, 290, 290, 290, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 373, 373, 373, 373, 373, 373, 373, 373,
	376, 376, 377, 377, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 383, 383, 384, 384, 386, 386, 387,
	387, 388, 389, 389, 389, 390, 391, 391, 385, 385,
	392, 392, 392, 393, 393, 394, 394, 394, 394, 394,
	302, 302, 308, 308, 308, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 171, 171, 171, 171, 171, 235, 235, 234, 234,
	299, 299, 297, 297, 301, 301, 253, 253, 342, 342,
	342, 342, 342, 342, 342, 254, 254, 254, 261, 255,
	255, 256, 256, 256, 256, 256, 293, 294, 257, 257,
	257, 295, 295, 303, 307, 307, 306, 305, 305, 304,
	304, 283, 283, 284, 284, 241, 241, 414, 414, 237,
	237, 320, 320, 320, 320, 202, 202, 232, 232, 201,
	201, 195, 195, 196, 196, 196, 196, 226, 226, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	344, 344, 344, 345, 346, 298, 188, 187, 175, 176,
	186, 185, 184, 174, 177, 181, 182, 183, 179, 180,
	191, 190, 189, 324, 197, 197, 198, 198, 198, 199,
	199, 199, 199, 172, 172, 192, 192, 193, 194, 194,
	165, 165, 165, 166, 166, 167, 167, 353, 353, 351,
	351, 351, 352, 352, 352, 352, 350, 350, 350, 350,
	350, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 2, 0,
	1, 1, 0, 2, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 1, 12, 12, 2, 7, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 5, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 3, 5, 3, 3,
	5, 3, 3, 5, 3, 3, 5, 3, 6, 6,
	1, 1, 1, 2, 1, 2, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 1, 2, 1, 7, 3, 8, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 3,
	5, 3, 1, 3, 2, 2, 5, 3, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 3, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 6, 3, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 3, 1, 3, 2, 1, 3, 1, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 5, 7, 3, 3, 3, 3,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 5, 4,
	6, 4, 5, 6, 5, 1, 0, 2, 3, 3,
	3, 6, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	2, 3, 2, 3, 7, 7, 8, 10, 7, 4,
	5, 5, 5, 3, 1, 1, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 8, 11, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	2, 1, 0, 1, 0, 9, 9, 3, 1, 3,
	7, 1, 3, 11, 3, 2, 0, 3, 1, 2,
	2, 3, 2, 6, 2, 1, 1, 2, 4, 2,
	5, 5, 5, 2, 8, 9, 6, 5, 3, 1,
	4, 7, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	7, 3, 1, 0, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 2, 2, 2, 2, 2, 3, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 6,
	3, 13, 16, 9, 12, 4, 2, 0, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 1, 3, 1, 3, 8, 5, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 5,
	1, 0, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 2, 2, 1, 1, 1, 0, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 3, 2, 4,
	4, 0, 8, 4, 6, 7, 3, 4, 3, 4,
	3, 4, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 3, 2,
	1, 0, 5, 1, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 5,
	2, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 1, 1, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 5, 5, 3, 1, 1, 2, 2,
	1, 5, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 8, 6, 4,
	6, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 3,
	1, 1, 1, 1, 5, 3, 1, 1, 3, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 423, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -380, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 257, 264, 285, 287, 289, 298,
	-40, -39, 117, -139, -141, 283, -83, -84, -93, -94,
	-95, -96, -133, 316, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	319, -33, -45, -90, -89, 364, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-379, -63, -64, -66, -68, -69, -142, -140, 420, 284,
	374, 37, 328, 65, 111, 293, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 391, 399, -145, -143, -144,
	-146, 305, 382, 341, 424, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 2, 341, 385, 306,
	375, 92, 167, 269, 255, -397, 2, 4, -359, -357,
	-196, -195, 341, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 159, 174, 180, 182, 162, 202, 232,
	234, 247, 251, 261, 263, 271, 295, 322, 337, 353,
	354, 355, 361, 362, 382, 383, 387, 394, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 58, 63, 64, 65, 66,
	67, 72, 69, 70, 71, 74, 76, 77, 80, 81,
	82, 90, 91, 93, 94, 95, 99, 101, 103, 106,
	107, 109, 110, 116, 117, 120, 115, 118, 347, 349,
	119, 121, 122, 132, 133, 135, 136, 138, 140, 144,
	146, 151, 152, 153, 154, 155, 156, 168, 163, 169,
	173, 176, 175, 177, 178, 179, 170, 184, 187, 188,
	189, 191, 192, 195, 196, 197, 200, 199, 204, 205,
	208, 209, 212, 214, 217, 218, 219, 222, 220, 221,
	224, 225, 227, 226, 233, 235, 236, 238, 239, 242,
	243, 246, 249, 252, 253, 254, 255, 256, 257, 258,
	260, 262, 264, 266, 267, 268, 269, 270, 272, 273,
	275, 276, 277, 278, 279, 283, 281, 282, 284, 285,
	286, 287, 289, 291, 292, 293, 294, 296, 317, 318,
	330, 298, 299, 300, 301, 302, 303, 304, 308, 312,
	309, 310, 311, 306, 307, 313, 314, 316, 319, 321,
	323, 324, 327, 328, 329, 331, 334, 335, 336, 332,
	333, 326, 339, 340, 342, 343, 344, 345, 346, 348,
	350, 351, 356, 359, 360, 364, 365, 367, 368, 371,
	372, 373, 378, 374, 376, 379, 380, 381, 386, 392,
	393, 395, 396, 397, -194, -165, 413, -193, 423, 423,
	423, 2, 188, 189, 268, 267, 313, 314, -189, -192,
	-193, -194, -165, 4, -357, -359, 92, 240, 423, 423,
	423, 2, 341, 329, 115, 306, 375, 291, 385, -262,
	184, 92, 370, -165, 264, 24, 2, 101, 173, 373,
	372, 24, 260, 307, 343, 345, 2, 423, 423, 2,
	385, 306, 341, 167, 92, 375, 291, -183, 2, -165,
	-73, 2, 420, -72, -5, -48, -58, -62, -75, -70,
	-11, -32, -34, -54, -51, -59, -65, -67, -79, -78,
	-80, -82, -86, -85, -88, -93, -94, -100, -131, -132,
	78, 25, 107, 316, 117, 183, 2, -401, -227, 2,
	24, -169, -165, 78, 145, 305, 341, 2, 188, 189,
	2, -183, 2, -397, 2, 188, 189, 2, -401, -227,
	23, 2, -165, 2, 302, 319, -170, 2, 298, -165,
	423, 423, 423, 423, 423, 423, 209, 58, 295, 313,
	-98, 360, -97, 353, 300, -99, -349, 2, 222, -165,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 2, -127, 313, 329, 152, 36,
	58, 24, 63, 93, 146, 167, 168, 196, 73, 74,
	267, 209, 189, -313, 119, 314, 342, 301, 339, 360,
	78, 376, 292, -404, 118, 4, 92, 222, 315, 353,
	67, 346, 347, 423, 423, 423, -408, 2, 341, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	-140, -142, -141, 423, 423, 423, 423, 423, -222, -223,
	369, 181, 113, 245, -139, -141, 2, -379, -127, 313,
	2, 58, 24, -347, 2, -288, 240, -290, 411, 412,
	406, 228, 398, -302, 98, 216, 215, -292, -303, 114,
	295, 420, -199, -291, 426, 9, -376, -141, 31, 52,
	-197, -165, 7, 8, 5, 6, -172, -328, -298, -335,
	363, 125, 231, -373, -374, -198, 4, -357, -351, -329,
	-338, -333, -334, -336, 42, 48, 47, 350, 221, 308,
	309, 310, 311, 323, 378, 163, 40, 238, 239, 175,
	182, 61, 84, 85, 83, 88, 87, 89, 86, 315,
	375, 53, 30, 157, 158, 162, 232, 159, 59, -375,
	43, 94, 106, 135, 136, 176, 177, 178, 179, 191,
	192, 333, 356, 39, 41, 44, 54, 55, 96, 97,
	123, 124, 134, 147, 174, 180, 202, 234, 251, 261,
	271, 322, 337, 353, 354, 355, 361, 362, 383, -358,
	-339, 79, 126, 143, 172, 160, 185, 186, 190, 203,
	206, 223, 230, 248, 250, 290, 320, -409, 2, 360,
	360, 2, -409, 2, -409, 2, -168, 2, 360, 357,
	-410, 360, 394, -381, 272, -382, -183, -381, 423, 423,
	425, 423, -217, -218, -219, 2, 24, 104, 420, 2,
	-316, 2, 418, -318, -172, 198, -375, -141, -317, 420,
	-189, 241, -198, 84, 85, 88, 87, 89, 4, -165,
	61, 216, 215, -3, 2, -318, 157, -189, 2, -318,
	157, 2, -190, 157, -318, -192, 2, -355, 157, -353,
	9, -352, 5, 4, -357, -359, -358, 2, -174, -165,
	2, -201, 157, -189, -186, -350, 4, -357, -359, -358,
	-360, 24, 26, 27, 28, 29, 31, 32, 33, 34,
	45, 52, 53, 57, 60, 62, 73, 78, 83, 84,
	86, 85, 87, 88, 89, 98, 100, 102, 104, 105,
	108, 111, 113, 125, 127, 139, 141, 142, 145, 148,
	150, 161, 167, 171, 181, 183, 198, 201, 207, 210,
	211, 228, 229, 231, 237, 240, 241, 244, 245, 259,
	265, 274, 288, 305, 315, 325, 338, 341, 352, 357,
	358, 363, 369, 370, 375, 377, 384, 385, 388, 389,
	390, 391, -187, -350, 357, 425, -232, -195, -196, -226,
	-165, 422, -288, 2, -88, 2, -288, 157, 2, -88,
	157, 2, -288, 157, 2, -88, 157, 2, -220, 420,
	422, 341, 62, 2, -189, 157, -179, 2, -165, 109,
	-190, 157, 2, -192, -355, 157, 2, -355, 157, 2,
	-191, 2, -189, 167, 167, -174, 157, 2, -165, 24,
	142, 2, 183, 2, 183, 2, -319, 2, -318, -233,
	157, 2, -189, -233, 157, 2, -233, 157, 2, -202,
	157, 2, -201, -174, 157, 2, -356, 157, 2, -355,
	-356, 157, 2, -258, 420, -325, 2, -324, -352, 382,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 313, -138, 80,
	219, 240, 357, 425, -189, -288, -88, -300, 420, 142,
	-288, -88, 240, 142, 242, 2, 92, 341, 397, 24,
	-165, 2, 317, 2, 420, -98, 56, 360, -277, 2,
	-278, -162, -163, -164, 187, 266, 270, 397, -347, 357,
	403, 142, -347, -236, 422, -127, 2, 139, 377, 2,
	7, 2, -355, 2, 317, 2, 267, 314, 58, 142,
	2, 2, -399, 2, 240, 142, 2, 142, 2, 142,
	2, 142, 2, 142, 2, 2, 267, 314, 2, 359,
	197, 359, 2, 142, 2, 142, 2, 5, 2, 187,
	266, 330, 2, 341, 385, 306, 2, 2, 142, 2,
	142, 397, 2, -244, -318, -222, -223, -243, -266, -267,
	207, 127, 237, -249, 24, 104, -249, -249, 46, 421,
	421, -127, 317, 2, 10, 11, 60, 35, 411, 412,
	413, 414, 137, 415, 416, 409, 410, 408, 401, 402,
	405, 193, 194, 75, 404, 403, 68, 213, 297, 128,
	129, 130, 131, 280, 164, 165, 166, 13, 14, 15,
	28, 244, 206, 398, 160, 320, 406, 16, 17, 18,
	185, 186, 230, 38, 161, -171, -203, -288, -288, -288,
	-288, -288, 250, -241, -283, 418, -141, 420, 420, -141,
	-288, -302, -234, 420, -346, 7, -141, -297, 418, -304,
	-288, 422, 420, 5, 420, 5, -383, 392, 139, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 263, -343, 386, -343, -343, -330, 420, -330,
	420, 420, -331, 420, 420, 420, -330, 420, 420, 420,
	393, 399, 393, 399, 420, 420, -276, -277, -276, 357,
	-170, 425, -381, -220, 420, -237, -320, -288, 413, -237,
	-237, 240, -234, -288, 79, -252, 190, 223, 143, 203,
	290, 172, -346, -73, -285, 426, 420, -172, -375, -141,
	-165, -312, 399, -312, -141, -317, 420, -316, 413, -189,
	420, 422, -150, 281, -149, 22, 25, 107, 380, 120,
	-210, 169, 255, 114, 326, -403, 117, 299, 348, 349,
	281, 114, -246, -248, 32, 90, 225, 252, 49, 155,
	215, 216, 328, 114, 281, 391, 114, 117, 281, -152,
	326, -403, 117, 299, 281, -151, -210, 114, 426, 117,
	235, -355, -232, 425, 425, -350, 413, 114, 114, 114,
	114, 142, -226, -350, -189, -197, -165, -198, 420, -220,
	228, 240, -397, -247, -246, 228, -161, -378, 391, 228,
	228, -220, -176, 157, 2, -166, -165, -176, 157, -378,
	228, -319, -200, -189, -200, 316, -183, 32, -154, 425,
	51, 286, 114, -154, 114, -154, 114, -154, 425, 114,
	-154, 114, 425, 114, 114, -234, 421, 425, -355, -397,
	-226, -169, 78, 420, 32, -299, -326, -327, -328, -337,
	-332, -335, 42, 48, 47, 350, 221, 308, 309, 310,
	311, 323, 378, 163, 40, 238, 239, 175, 4, 41,
	-339, 182, 174, 176, 177, 178, 179, 180, 322, 39,
	271, 135, 136, 134, 106, 97, 96, 234, 44, 43,
	94, 353, 354, 355, 356, 191, 192, 55, 54, 383,
	333, -356, -397, -226, 139, -174, 2, -189, 2, 69,
	70, 397, -349, -234, 32, -277, 2, -411, 425, 205,
	-205, 212, 227, 151, 241, 395, -354, 5, 4, -298,
	-309, 98, 209, -335, 8, 412, -344, 7, 411, -348,
	-347, -348, 82, 422, -350, 341, 191, -349, 24, 318,
	2, -189, -400, 139, -398, 291, -397, -189, -189, -189,
	-189, -189, 139, 2, 359, 2, 139, -165, -165, 205,
	-189, 2, -191, 2, -190, 2, 341, 167, 341, -154,
	425, -243, -267, -266, -269, -288, 24, -272, 133, 224,
	-288, -290, -140, -140, -140, -224, -314, -288, 265, 167,
	-349, -341, -326, -340, 276, 277, 275, 279, 278, -326,
	-188, -350, 353, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, 206, 160,
	320, 38, 161, -288, 357, -288, -288, -288, -288, 220,
	228, 231, 363, 125, 371, 104, 235, -414, 338, 34,
	-295, -141, 420, -308, 29, 325, 24, -302, 295, 420,
	-283, -288, -284, -235, -234, 421, 32, 425, -235, -301,
	-297, -307, -306, 388, -350, 413, 421, -234, 384, 24,
	104, 413, 2, 7, -259, 396, 218, 95, 153, 217,
	-260, 304, -384, 132, 148, 420, 421, 2, 421, 2,
	421, 2, 421, 2, 421, 2, -288, -288, -288, -288,
	-288, -288, -288, -234, -346, -253, 2, -342, -234, 4,
	396, 218, 95, 153, 217, 304, -253, 2, 7, -234,
	2, -234, 2, -254, 2, -288, -234, -255, -289, -290,
	411, 412, 406, -302, -256, 2, -288, -235, 353, 353,
	353, 353, -288, 45, 201, 358, -257, -288, 142, -234,
	-170, -382, 32, -234, -229, 425, 142, 32, 4, -229,
	-229, 420, 421, 425, 190, 190, -316, -252, 190, -250,
	248, -250, -250, -395, 420, 419, -312, -175, 418, 427,
	-350, -235, 2, 420, -312, -312, 422, -311, -310, 32,
	-183, 246, -311, 421, -189, -350, 425, 357, -263, 73,
	62, -280, 157, 62, -361, -177, 73, -362, -165, 57,
	370, 265, 141, -263, 73, -263, 73, 73, 316, 329,
	46, -318, 35, -88, 71, 142, 357, -318, -248, -326,
	90, 215, 216, 46, -345, -344, 412, -345, 46, -345,
	-345, -345, 391, -190, -318, 357, 256, -355, 71, 357,
	425, 35, -88, 71, 142, 357, -201, -175, 71, 341,
	-323, -322, 400, -195, -165, 422, -288, -88, -288, -88,
	331, 421, 422, 185, 185, -206, -207, -165, -281, -280,
	-363, -364, -361, 184, 167, 370, 126, 32, 114, -226,
	357, 114, 256, 114, 114, 32, 240, 228, 240, 228,
	-157, 344, 114, -282, 389, -273, -88, 420, 98, 32,
	-273, -238, -239, -321, -240, -177, 420, -183, -189, -233,
	-233, -233, -201, -202, -174, -355, -356, -356, 421, -73,
	-324, -137, 391, 357, 391, 377, -207, -72, 25, 78,
	107, 421, 425, -228, 31, 418, -259, 420, -343, 420,
	-137, -322, 142, -227, -323, -323, 139, 70, 403, 357,
	421, 360, -278, -204, 270, 324, 282, 312, 8, 7,
	7, 425, -350, -189, 139, -226, -226, 313, -73, 139,
	-73, 422, -189, -201, -189, -318, -270, -344, 420, -271,
	295, 296, 425, -148, 33, 102, 195, -189, 397, -288,
	-288, 357, -414, 338, -295, -288, 220, 231, 363, 125,
	371, 104, 235, 142, 420, -289, -289, -234, -288, 419,
	429, 421, 422, -226, -288, 419, 419, 425, -305, -306,
	108, -288, 422, -413, 425, -222, -288, -234, -234, 421,
	421, 357, 357, 357, 357, 420, -389, 249, 420, 420,
	-288, 32, 425, 425, 425, 421, 425, 425, 425, 421,
	421, 425, 421, 142, 421, 421, 421, 421, 421, -261,
	259, 421, 10, 11, 411, 412, 413, 414, 137, 415,
	416, 409, 410, 408, 401, 402, 403, 68, 213, 297,
	13, 14, 15, 185, 161, -289, -289, -289, 421, -293,
	-294, 142, 139, 397, 397, 397, 397, 32, -257, -257,
	-257, 421, 142, -234, 420, 421, -282, -320, -231, 2,
	-316, -185, -350, -282, -282, -234, -288, -316, -316, -251,
	377, 240, 190, -316, -310, 421, -396, -346, -312, -311,
	-346, -287, -286, 140, 226, 421, -235, 2, -311, -311,
	-350, -183, -220, -312, 421, 422, -149, -189, -177, -184,
	-165, 228, -280, 157, -156, 228, -326, -184, 420, 420,
	195, 195, -177, -184, 157, -177, 157, -184, -184, -402,
	270, 236, -288, 208, 269, 229, -150, 281, -88, 397,
	420, -191, 281, -197, -345, -345, -246, 281, -190, -355,
	391, 397, -174, -151, -88, 397, 420, -175, -152, 281,
	397, -189, -134, 156, 235, 413, -350, -128, 5, 231,
	-128, 421, 425, 167, -176, 167, -182, -166, -88, -189,
	142, -355, -190, -355, -355, -355, -88, -189, 114, -189,
	114, -158, 110, -412, 403, -174, -223, -222, -288, -245,
	-275, 288, 240, -221, -178, -177, 382, -183, -245, -230,
	425, 142, 403, 422, -221, -154, -154, -154, -154, -154,
	142, -136, 243, -135, -165, 5, -226, 23, -355, 421,
	-326, 418, 419, 7, 7, 420, -346, -137, -226, 142,
	-41, 391, 269, 92, 341, 255, 167, -347, -347, -277,
	368, 66, 270, -347, 341, 313, -73, -165, -271, -288,
	-314, -189, 426, -288, -288, -289, -289, 142, 420, -288,
	-299, 28, 28, 421, -284, -288, 413, -350, 421, 421,
	-297, 111, -288, 352, -350, 413, 421, 384, -413, -413,
	-413, 5, 218, 153, 217, -260, 217, -260, -260, 7,
	-390, -180, 420, -165, 389, -222, 421, -341, -326, -288,
	-288, -288, -288, -288, -346, -288, -293, -288, -341, -326,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, 104,
	228, 235, -289, -294, -293, -288, -288, -326, 421, 421,
	421, -234, -72, -242, 148, -323, 425, -242, -242, 421,
	-251, 420, -288, -316, 419, 421, 425, -311, 419, 425,
	428, 403, -312, 421, 422, -220, -310, -350, 357, 357,
	114, 228, 379, -365, -362, -288, -225, -315, -177, -377,
	420, -165, -373, -374, -172, 420, 420, -147, 107, 316,
	-265, 114, -154, 114, -154, 395, 420, 420, 357, -263,
	73, -291, -172, -234, 357, 357, 256, -291, -291, -234,
	357, -291, 117, -137, 142, 340, -208, 170, -281, -166,
	420, -176, 420, 420, -220, -189, -323, -247, -161, -264,
	377, -175, 420, -175, -159, 200, -412, -353, -378, -268,
	-266, -245, -237, 229, 72, 421, 425, 422, -282, -239,
	-231, -288, 2, 421, -88, 425, 420, 403, 403, 242,
	-138, -138, 7, 419, 421, -346, 421, -226, 243, -186,
	-174, -189, -187, -201, -189, 241, 421, -148, -175, 28,
	28, -288, -299, 421, -288, -288, 419, -288, 422, 5,
	-288, 421, 421, 421, 421, -391, -165, -288, 421, 421,
	421, 425, 425, 421, 421, 421, 421, 421, -294, 142,
	104, 235, 420, 421, 421, -296, 150, 46, -316, -296,
	-296, -226, -285, -346, -286, -175, 418, -311, -312, -350,
	422, -177, -184, -280, 114, -366, 73, -367, 60, 126,
	78, 228, 231, 370, 265, 57, 98, 274, 32, 421,
	421, 425, -173, 60, -173, -288, 420, -225, -226, 228,
	98, 228, 98, 91, 365, -177, -184, -226, -226, -189,
	-177, -184, 420, 421, -191, -190, -355, 421, -175, 71,
	-356, 353, -209, -210, 161, 420, -225, 420, -226, -206,
	32, -137, 420, 144, 240, -225, 240, -160, 199, -412,
	-353, -157, -245, -274, 420, 240, -88, -178, 2, -223,
	403, -135, -136, -355, -355, 91, 91, 419, 421, -42,
	-43, 167, 73, 258, -212, -211, 255, 235, -148, -288,
	-288, 421, -350, 413, -413, -385, 255, 421, -288, -288,
	-289, 142, 420, -299, -386, 390, -288, -234, -386, -386,
	421, -312, -346, -311, -280, -184, -188, -181, -165, 126,
	157, 231, 195, 420, -289, -189, 420, 2, -279, -407,
	77, 336, -315, -148, -188, -148, 421, -234, 421, 421,
	231, 231, -288, -326, -154, -154, 421, 421, 357, 357,
	-234, 357, 357, 397, -291, 253, -225, 421, -225, 421,
	421, -88, -225, -189, 421, -189, -412, -353, -158, 105,
	-226, 73, -268, -295, 421, 420, 420, 425, 24, 420,
	24, 420, -187, 341, 421, -223, 46, 421, 421, -289,
	-299, 421, -387, -388, -180, -311, 419, -367, -181, 228,
	-288, -167, 420, -288, -208, 420, -173, -413, 274, -405,
	60, 420, 420, -177, -184, -413, 420, 420, -291, -189,
	421, -279, 421, -208, 421, -264, 420, -353, -159, 372,
	229, 421, -184, -245, -356, -356, -43, -226, -226, -189,
	-392, 269, 296, -234, 421, 425, 32, 114, 421, -368,
	214, -165, 421, -209, -226, -148, 421, -189, -406, 377,
	-188, -214, -213, -211, -216, -215, -211, 421, -234, -234,
	420, -208, -279, -209, -279, 420, -225, -160, 316, -282,
	421, 421, 421, 421, 421, -393, -394, 38, 367, 82,
	-288, -393, -388, -390, 126, -369, -372, -371, 240, 143,
	254, 321, 421, 335, 387, 421, -220, -288, 421, 425,
	382, 421, 425, 382, 421, 421, -226, -209, -208, -208,
	-225, 421, -238, -137, -137, -394, 262, 138, 295, 262,
	138, -181, -371, 240, -372, 240, 372, 101, -368, -213,
	161, -215, 142, 421, -209, -209, 421, -282, 28, -370,
	225, 286, 51, 316, -370, -369, 420, 420, -155, 51,
	286, -279, -394, 21, 231, 98, -234, -234, -208, 421,
	421, -209, -209, 357, 420, -234, 421, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 185, 187, 189, 0, 0, 0, 212, 214, 216,
	217, -2, 0, 0, 0, 245, 246, 248, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	384, 385, 0, 854, -2, 0, 363, 365, 374, 376,
	378, 380, 381, 0, 443, 445, 447, 449, 451, 453,
	455, 457, 459, 460, 462, 464, 466, 468, 470, 472,
	474, 476, 478, 480, 482, 484, 486, 488, 490, 492,
	-2, 766, 768, 770, 772, -2, 62, 64, 66, 68,
	70, 72, 87, 220, 222, 224, 226, 229, 231, 233,
	891, 251, 253, 255, 257, 259, -2, 905, 0, 0,
	0, -2, 0, -2, -2, -2, 784, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 867, 869, 871,
	873, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 158, -2, -2, -2,
	-2, 0, 0, 1526, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1491, 1492,
	1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
	1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
	1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
	1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
	1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
	1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
	1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,
	1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
	1704, 1705, 1706, 1707, 1413, 1467, 1416, 1411, 186, 188,
	190, 191, 0, 0, 0, 0, 0, 0, 669, 1452,
	1465, 1466, 1467, 1470, 1471, 1472, 1526, 0, 213, 215,
	218, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 342, 1616, 344, 346, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 247, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 341, 339, 1447,
	284, 285, 0, 324, 325, 326, 327, 328, 329, 331,
	288, 290, 292, 293, 295, 297, 299, 301, 303, 305,
	307, 309, 310, 312, 314, 315, 317, 319, 320, 322,
	729, 0, 0, 0, 0, 0, 168, 0, 356, 350,
	355, 357, 359, 360, 361, 362, 0, 166, 0, 0,
	602, 337, 335, 0, 161, 0, 0, 763, 0, 356,
	1494, 354, 764, 765, 0, 0, 759, 760, 1645, 794,
	364, 366, 375, 377, 379, 382, -2, -2, 1740, -2,
	405, -2, 413, 1743, 1647, 416, 0, 418, -2, 421,
	444, 446, 448, 450, 452, 454, 456, 458, 461, 463,
	465, 467, 469, 471, 473, 475, 477, 479, 481, 483,
	485, 487, 489, 491, 493, 494, 0, 0, 0, 0,
	0, 498, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 497, 499, 500, 501, 0,
	545, 584, 585, 767, 769, 771, 0, 710, 893, 63,
	65, 67, 69, 71, 221, 223, 225, 227, 230, 232,
	-2, 865, 866, 252, 254, 256, 258, 260, -2, 0,
	897, 897, 897, 0, 0, 866, 864, 0, 367, 0,
	369, 0, 498, 372, 373, 425, 426, 1105, 0, 0,
	0, 0, 0, 1230, 1183, -2, -2, 1215, 1217, 1719,
	1740, 0, 1219, 1220, 0, 1222, 1226, 1227, 0, 1390,
	1459, 1454, 1419, 1420, 1421, 1422, 0, 0, 1425, 0,
	1427, 1428, 1429, 1294, 1241, -2, -2, -2, 1463, 1019,
	1020, 1021, 1022, 1023, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1752, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 0, 1708, 1725, 1726, 1731, 1733, 1727, 1716, 1264,
	-2, -2, 1533, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1720, 1721, -2, 1723, -2, -2, 1732, -2, 1736, 1737,
	-2, -2, 1742, -2, -2, -2, 1746, 1747, -2, 1481,
	1072, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 1765, 1766, 1767, 1768, 1769, 1770, 796, 774, 787,
	796, 776, 777, 778, 779, 780, 785, 786, 789, 0,
	781, 782, 783, 883, 1622, 886, 669, 884, 868, 870,
	0, 872, 0, 0, 0, 877, 900, 898, 0, 936,
	881, 882, 892, 951, 0, 0, 971, 971, 962, 0,
	993, 0, 1464, 0, 0, 0, 0, 0, -2, 1467,
	1752, 1763, 1764, 2, 79, 0, 1725, 993, 81, 0,
	1725, 84, 0, 1725, 0, -2, 88, 0, 1725, 169,
	170, 1477, 1478, 1482, 1483, 1484, 1485, 91, 0, 1443,
	99, 0, 1725, 1410, 0, 1440, 1486, 1487, 1488, 1489,
	1490, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 0, 1437, 0, 0, 594, 1407, 1412, 595,
	1417, 0, 192, 193, 194, 195, 196, 1725, 198, 199,
	0, 201, 202, 1725, 204, 205, 0, 207, 0, 0,
	0, 0, 0, 228, 669, 1725, 0, 235, 1448, 0,
	693, 1725, 691, 1451, -2, 1725, 713, 716, 1725, 718,
	669, 720, 1450, -2, 1474, 890, 1725, 810, 343, 345,
	0, 238, 0, 823, 0, 825, 0, 844, 999, 152,
	1725, 263, 282, 152, 1725, 266, 152, 1725, 269, 152,
	1725, 272, 1405, 152, 1725, 275, 276, 1725, 278, 171,
	279, 1725, 281, 338, 0, 0, -2, 332, 1453, -2,
	330, 289, 291, 294, 296, 298, 300, 302, 304, 306,
	308, 311, 313, 316, 318, 321, 323, -2, 0, 162,
	163, 0, 0, 0, 0, 600, 601, 0, 0, 0,
	761, 762, 0, 0, 0, 386, 0, 0, 0, 0,
	793, 383, 0, 402, 0, 404, 1715, -2, -2, 408,
	797, 801, 802, 803, 0, 0, 0, 0, 415, 0,
	0, 0, 419, 422, 0, 495, 496, 0, 0, 506,
	507, 508, 509, 510, 0, 513, 534, 549, 0, 0,
	517, 519, 599, 521, 0, 0, 523, 0, 525, 0,
	527, 0, 529, 0, 531, 533, 535, 550, 537, 0,
	0, 0, 548, 0, 554, 0, 557, 558, 559, 0,
	561, 562, 563, 0, 0, 0, 571, 573, 0, 583,
	0, 502, 503, 152, 997, -2, 0, 860, 914, 915,
	0, 0, 0, 0, 895, 896, 0, 0, 0, 856,
	857, 368, 0, 371, 0, 0, 0, 0, 1325, 1326,
	1327, 1328, 1329, 1330, 1333, 1334, 1331, 1332, 1335, 1336,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 1339, 1340,
	0, 0, 1342, 0, 1344, 0, 0, 0, 0, 0,
	0, 1162, 1164, 1398, 0, 0, 1341, 1110, 1111, 1112,
	1147, 1148, 0, 1216, 1395, 1394, 1218, 0, 1347, -2,
	1348, 1230, 0, 0, 1221, 1434, 1228, 1229, 1347, 0,
	1389, 0, 0, 1424, 0, 1102, 1296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 1070, 1077, 1074, 1073, 1058, 0, 1057,
	0, 0, 1055, 0, 0, 0, 1059, 0, 1370, -2,
	0, 0, 0, 0, 0, 0, 773, -2, 775, 0,
	791, 0, 885, 0, 0, 940, 1399, 1403, 1404, 940,
	940, 0, 0, 1348, 0, 0, 0, 0, 990, 990,
	990, 988, 965, 0, 971, 0, -2, 0, 971, 971,
	0, 981, 0, 981, -2, 962, 0, 0, 994, 995,
	0, 0, 100, 756, 119, 0, 756, 756, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 115, 107, 108,
	0, 0, 85, 694, 0, 697, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 117, 0, 141, 143, 0, 0, 0,
	0, 984, 593, 0, 0, 1468, 1415, 0, 0, 0,
	0, 0, 0, 1468, 0, 0, 1454, 1455, 608, 0,
	0, 0, 0, 689, 692, 0, 711, 0, 889, 0,
	0, 0, 0, 1725, 725, 1439, 1473, 0, 1725, 812,
	0, 1003, 0, 826, 0, 0, 1000, 0, 261, 0,
	150, 151, 0, 264, 0, 267, 0, 270, 0, 0,
	273, 0, 0, 0, 0, 0, 892, 0, 183, 0,
	348, 358, 0, 0, 892, 0, 1350, 1011, 1014, 1015,
	1016, 1102, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1078,
	1072, 1088, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1068, 0, 1043, 1043, 1043, 1060, 1061,
	1079, 1080, 1082, 1084, 1086, 1012, 1013, 1078, 1078, 1075,
	1076, 183, 0, 352, 0, 984, 388, 984, 390, 0,
	579, 0, 0, 0, 0, -2, 410, 0, 799, 0,
	804, 434, 435, 436, 806, 807, 414, 437, 438, 439,
	440, 441, 442, 0, 686, 0, 688, 1430, 0, 411,
	427, 412, 417, 0, 423, 0, 0, 511, 512, 514,
	515, 516, 520, 0, 587, 1637, 597, 522, 524, 526,
	528, 530, 892, 539, 0, 541, 892, 552, 555, 560,
	564, 565, 566, 567, 568, 569, 0, 0, 0, 709,
	0, 863, 912, 913, 918, 922, 923, 926, 929, 930,
	920, 1105, 878, 879, 880, 906, 907, 739, 0, 0,
	370, 1106, 1007, 1008, 1062, 1063, 1064, 1065, 1066, 1107,
	1108, 1436, 0, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, -2, -2, -2, -2, -2, -2, -2,
	-2, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, -2, -2, -2, 1145, 1146, -2, 1343, 1345,
	0, 1398, 0, -2, 0, -2, -2, -2, -2, 1159,
	0, 1161, 1166, 1168, 1170, 0, 0, 0, 0, 1397,
	1180, 1381, 0, 0, 1322, 1323, 1324, 1165, 0, 0,
	1396, 1393, 0, 0, 1346, 1225, 0, 0, 0, 0,
	1354, 1388, 1384, 0, 1456, 1462, 1232, 903, 0, 0,
	0, 0, 1239, 0, 1435, 1089, 1090, 1091, 1092, 1093,
	1094, 1103, 1304, 0, 0, 0, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1276, 0, 1357, -2,
	-2, -2, -2, -2, -2, -2, 0, 1278, 0, 0,
	1290, 0, 1292, 0, 1280, 1348, 1367, 0, 0, 1186,
	0, 0, 0, 1230, 0, 1283, 1348, 1375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 0, 1380,
	790, 887, 0, 0, 1003, 0, 0, 0, 1402, 1003,
	1003, 0, 935, 0, 0, 0, 0, 0, 0, 985,
	989, 986, 987, 0, 0, 971, 981, 948, 0, 0,
	1438, 0, 956, -2, 981, 981, 0, 958, 980, 0,
	669, 970, 960, -2, 0, -2, 0, 0, 0, 0,
	755, 121, 1725, 0, 154, 0, 0, 659, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 695, 696,
	698, 704, 706, 0, 700, 1433, 0, 701, 0, 703,
	705, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 1409, 0, 0,
	174, 983, 0, 1408, 1418, 0, 197, 200, 203, 206,
	184, 668, 0, 0, 0, 0, 607, -2, 609, 611,
	612, 613, 614, 1571, 1474, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	814, 820, 0, 905, 0, 842, 828, 0, 0, 0,
	842, 846, 847, 849, 850, 0, 0, 1001, 283, 152,
	152, 152, 1406, 152, 152, 172, 277, 280, 340, 286,
	333, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 336, 0, 1004, 1006, 0, 1017, 0, 1070, 0,
	159, 183, 0, 0, 387, 392, 0, 580, 0, 0,
	403, 0, 798, 805, 0, 431, 0, 433, 687, 1432,
	1431, 0, 424, 504, 0, 598, 596, 538, 542, 892,
	544, 0, 581, 582, 586, 998, 0, 924, 0, 921,
	927, 928, 0, 909, 737, 738, 0, 0, 0, -2,
	-2, 0, 0, 0, 1181, -2, 1160, 1163, 1167, 1169,
	1171, 0, 0, 0, 0, 0, 0, 0, 1182, 1391,
	1394, 1320, 0, 0, 1349, 1352, 1353, 0, 0, 1385,
	0, 0, 0, 0, 0, 902, 903, 903, 903, 1238,
	0, 0, 0, 0, 0, 0, 1240, 0, 0, 0,
	0, 0, 0, 0, 0, 1259, 0, 0, 0, 1263,
	1041, 0, 1275, 0, 1277, 1067, 1289, 1291, 1279, 0,
	0, 1281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1189, 1190, 1191, 1282, 1373,
	1374, 0, 0, 1081, 1083, 1085, 1087, 0, 0, 0,
	0, 1288, 0, 1379, 892, 937, 932, 1400, 984, 939,
	941, 1401, 1441, 932, 932, 0, 1349, 973, 0, 975,
	0, 0, 0, 977, 0, 966, 0, 968, 981, 953,
	0, 0, 946, 0, 945, 971, 0, 957, 959, 961,
	1456, 669, 979, 0, 996, 0, 120, 743, 0, 0,
	1442, 0, 123, 1725, 131, 0, 636, 0, 0, 0,
	0, 0, 758, 132, 1725, 152, 1725, 152, 133, 136,
	0, 140, 138, 0, 0, 627, 101, 756, 104, 0,
	0, 749, 0, 699, 702, 708, 86, 0, 751, 741,
	0, 0, 740, 142, 105, 0, 0, 753, 103, 0,
	0, 0, 183, 0, 0, 1414, 1469, 208, 210, 211,
	209, 616, 0, 1474, 0, 1474, 0, 1446, 605, 669,
	0, 984, 693, 714, -2, 717, 719, 727, 0, 0,
	0, 816, 820, 0, 819, 890, 917, 904, 1002, 821,
	842, 0, 0, 0, 831, 833, 830, 827, 824, 1003,
	0, 0, 0, 0, 0, 262, 265, 268, 271, 274,
	0, 181, 1604, 179, 176, 178, 347, 0, 0, 0,
	1351, 0, 1009, 0, 0, 0, 0, 160, 351, 0,
	389, 0, 0, 0, 0, 0, 0, 400, 401, -2,
	429, 430, 432, 428, 0, 540, 543, 551, 0, 0,
	908, 739, 0, 1109, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 1382, 0, 1393, 1223, 1224, 1231, 1321,
	1355, 1383, 1387, 0, 1457, 1461, 1233, 0, 0, 0,
	0, 1426, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 0,
	1302, 1303, 1307, 1449, 0, 0, 1244, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 1366, 1368, 1187, 1188,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	-2, -2, -2, 1205, 1206, 1207, -2, -2, -2, 0,
	0, 0, 1369, 1371, 1372, 1376, 1377, 0, 1285, 1286,
	1287, 1378, 0, 934, 0, 938, 0, 934, 934, 899,
	974, 0, 992, 976, 951, 967, 0, 964, 949, 0,
	950, 0, 981, 971, 0, 978, 963, -2, 0, 0,
	0, 0, 153, 634, 658, 0, 0, 730, 736, 736,
	0, 1444, 1242, 1243, 0, 0, 0, 125, 0, 0,
	0, 0, 129, 0, 135, 139, 0, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 111, 114, 0,
	0, 110, 0, 157, 0, 0, 624, 0, 610, 0,
	0, 0, 0, 608, 0, 234, 183, 690, 712, 0,
	0, 0, 0, 0, 818, 820, 0, 811, 812, 842,
	916, 822, 840, 841, 839, 0, 0, 0, 905, 848,
	845, 851, 852, 0, 167, 0, 0, 0, 0, 349,
	0, 0, 0, 1010, 1018, 0, 1071, 353, 0, 574,
	575, 622, 0, 578, 505, 919, 925, 910, 739, 0,
	0, -2, 0, 1174, -2, -2, 1392, 1386, 0, 1423,
	903, 1234, 1236, 1237, 1104, 1309, 1306, 0, 1293, 1254,
	1255, 0, 0, 1258, 1260, 1261, 1262, 1042, 1365, 0,
	0, 0, 0, 1284, 888, 1298, 0, 0, 942, 1298,
	1298, 0, 971, 969, 947, 943, 0, 954, 981, 1457,
	0, 745, 747, 122, 0, 635, 0, 638, 0, 0,
	0, 0, 645, 646, 0, 0, 0, 0, 0, 660,
	667, 0, 739, 0, 739, 0, 0, 0, 0, 0,
	145, 0, 0, 757, 0, 152, 152, 0, 0, 744,
	0, 0, 0, 0, 750, 752, 742, 0, 754, 0,
	173, 0, 603, 623, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 726, 0, 0, 0, 808, 820, 0,
	813, 814, 237, 0, 0, 0, 829, 832, 834, 917,
	0, 180, 0, 175, 177, 0, 0, 1005, 1069, 391,
	393, 0, 0, 399, 576, 621, 0, 0, 911, -2,
	-2, 1175, 1458, 1460, 0, 905, 0, 1295, 0, 0,
	-2, 0, 0, 0, 874, 0, 933, 931, 875, 876,
	991, 981, 0, 955, 124, 0, 639, 640, 1445, 642,
	0, 644, 647, 0, 649, 1476, 0, 653, 616, 0,
	664, 665, 731, 732, 735, 733, 736, 903, 662, 0,
	126, 127, 144, 147, 128, 134, 0, 0, 0, 0,
	903, 0, 0, 0, 982, 0, 0, 667, 0, 657,
	616, 606, 0, 727, 723, 0, 0, 815, 816, 0,
	0, 0, 842, 853, 182, 0, 0, 0, 395, 0,
	397, 0, 620, 0, 1235, 1312, 0, 1256, 1257, -2,
	0, 1213, 1297, 1299, 0, 952, 944, 637, 641, 0,
	0, 673, 0, 0, 624, 0, 739, 0, 0, 149,
	0, 0, 0, 746, 748, 0, 0, 0, 113, 0,
	656, 616, 667, 624, 667, 0, 0, 817, 818, 0,
	836, 1003, 838, 843, 0, 0, 394, 0, 0, 577,
	0, 0, 0, 1308, 1214, 0, 0, 0, 648, 678,
	0, 0, 0, 661, 0, 734, 1233, 669, 130, 0,
	146, 0, 628, 0, 0, 631, 0, 0, 0, 0,
	0, 624, 616, 604, 616, 0, 0, 809, 0, 837,
	183, 183, 396, 398, 1305, 1310, 1313, -2, 1691, 1523,
	0, 1311, 1300, 1301, 0, 650, 674, 675, 0, 670,
	671, 672, 1475, 651, 652, 666, 673, 148, 625, 0,
	0, 626, 0, 0, 116, 118, 0, 654, 624, 624,
	0, 724, 1003, 164, 165, 0, 1315, 1316, 1317, 1318,
	1319, 643, 676, 0, 677, 0, 0, 0, 678, 629,
	0, 632, 0, 619, 655, 721, 667, 835, 0, 679,
	0, 682, 683, 0, 680, 663, 0, 0, 615, 617,
	618, 616, 1314, 681, 684, 685, 0, 0, 624, 624,
	0, 722, 630, 0, 0, 0, 624, 633,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 409, 3, 415, 410, 3,
	420, 421, 413, 411, 425, 412, 422, 414, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 429, 424,
	401, 403, 402, 405, 426, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 418, 3, 419, 416, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 427, 408, 428, 406,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 404, 57744, 407,
	57745, 417, 57746, 423, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1012
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1018
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1024
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1033
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1035
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1041
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1042
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1044
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1048
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1058
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1070
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1125
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1136
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1151
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1155
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1159
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1170
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1182
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1207
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1211
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1215
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1221
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1225
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1231
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1237
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1243
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1254
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1261
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1271
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1281
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1291
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1304
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1316
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1320
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1326
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1330
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1336
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1347
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1352
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1357
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1362
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1367
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1372
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1376
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1379
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1389
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1402
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1414
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1421
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1431
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1454
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1461
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1468
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1469
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1473
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1491
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1503
		{
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1506
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1507
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1516
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1520
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1530
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1535
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1536
		{
		}
	case 157:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1563
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1586
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1593
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1597
		{
			sqlVAL.str = "CSV"
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1601
		{
			sqlVAL.str = "MYSQLOUTFILE"
		}
	case 164:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1629
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1633
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1636
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1653
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1656
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1660
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1664
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1670
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1674
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1680
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1684
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1690
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1694
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1708
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1718
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1722
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1725
		{
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1729
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1741
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1742
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1743
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1744
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1754
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1762
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1764
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1767
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1777
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1786
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1794
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1796
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1800
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1803
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1822
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1830
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1832
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1836
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1839
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1843
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1848
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1854
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1855
		{
			sqlVAL.str = ""
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1864
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1865
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1867
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1868
		{
			return helpWith(sqllex, "CREATE")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1871
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1872
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1873
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1874
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1876
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1877
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1878
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1889
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1896
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1900
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[6].union.expr(),
				AsOf:    sqlDollar[7].union.asOfClause(),
				Options: sqlDollar[8].union.kvOptions(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1922
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1932
		{
			return helpWith(sqllex, "DELETE")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1942
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1943
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1944
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1945
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1946
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return helpWith(sqllex, "DROP")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1960
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1961
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1962
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1963
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1964
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1972
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1976
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1979
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1987
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1991
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1994
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2002
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2006
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2009
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2017
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2025
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2032
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2040
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2048
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2055
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2063
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2067
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2070
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2078
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2082
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2085
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2089
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2093
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2114
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2117
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2119
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2126
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2130
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2132
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2133
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2134
		{
			return helpWith(sqllex, "DELETE")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2135
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2136
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2137
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2138
		{
			return helpWith(sqllex, "INSERT")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2139
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2141
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2142
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2144
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2147
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2148
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2150
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2151
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2159
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2160
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2164
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2178
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2189
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2193
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2203
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2209
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2215
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2219
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2229
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2233
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2237
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2241
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2244
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2268
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2272
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2275
		{
			return helpWith(sqllex, "GRANT")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2295
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2299
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2303
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2306
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2311
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2315
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2326
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2330
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2344
		{
			return helpWith(sqllex, "RESET")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2345
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2353
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2357
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2360
		{
			return helpWith(sqllex, "RESET")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2368
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2371
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2382
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2385
		{
			return helpWith(sqllex, "USE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2389
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2390
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2391
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2392
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2393
		{
			return helpWith(sqllex, "USE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2394
		{
			return unimplemented(sqllex, "set local")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2410
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2425
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2428
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2446
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2454
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2458
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2462
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2468
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2472
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2478
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2482
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2486
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2490
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2505
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2512
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2518
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2534
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2538
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2543
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2560
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2563
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2565
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2568
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2572
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2582
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2598
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2605
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2611
		{
			return unimplemented(sqllex, "set from current")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2612
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2620
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2625
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2632
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2636
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2642
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2653
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2659
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2669
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2673
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2677
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2681
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2685
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2691
		{
			sqlVAL.union.val = tree.Low
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2695
		{
			sqlVAL.union.val = tree.Normal
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2699
		{
			sqlVAL.union.val = tree.High
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2710
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2714
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2718
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2723
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2727
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2739
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2740
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2741
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2742
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2743
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2744
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2745
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2746
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2748
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2749
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2750
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2751
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2752
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2753
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2754
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2755
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2757
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2758
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2759
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2760
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2761
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2762
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2763
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2765
		{
			return helpWith(sqllex, "SHOW")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2773
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2785
		{
			sqlVAL.str = "client_encoding"
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2788
		{
			sqlVAL.str = "timezone"
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2803
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2807
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2810
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2821
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2829
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2837
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2840
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2850
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2857
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2859
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2862
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2873
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2881
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2884
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2897
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2905
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2916
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2923
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2926
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2937
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2939
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2942
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2950
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2953
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2955
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2959
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2969
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2972
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2982
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2985
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2990
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2992
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2996
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3000
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3006
		{
			sqlVAL.union.val = true
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3007
		{
			sqlVAL.union.val = false
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3015
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3020
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3024
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3034
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3043
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3052
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3055
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3062
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3066
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3069
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3076
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3080
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3088
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3093
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3098
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3102
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3110
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3113
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3121
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3124
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3131
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3134
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3142
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3145
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3153
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3156
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3160
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3165
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3170
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3177
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3185
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3192
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3197
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3209
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3213
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3216
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3224
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3231
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3236
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3356
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3360
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3364
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3403
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3407
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3412
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3416
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3425
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3432
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3436
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3448
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3457
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3460
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3496
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3508
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3522
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3547
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3553
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3563
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3569
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3575
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3583
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3590
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3595
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3600
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3606
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3613
		{
			sqlVAL.str = ""
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3620
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3626
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3633
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3640
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3646
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 630:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3656
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3666
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3676
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3687
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3698
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3702
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3708
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3712
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3716
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3720
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3724
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3728
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3732
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3750
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3754
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3758
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3762
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3766
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3770
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3774
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3782
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3786
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3790
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3797
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3807
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3819
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3829
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3841
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3846
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3852
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3858
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3869
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3879
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3903
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3907
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3913
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3917
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3922
		{
			return unimplemented(sqllex, "match full")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3923
		{
			return unimplemented(sqllex, "match partial")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3924
		{
			return unimplemented(sqllex, "match simple")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3925
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3932
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3936
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3940
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3944
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3948
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3954
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3960
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3968
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3972
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3976
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3980
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3984
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3990
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3994
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3998
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4016
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 690:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4024
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4032
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4036
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4039
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4043
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4044
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4046
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4047
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4048
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4051
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4053
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4055
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4058
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4060
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4061
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4063
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4072
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4075
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4083
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4087
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4090
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4094
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4098
		{
			sqlVAL.union.val = nil
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4108
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4112
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4115
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4123
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4130
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4148
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4161
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4175
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4184
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4193
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4198
		{
			sqlVAL.union.val = true
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4202
		{
			sqlVAL.union.val = false
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4208
		{
			sqlVAL.union.val = true
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4212
		{
			sqlVAL.union.val = false
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4218
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4231
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4234
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4235
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4238
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4239
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4243
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4247
		{
			sqlVAL.union.val = tree.Descending
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4251
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4257
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4264
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4268
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4274
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4278
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4282
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4286
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4290
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4292
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4296
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4300
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4306
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4310
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4320
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4326
		{
			sqlVAL.union.val = true
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4330
		{
			sqlVAL.union.val = false
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4335
		{
			sqlVAL.union.val = true
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4336
		{
			sqlVAL.union.val = false
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4344
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4347
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4357
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4366
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4369
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4377
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4380
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4384
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4385
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4386
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4402
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4407
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4410
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4420
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4423
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4425
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4428
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4432
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4437
		{
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4438
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4439
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4447
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4454
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4457
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4458
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4462
		{
			sqlVAL.str = ""
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4466
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4470
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4474
		{
			sqlVAL.str = ""
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4480
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4484
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4490
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4494
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4500
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4504
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4517
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4519
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4523
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4527
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4531
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4537
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4543
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4549
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4553
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 808:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4563
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4573
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4583
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4587
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4591
		{
			sqlVAL.str = ""
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4597
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4601
		{
			sqlVAL.str = ""
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4607
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4611
		{
			sqlVAL.str = ""
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4617
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4621
		{
			sqlVAL.str = ""
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4626
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4627
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4639
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4646
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4653
		{
			return helpWith(sqllex, "INSERT")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4664
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4671
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4675
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4683
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4689
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4693
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4697
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4703
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4727
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 835:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4731
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4735
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4741
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4745
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4747
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4753
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4758
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4762
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 843:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4779
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4790
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4794
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4795
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4799
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4803
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4816
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4819
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 853:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4823
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4866
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4872
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4876
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4891
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4895
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4899
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4903
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4907
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4911
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4918
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4953
		{
			return helpWith(sqllex, "SELECT")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4954
		{
			return helpWith(sqllex, "VALUES")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4955
		{
			return helpWith(sqllex, "TABLE")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4977
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4990
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5004
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5016
		{
			return helpWith(sqllex, "SELECT")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5020
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5029
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5038
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5053
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5060
		{
			return helpWith(sqllex, "TABLE")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5072
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5075
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5076
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5080
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 888:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5090
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5098
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5099
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5103
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5106
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5109
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5110
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5114
		{
			sqlVAL.union.val = true
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5118
		{
			sqlVAL.union.val = false
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5122
		{
			sqlVAL.union.val = false
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5128
		{
			sqlVAL.union.val = true
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5134
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5139
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5140
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5143
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5144
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5148
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5152
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5158
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5174
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5178
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5182
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5191
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5200
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5211
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5215
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5224
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5230
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5237
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5244
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5253
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5257
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5261
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5267
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5268
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5271
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5272
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5289
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5293
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5299
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5303
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5322
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5325
		{
			return helpWith(sqllex, "VALUES")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5327
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5339
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5342
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5344
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5350
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5354
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5360
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5364
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5370
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5376
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5381
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5404
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5408
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5412
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5416
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5443
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5457
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5461
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5464
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5465
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5466
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5468
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5471
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5473
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5476
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5478
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5482
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5502
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5507
		{
			sqlVAL.union.val = nil
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5508
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5509
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5513
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5517
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5523
		{
			sqlVAL.union.val = true
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5527
		{
			sqlVAL.union.val = false
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5547
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5551
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5555
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5559
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5563
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5567
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5573
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5577
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5584
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5597
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5603
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5607
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5611
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5615
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5621
		{
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5622
		{
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5633
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5637
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5642
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5643
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5644
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5645
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5649
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5653
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5666
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5670
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5674
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5680
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5684
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5696
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5710
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5719
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5730
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5734
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5741
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5743
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5752
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5756
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5760
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5769
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5787
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5791
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5795
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5799
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5803
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5807
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5811
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5815
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5819
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5823
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5827
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5831
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5835
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5839
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5843
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5847
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5851
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5871
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5875
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5879
		{
			sqlVAL.union.val = nil
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5886
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5890
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5894
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5898
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5902
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5906
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5910
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5914
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5918
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5922
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5926
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5930
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5940
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5944
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5953
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5962
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5971
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5975
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5982
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5986
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5990
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5994
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5998
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6004
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6008
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6014
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6025
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6031
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6043
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6049
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6053
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6057
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6061
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6066
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6067
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6072
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6076
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6080
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6084
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6088
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6092
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6096
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6100
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6104
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6109
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6115
		{
			sqlVAL.union.val = tree.Year
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6119
		{
			sqlVAL.union.val = tree.Month
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6123
		{
			sqlVAL.union.val = tree.Day
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6127
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6141
		{
			sqlVAL.union.val = tree.Month
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6145
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6149
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6153
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6157
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6161
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6165
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6169
		{
			sqlVAL.union.val = nil
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6175
		{
			sqlVAL.union.val = tree.Second
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6178
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6202
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6206
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6210
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6213
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6222
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6226
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6230
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6234
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6238
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6246
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6250
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6254
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6258
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6262
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6266
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6270
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6274
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6278
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6282
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6286
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6294
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6298
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6302
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6310
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6326
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6330
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6334
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6338
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6342
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6346
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6350
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6354
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6358
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6362
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6366
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6370
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6374
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6378
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6382
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6386
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6390
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6394
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6398
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6402
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6406
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6410
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6414
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6418
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6422
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6426
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6438
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6441
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6447
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6451
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6463
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6467
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6471
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6475
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6479
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6483
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6507
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6524
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6528
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6532
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6547
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6551
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6555
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6559
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6563
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6567
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6571
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6575
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6579
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6583
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6587
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6591
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6595
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6599
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6603
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6607
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6611
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6615
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6619
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6623
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6627
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6631
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6635
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6639
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6643
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6647
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6651
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6655
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6669
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6713
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6718
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6727
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6732
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6736
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6745
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6749
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6753
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6757
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6762
		{
			t := sqlDollar[2].union.tuple()
			t.Labels = sqlDollar[4].union.nameList()
			sqlVAL.union.val = &t
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6773
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6777
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6780
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6781
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6783
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6787
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6791
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6794
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6805
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6812
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6821
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6822
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6826
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6828
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6832
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6842
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6846
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6850
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6856
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6860
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6864
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6868
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6872
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6876
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6880
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6884
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6888
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6892
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6896
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6900
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6904
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6911
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6914
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6919
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6924
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6929
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6931
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6934
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6936
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6939
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6944
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6949
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6951
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6958
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6959
		{
			return unimplemented(sqllex, "treat")
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6980
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6985
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6990
		{
			return unimplemented(sqllex, "within group")
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6991
		{
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6995
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6999
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7006
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7010
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7016
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7026
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7034
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7038
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7042
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7068
		{
			sqlVAL.str = ""
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7074
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7078
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7088
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7089
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7090
		{
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7093
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7094
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7100
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7101
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7102
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7103
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7104
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7115
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7119
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7125
		{
			sqlVAL.union.val = tree.Any
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7129
		{
			sqlVAL.union.val = tree.Some
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7133
		{
			sqlVAL.union.val = tree.All
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7138
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7139
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7140
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7141
		{
			sqlVAL.union.val = tree.Div
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7143
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7144
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7147
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7148
		{
			sqlVAL.union.val = tree.LT
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7149
		{
			sqlVAL.union.val = tree.GT
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7150
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7151
		{
			sqlVAL.union.val = tree.LE
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = tree.GE
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7153
		{
			sqlVAL.union.val = tree.NE
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7157
		{
			sqlVAL.union.val = tree.Like
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7158
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7160
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7172
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7178
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7188
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7198
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7202
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7208
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7222
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7244
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7248
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7252
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7258
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7265
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7286
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7290
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7294
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7298
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7302
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7308
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7314
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7320
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7324
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7328
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7334
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7338
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7349
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7356
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7366
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7372
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7376
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7383
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7393
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7400
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7406
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7415
		{
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7416
		{
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7420
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7424
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7430
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7439
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7443
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7447
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7455
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7459
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7465
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7469
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7475
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7482
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7524
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7535
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7539
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7543
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7547
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7550
		{
			return unimplemented(sqllex, "func const")
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7556
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7559
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7561
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7565
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7569
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7576
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7589
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7600
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7610
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7713
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7717
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7721
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7735
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7739
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7756
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7802
		{
			sqlVAL.str = ""
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7808
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7812
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
