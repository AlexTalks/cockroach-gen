// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:585
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9530

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1041,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	179, 880,
	196, 880,
	211, 244,
	288, 244,
	296, 720,
	323, 244,
	332, 720,
	369, 720,
	392, 244,
	416, 720,
	-2, 0,
	-1, 74,
	211, 248,
	-2, 0,
	-1, 75,
	106, 1041,
	185, 1041,
	402, 1041,
	403, 1041,
	-2, 0,
	-1, 87,
	119, 1015,
	134, 1015,
	193, 1015,
	222, 1015,
	253, 1015,
	263, 1015,
	397, 1015,
	-2, 1002,
	-1, 117,
	124, 641,
	210, 641,
	290, 623,
	341, 623,
	385, 641,
	-2, 0,
	-1, 118,
	4, 1043,
	21, 1043,
	22, 1043,
	23, 1043,
	24, 1043,
	25, 1043,
	27, 1043,
	32, 1043,
	37, 1043,
	38, 1043,
	39, 1043,
	40, 1043,
	41, 1043,
	42, 1043,
	43, 1043,
	44, 1043,
	45, 1043,
	46, 1043,
	47, 1043,
	49, 1043,
	50, 1043,
	51, 1043,
	52, 1043,
	53, 1043,
	54, 1043,
	57, 1043,
	58, 1043,
	59, 1043,
	60, 1043,
	62, 1043,
	63, 1043,
	67, 1043,
	68, 1043,
	69, 1043,
	70, 1043,
	71, 1043,
	73, 1043,
	74, 1043,
	75, 1043,
	76, 1043,
	78, 1043,
	80, 1043,
	81, 1043,
	82, 1043,
	85, 1043,
	86, 1043,
	94, 1043,
	95, 1043,
	96, 1043,
	97, 1043,
	98, 1043,
	99, 1043,
	100, 1043,
	101, 1043,
	103, 1043,
	105, 1043,
	106, 1043,
	108, 1043,
	111, 1043,
	112, 1043,
	113, 1043,
	115, 1043,
	117, 1043,
	118, 1043,
	120, 1043,
	121, 1043,
	122, 1043,
	123, 1043,
	124, 1043,
	125, 1043,
	126, 1043,
	127, 1043,
	128, 1043,
	129, 1043,
	130, 1043,
	131, 1043,
	133, 1043,
	139, 1043,
	140, 1043,
	141, 1043,
	142, 1043,
	143, 1043,
	144, 1043,
	146, 1043,
	148, 1043,
	152, 1043,
	153, 1043,
	155, 1043,
	156, 1043,
	158, 1043,
	159, 1043,
	161, 1043,
	162, 1043,
	163, 1043,
	164, 1043,
	165, 1043,
	166, 1043,
	167, 1043,
	168, 1043,
	170, 1043,
	171, 1043,
	173, 1043,
	174, 1043,
	175, 1043,
	179, 1043,
	180, 1043,
	181, 1043,
	182, 1043,
	185, 1043,
	186, 1043,
	187, 1043,
	188, 1043,
	189, 1043,
	190, 1043,
	191, 1043,
	192, 1043,
	194, 1043,
	196, 1043,
	198, 1043,
	200, 1043,
	201, 1043,
	202, 1043,
	204, 1043,
	205, 1043,
	208, 1043,
	209, 1043,
	210, 1043,
	211, 1043,
	213, 1043,
	214, 1043,
	216, 1043,
	217, 1043,
	219, 1043,
	220, 1043,
	223, 1043,
	224, 1043,
	227, 1043,
	228, 1043,
	230, 1043,
	231, 1043,
	232, 1043,
	233, 1043,
	234, 1043,
	235, 1043,
	236, 1043,
	237, 1043,
	238, 1043,
	239, 1043,
	241, 1043,
	242, 1043,
	243, 1043,
	244, 1043,
	246, 1043,
	249, 1043,
	250, 1043,
	251, 1043,
	252, 1043,
	254, 1043,
	255, 1043,
	256, 1043,
	258, 1043,
	259, 1043,
	260, 1043,
	261, 1043,
	264, 1043,
	265, 1043,
	267, 1043,
	269, 1043,
	270, 1043,
	271, 1043,
	272, 1043,
	273, 1043,
	274, 1043,
	275, 1043,
	276, 1043,
	277, 1043,
	278, 1043,
	280, 1043,
	281, 1043,
	282, 1043,
	283, 1043,
	284, 1043,
	285, 1043,
	287, 1043,
	289, 1043,
	290, 1043,
	291, 1043,
	292, 1043,
	293, 1043,
	294, 1043,
	295, 1043,
	296, 1043,
	297, 1043,
	299, 1043,
	300, 1043,
	301, 1043,
	302, 1043,
	303, 1043,
	305, 1043,
	306, 1043,
	307, 1043,
	308, 1043,
	309, 1043,
	310, 1043,
	311, 1043,
	312, 1043,
	314, 1043,
	316, 1043,
	317, 1043,
	318, 1043,
	319, 1043,
	320, 1043,
	321, 1043,
	323, 1043,
	324, 1043,
	325, 1043,
	326, 1043,
	327, 1043,
	328, 1043,
	329, 1043,
	330, 1043,
	332, 1043,
	333, 1043,
	334, 1043,
	335, 1043,
	336, 1043,
	337, 1043,
	338, 1043,
	339, 1043,
	340, 1043,
	341, 1043,
	343, 1043,
	344, 1043,
	345, 1043,
	346, 1043,
	348, 1043,
	349, 1043,
	350, 1043,
	351, 1043,
	353, 1043,
	354, 1043,
	355, 1043,
	356, 1043,
	357, 1043,
	358, 1043,
	359, 1043,
	360, 1043,
	361, 1043,
	362, 1043,
	363, 1043,
	364, 1043,
	366, 1043,
	367, 1043,
	368, 1043,
	370, 1043,
	371, 1043,
	372, 1043,
	373, 1043,
	374, 1043,
	375, 1043,
	376, 1043,
	378, 1043,
	379, 1043,
	380, 1043,
	381, 1043,
	383, 1043,
	385, 1043,
	386, 1043,
	387, 1043,
	388, 1043,
	389, 1043,
	391, 1043,
	392, 1043,
	393, 1043,
	395, 1043,
	396, 1043,
	399, 1043,
	400, 1043,
	401, 1043,
	402, 1043,
	403, 1043,
	404, 1043,
	406, 1043,
	408, 1043,
	409, 1043,
	410, 1043,
	411, 1043,
	412, 1043,
	413, 1043,
	414, 1043,
	416, 1043,
	417, 1043,
	418, 1043,
	423, 1043,
	424, 1043,
	425, 1043,
	426, 1043,
	427, 1043,
	428, 1043,
	-2, 0,
	-1, 119,
	1, 933,
	200, 933,
	287, 933,
	294, 933,
	431, 933,
	454, 933,
	-2, 0,
	-1, 121,
	1, 933,
	454, 933,
	-2, 0,
	-1, 122,
	1, 933,
	454, 933,
	-2, 0,
	-1, 123,
	1, 937,
	454, 937,
	-2, 0,
	-1, 147,
	119, 1014,
	134, 1014,
	193, 1014,
	222, 1014,
	253, 1014,
	263, 1014,
	397, 1014,
	-2, 1011,
	-1, 179,
	4, 1050,
	5, 1050,
	6, 1050,
	7, 1050,
	8, 1050,
	9, 1050,
	10, 1050,
	21, 1050,
	22, 1050,
	23, 1050,
	24, 1050,
	25, 1050,
	27, 1050,
	32, 1050,
	33, 1050,
	37, 1050,
	38, 1050,
	39, 1050,
	40, 1050,
	41, 1050,
	42, 1050,
	43, 1050,
	44, 1050,
	45, 1050,
	46, 1050,
	47, 1050,
	49, 1050,
	50, 1050,
	51, 1050,
	52, 1050,
	53, 1050,
	54, 1050,
	55, 1050,
	56, 1050,
	57, 1050,
	58, 1050,
	59, 1050,
	60, 1050,
	62, 1050,
	63, 1050,
	65, 1050,
	67, 1050,
	68, 1050,
	69, 1050,
	70, 1050,
	71, 1050,
	73, 1050,
	74, 1050,
	75, 1050,
	76, 1050,
	78, 1050,
	80, 1050,
	81, 1050,
	82, 1050,
	84, 1050,
	85, 1050,
	86, 1050,
	87, 1050,
	88, 1050,
	89, 1050,
	90, 1050,
	91, 1050,
	92, 1050,
	93, 1050,
	94, 1050,
	95, 1050,
	96, 1050,
	97, 1050,
	98, 1050,
	99, 1050,
	100, 1050,
	101, 1050,
	102, 1050,
	103, 1050,
	105, 1050,
	106, 1050,
	108, 1050,
	111, 1050,
	112, 1050,
	113, 1050,
	115, 1050,
	117, 1050,
	118, 1050,
	120, 1050,
	121, 1050,
	122, 1050,
	123, 1050,
	124, 1050,
	125, 1050,
	126, 1050,
	127, 1050,
	128, 1050,
	129, 1050,
	130, 1050,
	131, 1050,
	132, 1050,
	133, 1050,
	139, 1050,
	140, 1050,
	141, 1050,
	142, 1050,
	143, 1050,
	144, 1050,
	146, 1050,
	148, 1050,
	151, 1050,
	152, 1050,
	153, 1050,
	155, 1050,
	156, 1050,
	158, 1050,
	159, 1050,
	161, 1050,
	162, 1050,
	163, 1050,
	164, 1050,
	165, 1050,
	166, 1050,
	167, 1050,
	168, 1050,
	169, 1050,
	170, 1050,
	171, 1050,
	173, 1050,
	174, 1050,
	175, 1050,
	179, 1050,
	180, 1050,
	181, 1050,
	182, 1050,
	184, 1050,
	185, 1050,
	186, 1050,
	187, 1050,
	188, 1050,
	189, 1050,
	190, 1050,
	191, 1050,
	192, 1050,
	194, 1050,
	196, 1050,
	197, 1050,
	198, 1050,
	199, 1050,
	200, 1050,
	201, 1050,
	202, 1050,
	203, 1050,
	204, 1050,
	205, 1050,
	208, 1050,
	209, 1050,
	210, 1050,
	211, 1050,
	213, 1050,
	214, 1050,
	216, 1050,
	217, 1050,
	218, 1050,
	219, 1050,
	220, 1050,
	221, 1050,
	223, 1050,
	224, 1050,
	227, 1050,
	228, 1050,
	230, 1050,
	231, 1050,
	232, 1050,
	233, 1050,
	234, 1050,
	235, 1050,
	236, 1050,
	237, 1050,
	238, 1050,
	239, 1050,
	240, 1050,
	241, 1050,
	242, 1050,
	243, 1050,
	244, 1050,
	245, 1050,
	246, 1050,
	247, 1050,
	248, 1050,
	249, 1050,
	250, 1050,
	251, 1050,
	252, 1050,
	254, 1050,
	255, 1050,
	256, 1050,
	259, 1050,
	260, 1050,
	261, 1050,
	264, 1050,
	265, 1050,
	266, 1050,
	267, 1050,
	268, 1050,
	269, 1050,
	270, 1050,
	271, 1050,
	272, 1050,
	273, 1050,
	274, 1050,
	275, 1050,
	276, 1050,
	277, 1050,
	278, 1050,
	280, 1050,
	281, 1050,
	282, 1050,
	283, 1050,
	284, 1050,
	285, 1050,
	287, 1050,
	289, 1050,
	290, 1050,
	291, 1050,
	292, 1050,
	293, 1050,
	294, 1050,
	295, 1050,
	296, 1050,
	297, 1050,
	299, 1050,
	300, 1050,
	301, 1050,
	302, 1050,
	303, 1050,
	305, 1050,
	306, 1050,
	307, 1050,
	308, 1050,
	309, 1050,
	310, 1050,
	311, 1050,
	312, 1050,
	314, 1050,
	315, 1050,
	316, 1050,
	317, 1050,
	318, 1050,
	319, 1050,
	320, 1050,
	321, 1050,
	323, 1050,
	324, 1050,
	325, 1050,
	326, 1050,
	327, 1050,
	328, 1050,
	329, 1050,
	330, 1050,
	332, 1050,
	333, 1050,
	334, 1050,
	335, 1050,
	336, 1050,
	337, 1050,
	338, 1050,
	339, 1050,
	340, 1050,
	341, 1050,
	342, 1050,
	343, 1050,
	344, 1050,
	345, 1050,
	346, 1050,
	347, 1050,
	348, 1050,
	349, 1050,
	350, 1050,
	351, 1050,
	353, 1050,
	354, 1050,
	355, 1050,
	356, 1050,
	357, 1050,
	358, 1050,
	359, 1050,
	360, 1050,
	361, 1050,
	362, 1050,
	363, 1050,
	364, 1050,
	366, 1050,
	367, 1050,
	368, 1050,
	370, 1050,
	371, 1050,
	372, 1050,
	373, 1050,
	374, 1050,
	375, 1050,
	376, 1050,
	378, 1050,
	379, 1050,
	380, 1050,
	381, 1050,
	383, 1050,
	385, 1050,
	386, 1050,
	387, 1050,
	388, 1050,
	389, 1050,
	390, 1050,
	391, 1050,
	392, 1050,
	393, 1050,
	395, 1050,
	396, 1050,
	398, 1050,
	399, 1050,
	400, 1050,
	401, 1050,
	402, 1050,
	403, 1050,
	404, 1050,
	405, 1050,
	406, 1050,
	408, 1050,
	409, 1050,
	410, 1050,
	411, 1050,
	412, 1050,
	413, 1050,
	414, 1050,
	416, 1050,
	417, 1050,
	418, 1050,
	423, 1050,
	424, 1050,
	425, 1050,
	426, 1050,
	427, 1050,
	428, 1050,
	429, 1050,
	437, 1050,
	442, 1050,
	443, 1050,
	444, 1050,
	451, 1050,
	456, 1050,
	-2, 0,
	-1, 546,
	150, 1717,
	382, 1717,
	434, 1717,
	453, 1717,
	-2, 0,
	-1, 547,
	150, 1794,
	382, 1794,
	434, 1794,
	453, 1794,
	-2, 0,
	-1, 548,
	150, 1707,
	382, 1707,
	434, 1707,
	453, 1707,
	-2, 0,
	-1, 550,
	150, 1882,
	382, 1882,
	434, 1882,
	453, 1882,
	-2, 0,
	-1, 552,
	150, 1909,
	382, 1909,
	434, 1909,
	453, 1909,
	-2, 0,
	-1, 559,
	150, 1804,
	382, 1804,
	434, 1804,
	453, 1804,
	-2, 495,
	-1, 576,
	453, 1666,
	455, 1666,
	-2, 689,
	-1, 577,
	453, 1668,
	455, 1668,
	-2, 690,
	-1, 578,
	453, 1667,
	455, 1667,
	-2, 691,
	-1, 579,
	455, 1613,
	-2, 692,
	-1, 726,
	290, 624,
	341, 624,
	-2, 0,
	-1, 727,
	290, 623,
	341, 623,
	-2, 575,
	-1, 730,
	1, 651,
	450, 651,
	452, 651,
	454, 651,
	-2, 0,
	-1, 731,
	1, 688,
	147, 688,
	450, 688,
	452, 688,
	454, 688,
	-2, 0,
	-1, 739,
	1, 627,
	450, 627,
	452, 627,
	454, 627,
	-2, 0,
	-1, 742,
	1, 651,
	450, 651,
	452, 651,
	454, 651,
	-2, 0,
	-1, 743,
	1, 653,
	450, 653,
	452, 653,
	454, 653,
	-2, 0,
	-1, 744,
	1, 656,
	450, 656,
	452, 656,
	454, 656,
	-2, 0,
	-1, 748,
	1, 670,
	450, 670,
	452, 670,
	454, 670,
	-2, 0,
	-1, 749,
	1, 672,
	450, 672,
	452, 672,
	454, 672,
	-2, 0,
	-1, 791,
	134, 1052,
	222, 1052,
	253, 1052,
	-2, 1011,
	-1, 806,
	134, 1051,
	222, 1051,
	253, 1051,
	-2, 1011,
	-1, 830,
	453, 1665,
	-2, 503,
	-1, 859,
	451, 1657,
	-2, 1648,
	-1, 865,
	5, 1187,
	-2, 1698,
	-1, 866,
	5, 1188,
	-2, 1702,
	-1, 867,
	5, 1189,
	-2, 1701,
	-1, 868,
	5, 1190,
	-2, 1907,
	-1, 869,
	5, 1191,
	-2, 1806,
	-1, 870,
	5, 1192,
	-2, 1874,
	-1, 871,
	5, 1193,
	-2, 1876,
	-1, 872,
	5, 1194,
	-2, 1887,
	-1, 873,
	5, 1195,
	-2, 1877,
	-1, 874,
	5, 1196,
	-2, 1878,
	-1, 875,
	5, 1197,
	-2, 1697,
	-1, 876,
	5, 1198,
	-2, 1922,
	-1, 877,
	5, 1199,
	-2, 1769,
	-1, 878,
	5, 1200,
	-2, 1814,
	-1, 879,
	5, 1201,
	-2, 1816,
	-1, 880,
	5, 1202,
	-2, 1773,
	-1, 881,
	5, 1203,
	451, 1675,
	-2, 1666,
	-1, 882,
	5, 1259,
	451, 1259,
	-2, 1957,
	-1, 887,
	451, 1676,
	-2, 1667,
	-1, 889,
	5, 1207,
	-2, 1955,
	-1, 890,
	5, 1208,
	-2, 1956,
	-1, 891,
	5, 1209,
	-2, 1772,
	-1, 892,
	5, 1210,
	-2, 1968,
	-1, 893,
	5, 1211,
	-2, 1774,
	-1, 894,
	5, 1212,
	-2, 1775,
	-1, 895,
	5, 1213,
	-2, 1776,
	-1, 896,
	5, 1214,
	-2, 1937,
	-1, 897,
	5, 1215,
	-2, 1966,
	-1, 898,
	5, 1216,
	-2, 1752,
	-1, 899,
	5, 1217,
	-2, 1753,
	-1, 900,
	5, 1231,
	-2, 1949,
	-1, 902,
	5, 1206,
	-2, 1945,
	-1, 903,
	5, 1206,
	-2, 1944,
	-1, 904,
	5, 1206,
	-2, 1961,
	-1, 905,
	5, 1223,
	-2, 1939,
	-1, 906,
	5, 1224,
	-2, 1699,
	-1, 907,
	5, 1234,
	-2, 1938,
	-1, 908,
	5, 1236,
	-2, 1977,
	-1, 910,
	5, 1247,
	-2, 1727,
	-1, 911,
	5, 1258,
	-2, 1970,
	-1, 912,
	5, 1250,
	-2, 1971,
	-1, 913,
	5, 1258,
	-2, 1972,
	-1, 914,
	5, 1254,
	-2, 1973,
	-1, 915,
	5, 1174,
	-2, 1782,
	-1, 916,
	5, 1175,
	-2, 1783,
	-1, 917,
	453, 1663,
	-2, 1647,
	-1, 918,
	451, 1997,
	-2, 1664,
	-1, 938,
	5, 1242,
	-2, 1897,
	-1, 955,
	5, 1241,
	-2, 1978,
	-1, 965,
	5, 1243,
	417, 1243,
	-2, 1940,
	-1, 966,
	5, 1244,
	417, 1244,
	-2, 1941,
	-1, 1002,
	451, 1675,
	-2, 1666,
	-1, 1030,
	150, 1909,
	382, 1909,
	434, 1909,
	453, 1909,
	-2, 0,
	-1, 1031,
	1, 483,
	454, 483,
	-2, 945,
	-1, 1151,
	305, 1644,
	444, 1644,
	-2, 1643,
	-1, 1174,
	456, 1644,
	-2, 1645,
	-1, 1209,
	296, 720,
	416, 720,
	-2, 243,
	-1, 1229,
	276, 1039,
	-2, 853,
	-1, 1238,
	257, 1670,
	-2, 0,
	-1, 1302,
	1, 358,
	450, 358,
	452, 358,
	454, 358,
	-2, 1013,
	-1, 1305,
	4, 1976,
	11, 1976,
	12, 1976,
	14, 1976,
	15, 1976,
	16, 1976,
	17, 1976,
	18, 1976,
	19, 1976,
	21, 1976,
	22, 1976,
	23, 1976,
	24, 1976,
	25, 1976,
	27, 1976,
	30, 1976,
	32, 1976,
	34, 1976,
	37, 1976,
	38, 1976,
	39, 1976,
	40, 1976,
	41, 1976,
	42, 1976,
	43, 1976,
	44, 1976,
	45, 1976,
	46, 1976,
	47, 1976,
	49, 1976,
	50, 1976,
	51, 1976,
	52, 1976,
	53, 1976,
	54, 1976,
	57, 1976,
	58, 1976,
	59, 1976,
	60, 1976,
	62, 1976,
	63, 1976,
	64, 1976,
	67, 1976,
	68, 1976,
	69, 1976,
	70, 1976,
	71, 1976,
	72, 1976,
	73, 1976,
	74, 1976,
	75, 1976,
	76, 1976,
	78, 1976,
	79, 1976,
	80, 1976,
	81, 1976,
	82, 1976,
	84, 1976,
	85, 1976,
	86, 1976,
	94, 1976,
	95, 1976,
	96, 1976,
	97, 1976,
	98, 1976,
	99, 1976,
	100, 1976,
	101, 1976,
	103, 1976,
	105, 1976,
	106, 1976,
	108, 1976,
	111, 1976,
	112, 1976,
	113, 1976,
	115, 1976,
	117, 1976,
	118, 1976,
	120, 1976,
	121, 1976,
	122, 1976,
	123, 1976,
	124, 1976,
	125, 1976,
	126, 1976,
	127, 1976,
	128, 1976,
	129, 1976,
	130, 1976,
	131, 1976,
	135, 1976,
	136, 1976,
	137, 1976,
	138, 1976,
	139, 1976,
	140, 1976,
	141, 1976,
	142, 1976,
	143, 1976,
	144, 1976,
	145, 1976,
	146, 1976,
	148, 1976,
	151, 1976,
	152, 1976,
	153, 1976,
	155, 1976,
	156, 1976,
	158, 1976,
	159, 1976,
	161, 1976,
	162, 1976,
	163, 1976,
	164, 1976,
	165, 1976,
	166, 1976,
	167, 1976,
	168, 1976,
	169, 1976,
	170, 1976,
	171, 1976,
	172, 1976,
	173, 1976,
	174, 1976,
	175, 1976,
	176, 1976,
	177, 1976,
	178, 1976,
	180, 1976,
	181, 1976,
	182, 1976,
	184, 1976,
	185, 1976,
	186, 1976,
	187, 1976,
	188, 1976,
	189, 1976,
	190, 1976,
	191, 1976,
	192, 1976,
	194, 1976,
	196, 1976,
	197, 1976,
	198, 1976,
	199, 1976,
	200, 1976,
	201, 1976,
	202, 1976,
	203, 1976,
	204, 1976,
	205, 1976,
	206, 1976,
	207, 1976,
	208, 1976,
	209, 1976,
	210, 1976,
	211, 1976,
	213, 1976,
	214, 1976,
	216, 1976,
	217, 1976,
	218, 1976,
	219, 1976,
	220, 1976,
	221, 1976,
	223, 1976,
	224, 1976,
	227, 1976,
	228, 1976,
	229, 1976,
	230, 1976,
	231, 1976,
	232, 1976,
	233, 1976,
	234, 1976,
	235, 1976,
	236, 1976,
	237, 1976,
	238, 1976,
	239, 1976,
	240, 1976,
	241, 1976,
	242, 1976,
	243, 1976,
	244, 1976,
	247, 1976,
	249, 1976,
	250, 1976,
	251, 1976,
	252, 1976,
	254, 1976,
	255, 1976,
	256, 1976,
	259, 1976,
	260, 1976,
	261, 1976,
	262, 1976,
	264, 1976,
	265, 1976,
	267, 1976,
	269, 1976,
	270, 1976,
	271, 1976,
	272, 1976,
	273, 1976,
	274, 1976,
	275, 1976,
	276, 1976,
	277, 1976,
	278, 1976,
	280, 1976,
	281, 1976,
	282, 1976,
	283, 1976,
	284, 1976,
	285, 1976,
	287, 1976,
	289, 1976,
	290, 1976,
	291, 1976,
	292, 1976,
	293, 1976,
	294, 1976,
	295, 1976,
	296, 1976,
	297, 1976,
	299, 1976,
	300, 1976,
	301, 1976,
	302, 1976,
	303, 1976,
	304, 1976,
	305, 1976,
	306, 1976,
	307, 1976,
	308, 1976,
	309, 1976,
	310, 1976,
	311, 1976,
	312, 1976,
	314, 1976,
	315, 1976,
	316, 1976,
	317, 1976,
	318, 1976,
	319, 1976,
	320, 1976,
	321, 1976,
	322, 1976,
	323, 1976,
	324, 1976,
	325, 1976,
	326, 1976,
	327, 1976,
	328, 1976,
	329, 1976,
	330, 1976,
	332, 1976,
	333, 1976,
	334, 1976,
	335, 1976,
	336, 1976,
	337, 1976,
	338, 1976,
	339, 1976,
	340, 1976,
	341, 1976,
	343, 1976,
	344, 1976,
	345, 1976,
	346, 1976,
	347, 1976,
	348, 1976,
	349, 1976,
	350, 1976,
	351, 1976,
	353, 1976,
	354, 1976,
	355, 1976,
	356, 1976,
	357, 1976,
	358, 1976,
	359, 1976,
	360, 1976,
	361, 1976,
	362, 1976,
	363, 1976,
	364, 1976,
	366, 1976,
	367, 1976,
	368, 1976,
	370, 1976,
	371, 1976,
	372, 1976,
	373, 1976,
	374, 1976,
	375, 1976,
	376, 1976,
	378, 1976,
	379, 1976,
	380, 1976,
	381, 1976,
	383, 1976,
	385, 1976,
	386, 1976,
	387, 1976,
	388, 1976,
	389, 1976,
	391, 1976,
	392, 1976,
	393, 1976,
	395, 1976,
	396, 1976,
	399, 1976,
	400, 1976,
	401, 1976,
	402, 1976,
	403, 1976,
	404, 1976,
	406, 1976,
	408, 1976,
	409, 1976,
	410, 1976,
	411, 1976,
	412, 1976,
	413, 1976,
	414, 1976,
	416, 1976,
	417, 1976,
	418, 1976,
	423, 1976,
	424, 1976,
	425, 1976,
	426, 1976,
	427, 1976,
	428, 1976,
	429, 1976,
	430, 1976,
	432, 1976,
	433, 1976,
	434, 1976,
	435, 1976,
	436, 1976,
	437, 1976,
	439, 1976,
	440, 1976,
	441, 1976,
	442, 1976,
	443, 1976,
	444, 1976,
	445, 1976,
	446, 1976,
	447, 1976,
	449, 1976,
	452, 1976,
	453, 1976,
	455, 1976,
	456, 1976,
	-2, 0,
	-1, 1308,
	150, 1882,
	382, 1882,
	434, 1882,
	453, 1882,
	-2, 0,
	-1, 1337,
	290, 624,
	341, 624,
	-2, 0,
	-1, 1360,
	1, 619,
	450, 619,
	452, 619,
	454, 619,
	-2, 0,
	-1, 1361,
	1, 642,
	450, 642,
	452, 642,
	454, 642,
	-2, 0,
	-1, 1362,
	1, 626,
	450, 626,
	452, 626,
	454, 626,
	-2, 0,
	-1, 1364,
	1, 630,
	450, 630,
	452, 630,
	454, 630,
	-2, 0,
	-1, 1387,
	1, 1929,
	450, 1929,
	452, 1929,
	453, 1929,
	454, 1929,
	-2, 668,
	-1, 1388,
	1, 1880,
	450, 1880,
	452, 1880,
	453, 1880,
	454, 1880,
	-2, 669,
	-1, 1401,
	1, 940,
	454, 940,
	-2, 945,
	-1, 1406,
	134, 1051,
	222, 1051,
	253, 1051,
	-2, 1011,
	-1, 1499,
	119, 1015,
	134, 1015,
	193, 1015,
	222, 1015,
	253, 1015,
	263, 1015,
	397, 1015,
	-2, 1415,
	-1, 1552,
	452, 1548,
	-2, 0,
	-1, 1594,
	119, 1015,
	134, 1015,
	193, 1015,
	222, 1015,
	253, 1015,
	263, 1015,
	397, 1015,
	-2, 1124,
	-1, 1648,
	451, 1246,
	-2, 1234,
	-1, 1687,
	1, 485,
	454, 485,
	-2, 945,
	-1, 1881,
	1, 621,
	450, 621,
	452, 621,
	454, 621,
	-2, 0,
	-1, 1882,
	1, 644,
	450, 644,
	452, 644,
	454, 644,
	-2, 0,
	-1, 1963,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1295,
	-1, 1964,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1296,
	-1, 1965,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1297,
	-1, 1966,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1298,
	-1, 1967,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1299,
	-1, 1968,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1300,
	-1, 1969,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1301,
	-1, 1970,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1302,
	-1, 1982,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1314,
	-1, 1983,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1315,
	-1, 1984,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1316,
	-1, 1987,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1321,
	-1, 1993,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1325,
	-1, 1995,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1333,
	-1, 1996,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1334,
	-1, 1997,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1335,
	-1, 1998,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1336,
	-1, 2092,
	5, 1203,
	150, 1559,
	451, 1675,
	-2, 1666,
	-1, 2093,
	150, 1560,
	-2, 1933,
	-1, 2094,
	150, 1561,
	-2, 1803,
	-1, 2095,
	150, 1562,
	-2, 1728,
	-1, 2096,
	150, 1563,
	-2, 1763,
	-1, 2097,
	150, 1564,
	-2, 1801,
	-1, 2098,
	150, 1565,
	-2, 1873,
	-1, 2174,
	1, 1125,
	2, 1125,
	84, 1125,
	119, 1125,
	134, 1125,
	147, 1125,
	151, 1125,
	157, 1125,
	160, 1125,
	184, 1125,
	193, 1125,
	203, 1125,
	218, 1125,
	222, 1125,
	240, 1125,
	253, 1125,
	257, 1125,
	263, 1125,
	313, 1125,
	315, 1125,
	397, 1125,
	407, 1125,
	420, 1125,
	421, 1125,
	422, 1125,
	431, 1125,
	450, 1125,
	452, 1125,
	454, 1125,
	455, 1125,
	-2, 1124,
	-1, 2179,
	451, 1649,
	-2, 1661,
	-1, 2200,
	451, 1245,
	-2, 1235,
	-1, 2435,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1323,
	-1, 2436,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1327,
	-1, 2442,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1329,
	-1, 2622,
	200, 945,
	287, 945,
	294, 945,
	431, 945,
	-2, 482,
	-1, 2713,
	276, 1039,
	-2, 853,
	-1, 2793,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1331,
	-1, 2800,
	197, 0,
	199, 0,
	247, 0,
	-2, 1350,
	-1, 2863,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1379,
	-1, 2864,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1380,
	-1, 2865,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1381,
	-1, 2869,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1385,
	-1, 2870,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1386,
	-1, 2871,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1387,
	-1, 2914,
	451, 1650,
	-2, 1662,
	-1, 3001,
	453, 2079,
	-2, 988,
	-1, 3047,
	197, 0,
	199, 0,
	247, 0,
	-2, 1351,
	-1, 3050,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1354,
	-1, 3051,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1356,
	-1, 3206,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1355,
	-1, 3207,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1357,
	-1, 3217,
	197, 0,
	-2, 1388,
	-1, 3320,
	197, 0,
	-2, 1389,
	-1, 3436,
	41, 0,
	169, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1936,
}

const sqlPrivate = 57344

const sqlLast = 73014

var sqlAct = [...]int{

	887, 3247, 3522, 3272, 3435, 3250, 3445, 3414, 3150, 3512,
	2123, 3402, 3405, 2331, 1180, 2700, 3389, 3446, 3236, 3447,
	3279, 2340, 2831, 3434, 2332, 3033, 1003, 3324, 2165, 3174,
	1950, 3197, 1155, 2987, 3284, 2934, 2992, 3109, 1618, 211,
	2639, 211, 211, 816, 211, 211, 211, 211, 211, 2010,
	844, 211, 1414, 2166, 2722, 2997, 2729, 2696, 2974, 578,
	1056, 1294, 1037, 2935, 557, 3221, 2724, 807, 2372, 2428,
	2374, 2328, 2305, 2308, 995, 2598, 2303, 211, 2584, 1497,
	1587, 578, 2544, 909, 3032, 674, 1597, 2162, 2571, 1818,
	2382, 1857, 1344, 2363, 1589, 1290, 1836, 2365, 2341, 3081,
	2371, 2560, 1808, 1561, 1807, 1732, 2231, 1815, 1148, 2288,
	2167, 2886, 2023, 2543, 2463, 4, 2041, 1943, 3325, 1947,
	2424, 2061, 2229, 1507, 1741, 203, 1167, 815, 140, 1770,
	1525, 1759, 883, 1717, 2263, 2381, 1719, 2169, 1766, 1044,
	1401, 2603, 2141, 32, 2053, 2007, 86, 3273, 2306, 2698,
	1562, 2264, 2120, 1157, 1303, 804, 1277, 2334, 1287, 1804,
	2375, 579, 1223, 987, 1033, 580, 2035, 2221, 1520, 990,
	2149, 2131, 525, 969, 211, 211, 1571, 2024, 511, 1488,
	147, 1415, 533, 1413, 2088, 1803, 205, 148, 204, 541,
	574, 669, 1619, 551, 1824, 1253, 650, 843, 1301, 619,
	1177, 1731, 528, 140, 37, 992, 36, 1400, 737, 34,
	25, 23, 21, 1164, 1419, 967, 1235, 721, 536, 2903,
	2459, 1588, 2904, 1858, 2516, 2517, 1838, 2534, 2535, 2536,
	1838, 1838, 1041, 2283, 3550, 2333, 2788, 2140, 2337, 2250,
	3541, 3540, 179, 2140, 2140, 583, 811, 586, 1427, 1428,
	3521, 3508, 3506, 1775, 3123, 3123, 2387, 3469, 2739, 3467,
	3470, 2038, 2140, 806, 1769, 2140, 2189, 583, 984, 586,
	2738, 684, 3465, 3462, 1430, 2140, 3463, 842, 3459, 3456,
	181, 3460, 1775, 1427, 1428, 2531, 1460, 1461, 1462, 1470,
	1471, 1472, 3432, 2620, 3431, 1775, 812, 1775, 1041, 1775,
	3430, 1429, 1463, 1850, 3427, 3426, 1015, 1850, 1850, 1430,
	811, 970, 970, 1476, 3384, 3374, 3373, 2193, 3123, 3123,
	3385, 792, 2889, 180, 1427, 1428, 2039, 3367, 791, 2133,
	1775, 1427, 1428, 173, 3361, 3359, 1429, 3123, 3123, 3322,
	3305, 174, 2193, 1775, 1449, 3308, 3302, 1850, 179, 3123,
	1430, 1446, 3264, 3263, 179, 1775, 1775, 1430, 2522, 2889,
	3256, 2132, 149, 1775, 799, 3255, 3227, 3208, 3123, 1775,
	2193, 973, 974, 3195, 1427, 1428, 1850, 1429, 859, 1016,
	1427, 1428, 1435, 1020, 1429, 3186, 181, 3141, 2751, 1775,
	971, 3147, 181, 3140, 2140, 2759, 2140, 2040, 2037, 3122,
	1430, 3049, 3123, 2278, 2193, 2220, 1430, 1452, 1453, 1454,
	1455, 1690, 2751, 1457, 1458, 1459, 1198, 1435, 2315, 3009,
	2516, 2517, 2767, 3003, 2427, 2972, 2767, 1429, 2973, 180,
	1774, 2909, 2218, 1429, 2910, 180, 1557, 2899, 2140, 173,
	2900, 1467, 2532, 2892, 1477, 173, 2140, 174, 1457, 1458,
	1459, 2824, 2812, 174, 1775, 2140, 1498, 2766, 1435, 2758,
	2767, 2691, 2759, 1176, 1850, 1435, 1450, 179, 149, 1473,
	2557, 1474, 1363, 2140, 149, 2160, 2740, 2555, 1444, 1445,
	2140, 2531, 2159, 1839, 1427, 1428, 2158, 1839, 1839, 1457,
	1458, 1459, 2042, 1465, 2478, 2741, 1457, 1458, 1459, 2479,
	2554, 1450, 2462, 2140, 2508, 181, 2491, 2140, 1435, 2492,
	1430, 2157, 2480, 2156, 1435, 2140, 211, 1186, 2361, 1475,
	2206, 1854, 2192, 2140, 2187, 2193, 1346, 2140, 1192, 814,
	2181, 975, 3098, 1775, 1464, 2533, 1710, 1429, 972, 1457,
	1458, 1459, 1450, 2139, 211, 1449, 2140, 1853, 180, 1450,
	1854, 211, 798, 797, 2522, 2516, 2517, 2408, 173, 1451,
	1001, 796, 3060, 2738, 795, 794, 174, 211, 1059, 211,
	211, 1160, 211, 1059, 211, 75, 1456, 790, 789, 1197,
	788, 787, 211, 211, 786, 785, 784, 2336, 783, 2036,
	2907, 3043, 1450, 782, 1451, 781, 1057, 2768, 1016, 1043,
	780, 1168, 779, 1048, 719, 179, 718, 211, 1452, 1453,
	1454, 1455, 717, 2198, 716, 715, 1498, 714, 1435, 1468,
	713, 211, 712, 1160, 1160, 211, 211, 1846, 211, 711,
	2079, 1837, 1923, 2601, 2132, 1451, 710, 709, 2532, 708,
	211, 707, 1451, 181, 706, 2528, 2529, 2530, 211, 1457,
	1458, 1459, 2527, 2525, 2526, 2518, 2519, 2520, 2521, 2523,
	2524, 705, 211, 211, 211, 211, 211, 1160, 1160, 1170,
	704, 703, 1160, 702, 211, 1160, 211, 211, 1439, 1431,
	1432, 1433, 1434, 1436, 1437, 1451, 180, 2485, 1016, 2522,
	211, 1191, 701, 1031, 700, 1151, 699, 698, 697, 1174,
	696, 1466, 1450, 695, 1441, 1442, 1448, 1447, 1443, 1469,
	694, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437,
	693, 683, 682, 641, 3070, 149, 1160, 3069, 2474, 1298,
	1052, 2533, 1145, 1150, 2516, 2517, 1185, 640, 1190, 599,
	1196, 598, 597, 1179, 1028, 179, 589, 1178, 211, 588,
	1236, 1236, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 211, 1431, 1432, 1433, 1434, 1436, 1437, 583, 587,
	586, 564, 563, 2532, 2293, 1318, 211, 1456, 562, 179,
	561, 545, 201, 181, 200, 199, 198, 197, 1306, 196,
	1174, 195, 194, 193, 117, 1451, 192, 191, 190, 189,
	140, 179, 188, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 1431, 1432, 1433, 1434, 1436, 1437, 181, 812, 1281,
	1284, 187, 186, 2182, 1314, 1304, 180, 185, 184, 2516,
	2517, 1317, 183, 182, 1528, 1371, 173, 1528, 2173, 181,
	1527, 1240, 1237, 1527, 174, 1590, 179, 886, 2527, 2525,
	2526, 2518, 2519, 2520, 2521, 2523, 2524, 179, 179, 1407,
	180, 1531, 2077, 1860, 1526, 149, 2533, 1426, 2522, 1715,
	173, 2075, 1604, 1514, 1182, 2321, 1050, 1005, 174, 1291,
	2073, 1509, 180, 1364, 181, 2071, 3452, 3433, 3355, 3315,
	3311, 3246, 173, 2516, 2517, 181, 181, 3187, 3182, 149,
	174, 3102, 3080, 3079, 3067, 3066, 1406, 3065, 3064, 3058,
	3057, 3056, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 149, 3309, 2971, 1399, 1509, 2923, 180, 2922, 2920,
	1859, 2913, 2883, 2882, 2881, 2808, 1338, 173, 180, 180,
	1323, 2804, 2596, 2762, 2551, 174, 2542, 1405, 173, 173,
	2515, 2512, 2532, 2511, 2509, 2498, 174, 174, 2497, 2496,
	2493, 2490, 1412, 2522, 2468, 1404, 149, 1780, 2467, 211,
	1711, 2265, 2460, 2362, 1402, 2174, 2046, 149, 149, 2423,
	1812, 2516, 2517, 2527, 2525, 2526, 2518, 2519, 2520, 2521,
	2523, 2524, 1426, 1568, 1496, 211, 792, 1559, 812, 2516,
	2517, 1425, 983, 791, 3548, 211, 1059, 211, 211, 211,
	1510, 3520, 1508, 1778, 3519, 578, 211, 211, 1408, 1606,
	578, 211, 1613, 3468, 1422, 1423, 211, 2522, 1004, 998,
	1615, 2833, 885, 3422, 1607, 1682, 3420, 3352, 1685, 3349,
	3346, 3345, 841, 3344, 1530, 2533, 3340, 2532, 1427, 1428,
	2322, 1059, 3334, 3306, 3301, 3300, 2019, 2013, 3242, 2614,
	2577, 3219, 3192, 3191, 3172, 3169, 1578, 3163, 3097, 1625,
	3078, 3023, 1522, 1523, 1430, 3020, 2950, 2949, 2938, 1716,
	2078, 1565, 1566, 2937, 2895, 2799, 2769, 1598, 1713, 2752,
	1684, 2716, 3181, 1706, 2685, 2664, 2642, 2641, 2616, 2556,
	2489, 1429, 1650, 2488, 2473, 2451, 970, 2302, 1532, 1529,
	1521, 2532, 1518, 2202, 140, 2522, 2201, 2177, 2154, 2138,
	2069, 670, 1492, 1603, 1560, 1556, 1555, 1554, 1427, 1428,
	1583, 1553, 1552, 2522, 1551, 2106, 1550, 1549, 812, 1548,
	2533, 1610, 1546, 1545, 1544, 1543, 57, 1542, 672, 1541,
	1540, 1539, 1538, 1537, 1430, 1536, 1535, 1534, 58, 1511,
	1493, 1595, 1491, 2525, 2526, 2518, 2519, 2520, 2521, 2523,
	2524, 1687, 62, 1486, 1701, 1700, 1160, 211, 1710, 1707,
	1027, 1429, 1435, 1059, 1558, 1018, 1011, 3327, 3168, 3099,
	3053, 1586, 2919, 1585, 1709, 1592, 1584, 1582, 1581, 1580,
	1725, 583, 68, 586, 2533, 1614, 583, 2902, 586, 2320,
	1681, 1776, 2898, 2477, 997, 2642, 2195, 2155, 3231, 1616,
	1608, 3101, 211, 211, 999, 2516, 2517, 2918, 1510, 211,
	2612, 1861, 74, 1489, 1599, 1710, 1047, 1710, 3347, 211,
	1702, 85, 1710, 2725, 1045, 3185, 75, 82, 211, 3142,
	211, 2905, 211, 2667, 1688, 2754, 211, 2753, 3285, 2526,
	2518, 2519, 2520, 2521, 2523, 2524, 1041, 1038, 211, 1590,
	1756, 2982, 1704, 1758, 1337, 1736, 1763, 1528, 2267, 2495,
	1041, 1397, 1516, 1527, 2494, 2433, 2252, 2038, 1046, 1042,
	76, 1032, 1696, 2948, 1858, 1345, 1622, 1740, 1541, 2702,
	777, 2701, 3280, 1346, 3523, 1372, 1041, 1809, 1160, 211,
	1160, 3222, 2076, 211, 2963, 3312, 1160, 2952, 1767, 1160,
	211, 2074, 211, 211, 2518, 2519, 2520, 2521, 2523, 2524,
	2072, 1796, 1160, 1160, 1160, 2070, 211, 1830, 1179, 778,
	3245, 211, 1178, 1821, 1541, 2774, 2679, 3310, 1799, 1754,
	578, 211, 2039, 211, 1039, 211, 2333, 211, 2835, 211,
	2483, 1040, 2054, 583, 1651, 586, 3453, 2200, 1001, 1547,
	1001, 211, 1762, 1524, 211, 2694, 211, 1773, 1841, 1800,
	1213, 1843, 2930, 3464, 1845, 211, 3461, 1611, 1848, 2734,
	3399, 2988, 1327, 1828, 1705, 3366, 77, 1813, 1863, 2369,
	1877, 3494, 2624, 3495, 211, 2233, 636, 1790, 3133, 1789,
	211, 1201, 2518, 2519, 2520, 2521, 2523, 2524, 1211, 2207,
	1788, 631, 3454, 2040, 2037, 773, 771, 769, 146, 80,
	1059, 81, 2520, 2521, 2523, 2524, 758, 1911, 767, 764,
	1495, 3545, 1909, 1823, 2224, 1865, 1826, 1369, 2224, 2626,
	179, 982, 1038, 1370, 812, 2222, 3271, 3266, 1951, 2222,
	1697, 1304, 673, 2965, 2961, 117, 2960, 2448, 1930, 2927,
	2926, 2472, 2471, 2470, 1927, 2469, 1047, 2065, 1625, 1625,
	810, 1433, 1434, 1436, 1437, 637, 2437, 1212, 181, 1038,
	2446, 2285, 630, 2236, 2277, 1922, 2274, 2255, 1041, 810,
	2188, 2613, 1028, 2025, 2026, 1867, 1855, 1994, 805, 1403,
	118, 1650, 1650, 1175, 2064, 1059, 1952, 1246, 2042, 1245,
	2329, 2025, 2051, 150, 1244, 1733, 1243, 1047, 1046, 2775,
	1921, 180, 3203, 1368, 2254, 1868, 583, 1325, 586, 1039,
	1893, 173, 1265, 2055, 1872, 2411, 1040, 2214, 2009, 174,
	1224, 3365, 2666, 1729, 809, 1207, 2180, 2087, 211, 2091,
	2091, 2104, 1925, 2025, 1437, 761, 2124, 2126, 3450, 1928,
	671, 2130, 753, 809, 1734, 1735, 1039, 2243, 2940, 1046,
	3424, 1009, 2017, 1040, 3129, 3252, 1222, 2015, 2009, 1059,
	211, 1926, 1410, 1924, 803, 2443, 1929, 1320, 1920, 211,
	792, 1730, 211, 792, 792, 1059, 2444, 1939, 2242, 2449,
	1940, 1941, 1711, 1708, 2178, 2036, 1827, 826, 1336, 1880,
	1948, 1949, 523, 1221, 811, 565, 1886, 1881, 2414, 1026,
	2235, 2777, 2196, 2179, 2050, 2210, 2776, 2818, 812, 629,
	1339, 628, 2405, 811, 1599, 1008, 518, 2212, 2063, 2271,
	1360, 812, 2175, 2067, 2068, 812, 2042, 3382, 691, 2146,
	1991, 2524, 2425, 2426, 754, 2054, 2186, 2021, 632, 1711,
	2265, 1711, 2265, 1209, 3486, 1006, 1711, 2265, 1882, 2213,
	2815, 1919, 2161, 1041, 211, 2731, 2171, 2172, 2048, 2676,
	3451, 1321, 2211, 2516, 2517, 970, 2534, 2535, 2536, 3494,
	3535, 1361, 639, 638, 1382, 1622, 1622, 1396, 1367, 1887,
	2671, 2732, 3045, 1753, 2145, 1346, 1059, 1838, 1727, 571,
	1041, 211, 3202, 2413, 2253, 1346, 1738, 3127, 2623, 211,
	2115, 2128, 2042, 2190, 2099, 1224, 3341, 2136, 2137, 2654,
	211, 2410, 2234, 812, 2219, 140, 2151, 2152, 2445, 2688,
	2147, 2816, 1736, 211, 2531, 3515, 1160, 2447, 808, 668,
	2951, 2625, 2656, 1519, 2223, 3449, 1595, 2731, 1720, 211,
	1059, 2610, 1721, 1160, 1727, 211, 211, 808, 1485, 3034,
	2962, 2653, 2317, 2275, 3159, 2658, 3501, 3213, 1989, 2225,
	3380, 1992, 2197, 1625, 3410, 3351, 2045, 1326, 2487, 2150,
	2170, 211, 573, 211, 1530, 775, 211, 755, 2941, 774,
	765, 765, 3485, 811, 3167, 3029, 1264, 2312, 2412, 3381,
	1910, 211, 766, 765, 2205, 1908, 1650, 2522, 211, 1206,
	211, 2657, 211, 2289, 2290, 1522, 1523, 998, 211, 998,
	1988, 211, 3199, 211, 3128, 211, 2042, 211, 211, 1742,
	211, 1160, 1160, 1160, 2208, 1160, 2204, 2287, 1722, 211,
	211, 2272, 211, 211, 2286, 2257, 3253, 1746, 2915, 1021,
	1724, 1918, 3037, 211, 1418, 2249, 1348, 2439, 1151, 2537,
	1736, 2228, 2266, 2268, 2269, 2270, 211, 211, 211, 2237,
	2239, 211, 2245, 211, 1174, 3448, 211, 567, 211, 1885,
	211, 519, 1379, 2256, 3493, 2400, 2282, 2401, 2016, 1743,
	756, 2532, 3491, 2357, 2358, 572, 2273, 2008, 3290, 211,
	211, 211, 211, 2295, 211, 2297, 1726, 2386, 2326, 692,
	3171, 2289, 762, 2289, 1409, 2258, 1179, 3160, 2720, 3076,
	2291, 2324, 2353, 3513, 3198, 2368, 757, 211, 1007, 3484,
	2344, 1001, 2300, 520, 1802, 569, 2385, 3536, 2388, 2389,
	1335, 583, 1879, 586, 1322, 2316, 1990, 2346, 2335, 2359,
	2335, 1025, 1174, 1174, 1839, 1001, 1567, 2396, 2390, 1019,
	2391, 140, 1757, 2399, 2339, 2383, 1014, 510, 1747, 1380,
	2976, 521, 566, 522, 3035, 1737, 2872, 2350, 1698, 2351,
	1417, 2352, 3530, 3258, 2533, 2409, 2354, 3257, 1304, 2360,
	2604, 2370, 3514, 1174, 3240, 2416, 3331, 1695, 2929, 1727,
	1622, 2721, 997, 1574, 997, 917, 3132, 2637, 570, 2633,
	1485, 2325, 999, 3131, 999, 2307, 2304, 1822, 1811, 568,
	2465, 2466, 2440, 3200, 3516, 1174, 211, 1810, 1748, 1749,
	2660, 1784, 2814, 1935, 1720, 2475, 1577, 1744, 1721, 1381,
	2476, 3390, 3353, 2355, 207, 1915, 513, 514, 1691, 529,
	513, 529, 539, 544, 2993, 2148, 560, 2259, 1417, 1727,
	2586, 3077, 2420, 1693, 207, 1745, 2422, 2419, 1416, 3175,
	1575, 2301, 1267, 2142, 2461, 1873, 3278, 3276, 3241, 1694,
	2398, 2644, 678, 2643, 2431, 2897, 207, 2570, 2569, 2402,
	1765, 2403, 1362, 2404, 2528, 2529, 2530, 2185, 2184, 1418,
	2183, 2527, 2525, 2526, 2518, 2519, 2520, 2521, 2523, 2524,
	1764, 1349, 2873, 2553, 2417, 1059, 2314, 2438, 2874, 809,
	1238, 1252, 3248, 3336, 1722, 2558, 3151, 1250, 3529, 2567,
	2565, 2566, 2587, 1936, 211, 1723, 1724, 1239, 1760, 2144,
	812, 2763, 211, 2564, 2143, 2005, 1416, 688, 690, 211,
	1750, 1820, 211, 211, 1059, 681, 3130, 2690, 3498, 1734,
	1735, 3274, 3393, 1059, 3082, 2887, 3337, 1576, 2003, 211,
	2059, 3500, 3466, 2585, 1394, 3238, 2591, 2482, 1570, 513,
	513, 1376, 2594, 2608, 211, 1374, 1761, 207, 590, 3354,
	3348, 2602, 1726, 2589, 3218, 2581, 2260, 2261, 2619, 3075,
	2562, 3249, 211, 211, 211, 2592, 2593, 3239, 211, 2967,
	2545, 211, 2798, 1751, 2579, 2575, 1359, 1357, 211, 211,
	211, 211, 211, 2582, 1625, 2772, 2600, 3394, 2510, 2621,
	2580, 3338, 2599, 2605, 211, 211, 211, 2450, 2311, 2284,
	2251, 2203, 2627, 211, 2576, 1574, 1605, 1602, 1355, 2595,
	2548, 2549, 2550, 1395, 1315, 211, 1160, 1650, 211, 2646,
	1625, 2650, 2651, 2559, 2546, 1907, 1059, 805, 2588, 1353,
	2574, 2407, 1351, 1999, 1059, 1343, 2634, 1341, 1577, 211,
	2406, 2000, 211, 211, 2001, 1727, 2590, 2006, 1248, 2393,
	1917, 1890, 211, 1650, 1683, 1160, 211, 1572, 1160, 1160,
	1160, 1533, 2602, 2617, 2618, 211, 2606, 2607, 1319, 2670,
	1228, 211, 1575, 2058, 1251, 2705, 2629, 211, 3444, 211,
	1249, 1324, 1393, 753, 2630, 2631, 211, 3146, 2622, 1375,
	2669, 3139, 3387, 1373, 1573, 2723, 3106, 2628, 820, 2991,
	2645, 689, 2648, 2946, 2944, 803, 686, 687, 1725, 1160,
	1160, 2573, 763, 2686, 679, 680, 2928, 211, 211, 2659,
	1174, 211, 2719, 2677, 1358, 1356, 2611, 2704, 1160, 2703,
	2661, 2662, 2665, 1725, 2663, 2672, 2736, 1720, 2330, 2727,
	1799, 1721, 2673, 3495, 2319, 2709, 2674, 591, 592, 211,
	2826, 1059, 211, 211, 1059, 211, 1354, 2681, 2687, 2318,
	998, 2675, 2638, 2682, 2683, 2699, 1767, 2684, 2298, 1576,
	1906, 2257, 211, 3120, 1767, 754, 1852, 1352, 1851, 1168,
	1350, 1723, 1057, 1342, 998, 1340, 2002, 2744, 2745, 2746,
	1849, 2747, 2748, 1847, 2750, 2004, 1247, 1844, 1842, 2383,
	3117, 1840, 1831, 1781, 1779, 1768, 1755, 1752, 2383, 1501,
	2765, 1622, 2733, 1506, 2782, 1059, 2735, 2749, 2770, 1739,
	1728, 2742, 3294, 812, 979, 2761, 1059, 1722, 211, 140,
	2801, 2680, 1420, 2429, 768, 770, 594, 593, 1612, 1724,
	3416, 3118, 1625, 2823, 3194, 3189, 3188, 1622, 980, 2384,
	2783, 1714, 1001, 1203, 2829, 2224, 3296, 2771, 2224, 2224,
	209, 2572, 2241, 3002, 1888, 1736, 2222, 1001, 1883, 2240,
	2238, 3343, 2810, 2811, 3317, 1650, 3083, 2779, 1391, 1392,
	1174, 1012, 2784, 2262, 2726, 2786, 595, 596, 2244, 1424,
	2281, 1625, 1625, 2248, 2279, 1726, 1001, 1427, 1428, 1427,
	1428, 2280, 2246, 2884, 2247, 2430, 3386, 1625, 1625, 1022,
	524, 3356, 2806, 2980, 2975, 1421, 560, 2912, 755, 2338,
	3511, 211, 2609, 1430, 1650, 1650, 2129, 2817, 2819, 2820,
	1686, 981, 207, 1617, 207, 207, 211, 1165, 1625, 207,
	1650, 1650, 1059, 2825, 2836, 997, 2832, 207, 1181, 3528,
	1429, 3358, 1429, 1498, 2837, 999, 535, 2906, 2516, 2517,
	2841, 211, 2062, 2289, 2838, 2780, 2876, 2849, 2839, 997,
	2914, 1650, 1205, 2917, 2901, 2924, 2851, 1427, 1428, 999,
	2821, 1611, 2216, 2215, 3113, 2216, 1227, 3114, 1727, 1329,
	207, 207, 2615, 1165, 2217, 1328, 2893, 2894, 2877, 2066,
	2060, 2033, 3054, 1378, 2916, 207, 1377, 211, 2813, 1496,
	2888, 830, 2885, 1263, 1494, 2953, 3537, 2890, 2891, 1718,
	3328, 756, 3232, 3230, 140, 3116, 3162, 207, 207, 207,
	207, 1165, 3100, 1948, 2842, 3026, 2964, 3119, 3019, 560,
	3008, 207, 207, 211, 211, 211, 2908, 2986, 2970, 1948,
	2852, 2969, 2968, 2943, 2743, 678, 2717, 757, 2715, 2395,
	1059, 211, 2394, 2348, 2323, 1160, 2299, 2020, 1905, 1622,
	1904, 2957, 1903, 1902, 1834, 1833, 1832, 1814, 2921, 211,
	2880, 1792, 1791, 1787, 1786, 2945, 2932, 2947, 1785, 1783,
	1625, 3004, 211, 211, 1160, 1160, 1160, 2995, 211, 211,
	211, 1782, 1411, 211, 211, 1390, 1389, 211, 211, 2983,
	1160, 1276, 1275, 207, 2958, 2959, 211, 1274, 1622, 1622,
	2998, 2966, 1273, 1650, 1723, 1272, 207, 2999, 2984, 1059,
	2994, 1271, 1270, 1269, 1622, 1622, 1268, 3115, 1266, 1261,
	2257, 544, 1260, 1259, 1258, 1257, 1220, 2989, 1219, 1218,
	1217, 1216, 1215, 2979, 1214, 1208, 3052, 1202, 2985, 1200,
	1199, 801, 1024, 753, 1023, 1622, 2562, 954, 864, 2996,
	1799, 3027, 1689, 776, 211, 3000, 623, 3005, 3048, 760,
	3251, 3006, 1384, 3016, 3017, 803, 3011, 73, 3015, 3010,
	1625, 1210, 3024, 3022, 610, 67, 2942, 3039, 3025, 3398,
	3018, 2344, 2652, 1889, 1347, 1891, 2578, 2153, 3036, 3379,
	3021, 3031, 3061, 2486, 3323, 3212, 3040, 2057, 1515, 69,
	852, 802, 937, 1650, 3158, 3157, 3107, 2931, 2373, 3155,
	2383, 3154, 2638, 819, 1062, 1699, 211, 858, 1712, 2199,
	2090, 1621, 861, 1623, 863, 862, 1059, 1624, 1059, 1517,
	3088, 860, 1620, 2313, 2342, 754, 3028, 1255, 741, 1703,
	2014, 2052, 2481, 1512, 832, 854, 2049, 211, 211, 211,
	1017, 831, 3074, 2583, 2730, 2911, 3095, 3180, 1934, 211,
	2421, 1931, 626, 2513, 2034, 211, 1010, 211, 1001, 1001,
	211, 211, 211, 3126, 2112, 2105, 2101, 1398, 1487, 2343,
	1049, 211, 211, 1160, 3136, 3137, 1059, 835, 1160, 2012,
	1503, 2455, 2737, 3125, 211, 2597, 3084, 1622, 2194, 3090,
	3091, 998, 3092, 3087, 3089, 2599, 3096, 3135, 3413, 211,
	3085, 3086, 1059, 3093, 513, 1160, 998, 3105, 1942, 1801,
	978, 977, 976, 3404, 3401, 2697, 3124, 1692, 2209, 1479,
	1297, 2706, 848, 1173, 2563, 207, 2764, 207, 1225, 3342,
	207, 1478, 772, 3333, 211, 998, 1036, 3177, 1035, 3149,
	1181, 1034, 1165, 207, 3143, 1059, 2636, 3534, 3193, 2939,
	207, 1181, 529, 178, 3153, 207, 1181, 175, 177, 3103,
	3104, 560, 3165, 3148, 3179, 3164, 3190, 176, 755, 2955,
	3176, 1059, 2689, 1057, 90, 35, 16, 3134, 3178, 116,
	3144, 115, 3184, 114, 113, 112, 830, 1622, 111, 3173,
	830, 110, 109, 1569, 108, 107, 106, 1799, 1143, 3210,
	105, 104, 103, 1143, 3224, 3201, 3152, 102, 101, 1059,
	100, 99, 98, 2018, 97, 96, 95, 211, 94, 211,
	3204, 1059, 211, 93, 92, 91, 556, 3220, 1001, 3161,
	211, 553, 1501, 3209, 3166, 49, 48, 3210, 89, 1625,
	88, 15, 33, 13, 53, 54, 12, 1864, 28, 1951,
	29, 3235, 211, 2452, 2453, 79, 78, 3183, 27, 3234,
	14, 3225, 3226, 26, 24, 10, 8, 7, 30, 800,
	211, 756, 1650, 1579, 211, 11, 997, 145, 144, 2111,
	72, 143, 211, 71, 3229, 3233, 999, 1160, 3277, 142,
	3282, 997, 211, 141, 1625, 3228, 3269, 3254, 70, 22,
	9, 999, 137, 3283, 2981, 66, 3295, 757, 139, 138,
	63, 136, 207, 211, 211, 3287, 3267, 135, 3289, 3292,
	997, 3275, 64, 134, 133, 65, 132, 1650, 20, 5,
	999, 3281, 52, 211, 6, 3196, 2773, 3303, 3304, 211,
	3286, 3261, 3262, 3293, 818, 3298, 83, 2998, 84, 211,
	3297, 31, 3291, 61, 2539, 2540, 2541, 207, 207, 60,
	59, 19, 51, 18, 207, 169, 168, 3330, 3321, 3339,
	167, 166, 161, 160, 1819, 165, 163, 162, 1001, 164,
	1625, 159, 3329, 207, 131, 207, 1001, 207, 171, 3299,
	3316, 513, 3326, 170, 157, 153, 2699, 3307, 3350, 1001,
	152, 211, 1160, 1835, 156, 158, 155, 211, 154, 3314,
	151, 1160, 1160, 1650, 172, 130, 56, 1160, 3372, 129,
	128, 211, 127, 211, 126, 125, 55, 17, 3357, 2,
	1, 0, 3360, 0, 3363, 3377, 3260, 3378, 3383, 1174,
	3364, 0, 0, 0, 560, 211, 1570, 3368, 678, 0,
	3376, 211, 211, 3395, 1059, 207, 3286, 1165, 207, 0,
	0, 0, 211, 211, 3369, 3396, 1622, 3407, 0, 0,
	3411, 560, 3370, 3371, 3417, 3419, 207, 3421, 3375, 0,
	3403, 3406, 1951, 0, 3400, 207, 207, 0, 207, 3429,
	207, 3428, 207, 0, 207, 0, 211, 0, 0, 0,
	0, 3408, 3425, 0, 3423, 0, 1912, 3455, 0, 1913,
	0, 1914, 0, 1574, 0, 3440, 3441, 0, 0, 3443,
	207, 1622, 0, 3442, 0, 0, 0, 998, 998, 0,
	0, 3471, 0, 0, 3457, 211, 0, 0, 3473, 544,
	3475, 0, 3480, 0, 0, 560, 1577, 0, 3481, 3472,
	0, 3483, 0, 0, 0, 211, 3477, 0, 0, 0,
	0, 0, 0, 0, 0, 1572, 3474, 0, 3476, 0,
	0, 0, 0, 3489, 0, 3492, 3490, 0, 0, 211,
	1575, 211, 3497, 0, 3496, 3415, 3499, 3505, 3503, 3507,
	0, 0, 0, 3502, 0, 3510, 3403, 3504, 0, 3406,
	0, 3509, 1573, 0, 0, 0, 0, 1622, 0, 0,
	3418, 0, 0, 3518, 0, 3517, 0, 0, 0, 0,
	3525, 0, 3524, 0, 3526, 0, 3527, 0, 3478, 3479,
	3531, 0, 3482, 0, 0, 0, 1143, 0, 0, 0,
	3532, 3533, 0, 3538, 0, 3539, 0, 0, 0, 0,
	0, 0, 3542, 3543, 3544, 3546, 3547, 2344, 0, 0,
	0, 0, 0, 0, 3551, 0, 1427, 1428, 0, 3549,
	0, 0, 1470, 1471, 1472, 830, 0, 1576, 1427, 1428,
	0, 1143, 0, 0, 2794, 2795, 0, 0, 0, 0,
	0, 1153, 1430, 513, 0, 0, 1476, 998, 0, 0,
	0, 0, 0, 3415, 1430, 0, 0, 0, 207, 0,
	0, 0, 997, 997, 0, 0, 0, 0, 0, 1429,
	0, 0, 999, 999, 0, 513, 0, 1449, 0, 0,
	0, 1429, 207, 0, 513, 2111, 2111, 207, 0, 1449,
	0, 0, 0, 1229, 1232, 0, 0, 0, 0, 818,
	0, 0, 0, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2853, 2854, 2855, 2856, 2857, 2858,
	2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868,
	2869, 2870, 2871, 0, 2875, 1183, 0, 1187, 0, 1193,
	1452, 1453, 1454, 1455, 0, 1310, 0, 0, 0, 0,
	1435, 0, 1452, 1453, 1454, 1455, 0, 0, 0, 0,
	0, 0, 1435, 1143, 0, 0, 0, 0, 0, 529,
	0, 0, 0, 3120, 1467, 0, 0, 1477, 0, 0,
	0, 1457, 1458, 1459, 0, 0, 2111, 2111, 2111, 0,
	0, 0, 0, 1457, 1458, 1459, 1330, 998, 0, 0,
	3117, 0, 0, 3110, 0, 998, 2232, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 3108, 0, 998, 0,
	0, 0, 3112, 1313, 0, 207, 1465, 0, 0, 0,
	1316, 0, 997, 0, 1450, 0, 0, 1938, 207, 0,
	0, 3118, 999, 0, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	207, 2292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1365, 0, 207, 0, 1181, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1819, 0, 0, 1456,
	0, 0, 0, 2232, 0, 513, 0, 2347, 0, 0,
	0, 1456, 0, 207, 0, 0, 207, 1451, 207, 0,
	207, 0, 207, 207, 0, 1165, 0, 0, 0, 1451,
	0, 0, 0, 0, 2366, 678, 0, 2232, 2232, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 1480, 1481, 1482, 1483, 1484,
	2107, 207, 1165, 207, 0, 0, 1181, 0, 1181, 0,
	0, 1165, 997, 1165, 3113, 1165, 0, 3114, 0, 0,
	997, 0, 999, 0, 0, 1500, 0, 0, 0, 0,
	999, 1513, 0, 997, 207, 207, 1165, 207, 0, 207,
	1143, 0, 0, 999, 0, 0, 0, 1427, 1428, 0,
	0, 0, 0, 0, 0, 3116, 0, 0, 0, 0,
	0, 0, 207, 0, 1466, 0, 0, 3119, 0, 0,
	0, 0, 1469, 1430, 1440, 1438, 1439, 1431, 1432, 1433,
	1434, 1436, 1437, 0, 0, 0, 1440, 1438, 1439, 1431,
	1432, 1433, 1434, 1436, 1437, 0, 0, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 0, 1449, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2111, 2111, 0, 0,
	1563, 1563, 1563, 0, 2797, 0, 0, 0, 0, 0,
	0, 1181, 0, 0, 0, 68, 0, 3115, 0, 0,
	0, 1452, 1453, 1454, 1455, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 1143,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 75,
	82, 0, 1457, 1458, 1459, 1143, 0, 0, 818, 0,
	0, 0, 0, 0, 0, 0, 2111, 2111, 2111, 2111,
	2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
	2111, 2111, 2111, 2111, 2111, 0, 2111, 0, 0, 207,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 1450, 0, 0, 0, 513,
	0, 1427, 1428, 0, 0, 0, 1771, 513, 0, 0,
	0, 0, 0, 0, 513, 0, 0, 513, 513, 0,
	0, 0, 0, 207, 0, 0, 0, 1430, 0, 0,
	0, 3217, 0, 0, 1181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 1429, 0, 1143, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 2232, 2232, 207,
	1456, 2191, 0, 2232, 3243, 0, 2640, 0, 0, 0,
	0, 0, 0, 2232, 2640, 2232, 2640, 2640, 1451, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	207, 207, 0, 0, 0, 0, 0, 0, 2792, 0,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 146, 80, 1165, 81, 1452, 1453, 1454, 1455, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	1856, 0, 0, 179, 2693, 0, 1771, 2695, 2232, 1866,
	0, 0, 0, 0, 0, 673, 0, 207, 117, 0,
	0, 207, 1874, 1875, 1876, 0, 1457, 1458, 1459, 0,
	207, 0, 0, 0, 3320, 0, 1165, 0, 0, 0,
	0, 181, 2232, 0, 513, 0, 2107, 2107, 0, 0,
	0, 2232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 0, 0, 150, 0, 0, 1450,
	0, 0, 207, 1819, 180, 0, 1819, 0, 0, 0,
	0, 0, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2778, 0, 0, 1165, 207, 0,
	207, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2107, 2107, 2107,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	1932, 0, 1937, 0, 0, 0, 0, 0, 1944, 0,
	0, 0, 0, 2834, 0, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	0, 1993, 0, 1995, 1996, 1997, 1998, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2022, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1500, 0,
	0, 0, 2047, 0, 0, 207, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 513, 0, 0, 1440,
	1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 0,
	0, 513, 0, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	0, 0, 0, 0, 2103, 0, 2114, 2116, 2121, 0,
	0, 0, 0, 0, 0, 0, 1181, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 560, 2111, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 1143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 2977, 207,
	207, 0, 0, 0, 0, 0, 2111, 0, 0, 830,
	0, 1427, 1428, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2232, 207, 2276, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2366, 2366, 0,
	0, 0, 0, 678, 678, 2232, 0, 0, 1819, 1819,
	0, 0, 678, 2232, 1429, 0, 0, 2107, 2107, 0,
	0, 207, 1449, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 0, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 2791, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 3062,
	0, 2356, 2294, 0, 2296, 1452, 1453, 1454, 1455, 0,
	0, 0, 62, 0, 0, 1435, 0, 2107, 2107, 2107,
	2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107, 2107,
	2107, 2107, 2107, 2107, 2107, 2107, 0, 2107, 0, 0,
	0, 0, 68, 0, 0, 0, 1457, 1458, 1459, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 1181, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 1143, 74, 0, 1143, 0, 207, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 75, 82, 0, 0,
	0, 0, 2232, 2232, 2232, 0, 0, 0, 0, 1450,
	0, 0, 57, 0, 1181, 0, 0, 0, 0, 0,
	2232, 0, 2640, 0, 58, 1181, 1181, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 207, 62, 0,
	76, 0, 0, 0, 0, 1143, 0, 0, 0, 2232,
	0, 0, 918, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 0, 3170, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 74, 1181,
	0, 0, 1451, 0, 0, 0, 0, 85, 0, 0,
	0, 208, 75, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 2435, 2436, 0, 0, 0, 0, 2442, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 2456, 2457, 0,
	0, 0, 0, 2047, 0, 0, 76, 0, 0, 0,
	0, 0, 2464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 0, 146, 80,
	0, 81, 2232, 0, 2640, 0, 0, 3237, 2484, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	179, 0, 0, 2499, 0, 0, 0, 0, 0, 0,
	0, 0, 673, 0, 0, 117, 0, 560, 0, 1440,
	1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 3237, 0, 0, 181, 2232,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 2121, 2121, 2121, 0, 0, 0, 1181, 0, 0,
	118, 0, 77, 0, 0, 0, 1563, 0, 0, 0,
	0, 0, 0, 150, 2568, 0, 0, 0, 207, 207,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	1143, 173, 0, 0, 146, 80, 0, 81, 2834, 174,
	0, 0, 0, 0, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3237, 0, 179, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 673, 0,
	0, 117, 0, 0, 0, 0, 2678, 0, 0, 818,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 181, 0, 0, 0, 0, 1143,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 2640, 0, 0, 2710, 118, 2655, 2712, 2713,
	2714, 0, 0, 0, 0, 0, 1181, 0, 1181, 150,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	3391, 0, 0, 0, 0, 174, 1181, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 2232, 2756,
	2757, 0, 0, 0, 0, 0, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 1771, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 0, 0,
	0, 2834, 0, 0, 0, 58, 119, 2728, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 1143, 62,
	0, 0, 0, 0, 2107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 121, 0, 0, 0, 0,
	2232, 0, 0, 0, 0, 0, 0, 38, 0, 68,
	0, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	3237, 0, 0, 0, 0, 0, 0, 2107, 0, 41,
	0, 0, 0, 0, 42, 0, 1143, 0, 0, 74,
	0, 0, 122, 0, 1181, 0, 2232, 40, 85, 0,
	206, 0, 0, 75, 82, 0, 0, 2785, 0, 0,
	0, 1944, 1143, 0, 0, 0, 0, 2789, 2790, 0,
	584, 2793, 0, 0, 0, 2796, 0, 0, 0, 0,
	43, 0, 0, 0, 2800, 0, 0, 0, 0, 0,
	0, 0, 584, 2807, 0, 0, 2568, 76, 0, 0,
	0, 0, 0, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2827, 0, 208,
	1064, 208, 208, 1064, 0, 1064, 208, 2107, 0, 0,
	0, 1143, 0, 0, 208, 0, 2843, 2844, 0, 2845,
	2846, 2847, 0, 0, 2848, 0, 0, 0, 2850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
	0, 0, 0, 0, 0, 1064, 1064, 208, 208, 2878,
	2879, 1143, 0, 0, 1427, 1428, 0, 0, 0, 0,
	0, 0, 208, 1000, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 2896, 0, 0,
	1430, 44, 0, 830, 208, 208, 208, 208, 0, 1064,
	1064, 0, 0, 0, 1064, 0, 0, 1064, 208, 208,
	0, 0, 0, 0, 47, 146, 80, 1429, 81, 0,
	45, 0, 0, 0, 123, 1449, 0, 0, 0, 0,
	46, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	2925, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 117, 212, 0, 2933, 2936, 0, 1064, 0,
	0, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2441, 0, 0, 0, 181, 0, 0, 0, 2954,
	208, 0, 0, 0, 0, 0, 0, 0, 1452, 1453,
	1454, 1455, 0, 208, 3012, 3013, 3014, 118, 1435, 0,
	2516, 2517, 0, 2534, 2535, 2536, 0, 0, 0, 0,
	150, 0, 577, 0, 0, 0, 0, 0, 180, 3044,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 1457,
	1458, 1459, 0, 0, 577, 0, 174, 0, 0, 1427,
	1428, 0, 0, 0, 0, 1563, 0, 0, 0, 0,
	0, 0, 0, 0, 3007, 0, 0, 149, 0, 0,
	3, 2531, 0, 0, 0, 1430, 0, 1427, 1428, 0,
	1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 1429, 1430, 1143, 0, 0, 1476, 830, 0,
	1449, 0, 0, 0, 0, 3041, 3042, 0, 0, 0,
	0, 3046, 3047, 0, 0, 0, 3050, 3051, 0, 0,
	1429, 0, 0, 3055, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 2522, 1446, 0, 0, 0, 0,
	0, 0, 3059, 0, 0, 0, 2434, 0, 0, 3063,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 1452, 1453, 1454, 1455, 0, 0, 0,
	0, 0, 0, 1435, 0, 1451, 2516, 2517, 0, 2534,
	2535, 2536, 0, 0, 0, 0, 2537, 0, 0, 0,
	0, 1452, 1453, 1454, 1455, 2803, 0, 0, 0, 0,
	0, 1435, 0, 3145, 1457, 1458, 1459, 0, 0, 2516,
	2517, 0, 2534, 2535, 2536, 0, 0, 0, 2532, 0,
	0, 0, 0, 0, 0, 1467, 0, 208, 1477, 0,
	0, 0, 1457, 1458, 1459, 0, 0, 2531, 1064, 0,
	208, 208, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 2936, 208, 1473, 0, 1474, 0, 1450, 206, 0,
	206, 206, 1444, 1445, 0, 206, 0, 0, 0, 0,
	2531, 0, 0, 584, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 1064, 0, 1450, 0, 0, 0, 0,
	0, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	2522, 2533, 0, 0, 0, 0, 206, 206, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 1456, 0, 2936, 0, 0, 0, 0, 0,
	0, 0, 0, 2522, 2516, 2517, 0, 2534, 2535, 2536,
	1451, 0, 0, 206, 206, 206, 206, 3205, 3206, 3207,
	1456, 0, 2537, 2802, 0, 0, 0, 206, 206, 0,
	2538, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 3215, 3216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2532, 2537, 3223, 0, 0, 0,
	0, 0, 0, 1468, 0, 2531, 0, 0, 1064, 208,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 2528, 2529, 2530, 0, 0, 0, 2532, 2527, 2525,
	2526, 2518, 2519, 2520, 2521, 2523, 2524, 2936, 0, 206,
	0, 0, 0, 0, 0, 3259, 0, 0, 0, 0,
	0, 0, 206, 3265, 208, 208, 818, 0, 888, 0,
	3270, 208, 0, 0, 0, 0, 0, 1440, 1438, 1439,
	1431, 1432, 1433, 1434, 1436, 1437, 0, 0, 2522, 0,
	208, 0, 208, 2936, 208, 1466, 2936, 2533, 1441, 1442,
	1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 0, 2936, 2936, 0, 2504, 0,
	0, 2505, 0, 0, 0, 0, 0, 0, 0, 0,
	2533, 1060, 0, 0, 1161, 0, 1060, 0, 0, 0,
	2537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 1064, 0, 0, 0, 0, 0, 1064, 0,
	0, 1064, 208, 0, 0, 208, 3332, 0, 0, 3335,
	0, 0, 2532, 0, 1064, 1064, 1064, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 1161, 1161, 0, 0,
	0, 0, 208, 208, 0, 208, 0, 208, 0, 208,
	0, 208, 0, 0, 0, 0, 0, 2528, 2529, 2530,
	0, 0, 853, 87, 2527, 2525, 2526, 2518, 2519, 2520,
	2521, 2523, 2524, 0, 0, 0, 0, 208, 0, 0,
	1161, 1161, 0, 0, 0, 1161, 0, 0, 1161, 0,
	2528, 2529, 2530, 0, 0, 0, 0, 2527, 2525, 2526,
	2518, 2519, 2520, 2521, 2523, 2524, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2533, 0, 0, 0, 0,
	0, 818, 1064, 0, 0, 0, 0, 2516, 2517, 0,
	2534, 2535, 2536, 0, 0, 0, 0, 0, 87, 1161,
	0, 1593, 0, 1000, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 3439, 3439, 3439, 0, 0, 206,
	1593, 0, 0, 0, 0, 0, 584, 0, 0, 0,
	0, 584, 0, 3458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2531, 0,
	0, 0, 0, 0, 2936, 0, 2936, 0, 0, 0,
	0, 0, 0, 793, 0, 0, 0, 1064, 0, 0,
	3439, 0, 813, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2528, 2529, 2530, 0, 0,
	0, 0, 2527, 2525, 2526, 2518, 2519, 2520, 2521, 2523,
	2524, 0, 0, 0, 988, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 3439, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2532, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 1460,
	1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 206, 0, 0, 0, 0, 0,
	206, 0, 1430, 0, 0, 0, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 206, 0, 206, 0, 0, 0, 0, 1064, 1429,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 1060,
	0, 208, 0, 0, 1446, 0, 0, 0, 577, 0,
	0, 0, 208, 577, 0, 0, 0, 0, 2533, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 1064, 0, 1060, 1064, 0, 208, 0, 0,
	0, 206, 0, 0, 206, 0, 0, 0, 0, 0,
	1452, 1453, 1454, 1455, 0, 0, 1061, 0, 0, 1162,
	1435, 1061, 206, 208, 0, 0, 0, 0, 208, 0,
	0, 584, 206, 0, 206, 0, 206, 0, 206, 0,
	206, 0, 0, 0, 1467, 0, 0, 1477, 0, 0,
	0, 1457, 1458, 1459, 0, 0, 0, 0, 0, 0,
	208, 0, 0, 208, 0, 208, 206, 208, 0, 208,
	208, 1162, 1162, 1064, 1064, 1064, 0, 1064, 2528, 2529,
	2530, 1444, 1445, 0, 0, 2527, 2525, 2526, 2518, 2519,
	2520, 2521, 2523, 2524, 0, 208, 1465, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 208, 0,
	208, 0, 993, 0, 0, 1162, 1162, 0, 0, 1161,
	1162, 0, 0, 1162, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 208, 0, 208, 0, 208, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 1162, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1161, 0, 1161, 1000, 0, 0, 0, 0, 1161,
	0, 0, 1161, 0, 813, 87, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 1161, 1161, 1161, 1000, 0,
	87, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	660, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 1441, 1442, 1448,
	1447, 1443, 1469, 642, 1440, 1438, 1439, 1431, 1432, 1433,
	1434, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 643, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 645, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 646,
	0, 0, 0, 0, 0, 1064, 0, 0, 793, 0,
	206, 0, 0, 0, 0, 0, 0, 647, 0, 0,
	0, 206, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 648, 0, 0,
	649, 0, 0, 0, 1499, 0, 208, 0, 1505, 0,
	206, 0, 0, 0, 1061, 0, 584, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 664, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 208, 208, 0,
	0, 0, 206, 0, 0, 208, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 1064, 1061,
	0, 0, 0, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 206,
	0, 0, 206, 0, 206, 0, 206, 0, 206, 206,
	0, 0, 1060, 0, 208, 0, 0, 1064, 208, 0,
	1064, 1064, 1064, 0, 0, 0, 0, 208, 1060, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 651,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 206,
	0, 0, 0, 0, 0, 0, 668, 652, 0, 87,
	0, 0, 1591, 0, 1594, 0, 0, 0, 0, 0,
	0, 1064, 1064, 0, 0, 0, 0, 0, 0, 208,
	206, 206, 0, 206, 667, 206, 0, 0, 0, 0,
	1064, 653, 0, 0, 654, 0, 0, 0, 0, 0,
	662, 0, 0, 0, 1162, 0, 0, 655, 206, 0,
	0, 1061, 0, 1064, 0, 208, 1064, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 656, 663, 0, 1060,
	0, 0, 0, 0, 657, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 659, 0, 0, 1054,
	0, 658, 0, 0, 0, 0, 1172, 0, 0, 0,
	0, 0, 0, 666, 0, 0, 0, 1064, 0, 1161,
	0, 0, 0, 0, 661, 0, 0, 0, 1064, 0,
	0, 0, 0, 1060, 0, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1256, 0, 0, 0, 1162, 0, 1162, 0,
	0, 0, 0, 0, 1162, 0, 0, 1162, 720, 0,
	753, 0, 0, 0, 1280, 1280, 1280, 1172, 0, 0,
	1162, 1162, 1162, 0, 0, 0, 0, 0, 1311, 1312,
	0, 0, 727, 0, 1161, 1161, 1161, 0, 1161, 0,
	0, 0, 0, 0, 738, 725, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1000, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 726, 0,
	1000, 0, 0, 728, 0, 0, 0, 759, 0, 0,
	0, 0, 0, 735, 736, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1593,
	1383, 0, 754, 730, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1061, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 752,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	813, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 208, 208, 0, 724,
	0, 0, 0, 0, 0, 206, 206, 206, 0, 0,
	0, 0, 1064, 208, 1593, 732, 733, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 740, 739, 0,
	0, 0, 0, 0, 0, 734, 1064, 1064, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	758, 0, 1064, 206, 0, 0, 0, 206, 208, 0,
	0, 0, 0, 0, 0, 755, 206, 0, 0, 0,
	0, 1064, 793, 0, 0, 793, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1061, 0, 0,
	0, 729, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 206, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2011, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 749, 813, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 206, 0, 206, 1499, 0, 744,
	0, 1499, 0, 0, 0, 0, 722, 1600, 756, 0,
	0, 0, 0, 206, 0, 0, 0, 1060, 0, 0,
	1609, 0, 723, 0, 0, 0, 1060, 0, 1064, 0,
	1064, 0, 745, 0, 0, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 757, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 988, 0, 0, 0, 0,
	0, 0, 748, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 208, 1064, 0, 0, 1064, 1594,
	1064, 0, 0, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1162, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 1064, 0, 0, 1064, 1061, 1161,
	0, 1162, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1000, 1000, 0, 0, 0, 0, 1064, 1161, 0,
	0, 1161, 1161, 1161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1162,
	1162, 1162, 0, 1162, 0, 0, 0, 0, 0, 0,
	0, 0, 1161, 1161, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 1161, 0, 1064, 1794, 0, 0, 0, 0, 0,
	0, 1806, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 87, 0, 1060, 0, 0,
	1256, 0, 1825, 0, 1825, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 206, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 1064,
	0, 0, 206, 0, 0, 0, 0, 600, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 1060, 87,
	0, 1000, 0, 0, 0, 208, 208, 0, 0, 1060,
	601, 0, 1806, 0, 0, 1870, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 1884, 0, 0, 0, 206, 0, 0,
	0, 602, 621, 1894, 0, 1896, 0, 1898, 0, 1900,
	0, 1901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1916, 0, 0,
	0, 627, 0, 0, 0, 0, 0, 605, 0, 0,
	0, 0, 0, 208, 1064, 0, 625, 0, 0, 0,
	0, 0, 0, 1064, 1064, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 0, 0, 608, 631, 0,
	0, 0, 634, 0, 208, 0, 1064, 0, 0, 0,
	0, 1000, 0, 0, 208, 0, 0, 0, 0, 1000,
	0, 0, 0, 1061, 0, 2011, 0, 0, 0, 0,
	0, 0, 1593, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 0, 0, 0, 0, 0, 0, 630,
	0, 1061, 0, 206, 0, 0, 611, 0, 0, 0,
	0, 0, 206, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 609, 1161, 0,
	0, 0, 0, 0, 0, 0, 612, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 1161, 1161, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1161, 2176, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 1162, 0, 988, 0, 0, 0,
	0, 614, 1060, 0, 1061, 0, 0, 0, 0, 0,
	0, 988, 1061, 0, 615, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 1162, 0, 0, 1162, 1162, 1162, 0,
	0, 0, 0, 616, 0, 0, 629, 0, 628, 0,
	0, 617, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 0, 0, 0, 624, 0,
	0, 206, 0, 635, 0, 632, 0, 0, 0, 0,
	622, 0, 0, 0, 0, 0, 0, 1162, 1162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1162, 0, 0, 87,
	87, 0, 0, 87, 0, 0, 0, 0, 0, 1060,
	0, 1060, 0, 206, 0, 0, 0, 0, 0, 1061,
	0, 0, 1061, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 87, 0, 0, 87, 0, 0, 0,
	0, 1172, 0, 0, 206, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1161, 0, 0, 1060,
	0, 1161, 0, 2310, 0, 0, 0, 0, 1806, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 1061, 1060, 0, 0, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2349, 0, 0, 1280, 87, 1280, 0, 1280, 0, 1172,
	1172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 0, 2392, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2397, 0,
	1172, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 2415, 1172, 206, 2418, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 0, 0,
	1061, 0, 0, 0, 1060, 0, 0, 0, 0, 2432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 1476, 0, 0, 0, 0, 0, 0, 0,
	1161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 87,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 988, 988, 0, 0, 0, 0, 1061, 0,
	0, 0, 0, 1162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1162, 1162, 1162, 0, 1452, 1453, 1454, 1455,
	0, 0, 0, 0, 0, 0, 1435, 0, 1162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1161, 0, 1061, 0, 0,
	1467, 0, 0, 1477, 1161, 1161, 0, 1457, 1458, 1459,
	1161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	1474, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 988, 1464, 0, 0, 2632, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 0, 1061, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 2668, 1172, 2310, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1162, 0, 0, 1061, 0, 1162, 0, 1468, 0,
	0, 0, 0, 0, 2707, 0, 1427, 1428, 2711, 1460,
	1461, 1462, 1470, 1471, 1472, 0, 0, 2718, 0, 0,
	1061, 0, 0, 1162, 0, 1463, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 0, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 0, 988, 1061, 0, 0, 0, 1449, 0, 2760,
	988, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	1466, 0, 0, 1441, 1442, 1448, 1447, 1443, 1469, 1061,
	1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0,
	0, 0, 0, 2043, 0, 2781, 2044, 1172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2787, 0, 0, 1061, 0, 0,
	1452, 1453, 1454, 1455, 0, 0, 0, 0, 0, 1061,
	1435, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 1477, 0, 0,
	0, 1457, 1458, 1459, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 1474, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 1162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 1162,
	1162, 0, 0, 0, 0, 1162, 0, 0, 0, 0,
	1427, 1428, 1468, 1460, 1461, 1462, 1470, 1471, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2011, 1463,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 0,
	1476, 0, 1061, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1429, 0, 0, 2978, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 2990, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 1441, 1442, 1448,
	1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433,
	1434, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	3068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 1453, 1454, 1455, 3030, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 1477, 0, 0, 0, 1457, 1458, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 1474, 87,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472,
	1465, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	1463, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 1476, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 1429, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3138, 0, 0, 0, 0, 0,
	0, 1451, 0, 2310, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 1453, 1454, 1455, 0,
	0, 0, 0, 0, 0, 1435, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 1477, 0, 0, 0, 1457, 1458, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 0, 1474,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 1466, 1450,
	0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438,
	1439, 1431, 1432, 1433, 1434, 1436, 1437, 1475, 0, 0,
	0, 0, 0, 0, 2805, 0, 0, 0, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3244, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3313, 1172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440,
	1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 0,
	0, 0, 0, 3362, 0, 2507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 0, 3397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3412, 216, 217, 218, 219, 220,
	1065, 221, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072,
	1073, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 1074, 229, 230, 231, 232, 233, 234, 1075,
	1076, 235, 469, 470, 471, 1077, 236, 472, 1078, 1063,
	1079, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 1080, 246, 0, 247, 248, 249, 1081, 939, 250,
	251, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 252, 253,
	254, 255, 256, 257, 473, 474, 1089, 258, 1090, 260,
	259, 1091, 261, 1092, 1093, 262, 263, 264, 1094, 265,
	1095, 266, 267, 1096, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 1097, 213, 1098, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1099, 284, 1100, 1101, 940, 285, 286, 1102, 287,
	479, 1103, 480, 288, 1104, 289, 290, 291, 292, 481,
	482, 483, 340, 942, 293, 294, 1105, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 1106, 941, 300,
	484, 302, 301, 303, 304, 305, 485, 1107, 486, 1108,
	307, 943, 487, 944, 308, 309, 310, 945, 311, 312,
	0, 0, 313, 314, 315, 316, 1109, 318, 317, 1110,
	319, 488, 946, 320, 321, 947, 1111, 322, 323, 1112,
	1113, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 948, 336, 337, 339, 338, 1114,
	215, 949, 1115, 489, 490, 341, 342, 1116, 343, 344,
	345, 1117, 1118, 347, 348, 349, 1119, 1120, 350, 491,
	950, 351, 951, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 1121, 360, 361, 493, 362, 494, 363,
	1122, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 1123, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 1124, 386, 952,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 1125, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 1126, 413, 393, 394,
	414, 953, 415, 497, 416, 417, 1127, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 1128,
	429, 430, 428, 1129, 431, 432, 433, 434, 435, 272,
	436, 1130, 499, 500, 501, 502, 1131, 443, 1132, 437,
	438, 503, 439, 504, 1133, 440, 441, 442, 0, 444,
	445, 1134, 1135, 446, 447, 448, 449, 450, 452, 1136,
	453, 1137, 451, 454, 455, 456, 505, 506, 507, 1138,
	458, 457, 508, 1139, 1140, 1141, 1142, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 2163, 0, 0, 0, 0, 0, 0,
	0, 2164, 216, 217, 218, 219, 220, 1065, 221, 1066,
	1067, 1068, 1069, 464, 1070, 1071, 1072, 1073, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 1074,
	229, 230, 231, 232, 233, 234, 1075, 1076, 235, 469,
	470, 471, 1077, 236, 472, 1078, 1063, 1079, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 1080, 246,
	0, 247, 248, 249, 1081, 939, 250, 251, 1082, 1083,
	1085, 1084, 1086, 1087, 1088, 252, 253, 254, 255, 256,
	257, 473, 474, 1089, 258, 1090, 260, 259, 1091, 261,
	1092, 1093, 262, 263, 264, 1094, 265, 1095, 266, 267,
	1096, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 1097, 213, 1098, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 1099, 284,
	1100, 1101, 940, 285, 286, 1102, 287, 479, 1103, 480,
	288, 1104, 289, 290, 291, 292, 481, 482, 483, 340,
	942, 293, 294, 1105, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 1106, 941, 300, 484, 302, 301,
	303, 304, 305, 485, 1107, 486, 1108, 307, 943, 487,
	944, 308, 309, 310, 945, 311, 312, 0, 0, 313,
	314, 315, 316, 1109, 318, 317, 1110, 319, 488, 946,
	320, 321, 947, 1111, 322, 323, 1112, 1113, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 948, 336, 337, 339, 338, 1114, 215, 949, 1115,
	489, 490, 341, 342, 1116, 343, 344, 345, 1117, 1118,
	347, 348, 349, 1119, 1120, 350, 491, 950, 351, 951,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	1121, 360, 361, 493, 362, 494, 363, 1122, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 1123,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 1124, 386, 952, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 1125, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 1126, 413, 393, 394, 414, 953, 415,
	497, 416, 417, 1127, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 1128, 429, 430, 428,
	1129, 431, 432, 433, 434, 435, 272, 436, 1130, 499,
	500, 501, 502, 1131, 443, 1132, 437, 438, 503, 439,
	504, 1133, 440, 441, 442, 0, 444, 445, 1134, 1135,
	446, 447, 448, 449, 450, 452, 1136, 453, 1137, 451,
	454, 455, 456, 505, 506, 507, 1138, 458, 457, 508,
	1139, 1140, 1141, 1142, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3094, 216, 217, 218, 219, 220, 1065, 221, 1066, 1067,
	1068, 1069, 464, 1070, 1071, 1072, 1073, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 1074, 229,
	230, 231, 232, 233, 234, 1075, 1076, 235, 469, 470,
	471, 1077, 236, 472, 1078, 1063, 1079, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 1080, 246, 0,
	247, 248, 249, 1081, 939, 250, 251, 1082, 1083, 1085,
	1084, 1086, 1087, 1088, 252, 253, 254, 255, 256, 257,
	473, 474, 1089, 258, 1090, 260, 259, 1091, 261, 1092,
	1093, 262, 263, 264, 1094, 265, 1095, 266, 267, 1096,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 1097, 213, 1098, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1099, 284, 1100,
	1101, 940, 285, 286, 1102, 287, 479, 1103, 480, 288,
	1104, 289, 290, 291, 292, 481, 482, 483, 340, 942,
	293, 294, 1105, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 1106, 941, 300, 484, 302, 301, 303,
	304, 305, 485, 1107, 486, 1108, 307, 943, 487, 944,
	308, 309, 310, 945, 311, 312, 0, 0, 313, 314,
	315, 316, 1109, 318, 317, 1110, 319, 488, 946, 320,
	321, 947, 1111, 322, 323, 1112, 1113, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	948, 336, 337, 339, 338, 1114, 215, 949, 1115, 489,
	490, 341, 342, 1116, 343, 344, 345, 1117, 1118, 347,
	348, 349, 1119, 1120, 350, 491, 950, 351, 951, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 1121,
	360, 361, 493, 362, 494, 363, 1122, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 1123, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 1124, 386, 952, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 1125, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 1126, 413, 393, 394, 414, 953, 415, 497,
	416, 417, 1127, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 1128, 429, 430, 428, 1129,
	431, 432, 433, 434, 435, 272, 436, 1130, 499, 500,
	501, 502, 1131, 443, 1132, 437, 438, 503, 439, 504,
	1133, 440, 441, 442, 0, 444, 445, 1134, 1135, 446,
	447, 448, 449, 450, 452, 1136, 453, 1137, 451, 454,
	455, 456, 505, 506, 507, 1138, 458, 457, 508, 1139,
	1140, 1141, 1142, 459, 460, 509, 461, 462, 463, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3211, 0, 216, 217, 218, 219,
	220, 1065, 221, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 1074, 229, 230, 231, 232, 233, 234,
	1075, 1076, 235, 469, 470, 471, 1077, 236, 472, 1078,
	1063, 1079, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 1080, 246, 0, 247, 248, 249, 1081, 939,
	250, 251, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 252,
	253, 254, 255, 256, 257, 473, 474, 1089, 258, 1090,
	260, 259, 1091, 261, 1092, 1093, 262, 263, 264, 1094,
	265, 1095, 266, 267, 1096, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 1097, 213, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 940, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 942, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 1106, 941,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 943, 487, 944, 308, 309, 310, 945, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 946, 320, 321, 947, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 948, 336, 337, 339, 338,
	1114, 215, 949, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 950, 351, 951, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 1121, 360, 361, 493, 362, 494,
	363, 1122, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 1123, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 1124, 386,
	952, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 1125, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 1126, 413, 393,
	394, 414, 953, 415, 497, 416, 417, 1127, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	1128, 429, 430, 428, 1129, 431, 432, 433, 434, 435,
	272, 436, 1130, 499, 500, 501, 502, 1131, 443, 1132,
	437, 438, 503, 439, 504, 1133, 440, 441, 442, 0,
	444, 445, 1134, 1135, 446, 447, 448, 449, 450, 452,
	1136, 453, 1137, 451, 454, 455, 456, 505, 506, 507,
	1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459, 460,
	509, 461, 462, 463, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2830,
	0, 216, 217, 218, 219, 220, 1065, 221, 1066, 1067,
	1068, 1069, 464, 1070, 1071, 1072, 1073, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 1074, 229,
	230, 231, 232, 233, 234, 1075, 1076, 235, 469, 470,
	471, 1077, 236, 472, 1078, 1063, 1079, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 1080, 246, 0,
	247, 248, 249, 1081, 939, 250, 251, 1082, 1083, 1085,
	1084, 1086, 1087, 1088, 252, 253, 254, 255, 256, 257,
	473, 474, 1089, 258, 1090, 260, 259, 1091, 261, 1092,
	1093, 262, 263, 264, 1094, 265, 1095, 266, 267, 1096,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 1097, 213, 1098, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1099, 284, 1100,
	1101, 940, 285, 286, 1102, 287, 479, 1103, 480, 288,
	1104, 289, 290, 291, 292, 481, 482, 483, 340, 942,
	293, 294, 1105, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 1106, 941, 300, 484, 302, 301, 303,
	304, 305, 485, 1107, 486, 1108, 307, 943, 487, 944,
	308, 309, 310, 945, 311, 312, 0, 0, 313, 314,
	315, 316, 1109, 318, 317, 1110, 319, 488, 946, 320,
	321, 947, 1111, 322, 323, 1112, 1113, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	948, 336, 337, 339, 338, 1114, 215, 949, 1115, 489,
	490, 341, 342, 1116, 343, 344, 345, 1117, 1118, 347,
	348, 349, 1119, 1120, 350, 491, 950, 351, 951, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 1121,
	360, 361, 493, 362, 494, 363, 1122, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 1123, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 1124, 386, 952, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 1125, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 1126, 413, 393, 394, 414, 953, 415, 497,
	416, 417, 1127, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 1128, 429, 430, 428, 1129,
	431, 432, 433, 434, 435, 272, 436, 1130, 499, 500,
	501, 502, 1131, 443, 1132, 437, 438, 503, 439, 504,
	1133, 440, 441, 442, 0, 444, 445, 1134, 1135, 446,
	447, 448, 449, 450, 452, 1136, 453, 1137, 451, 454,
	455, 456, 505, 506, 507, 1138, 458, 457, 508, 1139,
	1140, 1141, 1142, 459, 460, 509, 461, 462, 463, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2822, 0, 216, 217, 218, 219,
	220, 1065, 221, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 1074, 229, 230, 231, 232, 233, 234,
	1075, 1076, 235, 469, 470, 471, 1077, 236, 472, 1078,
	1063, 1079, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 1080, 246, 0, 247, 248, 249, 1081, 939,
	250, 251, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 252,
	253, 254, 255, 256, 257, 473, 474, 1089, 258, 1090,
	260, 259, 1091, 261, 1092, 1093, 262, 263, 264, 1094,
	265, 1095, 266, 267, 1096, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 1097, 213, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 940, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 942, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 1106, 941,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 943, 487, 944, 308, 309, 310, 945, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 946, 320, 321, 947, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 948, 336, 337, 339, 338,
	1114, 215, 949, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 950, 351, 951, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 1121, 360, 361, 493, 362, 494,
	363, 1122, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 1123, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 1124, 386,
	952, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 1125, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 1126, 413, 393,
	394, 414, 953, 415, 497, 416, 417, 1127, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	1128, 429, 430, 428, 1129, 431, 432, 433, 434, 435,
	272, 436, 1130, 499, 500, 501, 502, 1131, 443, 1132,
	437, 438, 503, 439, 504, 1133, 440, 441, 442, 0,
	444, 445, 1134, 1135, 446, 447, 448, 449, 450, 452,
	1136, 453, 1137, 451, 454, 455, 456, 505, 506, 507,
	1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459, 460,
	509, 461, 462, 463, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2692,
	0, 216, 217, 218, 219, 220, 1065, 221, 1066, 1067,
	1068, 1069, 464, 1070, 1071, 1072, 1073, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 1074, 229,
	230, 231, 232, 233, 234, 1075, 1076, 235, 469, 470,
	471, 1077, 236, 472, 1078, 1063, 1079, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 1080, 246, 0,
	247, 248, 249, 1081, 939, 250, 251, 1082, 1083, 1085,
	1084, 1086, 1087, 1088, 252, 253, 254, 255, 256, 257,
	473, 474, 1089, 258, 1090, 260, 259, 1091, 261, 1092,
	1093, 262, 263, 264, 1094, 265, 1095, 266, 267, 1096,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 1097, 213, 1098, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1099, 284, 1100,
	1101, 940, 285, 286, 1102, 287, 479, 1103, 480, 288,
	1104, 289, 290, 291, 292, 481, 482, 483, 340, 942,
	293, 294, 1105, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 1106, 941, 300, 484, 302, 301, 303,
	304, 305, 485, 1107, 486, 1108, 307, 943, 487, 944,
	308, 309, 310, 945, 311, 312, 0, 0, 313, 314,
	315, 316, 1109, 318, 317, 1110, 319, 488, 946, 320,
	321, 947, 1111, 322, 323, 1112, 1113, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	948, 336, 337, 339, 338, 1114, 215, 949, 1115, 489,
	490, 341, 342, 1116, 343, 344, 345, 1117, 1118, 347,
	348, 349, 1119, 1120, 350, 491, 950, 351, 951, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 1121,
	360, 361, 493, 362, 494, 363, 1122, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 1123, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 1124, 386, 952, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 1125, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 1126, 413, 393, 394, 414, 953, 415, 497,
	416, 417, 1127, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 1128, 429, 430, 428, 1129,
	431, 432, 433, 434, 435, 272, 436, 1130, 499, 500,
	501, 502, 1131, 443, 1132, 437, 438, 503, 439, 504,
	1133, 440, 441, 442, 0, 444, 445, 1134, 1135, 446,
	447, 448, 449, 450, 452, 1136, 453, 1137, 451, 454,
	455, 456, 505, 506, 507, 1138, 458, 457, 508, 1139,
	1140, 1141, 1142, 459, 460, 509, 461, 462, 463, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2056, 0, 216, 217, 218, 219,
	220, 1065, 221, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 1074, 229, 230, 231, 232, 233, 234,
	1075, 1076, 235, 469, 470, 471, 1077, 236, 472, 1078,
	1063, 1079, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 1080, 246, 0, 247, 248, 249, 1081, 939,
	250, 251, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 252,
	253, 254, 255, 256, 257, 473, 474, 1089, 258, 1090,
	260, 259, 1091, 261, 1092, 1093, 262, 263, 264, 1094,
	265, 1095, 266, 267, 1096, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 1097, 213, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 940, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 942, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 1106, 941,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 943, 487, 944, 308, 309, 310, 945, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 946, 320, 321, 947, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 948, 336, 337, 339, 338,
	1114, 215, 949, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 950, 351, 951, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 1121, 360, 361, 493, 362, 494,
	363, 1122, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 1123, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 1124, 386,
	952, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 1125, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 1126, 413, 393,
	394, 414, 953, 415, 497, 416, 417, 1127, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	1128, 429, 430, 428, 1129, 431, 432, 433, 434, 435,
	272, 436, 1130, 499, 500, 501, 502, 1131, 443, 1132,
	437, 438, 503, 439, 504, 1133, 440, 441, 442, 0,
	444, 445, 1134, 1135, 446, 447, 448, 449, 450, 452,
	1136, 453, 1137, 451, 454, 455, 456, 505, 506, 507,
	1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459, 460,
	509, 461, 462, 463, 1166, 0, 1058, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1777,
	0, 0, 0, 216, 217, 218, 219, 220, 1065, 221,
	1066, 1067, 1068, 1069, 464, 1070, 1071, 1072, 1073, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	1074, 229, 230, 231, 232, 233, 234, 1075, 1076, 235,
	469, 470, 471, 1077, 236, 472, 1078, 1063, 1079, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 1080,
	246, 0, 247, 248, 249, 1081, 939, 250, 251, 1082,
	1083, 1085, 1084, 1086, 1087, 1088, 252, 253, 254, 255,
	256, 257, 473, 474, 1089, 258, 1090, 260, 259, 1091,
	261, 1092, 1093, 262, 263, 264, 1094, 265, 1095, 266,
	267, 1096, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 1097, 213, 1098, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 1099,
	284, 1100, 1101, 940, 285, 286, 1102, 287, 479, 1103,
	480, 288, 1104, 289, 290, 291, 292, 481, 482, 483,
	340, 942, 293, 294, 1105, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 1106, 941, 300, 484, 302,
	301, 303, 304, 305, 485, 1107, 486, 1108, 307, 943,
	487, 944, 308, 309, 310, 945, 311, 312, 0, 0,
	313, 314, 315, 316, 1109, 318, 317, 1110, 319, 488,
	946, 320, 321, 947, 1111, 322, 323, 1112, 1113, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 948, 336, 337, 339, 338, 1114, 215, 949,
	1115, 489, 490, 341, 342, 1116, 343, 344, 345, 1117,
	1118, 347, 348, 349, 1119, 1120, 350, 491, 950, 351,
	951, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 1121, 360, 361, 493, 362, 494, 363, 1122, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	1123, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 1124, 386, 952, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 1125, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 1126, 413, 393, 394, 414, 953,
	415, 497, 416, 417, 1127, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 1128, 429, 430,
	428, 1129, 431, 432, 433, 434, 435, 272, 436, 1130,
	499, 500, 501, 502, 1131, 443, 1132, 437, 438, 503,
	439, 504, 1133, 440, 441, 442, 0, 444, 445, 1134,
	1135, 446, 447, 448, 449, 450, 452, 1136, 453, 1137,
	451, 454, 455, 456, 505, 506, 507, 1138, 458, 457,
	508, 1139, 1140, 1141, 1142, 459, 460, 509, 461, 462,
	463, 1055, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 1065, 221, 1066, 1067, 1068,
	1069, 464, 1070, 1071, 1072, 1073, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 1074, 229, 230,
	231, 232, 233, 234, 1075, 1076, 235, 469, 470, 471,
	1077, 236, 472, 1078, 1063, 1079, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 1080, 246, 0, 247,
	248, 249, 1081, 939, 250, 251, 1082, 1083, 1085, 1084,
	1086, 1087, 1088, 252, 253, 254, 255, 256, 257, 473,
	474, 1089, 258, 1090, 260, 259, 1091, 261, 1092, 1093,
	262, 263, 264, 1094, 265, 1095, 266, 267, 1096, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 1097, 213, 1098, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 1099, 284, 1100, 1101,
	940, 285, 286, 1102, 287, 479, 1103, 480, 288, 1104,
	289, 290, 291, 292, 481, 482, 483, 340, 942, 293,
	294, 1105, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 1106, 941, 300, 484, 302, 301, 303, 304,
	305, 485, 1107, 486, 1108, 307, 943, 487, 944, 308,
	309, 310, 945, 311, 312, 0, 0, 313, 314, 315,
	316, 1109, 318, 317, 1110, 319, 488, 946, 320, 321,
	947, 1111, 322, 323, 1112, 1113, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 948,
	336, 337, 339, 338, 1114, 215, 949, 1115, 489, 490,
	341, 342, 1116, 343, 344, 345, 1117, 1118, 347, 348,
	349, 1119, 1120, 350, 491, 950, 351, 951, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 1121, 360,
	361, 493, 362, 494, 363, 1122, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 1123, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 1124, 386, 952, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	1125, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 1126, 413, 393, 394, 414, 953, 415, 497, 416,
	417, 1127, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 1128, 429, 430, 428, 1129, 431,
	432, 433, 434, 435, 272, 436, 1130, 499, 500, 501,
	502, 1131, 443, 1132, 437, 438, 503, 439, 504, 1133,
	440, 441, 442, 0, 444, 445, 1134, 1135, 446, 447,
	448, 449, 450, 452, 1136, 453, 1137, 451, 454, 455,
	456, 505, 506, 507, 1138, 458, 457, 508, 1139, 1140,
	1141, 1142, 459, 460, 509, 461, 462, 463, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	1065, 221, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072,
	1073, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 1074, 229, 230, 231, 232, 233, 234, 1075,
	1076, 235, 469, 470, 471, 1077, 236, 472, 1078, 1063,
	1079, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 1080, 246, 0, 247, 248, 249, 1081, 939, 250,
	251, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 252, 253,
	254, 255, 256, 257, 473, 474, 1089, 258, 1090, 260,
	259, 1091, 261, 1092, 1093, 262, 263, 264, 1094, 265,
	1095, 266, 267, 1096, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 1097, 213, 1098, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1099, 284, 1100, 1101, 940, 285, 286, 1102, 287,
	479, 1103, 480, 288, 1104, 289, 290, 291, 292, 481,
	482, 483, 340, 942, 293, 294, 1105, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 1106, 941, 300,
	484, 302, 301, 303, 304, 305, 485, 1107, 486, 1108,
	307, 943, 487, 944, 308, 309, 310, 945, 311, 312,
	0, 0, 313, 314, 315, 316, 1109, 318, 317, 1110,
	319, 488, 946, 320, 321, 947, 1111, 322, 323, 1112,
	1113, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 948, 336, 337, 339, 338, 1114,
	215, 949, 1115, 489, 490, 341, 342, 1116, 343, 344,
	345, 1117, 1118, 347, 348, 349, 1119, 1120, 350, 491,
	950, 351, 951, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 1121, 360, 361, 493, 362, 494, 363,
	1122, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 1123, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 1124, 386, 952,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 1125, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 1126, 413, 393, 394,
	414, 953, 415, 497, 416, 417, 1127, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 1128,
	429, 430, 428, 1129, 431, 432, 433, 434, 435, 272,
	436, 1130, 499, 500, 501, 502, 1131, 443, 1132, 437,
	438, 503, 439, 504, 1133, 440, 441, 442, 0, 444,
	445, 1134, 1135, 446, 447, 448, 449, 450, 452, 1136,
	453, 1137, 451, 454, 455, 456, 505, 506, 507, 1138,
	458, 457, 508, 1139, 1140, 1141, 1142, 459, 460, 509,
	461, 462, 463, 2032, 0, 881, 838, 839, 840, 836,
	837, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 2029, 221, 0,
	0, 0, 0, 930, 855, 0, 0, 0, 222, 223,
	224, 225, 465, 896, 875, 907, 865, 906, 905, 0,
	229, 867, 866, 232, 233, 234, 857, 929, 235, 965,
	966, 471, 0, 236, 936, 0, 919, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 939, 250, 251, 922, 920,
	921, 926, 924, 923, 925, 252, 253, 254, 255, 910,
	257, 903, 902, 827, 258, 0, 260, 259, 0, 261,
	2030, 0, 262, 901, 264, 0, 265, 0, 266, 267,
	0, 833, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 956, 957, 846, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 900, 898, 899, 0, 283, 0, 284,
	0, 0, 940, 285, 286, 0, 287, 963, 0, 856,
	288, 0, 289, 290, 291, 292, 931, 932, 935, 340,
	942, 293, 294, 0, 295, 296, 877, 0, 0, 0,
	214, 297, 299, 306, 0, 941, 300, 889, 880, 891,
	893, 894, 895, 890, 0, 882, 0, 307, 943, 933,
	944, 308, 309, 310, 945, 915, 916, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 964, 946,
	320, 321, 947, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 869,
	333, 948, 336, 337, 339, 338, 824, 215, 949, 847,
	934, 904, 341, 342, 0, 878, 344, 879, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 950, 351, 951,
	958, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 959, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 897, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 952, 387, 388, 389,
	390, 834, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 870, 871, 873, 874, 404,
	408, 411, 412, 927, 413, 393, 394, 414, 953, 415,
	892, 872, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 938, 422, 423, 424, 960, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 868, 0, 911,
	912, 913, 914, 0, 443, 0, 437, 438, 961, 439,
	962, 845, 440, 441, 442, 0, 444, 445, 0, 828,
	446, 447, 448, 449, 450, 452, 928, 453, 0, 876,
	454, 455, 456, 505, 908, 955, 2028, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	825, 0, 0, 0, 0, 0, 0, 0, 823, 0,
	0, 0, 0, 821, 822, 2031, 0, 0, 0, 0,
	0, 0, 851, 2027, 0, 0, 814, 849, 881, 838,
	839, 840, 836, 837, 850, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 930, 855, 0, 0,
	0, 222, 223, 224, 225, 465, 896, 875, 907, 865,
	906, 905, 0, 229, 867, 866, 232, 233, 234, 857,
	929, 235, 965, 966, 471, 0, 236, 936, 0, 919,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 939, 250,
	251, 922, 920, 921, 926, 924, 923, 925, 252, 253,
	254, 255, 910, 257, 903, 902, 827, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 901, 264, 0, 265,
	0, 266, 267, 0, 833, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 956, 957, 846, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 900, 898, 899, 0,
	283, 0, 284, 0, 0, 940, 285, 286, 0, 287,
	963, 0, 856, 288, 0, 289, 290, 291, 292, 931,
	932, 935, 340, 942, 293, 294, 0, 295, 296, 877,
	0, 0, 0, 214, 297, 299, 306, 0, 941, 300,
	889, 880, 891, 893, 894, 895, 890, 0, 882, 0,
	307, 943, 933, 944, 308, 309, 310, 945, 915, 916,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 964, 946, 320, 321, 947, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 869, 333, 948, 336, 337, 339, 338, 824,
	215, 949, 847, 934, 904, 341, 342, 0, 878, 344,
	879, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	950, 351, 951, 958, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 959, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 897,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 952,
	387, 388, 389, 390, 834, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 870, 871,
	873, 874, 404, 408, 411, 412, 927, 413, 393, 394,
	414, 953, 415, 892, 872, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 938, 422, 423, 424, 960, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	868, 0, 911, 912, 913, 914, 0, 443, 0, 437,
	438, 961, 439, 962, 845, 440, 441, 442, 0, 444,
	445, 0, 828, 446, 447, 448, 449, 450, 452, 928,
	453, 0, 876, 454, 455, 456, 1305, 908, 955, 0,
	458, 457, 508, 0, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 825, 174, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 821, 822, 881, 838,
	839, 840, 836, 837, 850, 1504, 1502, 0, 0, 0,
	849, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 930, 855, 0, 0,
	0, 222, 223, 224, 225, 465, 896, 875, 907, 865,
	906, 905, 0, 229, 867, 866, 232, 233, 234, 857,
	929, 235, 965, 966, 471, 0, 236, 936, 0, 919,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 939, 250,
	251, 922, 920, 921, 926, 924, 923, 925, 252, 253,
	254, 255, 910, 257, 903, 902, 827, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 901, 264, 0, 265,
	0, 266, 267, 0, 833, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 956, 957, 846, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 900, 898, 899, 0,
	283, 0, 284, 0, 0, 940, 285, 286, 0, 287,
	963, 0, 856, 288, 0, 289, 290, 291, 292, 931,
	932, 935, 340, 942, 293, 294, 0, 295, 296, 877,
	0, 0, 0, 214, 297, 299, 306, 0, 941, 300,
	889, 880, 891, 893, 894, 895, 890, 0, 882, 0,
	307, 943, 933, 944, 308, 309, 310, 945, 915, 916,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 964, 946, 320, 321, 947, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 869, 333, 948, 336, 337, 339, 338, 824,
	215, 949, 847, 934, 904, 341, 342, 0, 878, 344,
	879, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	950, 351, 951, 958, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 959, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 897,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 952,
	387, 388, 389, 390, 834, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 870, 871,
	873, 874, 404, 408, 411, 412, 927, 413, 393, 394,
	414, 953, 415, 892, 872, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 938, 422, 423, 424, 960, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	868, 0, 911, 912, 913, 914, 0, 443, 0, 437,
	438, 961, 439, 962, 845, 440, 441, 442, 0, 444,
	445, 0, 828, 446, 447, 448, 449, 450, 452, 928,
	453, 0, 876, 454, 455, 456, 1305, 908, 955, 0,
	458, 457, 508, 0, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 825, 174, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 821, 822, 881, 838,
	839, 840, 836, 837, 850, 1504, 2454, 0, 0, 0,
	849, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 930, 855, 0, 0,
	0, 222, 223, 224, 225, 465, 896, 875, 907, 865,
	906, 905, 0, 229, 867, 866, 232, 233, 234, 857,
	929, 235, 965, 966, 471, 0, 236, 936, 0, 919,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 939, 250,
	251, 922, 920, 921, 926, 924, 923, 925, 252, 253,
	254, 255, 910, 257, 903, 902, 827, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 901, 264, 0, 265,
	0, 266, 267, 0, 833, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 956, 957, 846, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 900, 898, 899, 0,
	283, 0, 284, 0, 0, 940, 285, 286, 0, 287,
	963, 0, 856, 288, 0, 289, 290, 291, 292, 931,
	932, 935, 340, 942, 293, 294, 0, 295, 296, 877,
	0, 0, 0, 214, 297, 299, 306, 0, 941, 300,
	889, 880, 891, 893, 894, 895, 890, 0, 882, 0,
	307, 943, 933, 944, 308, 309, 310, 945, 915, 916,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 964, 946, 320, 321, 947, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 869, 333, 948, 336, 337, 339, 338, 824,
	215, 949, 847, 934, 904, 341, 342, 0, 878, 344,
	879, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	950, 351, 951, 958, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 959, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 897,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 952,
	387, 388, 389, 390, 834, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 870, 871,
	873, 874, 404, 408, 411, 412, 927, 413, 393, 394,
	414, 953, 415, 892, 872, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 938, 422, 423, 424, 960, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	868, 0, 911, 912, 913, 914, 0, 443, 0, 437,
	438, 961, 439, 962, 845, 440, 441, 442, 0, 444,
	445, 0, 828, 446, 447, 448, 449, 450, 452, 928,
	453, 0, 876, 454, 455, 456, 1305, 908, 955, 0,
	458, 457, 508, 0, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 825, 174, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 821, 822, 881, 838,
	839, 840, 836, 837, 850, 1504, 1502, 0, 0, 0,
	849, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 930, 855, 0, 0,
	0, 222, 223, 224, 225, 465, 896, 875, 907, 865,
	906, 905, 2117, 229, 867, 866, 232, 233, 234, 857,
	929, 235, 965, 966, 471, 0, 236, 936, 0, 919,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 939, 250,
	251, 922, 920, 921, 926, 924, 923, 925, 252, 253,
	254, 255, 910, 257, 903, 902, 827, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 901, 264, 0, 265,
	0, 266, 267, 0, 833, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 956, 957, 846, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 900, 898, 899, 0,
	283, 0, 284, 0, 2122, 940, 285, 286, 0, 287,
	963, 0, 856, 288, 0, 289, 290, 291, 292, 931,
	932, 935, 340, 942, 293, 294, 0, 295, 296, 877,
	0, 0, 0, 214, 297, 299, 306, 0, 941, 300,
	889, 880, 891, 893, 894, 895, 890, 0, 882, 0,
	307, 943, 933, 944, 308, 309, 310, 945, 915, 916,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 2118,
	319, 964, 946, 320, 321, 947, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 869, 333, 948, 336, 337, 339, 338, 824,
	215, 949, 847, 934, 904, 341, 342, 0, 878, 344,
	879, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	950, 351, 951, 958, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 959, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 897,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 952,
	387, 388, 389, 390, 834, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 870, 871,
	873, 874, 404, 408, 411, 412, 927, 413, 393, 394,
	414, 953, 415, 892, 872, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 938, 422, 423, 424, 960, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	868, 0, 911, 912, 913, 914, 0, 443, 2119, 437,
	438, 961, 439, 962, 845, 440, 441, 442, 0, 444,
	445, 0, 828, 446, 447, 448, 449, 450, 452, 928,
	453, 0, 876, 454, 455, 456, 505, 908, 955, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 825, 0, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 821, 822, 0, 0,
	0, 0, 0, 0, 0, 851, 0, 0, 0, 817,
	849, 881, 838, 839, 840, 836, 837, 850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 930,
	855, 0, 0, 0, 222, 223, 224, 225, 465, 896,
	875, 907, 865, 906, 905, 0, 229, 867, 866, 232,
	233, 234, 857, 929, 235, 965, 966, 471, 0, 236,
	936, 0, 919, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 939, 250, 251, 922, 920, 921, 926, 924, 923,
	925, 252, 253, 254, 255, 910, 257, 903, 902, 827,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 901,
	264, 0, 265, 0, 266, 267, 0, 833, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 956, 957, 846,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 900,
	898, 899, 0, 283, 0, 284, 0, 0, 940, 285,
	286, 0, 287, 963, 0, 856, 288, 0, 289, 290,
	291, 292, 931, 932, 935, 340, 942, 293, 294, 0,
	295, 296, 877, 0, 0, 0, 214, 297, 299, 306,
	0, 941, 300, 889, 880, 891, 893, 894, 895, 890,
	0, 882, 0, 307, 943, 933, 944, 308, 309, 310,
	945, 915, 916, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 964, 946, 320, 321, 947, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 869, 333, 948, 336, 337,
	339, 338, 824, 215, 949, 847, 934, 904, 341, 342,
	0, 878, 344, 879, 829, 0, 347, 348, 349, 0,
	0, 350, 491, 950, 351, 951, 958, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 959,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 897, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 952, 387, 388, 389, 390, 834, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 870, 871, 873, 874, 404, 408, 411, 412, 927,
	413, 393, 394, 414, 953, 415, 892, 872, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 938, 422, 423,
	424, 960, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 868, 0, 911, 912, 913, 914, 0,
	443, 0, 437, 438, 961, 439, 962, 845, 440, 441,
	442, 0, 444, 445, 0, 828, 446, 447, 448, 449,
	450, 452, 928, 453, 0, 876, 454, 455, 456, 505,
	908, 955, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 825, 0, 0, 0,
	0, 0, 0, 0, 823, 0, 0, 0, 0, 821,
	822, 881, 838, 839, 840, 836, 837, 850, 851, 0,
	0, 0, 0, 849, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 930,
	855, 0, 0, 0, 222, 223, 224, 225, 465, 896,
	875, 907, 865, 906, 905, 0, 229, 867, 866, 232,
	233, 234, 857, 929, 235, 965, 966, 471, 0, 236,
	936, 0, 919, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 3409, 249,
	0, 939, 250, 251, 922, 920, 921, 926, 924, 923,
	925, 252, 253, 254, 255, 910, 257, 903, 902, 827,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 901,
	264, 0, 265, 0, 266, 267, 0, 833, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 956, 957, 846,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 900,
	898, 899, 0, 283, 0, 284, 0, 0, 940, 285,
	286, 0, 287, 963, 0, 856, 288, 0, 289, 290,
	291, 292, 931, 932, 935, 340, 942, 293, 294, 0,
	295, 296, 877, 0, 0, 0, 214, 297, 299, 306,
	0, 941, 300, 889, 880, 891, 893, 894, 895, 890,
	0, 882, 0, 307, 943, 933, 944, 308, 309, 310,
	945, 915, 916, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 964, 946, 320, 321, 947, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 869, 333, 948, 336, 337,
	339, 338, 824, 215, 949, 847, 934, 904, 341, 342,
	0, 878, 344, 879, 829, 0, 347, 348, 349, 0,
	0, 350, 491, 950, 351, 951, 958, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 959,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 897, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 952, 387, 388, 389, 390, 834, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 870, 871, 873, 874, 404, 408, 411, 412, 927,
	413, 393, 394, 414, 953, 415, 892, 872, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 938, 422, 423,
	424, 960, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 868, 0, 911, 912, 913, 914, 0,
	443, 0, 437, 438, 961, 439, 962, 845, 440, 441,
	442, 0, 444, 445, 0, 828, 446, 447, 448, 449,
	450, 452, 928, 453, 0, 876, 454, 455, 456, 505,
	908, 955, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 825, 0, 0, 0,
	0, 0, 0, 0, 823, 0, 0, 0, 0, 821,
	822, 881, 838, 839, 840, 836, 837, 850, 851, 0,
	0, 0, 0, 849, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 930,
	855, 0, 0, 0, 222, 223, 224, 225, 465, 896,
	875, 907, 865, 906, 905, 0, 229, 867, 866, 232,
	233, 234, 857, 929, 235, 965, 966, 471, 0, 236,
	936, 0, 919, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 3268, 249,
	0, 939, 250, 251, 922, 920, 921, 926, 924, 923,
	925, 252, 253, 254, 255, 910, 257, 903, 902, 827,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 901,
	264, 0, 265, 0, 266, 267, 0, 833, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 956, 957, 846,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 900,
	898, 899, 0, 283, 0, 284, 0, 0, 940, 285,
	286, 0, 287, 963, 0, 856, 288, 0, 289, 290,
	291, 292, 931, 932, 935, 340, 942, 293, 294, 0,
	295, 296, 877, 0, 0, 0, 214, 297, 299, 306,
	0, 941, 300, 889, 880, 891, 893, 894, 895, 890,
	0, 882, 0, 307, 943, 933, 944, 308, 309, 310,
	945, 915, 916, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 964, 946, 320, 321, 947, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 869, 333, 948, 336, 337,
	339, 338, 824, 215, 949, 847, 934, 904, 341, 342,
	0, 878, 344, 879, 829, 0, 347, 348, 349, 0,
	0, 350, 491, 950, 351, 951, 958, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 959,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 897, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 952, 387, 388, 389, 390, 834, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 870, 871, 873, 874, 404, 408, 411, 412, 927,
	413, 393, 394, 414, 953, 415, 892, 872, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 938, 422, 423,
	424, 960, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 868, 0, 911, 912, 913, 914, 0,
	443, 0, 437, 438, 961, 439, 962, 845, 440, 441,
	442, 0, 444, 445, 0, 828, 446, 447, 448, 449,
	450, 452, 928, 453, 0, 876, 454, 455, 456, 505,
	908, 955, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 825, 0, 0, 0,
	0, 0, 0, 0, 823, 0, 0, 0, 0, 821,
	822, 881, 838, 839, 840, 836, 837, 850, 851, 0,
	0, 0, 0, 849, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 930,
	855, 0, 0, 0, 222, 223, 224, 225, 465, 896,
	875, 907, 865, 906, 905, 0, 229, 867, 866, 232,
	233, 234, 857, 929, 235, 965, 966, 471, 0, 236,
	936, 0, 919, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 939, 250, 251, 922, 920, 921, 926, 924, 923,
	925, 252, 253, 254, 255, 910, 257, 903, 902, 827,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 901,
	264, 0, 265, 0, 266, 267, 0, 833, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 956, 957, 846,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 900,
	898, 899, 0, 283, 0, 284, 0, 0, 940, 285,
	286, 0, 287, 963, 0, 856, 288, 0, 289, 290,
	291, 292, 931, 932, 935, 340, 942, 293, 294, 0,
	295, 296, 877, 0, 0, 0, 214, 297, 299, 306,
	0, 941, 300, 889, 880, 891, 893, 894, 895, 890,
	0, 882, 0, 307, 943, 933, 944, 308, 309, 310,
	945, 915, 916, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 964, 946, 320, 321, 947, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 869, 333, 948, 336, 337,
	339, 338, 824, 3001, 949, 847, 934, 904, 341, 342,
	0, 878, 344, 879, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 950, 351, 951, 958, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 959,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 897, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 952, 387, 388, 389, 390, 834, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 870, 871, 873, 874, 404, 408, 411, 412, 927,
	413, 393, 394, 414, 953, 415, 892, 872, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 938, 422, 423,
	424, 960, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 868, 0, 911, 912, 913, 914, 0,
	443, 0, 437, 438, 961, 439, 962, 845, 440, 441,
	442, 0, 444, 445, 0, 828, 446, 447, 448, 449,
	450, 452, 928, 453, 0, 876, 454, 455, 456, 505,
	908, 955, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 825, 0, 0, 0,
	0, 0, 0, 0, 823, 0, 0, 0, 0, 821,
	822, 1564, 0, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 849, 881, 838, 839, 840, 836, 837,
	850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 930, 855, 0, 0, 0, 222, 223, 224,
	225, 465, 896, 875, 907, 865, 906, 905, 0, 229,
	867, 866, 232, 233, 234, 857, 929, 235, 965, 966,
	471, 0, 236, 936, 0, 919, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 939, 250, 251, 922, 920, 921,
	926, 924, 923, 925, 252, 253, 254, 255, 910, 257,
	903, 902, 827, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 901, 264, 0, 265, 0, 266, 267, 0,
	833, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	956, 957, 846, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 900, 898, 899, 0, 283, 0, 284, 0,
	0, 940, 285, 286, 0, 287, 963, 0, 856, 288,
	0, 289, 290, 291, 292, 931, 932, 935, 340, 942,
	293, 294, 0, 295, 296, 877, 0, 0, 0, 214,
	297, 299, 306, 0, 941, 300, 889, 880, 891, 893,
	894, 895, 890, 0, 882, 0, 307, 943, 933, 944,
	308, 309, 310, 945, 915, 916, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 964, 946, 320,
	321, 947, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 869, 333,
	948, 336, 337, 339, 338, 824, 215, 949, 847, 934,
	904, 341, 342, 0, 878, 344, 879, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 950, 351, 951, 958,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 959, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 897, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 952, 387, 388, 389, 390,
	834, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 870, 871, 873, 874, 404, 408,
	411, 412, 927, 413, 393, 394, 414, 953, 415, 892,
	872, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	938, 422, 423, 424, 960, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 868, 0, 911, 912,
	913, 914, 0, 443, 0, 437, 438, 961, 439, 962,
	845, 440, 441, 442, 0, 444, 445, 0, 828, 446,
	447, 448, 449, 450, 452, 928, 453, 0, 876, 454,
	455, 456, 505, 908, 955, 2809, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 825,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	0, 0, 821, 822, 881, 838, 839, 840, 836, 837,
	850, 851, 0, 0, 0, 0, 849, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 930, 855, 0, 0, 0, 222, 223, 224,
	225, 465, 896, 875, 907, 865, 906, 905, 0, 229,
	867, 866, 232, 233, 234, 857, 929, 235, 965, 966,
	471, 0, 236, 936, 0, 919, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 939, 250, 251, 922, 920, 921,
	926, 924, 923, 925, 252, 253, 254, 255, 910, 257,
	903, 902, 827, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 901, 264, 0, 265, 0, 266, 267, 0,
	833, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	956, 957, 846, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 900, 898, 899, 0, 283, 0, 284, 0,
	0, 940, 285, 286, 0, 287, 963, 0, 856, 288,
	0, 289, 290, 291, 292, 931, 932, 935, 340, 942,
	293, 294, 0, 295, 296, 877, 0, 0, 0, 1946,
	297, 299, 306, 0, 941, 300, 889, 880, 891, 893,
	894, 895, 890, 0, 882, 0, 307, 943, 933, 944,
	308, 309, 310, 945, 915, 916, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 964, 946, 320,
	321, 947, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 869, 333,
	948, 336, 337, 339, 338, 824, 215, 949, 847, 934,
	904, 341, 342, 0, 878, 344, 879, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 950, 351, 951, 958,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 959, 362, 494, 363, 1945, 364, 0, 365,
	366, 367, 368, 369, 370, 897, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 952, 387, 388, 389, 390,
	834, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 870, 871, 873, 874, 404, 408,
	411, 412, 927, 413, 393, 394, 414, 953, 415, 892,
	872, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	938, 422, 423, 424, 960, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 868, 0, 911, 912,
	913, 914, 0, 443, 0, 437, 438, 961, 439, 962,
	845, 440, 441, 442, 0, 444, 445, 0, 828, 446,
	447, 448, 449, 450, 452, 928, 453, 0, 876, 454,
	455, 456, 505, 908, 955, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 825,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	0, 0, 821, 822, 881, 838, 839, 840, 836, 837,
	850, 851, 0, 0, 0, 0, 849, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 930, 855, 0, 0, 0, 222, 223, 224,
	225, 465, 896, 875, 907, 865, 906, 905, 0, 229,
	867, 866, 232, 233, 234, 857, 929, 235, 965, 966,
	471, 0, 236, 936, 0, 919, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 939, 250, 251, 922, 920, 921,
	926, 924, 923, 925, 252, 253, 254, 255, 910, 257,
	903, 902, 827, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 901, 264, 0, 265, 0, 266, 267, 0,
	833, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	956, 957, 846, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 900, 898, 899, 0, 283, 0, 284, 0,
	0, 940, 285, 286, 0, 287, 963, 0, 856, 288,
	0, 289, 290, 291, 292, 931, 932, 935, 340, 942,
	293, 294, 0, 295, 296, 877, 0, 0, 0, 214,
	297, 299, 306, 0, 941, 300, 889, 880, 891, 893,
	894, 895, 890, 0, 882, 0, 307, 943, 933, 944,
	308, 309, 310, 945, 915, 916, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 964, 946, 320,
	321, 947, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 869, 333,
	948, 336, 337, 339, 338, 824, 215, 949, 847, 934,
	904, 341, 342, 0, 878, 344, 879, 829, 0, 347,
	348, 349, 0, 0, 350, 491, 950, 351, 951, 958,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 959, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 897, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 952, 387, 388, 389, 390,
	834, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 870, 871, 873, 874, 404, 408,
	411, 412, 927, 413, 393, 394, 414, 953, 415, 892,
	872, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	938, 422, 423, 424, 960, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 868, 0, 911, 912,
	913, 914, 0, 443, 0, 437, 438, 961, 439, 962,
	845, 440, 441, 442, 0, 444, 445, 0, 828, 446,
	447, 448, 449, 450, 452, 928, 453, 0, 876, 454,
	455, 456, 505, 908, 955, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 825,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	0, 0, 821, 822, 881, 838, 839, 840, 836, 837,
	850, 851, 0, 0, 0, 0, 849, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 930, 855, 0, 0, 0, 222, 223, 224,
	225, 465, 896, 875, 907, 865, 906, 905, 0, 229,
	867, 866, 232, 233, 234, 857, 929, 235, 965, 966,
	471, 0, 236, 936, 0, 919, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 939, 250, 251, 922, 920, 921,
	926, 924, 923, 925, 252, 253, 254, 255, 910, 257,
	903, 902, 827, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 901, 264, 0, 265, 0, 266, 267, 0,
	833, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	956, 957, 846, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 900, 898, 899, 0, 283, 0, 284, 0,
	0, 940, 285, 286, 0, 287, 963, 0, 856, 288,
	0, 289, 290, 291, 292, 931, 932, 935, 340, 942,
	293, 294, 0, 295, 296, 877, 0, 0, 0, 214,
	297, 299, 306, 0, 941, 300, 889, 880, 891, 893,
	894, 895, 890, 0, 882, 0, 307, 943, 933, 944,
	308, 309, 310, 945, 915, 916, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 964, 946, 320,
	321, 947, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 869, 333,
	948, 336, 337, 339, 338, 824, 215, 949, 847, 934,
	904, 341, 342, 0, 878, 344, 879, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 950, 351, 951, 958,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 959, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 897, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 952, 387, 388, 389, 390,
	834, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 870, 871, 873, 874, 404, 408,
	411, 412, 927, 413, 393, 394, 414, 953, 415, 892,
	872, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	938, 422, 423, 424, 960, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 868, 0, 911, 912,
	913, 914, 0, 443, 0, 437, 438, 961, 439, 962,
	845, 440, 441, 442, 0, 444, 445, 0, 828, 446,
	447, 448, 449, 450, 452, 928, 453, 0, 876, 454,
	455, 456, 505, 908, 955, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 825,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	0, 0, 821, 822, 1564, 0, 0, 0, 0, 0,
	0, 851, 0, 0, 0, 0, 849, 881, 838, 839,
	840, 836, 837, 850, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 930, 855, 0, 0, 0,
	222, 223, 224, 225, 465, 896, 875, 907, 865, 906,
	905, 0, 229, 867, 866, 232, 233, 234, 857, 929,
	235, 965, 966, 471, 0, 236, 936, 0, 919, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 939, 250, 251,
	922, 920, 921, 926, 924, 923, 925, 252, 253, 254,
	255, 910, 257, 903, 902, 827, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 901, 264, 0, 265, 0,
	266, 267, 0, 833, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 956, 957, 846, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 900, 898, 899, 0, 283,
	0, 284, 0, 2122, 940, 285, 286, 0, 287, 963,
	0, 856, 288, 0, 289, 290, 291, 292, 931, 932,
	935, 340, 942, 293, 294, 0, 295, 296, 877, 0,
	0, 0, 214, 297, 299, 306, 0, 941, 300, 889,
	880, 891, 893, 894, 895, 890, 0, 882, 0, 307,
	943, 933, 944, 308, 309, 310, 945, 915, 916, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	964, 946, 320, 321, 947, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 869, 333, 948, 336, 337, 339, 338, 824, 215,
	949, 847, 934, 904, 341, 342, 0, 878, 344, 879,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 950,
	351, 951, 958, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 959, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 897, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 952, 387,
	388, 389, 390, 834, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 870, 871, 873,
	874, 404, 408, 411, 412, 927, 413, 393, 394, 414,
	953, 415, 892, 872, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 938, 422, 423, 424, 960, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 868,
	0, 911, 912, 913, 914, 0, 443, 0, 437, 438,
	961, 439, 962, 845, 440, 441, 442, 0, 444, 445,
	0, 828, 446, 447, 448, 449, 450, 452, 928, 453,
	0, 876, 454, 455, 456, 505, 908, 955, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 825, 0, 0, 0, 0, 0, 0, 0,
	823, 0, 0, 0, 0, 821, 822, 881, 838, 839,
	840, 836, 837, 850, 851, 0, 0, 0, 0, 849,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 930, 855, 0, 0, 0,
	222, 223, 224, 225, 465, 896, 875, 907, 865, 906,
	905, 0, 229, 867, 866, 232, 233, 234, 857, 929,
	235, 965, 966, 471, 0, 236, 936, 0, 919, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 939, 250, 251,
	922, 920, 921, 926, 924, 923, 925, 252, 253, 254,
	255, 910, 257, 903, 902, 827, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 901, 264, 0, 265, 0,
	266, 267, 0, 833, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 956, 957, 846, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 900, 898, 899, 0, 283,
	0, 284, 0, 0, 940, 285, 286, 0, 287, 963,
	0, 856, 288, 0, 289, 290, 291, 292, 931, 932,
	935, 340, 942, 293, 294, 0, 295, 296, 877, 0,
	0, 0, 214, 297, 299, 306, 0, 941, 300, 889,
	880, 891, 893, 894, 895, 890, 0, 882, 0, 307,
	943, 933, 944, 308, 309, 310, 945, 915, 916, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	964, 946, 320, 321, 947, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 869, 333, 948, 336, 337, 339, 338, 824, 215,
	949, 847, 934, 904, 341, 342, 0, 878, 344, 879,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 950,
	351, 951, 958, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 959, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 897, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 952, 387,
	388, 389, 390, 834, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 870, 871, 873,
	874, 404, 408, 411, 412, 927, 413, 393, 394, 414,
	953, 415, 892, 872, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 938, 422, 423, 424, 960, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 868,
	0, 911, 912, 913, 914, 0, 443, 0, 437, 438,
	961, 439, 962, 845, 440, 441, 442, 0, 444, 445,
	0, 828, 446, 447, 448, 449, 450, 452, 928, 453,
	0, 876, 454, 455, 456, 505, 908, 955, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 825, 0, 0, 0, 0, 0, 0, 0,
	823, 0, 0, 0, 0, 821, 822, 0, 0, 0,
	0, 0, 0, 0, 851, 1502, 0, 0, 2127, 849,
	881, 838, 839, 840, 836, 837, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 930, 855,
	0, 0, 0, 222, 223, 224, 225, 465, 896, 875,
	907, 865, 906, 905, 0, 229, 867, 866, 232, 233,
	234, 857, 929, 235, 965, 966, 471, 0, 236, 936,
	0, 919, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	939, 250, 251, 922, 920, 921, 926, 924, 923, 925,
	252, 253, 254, 255, 910, 257, 903, 902, 827, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 901, 264,
	0, 265, 0, 266, 267, 0, 833, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 956, 957, 846, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 900, 898,
	899, 0, 283, 0, 284, 0, 0, 940, 285, 286,
	0, 287, 963, 0, 856, 288, 0, 289, 290, 291,
	292, 931, 932, 935, 340, 942, 293, 294, 0, 295,
	296, 877, 0, 0, 0, 214, 297, 299, 306, 0,
	941, 300, 889, 880, 891, 893, 894, 895, 890, 0,
	882, 0, 307, 943, 933, 944, 308, 309, 310, 945,
	915, 916, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 964, 946, 320, 321, 947, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 869, 333, 948, 336, 337, 339,
	338, 824, 215, 949, 847, 934, 904, 341, 342, 0,
	878, 344, 879, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 950, 351, 951, 958, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 959, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 897, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 952, 387, 388, 389, 390, 834, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	870, 871, 873, 874, 404, 408, 411, 412, 927, 413,
	393, 394, 414, 953, 415, 892, 872, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 938, 422, 423, 424,
	960, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 868, 0, 911, 912, 913, 914, 0, 443,
	0, 437, 438, 961, 439, 962, 845, 440, 441, 442,
	0, 444, 445, 0, 828, 446, 447, 448, 449, 450,
	452, 928, 453, 0, 876, 454, 455, 456, 505, 908,
	955, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 825, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 821, 822,
	0, 0, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 2125, 849, 881, 838, 839, 840, 836, 837, 850,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 930, 855, 0, 0, 0, 222, 223, 224, 225,
	465, 896, 875, 907, 865, 906, 905, 0, 229, 867,
	866, 232, 233, 234, 857, 929, 235, 965, 966, 471,
	0, 236, 936, 0, 919, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 939, 250, 251, 922, 920, 921, 926,
	924, 923, 925, 252, 253, 254, 255, 910, 257, 903,
	902, 827, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 901, 264, 0, 265, 0, 266, 267, 0, 833,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 956,
	957, 846, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 900, 898, 899, 0, 283, 0, 284, 0, 0,
	940, 285, 286, 0, 287, 963, 0, 856, 288, 0,
	289, 290, 291, 292, 931, 932, 935, 340, 942, 293,
	294, 0, 295, 296, 877, 0, 0, 0, 214, 297,
	299, 306, 0, 941, 300, 889, 880, 891, 893, 894,
	895, 890, 0, 882, 0, 307, 943, 933, 944, 308,
	309, 310, 945, 915, 916, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 964, 946, 320, 321,
	947, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 869, 333, 948,
	336, 337, 339, 338, 824, 215, 949, 847, 934, 904,
	341, 342, 0, 878, 344, 879, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 950, 351, 951, 958, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 959, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 897, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 952, 387, 388, 389, 390, 834,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 870, 871, 873, 874, 404, 408, 411,
	412, 927, 413, 393, 394, 414, 953, 415, 892, 872,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 938,
	422, 423, 424, 960, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 868, 0, 911, 912, 913,
	914, 0, 443, 0, 437, 438, 961, 439, 962, 845,
	440, 441, 442, 0, 444, 445, 0, 828, 446, 447,
	448, 449, 450, 452, 928, 453, 0, 876, 454, 455,
	456, 505, 908, 955, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 825, 0,
	0, 0, 0, 0, 0, 0, 823, 0, 0, 0,
	0, 821, 822, 0, 0, 0, 0, 0, 0, 0,
	851, 0, 0, 0, 2113, 849, 881, 838, 839, 840,
	836, 837, 850, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 930, 855, 0, 0, 0, 222,
	223, 224, 225, 465, 896, 875, 907, 865, 906, 905,
	0, 229, 867, 866, 232, 233, 234, 857, 929, 235,
	965, 966, 471, 0, 236, 936, 0, 919, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 939, 250, 251, 922,
	920, 921, 926, 924, 923, 925, 252, 253, 254, 255,
	910, 257, 903, 902, 827, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 901, 264, 0, 265, 0, 266,
	267, 0, 833, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 956, 957, 846, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 900, 898, 899, 0, 283, 0,
	284, 0, 0, 940, 285, 286, 0, 287, 963, 0,
	856, 288, 0, 289, 290, 291, 292, 931, 932, 935,
	340, 942, 293, 294, 0, 295, 296, 877, 0, 0,
	0, 214, 297, 299, 306, 0, 941, 300, 889, 880,
	891, 893, 894, 895, 890, 0, 882, 0, 307, 943,
	933, 944, 308, 309, 310, 945, 915, 916, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 964,
	946, 320, 321, 947, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	869, 333, 948, 336, 337, 339, 338, 824, 215, 949,
	847, 934, 904, 341, 342, 0, 878, 344, 879, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 950, 351,
	951, 958, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 959, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 897, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 952, 387, 388,
	389, 390, 834, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 870, 871, 873, 874,
	404, 408, 411, 412, 927, 413, 393, 394, 414, 953,
	415, 892, 872, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 938, 422, 423, 424, 960, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 868, 0,
	911, 912, 913, 914, 0, 443, 0, 437, 438, 961,
	439, 962, 845, 440, 441, 442, 0, 444, 445, 0,
	828, 446, 447, 448, 449, 450, 452, 928, 453, 0,
	876, 454, 455, 456, 505, 908, 955, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 825, 0, 0, 0, 0, 0, 0, 0, 823,
	0, 0, 0, 0, 821, 822, 0, 0, 0, 0,
	0, 0, 0, 851, 0, 0, 0, 2102, 849, 881,
	838, 839, 840, 836, 837, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 930, 855, 0,
	0, 0, 222, 223, 224, 225, 465, 896, 875, 907,
	865, 906, 905, 0, 229, 867, 866, 232, 233, 234,
	857, 929, 235, 965, 966, 471, 0, 236, 936, 0,
	919, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 939,
	250, 251, 922, 920, 921, 926, 924, 923, 925, 252,
	253, 254, 255, 910, 257, 903, 902, 827, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 901, 264, 0,
	265, 0, 266, 267, 0, 833, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 956, 957, 846, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 900, 898, 899,
	0, 283, 0, 284, 0, 0, 940, 285, 286, 0,
	287, 963, 0, 856, 288, 0, 289, 290, 291, 292,
	931, 932, 935, 340, 942, 293, 294, 0, 295, 296,
	877, 0, 0, 0, 214, 297, 299, 306, 0, 941,
	300, 889, 880, 891, 893, 894, 895, 890, 0, 882,
	0, 307, 943, 933, 944, 308, 309, 310, 945, 915,
	916, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 964, 946, 320, 321, 947, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 869, 333, 948, 336, 337, 339, 338,
	824, 215, 949, 847, 934, 904, 341, 342, 0, 878,
	344, 879, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 950, 351, 951, 958, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 959, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	897, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	952, 387, 388, 389, 390, 834, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 870,
	871, 873, 874, 404, 408, 411, 412, 927, 413, 393,
	394, 414, 953, 415, 892, 872, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 938, 422, 423, 424, 960,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 868, 0, 911, 912, 913, 914, 0, 443, 0,
	437, 438, 961, 439, 962, 845, 440, 441, 442, 0,
	444, 445, 0, 828, 446, 447, 448, 449, 450, 452,
	928, 453, 0, 876, 454, 455, 456, 505, 908, 955,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 825, 0, 0, 0, 0, 0,
	0, 0, 823, 0, 0, 0, 0, 821, 822, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	2100, 849, 2092, 838, 839, 840, 836, 837, 850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	930, 855, 0, 0, 0, 222, 223, 224, 225, 465,
	896, 875, 907, 865, 906, 905, 0, 229, 867, 866,
	232, 233, 234, 857, 929, 235, 965, 966, 471, 0,
	236, 936, 0, 919, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 939, 250, 251, 922, 920, 921, 926, 924,
	923, 925, 252, 253, 254, 255, 910, 2095, 903, 902,
	827, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	901, 264, 0, 265, 0, 266, 267, 0, 833, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 956, 957,
	846, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	900, 898, 899, 0, 283, 0, 284, 0, 0, 940,
	285, 286, 0, 287, 963, 0, 856, 288, 0, 289,
	290, 291, 2096, 931, 932, 935, 340, 942, 293, 294,
	0, 295, 296, 877, 0, 0, 0, 214, 297, 299,
	306, 0, 941, 300, 889, 880, 891, 893, 894, 895,
	890, 0, 882, 0, 307, 943, 933, 944, 308, 309,
	310, 945, 915, 916, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 964, 946, 320, 321, 947,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 2097, 2094, 334, 869, 333, 948, 336,
	337, 339, 338, 824, 215, 949, 847, 934, 904, 341,
	342, 0, 878, 344, 879, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 950, 351, 951, 958, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	959, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 897, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 952, 387, 388, 389, 390, 834, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 2098, 0,
	409, 410, 870, 871, 873, 874, 404, 408, 411, 412,
	927, 413, 393, 394, 414, 953, 415, 892, 872, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 938, 422,
	423, 424, 960, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 868, 0, 911, 912, 913, 914,
	0, 443, 0, 437, 438, 961, 439, 962, 845, 440,
	441, 442, 0, 444, 445, 0, 828, 446, 447, 448,
	449, 450, 452, 928, 453, 0, 876, 454, 455, 456,
	505, 908, 955, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 2093, 463, 825, 0, 0,
	0, 0, 0, 0, 0, 823, 0, 0, 0, 0,
	821, 822, 0, 0, 0, 0, 0, 0, 0, 851,
	0, 0, 0, 2089, 849, 2092, 838, 839, 840, 836,
	837, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 930, 855, 0, 0, 0, 222, 223,
	224, 225, 465, 896, 875, 907, 865, 906, 905, 0,
	229, 867, 866, 232, 233, 234, 857, 929, 235, 965,
	966, 471, 0, 236, 936, 0, 919, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 939, 250, 251, 922, 920,
	921, 926, 924, 923, 925, 252, 253, 254, 255, 910,
	2095, 903, 902, 827, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 901, 264, 0, 265, 0, 266, 267,
	0, 833, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 956, 957, 846, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 900, 898, 899, 0, 283, 0, 284,
	0, 0, 940, 285, 286, 0, 287, 963, 0, 856,
	288, 0, 289, 290, 291, 2096, 931, 932, 935, 340,
	942, 293, 294, 0, 295, 296, 877, 0, 0, 0,
	214, 297, 299, 306, 0, 941, 300, 889, 880, 891,
	893, 894, 895, 890, 0, 882, 0, 307, 943, 933,
	944, 308, 309, 310, 945, 915, 916, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 964, 946,
	320, 321, 947, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 2097, 2094, 334, 869,
	333, 948, 336, 337, 339, 338, 824, 215, 949, 847,
	934, 904, 341, 342, 0, 878, 344, 879, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 950, 351, 951,
	958, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 959, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 897, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 952, 387, 388, 389,
	390, 834, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 2098, 0, 409, 410, 870, 871, 873, 874, 404,
	408, 411, 412, 927, 413, 393, 394, 414, 953, 415,
	892, 872, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 938, 422, 423, 424, 960, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 868, 0, 911,
	912, 913, 914, 0, 443, 0, 437, 438, 961, 439,
	962, 845, 440, 441, 442, 0, 444, 445, 0, 828,
	446, 447, 448, 449, 450, 452, 928, 453, 0, 876,
	454, 455, 456, 505, 908, 955, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 2093, 463,
	825, 0, 0, 0, 0, 0, 0, 0, 823, 0,
	0, 0, 0, 821, 822, 881, 838, 839, 840, 836,
	837, 850, 851, 0, 0, 0, 0, 849, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 930, 855, 0, 0, 0, 222, 223,
	224, 225, 465, 896, 875, 907, 865, 906, 905, 0,
	229, 867, 866, 232, 233, 234, 857, 929, 235, 965,
	966, 471, 0, 236, 936, 0, 919, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 939, 250, 251, 922, 920,
	921, 926, 924, 923, 925, 252, 253, 254, 255, 910,
	257, 903, 902, 827, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 901, 264, 0, 265, 0, 266, 267,
	0, 833, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 956, 957, 846, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 900, 898, 899, 0, 283, 0, 284,
	0, 0, 940, 285, 286, 0, 287, 963, 0, 856,
	288, 0, 289, 290, 291, 292, 931, 932, 935, 340,
	942, 293, 294, 0, 295, 296, 877, 0, 0, 0,
	214, 297, 299, 306, 0, 941, 300, 889, 880, 891,
	893, 894, 895, 890, 0, 882, 0, 307, 943, 933,
	944, 308, 309, 310, 945, 915, 916, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 964, 946,
	320, 321, 947, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 869,
	333, 948, 336, 337, 339, 338, 824, 215, 949, 847,
	934, 904, 341, 342, 0, 878, 344, 879, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 950, 351, 951,
	958, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 959, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 897, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 952, 387, 388, 389,
	390, 834, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 870, 871, 873, 874, 404,
	408, 411, 412, 927, 413, 393, 394, 414, 953, 415,
	892, 872, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 938, 422, 423, 424, 960, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 868, 0, 911,
	912, 913, 914, 0, 443, 0, 437, 438, 961, 439,
	962, 845, 440, 441, 442, 0, 444, 445, 0, 828,
	446, 447, 448, 449, 450, 452, 928, 453, 0, 876,
	454, 455, 456, 505, 908, 955, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	825, 0, 0, 0, 0, 0, 0, 0, 823, 0,
	0, 0, 0, 821, 822, 0, 0, 0, 0, 0,
	1510, 0, 851, 0, 0, 0, 0, 849, 881, 838,
	839, 840, 836, 837, 850, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	1933, 221, 0, 0, 0, 0, 930, 855, 0, 0,
	0, 222, 223, 224, 225, 465, 896, 875, 907, 865,
	906, 905, 0, 229, 867, 866, 232, 233, 234, 857,
	929, 235, 965, 966, 471, 0, 236, 936, 0, 919,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 939, 250,
	251, 922, 920, 921, 926, 924, 923, 925, 252, 253,
	254, 255, 910, 257, 903, 902, 827, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 901, 264, 0, 265,
	0, 266, 267, 0, 833, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 956, 957, 846, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 900, 898, 899, 0,
	283, 0, 284, 0, 0, 940, 285, 286, 0, 287,
	963, 0, 856, 288, 0, 289, 290, 291, 292, 931,
	932, 935, 340, 942, 293, 294, 0, 295, 296, 877,
	0, 0, 0, 214, 297, 299, 306, 0, 941, 300,
	889, 880, 891, 893, 894, 895, 890, 0, 882, 0,
	307, 943, 933, 944, 308, 309, 310, 945, 915, 916,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 964, 946, 320, 321, 947, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 869, 333, 948, 336, 337, 339, 338, 824,
	215, 949, 847, 934, 904, 341, 342, 0, 878, 344,
	879, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	950, 351, 951, 958, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 959, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 897,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 952,
	387, 388, 389, 390, 834, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 870, 871,
	873, 874, 404, 408, 411, 412, 927, 413, 393, 394,
	414, 953, 415, 892, 872, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 938, 422, 423, 424, 960, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	868, 0, 911, 912, 913, 914, 0, 443, 0, 437,
	438, 961, 439, 962, 845, 440, 441, 442, 0, 444,
	445, 0, 828, 446, 447, 448, 449, 450, 452, 928,
	453, 0, 876, 454, 455, 456, 505, 908, 955, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 825, 0, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 821, 822, 0, 0,
	0, 0, 0, 0, 0, 851, 0, 0, 0, 1366,
	849, 881, 838, 839, 840, 836, 837, 850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 930,
	855, 0, 0, 0, 222, 223, 224, 225, 465, 896,
	875, 907, 865, 906, 905, 0, 229, 867, 866, 232,
	233, 234, 857, 929, 235, 965, 966, 471, 0, 236,
	936, 0, 919, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 939, 250, 251, 922, 920, 921, 926, 924, 923,
	925, 252, 253, 254, 255, 910, 257, 903, 902, 827,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 901,
	264, 0, 265, 0, 266, 267, 0, 833, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 956, 957, 846,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 900,
	898, 899, 0, 283, 0, 284, 0, 0, 940, 285,
	286, 0, 287, 963, 0, 856, 288, 0, 289, 290,
	291, 292, 931, 932, 935, 340, 942, 293, 294, 0,
	295, 296, 877, 0, 0, 0, 214, 297, 299, 306,
	0, 941, 300, 889, 880, 891, 893, 894, 895, 890,
	0, 882, 0, 307, 943, 933, 944, 308, 309, 310,
	945, 915, 916, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 964, 946, 320, 321, 947, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 869, 333, 948, 336, 337,
	339, 338, 824, 215, 949, 847, 934, 904, 341, 342,
	0, 878, 344, 879, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 950, 351, 951, 958, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 959,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 897, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 952, 387, 388, 389, 390, 834, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 870, 871, 873, 874, 404, 408, 411, 412, 927,
	413, 393, 394, 414, 953, 415, 892, 872, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 938, 422, 423,
	424, 960, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 868, 0, 911, 912, 913, 914, 0,
	443, 0, 437, 438, 961, 439, 962, 845, 440, 441,
	442, 0, 444, 445, 0, 828, 446, 447, 448, 449,
	450, 452, 928, 453, 0, 876, 454, 455, 456, 505,
	908, 955, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 825, 0, 0, 0,
	0, 0, 0, 0, 823, 0, 0, 0, 0, 821,
	822, 0, 0, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 1195, 849, 881, 838, 839, 840, 836, 837,
	850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 930, 855, 0, 0, 0, 222, 223, 224,
	225, 465, 896, 875, 907, 865, 906, 905, 0, 229,
	867, 866, 232, 233, 234, 857, 929, 235, 965, 966,
	471, 0, 236, 936, 0, 919, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 939, 250, 251, 922, 920, 921,
	926, 924, 923, 925, 252, 253, 254, 255, 910, 257,
	903, 902, 827, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 901, 264, 0, 265, 0, 266, 267, 0,
	833, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	956, 957, 846, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 900, 898, 899, 0, 283, 0, 284, 0,
	0, 940, 285, 286, 0, 287, 963, 0, 856, 288,
	0, 289, 290, 291, 292, 1194, 932, 935, 340, 942,
	293, 294, 0, 295, 296, 877, 0, 0, 0, 214,
	297, 299, 306, 0, 941, 300, 889, 880, 891, 893,
	894, 895, 890, 0, 882, 0, 307, 943, 933, 944,
	308, 309, 310, 945, 915, 916, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 964, 946, 320,
	321, 947, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 869, 333,
	948, 336, 337, 339, 338, 824, 215, 949, 847, 934,
	904, 341, 342, 0, 878, 344, 879, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 950, 351, 951, 958,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 959, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 897, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 952, 387, 388, 389, 390,
	834, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 870, 871, 873, 874, 404, 408,
	411, 412, 927, 413, 393, 394, 414, 953, 415, 892,
	872, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	938, 422, 423, 424, 960, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 868, 0, 911, 912,
	913, 914, 0, 443, 0, 437, 438, 961, 439, 962,
	845, 440, 441, 442, 0, 444, 445, 0, 828, 446,
	447, 448, 449, 450, 452, 928, 453, 0, 876, 454,
	455, 456, 505, 908, 955, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 825,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	0, 0, 821, 822, 0, 0, 0, 0, 0, 0,
	0, 851, 0, 0, 0, 1189, 849, 881, 838, 839,
	840, 836, 837, 850, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 930, 855, 0, 0, 0,
	222, 223, 224, 225, 465, 896, 875, 907, 865, 906,
	905, 0, 229, 867, 866, 232, 233, 234, 857, 929,
	235, 965, 966, 471, 0, 236, 936, 0, 919, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 939, 250, 251,
	922, 920, 921, 926, 924, 923, 925, 252, 253, 254,
	255, 910, 257, 903, 902, 827, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 901, 264, 0, 265, 0,
	266, 267, 0, 833, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 956, 957, 846, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 900, 898, 899, 0, 283,
	0, 284, 0, 0, 940, 285, 286, 0, 287, 963,
	0, 856, 288, 0, 289, 290, 291, 292, 1188, 932,
	935, 340, 942, 293, 294, 0, 295, 296, 877, 0,
	0, 0, 214, 297, 299, 306, 0, 941, 300, 889,
	880, 891, 893, 894, 895, 890, 0, 882, 0, 307,
	943, 933, 944, 308, 309, 310, 945, 915, 916, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	964, 946, 320, 321, 947, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 869, 333, 948, 336, 337, 339, 338, 824, 215,
	949, 847, 934, 904, 341, 342, 0, 878, 344, 879,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 950,
	351, 951, 958, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 959, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 897, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 952, 387,
	388, 389, 390, 834, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 870, 871, 873,
	874, 404, 408, 411, 412, 927, 413, 393, 394, 414,
	953, 415, 892, 872, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 938, 422, 423, 424, 960, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 868,
	0, 911, 912, 913, 914, 0, 443, 0, 437, 438,
	961, 439, 962, 845, 440, 441, 442, 0, 444, 445,
	0, 828, 446, 447, 448, 449, 450, 452, 928, 453,
	0, 876, 454, 455, 456, 505, 908, 955, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 825, 0, 0, 0, 0, 0, 0, 0,
	823, 0, 0, 0, 0, 821, 822, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 1184, 849,
	881, 838, 839, 840, 836, 837, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 930, 855,
	0, 0, 0, 222, 223, 224, 225, 465, 896, 875,
	907, 865, 906, 905, 0, 229, 867, 866, 232, 233,
	234, 857, 929, 235, 965, 966, 471, 0, 236, 936,
	0, 919, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	939, 250, 251, 922, 920, 921, 926, 924, 923, 925,
	252, 253, 254, 255, 910, 257, 903, 902, 827, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 901, 264,
	0, 265, 0, 266, 267, 0, 833, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 956, 957, 846, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 900, 898,
	899, 0, 283, 0, 284, 0, 0, 940, 285, 286,
	0, 287, 963, 0, 856, 288, 0, 289, 290, 291,
	292, 931, 932, 935, 340, 942, 293, 294, 0, 295,
	296, 877, 0, 0, 0, 214, 297, 299, 306, 0,
	941, 300, 889, 880, 891, 893, 894, 895, 890, 0,
	882, 0, 307, 943, 933, 944, 308, 309, 310, 945,
	915, 916, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 964, 946, 320, 321, 947, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 869, 333, 948, 336, 337, 339,
	338, 824, 215, 949, 847, 934, 904, 341, 342, 0,
	878, 344, 879, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 950, 351, 951, 958, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 959, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 897, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 952, 387, 388, 389, 390, 834, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	870, 871, 873, 874, 404, 408, 411, 412, 927, 413,
	393, 394, 414, 953, 415, 892, 872, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 938, 422, 423, 424,
	960, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 868, 0, 911, 912, 913, 914, 0, 443,
	0, 437, 438, 961, 439, 962, 845, 440, 441, 442,
	0, 444, 445, 0, 828, 446, 447, 448, 449, 450,
	452, 928, 453, 0, 876, 454, 455, 456, 505, 908,
	955, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 825, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 821, 822,
	881, 838, 839, 840, 836, 837, 850, 851, 0, 0,
	0, 0, 849, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 930, 855,
	0, 0, 0, 222, 223, 224, 225, 465, 896, 875,
	907, 865, 906, 905, 0, 229, 867, 866, 232, 233,
	234, 857, 929, 235, 965, 966, 471, 0, 236, 936,
	0, 919, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	939, 250, 251, 922, 920, 921, 926, 924, 923, 925,
	252, 253, 254, 255, 910, 257, 903, 902, 827, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 901, 264,
	0, 265, 0, 266, 267, 0, 833, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 956, 957, 846, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 900, 898,
	899, 0, 283, 0, 284, 0, 0, 940, 285, 286,
	0, 287, 963, 0, 856, 288, 0, 289, 290, 291,
	292, 931, 932, 935, 340, 942, 293, 294, 0, 295,
	296, 877, 0, 0, 0, 214, 297, 299, 306, 0,
	941, 300, 889, 880, 891, 893, 894, 895, 890, 0,
	882, 0, 307, 943, 933, 944, 308, 309, 310, 945,
	915, 916, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 964, 946, 320, 321, 947, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 869, 333, 948, 336, 337, 339,
	338, 824, 215, 949, 847, 934, 904, 341, 342, 0,
	878, 344, 879, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 950, 351, 951, 958, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 959, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 897, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 952, 387, 388, 389, 390, 834, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	870, 871, 873, 874, 404, 408, 411, 412, 927, 413,
	393, 394, 414, 953, 415, 892, 872, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 938, 422, 423, 424,
	960, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 868, 0, 911, 912, 913, 914, 0, 443,
	0, 437, 438, 961, 439, 962, 845, 440, 441, 442,
	0, 444, 445, 0, 828, 446, 447, 448, 449, 450,
	452, 928, 453, 0, 876, 454, 455, 456, 505, 908,
	955, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 825, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 821, 822,
	881, 838, 839, 840, 836, 837, 850, 851, 0, 0,
	0, 0, 849, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 930, 855,
	0, 0, 0, 222, 223, 224, 225, 465, 896, 875,
	907, 865, 906, 905, 0, 229, 867, 866, 232, 233,
	234, 857, 929, 235, 965, 966, 471, 0, 236, 936,
	0, 919, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	939, 250, 3438, 922, 920, 921, 926, 924, 923, 925,
	252, 253, 254, 255, 910, 257, 903, 902, 827, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 901, 264,
	0, 265, 0, 266, 267, 0, 833, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 956, 957, 846, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 900, 898,
	899, 0, 283, 0, 284, 0, 0, 940, 285, 286,
	0, 287, 963, 0, 856, 288, 0, 289, 290, 291,
	292, 931, 932, 935, 340, 942, 293, 294, 0, 295,
	296, 877, 0, 0, 0, 214, 297, 299, 306, 0,
	941, 300, 889, 880, 891, 893, 894, 895, 890, 0,
	882, 0, 307, 943, 933, 944, 308, 309, 310, 945,
	915, 916, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 964, 946, 320, 321, 947, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 869, 333, 948, 336, 337, 339,
	338, 824, 215, 949, 847, 934, 904, 341, 342, 0,
	878, 344, 879, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 950, 351, 951, 958, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 959, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 897, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 952, 387, 388, 389, 390, 834, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	870, 871, 873, 874, 404, 408, 411, 412, 927, 413,
	393, 394, 414, 953, 415, 892, 872, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 938, 422, 423, 424,
	960, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 868, 0, 911, 912, 913, 914, 0, 443,
	0, 437, 438, 961, 439, 962, 845, 440, 441, 442,
	0, 3437, 445, 0, 828, 446, 447, 448, 449, 450,
	452, 928, 453, 0, 876, 454, 455, 456, 505, 908,
	955, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 825, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 821, 822,
	881, 838, 839, 840, 836, 837, 850, 851, 0, 0,
	0, 0, 849, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 930, 855,
	0, 0, 0, 222, 223, 224, 225, 3436, 896, 875,
	907, 865, 906, 905, 0, 229, 867, 866, 232, 233,
	234, 857, 929, 235, 965, 966, 471, 0, 236, 936,
	0, 919, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	939, 250, 3438, 922, 920, 921, 926, 924, 923, 925,
	252, 253, 254, 255, 910, 257, 903, 902, 827, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 901, 264,
	0, 265, 0, 266, 267, 0, 833, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 956, 957, 846, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 900, 898,
	899, 0, 283, 0, 284, 0, 0, 940, 285, 286,
	0, 287, 963, 0, 856, 288, 0, 289, 290, 291,
	292, 931, 932, 935, 340, 942, 293, 294, 0, 295,
	296, 877, 0, 0, 0, 214, 297, 299, 306, 0,
	941, 300, 889, 880, 891, 893, 894, 895, 890, 0,
	882, 0, 307, 943, 933, 944, 308, 309, 310, 945,
	915, 916, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 964, 946, 320, 321, 947, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 869, 333, 948, 336, 337, 339,
	338, 824, 215, 949, 847, 934, 904, 341, 342, 0,
	878, 344, 879, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 950, 351, 951, 958, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 959, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 897, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 952, 387, 388, 389, 390, 834, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	870, 871, 873, 874, 404, 408, 411, 412, 927, 413,
	393, 394, 414, 953, 415, 892, 872, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 938, 422, 423, 424,
	960, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 868, 0, 911, 912, 913, 914, 0, 443,
	0, 437, 438, 961, 439, 962, 845, 440, 441, 442,
	0, 3437, 445, 0, 828, 446, 447, 448, 449, 450,
	452, 928, 453, 0, 876, 454, 455, 456, 505, 908,
	955, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 825, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 821, 822,
	881, 838, 839, 840, 836, 837, 850, 851, 0, 0,
	0, 0, 849, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 930, 855,
	0, 0, 0, 222, 223, 224, 225, 465, 896, 875,
	907, 865, 906, 905, 0, 229, 867, 866, 232, 233,
	234, 857, 929, 235, 965, 966, 471, 0, 236, 936,
	0, 919, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	939, 250, 251, 922, 920, 921, 926, 924, 923, 925,
	252, 253, 254, 255, 910, 257, 903, 902, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 901, 264,
	0, 265, 0, 266, 267, 0, 833, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 956, 957, 846, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 900, 898,
	899, 0, 283, 0, 284, 0, 0, 940, 285, 286,
	0, 287, 963, 0, 856, 288, 0, 289, 290, 291,
	292, 931, 932, 935, 340, 942, 293, 294, 0, 295,
	296, 877, 0, 0, 0, 214, 297, 299, 306, 0,
	941, 300, 889, 880, 891, 893, 894, 895, 890, 0,
	882, 0, 307, 943, 933, 944, 308, 309, 310, 945,
	915, 916, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 964, 946, 320, 321, 947, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 869, 333, 948, 336, 337, 339,
	338, 0, 215, 949, 847, 934, 904, 341, 342, 0,
	878, 344, 879, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 950, 351, 951, 958, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 959, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 897, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 952, 387, 388, 389, 390, 834, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	870, 871, 873, 874, 404, 408, 411, 412, 927, 413,
	393, 394, 414, 953, 415, 892, 872, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 938, 422, 423, 424,
	960, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 868, 0, 911, 912, 913, 914, 0, 443,
	0, 437, 438, 961, 439, 962, 845, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 928, 453, 0, 876, 454, 455, 456, 505, 908,
	955, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 881, 838, 839, 840, 836,
	837, 850, 0, 2110, 0, 0, 0, 0, 2108, 2109,
	0, 0, 216, 217, 218, 219, 220, 851, 221, 0,
	0, 0, 849, 930, 855, 0, 0, 0, 222, 223,
	224, 225, 0, 896, 875, 907, 865, 906, 905, 0,
	229, 867, 866, 232, 233, 234, 857, 929, 235, 965,
	966, 471, 0, 236, 936, 0, 919, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 939, 250, 3438, 922, 920,
	921, 926, 924, 923, 925, 252, 253, 254, 255, 910,
	257, 903, 902, 827, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 901, 264, 0, 265, 0, 266, 267,
	0, 833, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 956, 957, 846, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 900, 898, 899, 0, 283, 0, 284,
	0, 0, 940, 285, 286, 0, 287, 963, 0, 856,
	288, 0, 289, 290, 291, 292, 931, 932, 935, 340,
	0, 293, 294, 0, 295, 296, 877, 0, 0, 0,
	214, 297, 299, 306, 0, 941, 300, 889, 880, 891,
	893, 894, 895, 890, 0, 882, 0, 307, 0, 933,
	0, 308, 309, 310, 945, 915, 916, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 964, 946,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 869,
	333, 948, 336, 337, 339, 338, 824, 215, 0, 847,
	934, 904, 341, 342, 0, 878, 344, 879, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 950, 351, 951,
	958, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 959, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 897, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 952, 387, 388, 389,
	390, 834, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 870, 871, 873, 874, 404,
	408, 411, 412, 927, 413, 393, 394, 414, 0, 415,
	892, 872, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 938, 422, 423, 424, 960, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 868, 0, 911,
	912, 913, 914, 0, 443, 0, 437, 438, 961, 439,
	962, 845, 440, 441, 442, 0, 3437, 445, 0, 828,
	446, 447, 448, 449, 450, 452, 928, 453, 0, 876,
	454, 455, 456, 505, 908, 955, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 1002, 0, 821, 822, 0, 0, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 849, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 930,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 929, 235, 469, 470, 471, 0, 236,
	936, 0, 919, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 939, 250, 251, 922, 920, 921, 926, 924, 923,
	925, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 956, 957, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 940, 285,
	286, 0, 287, 963, 0, 480, 288, 0, 289, 290,
	291, 292, 931, 932, 935, 340, 942, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 941, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 943, 933, 944, 308, 309, 310,
	945, 311, 312, 0, 0, 313, 314, 315, 316, 989,
	318, 317, 0, 319, 964, 946, 320, 321, 947, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 948, 336, 337,
	339, 338, 0, 215, 949, 0, 934, 490, 341, 342,
	0, 343, 344, 345, 0, 994, 347, 348, 349, 0,
	0, 350, 491, 950, 351, 951, 958, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 959,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 952, 387, 388, 389, 390, 496, 996, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 179, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 927,
	413, 393, 394, 414, 953, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 960, 0, 429, 430, 428, 181, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 961, 439, 962, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 928, 453, 0, 451, 454, 455, 456, 1305,
	506, 507, 0, 458, 457, 508, 1002, 0, 0, 173,
	459, 460, 509, 461, 462, 463, 0, 174, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 930, 0, 986, 0, 1596, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 929, 235,
	469, 470, 471, 0, 236, 936, 0, 919, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 939, 250, 251, 922,
	920, 921, 926, 924, 923, 925, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 956, 957, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 940, 285, 286, 0, 287, 963, 0,
	480, 288, 0, 289, 290, 291, 292, 931, 932, 935,
	340, 942, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 941, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 943,
	933, 944, 308, 309, 310, 945, 311, 312, 0, 0,
	313, 314, 315, 316, 989, 318, 317, 0, 319, 964,
	946, 320, 321, 947, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 948, 336, 337, 339, 338, 0, 215, 949,
	0, 934, 490, 341, 342, 0, 343, 344, 345, 0,
	994, 347, 348, 349, 0, 0, 350, 491, 950, 351,
	951, 958, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 959, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 952, 387, 388,
	389, 390, 496, 996, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 179, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 927, 413, 393, 394, 414, 953,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 960, 0, 429, 430,
	428, 181, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 961,
	439, 962, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 928, 453, 0,
	451, 454, 455, 456, 1305, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 173, 459, 460, 509, 461, 462,
	463, 0, 174, 0, 0, 2561, 0, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 1596, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 929,
	235, 469, 470, 471, 0, 236, 936, 0, 919, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 939, 250, 251,
	922, 920, 921, 926, 924, 923, 925, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 956, 957, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 940, 285, 286, 0, 287, 963,
	0, 480, 288, 0, 289, 290, 291, 292, 931, 932,
	935, 340, 942, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 941, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	943, 933, 944, 308, 309, 310, 945, 311, 312, 0,
	0, 313, 314, 315, 316, 989, 318, 317, 0, 319,
	964, 946, 320, 321, 947, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 948, 336, 337, 339, 338, 0, 215,
	949, 0, 934, 490, 341, 342, 0, 343, 344, 345,
	0, 994, 347, 348, 349, 0, 0, 350, 491, 950,
	351, 951, 958, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 959, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 952, 387,
	388, 389, 390, 496, 996, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 927, 413, 393, 394, 414,
	953, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 960, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	961, 439, 962, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 928, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 0, 985, 0, 1002, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 986, 930, 991, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 929, 235, 469,
	470, 471, 0, 236, 936, 0, 919, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 939, 250, 251, 922, 920,
	921, 926, 924, 923, 925, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 956, 957, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 940, 285, 286, 0, 287, 963, 0, 480,
	288, 0, 289, 290, 291, 292, 931, 932, 935, 340,
	942, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 941, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 943, 933,
	944, 308, 309, 310, 945, 311, 312, 0, 0, 313,
	314, 315, 316, 989, 318, 317, 0, 319, 964, 946,
	320, 321, 947, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 948, 336, 337, 339, 338, 0, 215, 949, 0,
	934, 490, 341, 342, 0, 343, 344, 345, 0, 994,
	347, 348, 349, 0, 0, 350, 491, 950, 351, 951,
	958, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 959, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 952, 387, 388, 389,
	390, 496, 996, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 927, 413, 393, 394, 414, 953, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 960, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 961, 439,
	962, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 928, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1002, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 930, 0,
	986, 0, 991, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 929, 235, 469, 470, 471, 0, 236, 936,
	0, 919, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	939, 250, 251, 922, 920, 921, 926, 924, 923, 925,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 956, 957, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 940, 285, 286,
	0, 287, 963, 0, 480, 288, 0, 289, 290, 291,
	292, 931, 932, 935, 340, 942, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	941, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 943, 933, 944, 308, 309, 310, 945,
	311, 312, 0, 0, 313, 314, 315, 316, 989, 318,
	317, 0, 319, 964, 946, 320, 321, 947, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 948, 336, 337, 339,
	338, 0, 215, 949, 0, 934, 490, 341, 342, 0,
	343, 344, 345, 0, 994, 347, 348, 349, 0, 0,
	350, 491, 950, 351, 951, 958, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 959, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 952, 387, 388, 389, 390, 496, 996, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 927, 413,
	393, 394, 414, 953, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	960, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 961, 439, 962, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 928, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1002, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 930, 0, 986, 0, 991, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 929, 235, 469,
	470, 471, 0, 236, 936, 0, 919, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 939, 250, 251, 922, 920,
	921, 926, 924, 923, 925, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 956, 957, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 940, 285, 286, 0, 287, 963, 0, 480,
	288, 0, 289, 290, 291, 292, 931, 932, 935, 340,
	942, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 941, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 943, 933,
	944, 308, 309, 310, 945, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 964, 946,
	320, 321, 947, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 948, 336, 337, 339, 338, 0, 215, 949, 0,
	934, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 950, 351, 951,
	958, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 959, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 952, 387, 388, 389,
	390, 496, 996, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 927, 413, 393, 394, 414, 953, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 960, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 961, 439,
	962, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 928, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	814, 0, 1159, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 1491, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 1063, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 939, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 940,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 942, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 941, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 943, 487, 944, 308, 309,
	310, 945, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 946, 320, 321, 947,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 948, 336,
	337, 339, 338, 0, 0, 949, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 950, 351, 951, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 952, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 179,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 953, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 181, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	1305, 506, 507, 0, 458, 457, 508, 1302, 0, 1159,
	173, 459, 460, 509, 461, 462, 463, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 149,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1063, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 939,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 940, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 942, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 941,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 943, 487, 944, 308, 309, 310, 945, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 946, 320, 321, 947, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 948, 336, 337, 339, 338,
	0, 0, 949, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 950, 351, 951, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	952, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 179, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 953, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 181, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 1305, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 173, 459, 460,
	509, 461, 462, 463, 0, 174, 0, 0, 0, 0,
	1159, 1158, 0, 0, 0, 0, 1156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 1063, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	939, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 940, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 942, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	941, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 943, 487, 944, 308, 309, 310, 945,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 946, 320, 321, 947, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 948, 336, 337, 339,
	338, 0, 0, 949, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 950, 351, 951, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 952, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 953, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 1159, 1158, 0, 0, 0,
	0, 1156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 1772, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 1063, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 939, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 940, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	942, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 941, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 943, 487,
	944, 308, 309, 310, 945, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 946,
	320, 321, 947, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 948, 336, 337, 339, 338, 0, 0, 949, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 950, 351, 951,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 952, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 953, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	1159, 1158, 0, 0, 0, 0, 1156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 2755, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 1063, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	939, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 940, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 942, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	941, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 943, 487, 944, 308, 309, 310, 945,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 946, 320, 321, 947, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 948, 336, 337, 339,
	338, 0, 0, 949, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 950, 351, 951, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 952, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 953, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1002, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 930, 0, 0, 0, 1309, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 929, 235, 469,
	470, 471, 0, 236, 936, 0, 919, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 939, 250, 251, 922, 920,
	921, 926, 924, 923, 925, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 956, 957, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 940, 285, 286, 0, 287, 963, 0, 480,
	288, 0, 289, 290, 291, 292, 931, 932, 935, 340,
	942, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 941, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 943, 933,
	944, 308, 309, 310, 945, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 964, 946,
	320, 321, 947, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 948, 336, 337, 339, 338, 0, 215, 949, 0,
	934, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 950, 351, 951,
	958, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 959, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 952, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 927, 413, 393, 394, 414, 953, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 960, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 961, 439,
	962, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 928, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	814, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 179,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 181, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	1305, 506, 507, 0, 458, 457, 508, 210, 0, 0,
	173, 459, 460, 509, 461, 462, 463, 0, 174, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 149,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 210, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 1601, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 210, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 2708, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 210, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 2345, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 210, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 2833,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 685, 0, 576, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 1862, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 582, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 581,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	575, 0, 576, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 585, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 582, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 581, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 576, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 585, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 582, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 1892, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 581, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 576, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 585, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 582, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 581,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 585, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	1334, 0, 1159, 1158, 0, 0, 0, 0, 1156, 0,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 1063, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 939, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 1333, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 940,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 942, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 941, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 943, 487, 944, 308, 309,
	310, 945, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 946, 320, 321, 947,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 948, 336,
	337, 339, 338, 0, 0, 949, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 950, 351, 951, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 1332, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 952, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 1331, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 953, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 1300, 0, 1159,
	1158, 0, 0, 0, 0, 1156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1063, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 939,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 940, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1299, 482, 483, 340, 942, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 941,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 943, 487, 944, 308, 309, 310, 945, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 946, 320, 321, 947, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 948, 336, 337, 339, 338,
	0, 0, 949, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 950, 351, 951, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	952, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 953, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1296, 0, 1159, 1158, 0, 0,
	0, 0, 1156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 1063, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 939, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 940, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1295, 482, 483,
	340, 942, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 941, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 943,
	487, 944, 308, 309, 310, 945, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	946, 320, 321, 947, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 948, 336, 337, 339, 338, 0, 0, 949,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 950, 351,
	951, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 952, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 953,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1234, 0, 1159, 1158, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 1063, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 939, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	940, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1233, 482, 483, 340, 942, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 941, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 943, 487, 944, 308,
	309, 310, 945, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 946, 320, 321,
	947, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 948,
	336, 337, 339, 338, 0, 0, 949, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 950, 351, 951, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 952, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 953, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 1231, 0,
	1159, 1158, 0, 0, 0, 0, 1156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 1063, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	939, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 940, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1230, 482, 483, 340, 942, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	941, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 943, 487, 944, 308, 309, 310, 945,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 946, 320, 321, 947, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 948, 336, 337, 339,
	338, 0, 0, 949, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 950, 351, 951, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 952, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 953, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 1152, 0, 1159, 1158, 0,
	0, 0, 0, 1156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 1063, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 939, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 940, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1154, 482,
	483, 340, 942, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 941, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	943, 487, 944, 308, 309, 310, 945, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 946, 320, 321, 947, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 948, 336, 337, 339, 338, 0, 0,
	949, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 950,
	351, 951, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 952, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	953, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 1159, 1158, 0, 0, 0, 0, 1156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 1063, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 939, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 940,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 942, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 941, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 943, 487, 944, 308, 309,
	310, 945, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 946, 320, 321, 947,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 948, 336,
	337, 339, 338, 0, 0, 949, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 950, 351, 951, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 952, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 953, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1159, 1158, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 1063, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 939, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 940, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 942, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 941, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	943, 487, 944, 308, 309, 310, 945, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 946, 320, 321, 947, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 948, 336, 337, 339, 338, 0, 0,
	949, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 950,
	351, 951, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 952, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	953, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 1159, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 1063,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 939, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 940, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 942, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 941, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 943, 487, 944, 308, 309, 310, 945, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 946, 320, 321, 947, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 948, 336, 337, 339, 338, 0,
	0, 949, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	950, 351, 951, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 952,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 953, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 2233, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 2230, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 2380, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 2236, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 2377, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 2379, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 2376, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 2235, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 2378, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 2233, 236, 472,
	0, 0, 2227, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 2230, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 2236, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 2226, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 2235, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 2234, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1385, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 1388, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 1386, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 1387,
	457, 508, 1147, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1149, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 994, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1144,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1146, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 994, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1051, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1053,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	215, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 994, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 538, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 537, 220, 527, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 530, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 531, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 532, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	526, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 527, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 530, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 531, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 532,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 994, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 2309, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1871, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	215, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 1805, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1798, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1797, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1793, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1795, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1289, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1288, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1286, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1285, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1283, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1282, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1279, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1278, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1254, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1169, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1171, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 530, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 531, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 532, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 1899,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	1897, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	215, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 1895, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 677, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 676, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 675, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 2380, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 3156,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 517, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 516, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 515, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 2168, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	210, 2367, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 2956,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 210, 2367, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 2364, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 1878,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1869, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 558,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 1029, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 559, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 555, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 554, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1817, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1816,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 558, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 548, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	559, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 555, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 1308, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 554,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1293, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1292, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1242, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1241, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1226, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1163, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 558, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 1029, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 559, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 555, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 554, 500, 501, 502, 0, 443,
	0, 437, 1030, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 1013, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 558, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 548, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 546, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 547, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 559, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 549, 391, 0, 392, 396, 397,
	555, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 550, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 554, 500, 501, 502, 0, 443, 0, 437,
	552, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 542, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 543, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	540, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 534, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 512, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 2649,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	2647, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 2635, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 2327, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 210, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 543, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 1829, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 0, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 210, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1262, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1204, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 968, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 0, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 0, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 0, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 0, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 1476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1463, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 0, 1476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1453, 1454, 1455,
	0, 0, 1429, 0, 0, 0, 1435, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 1477, 0, 0, 0, 1457, 1458, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	1474, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 1452, 1453, 1454, 1455, 0, 0, 0,
	0, 0, 1465, 1435, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 1475, 0,
	1477, 0, 0, 0, 1457, 1458, 1459, 0, 0, 0,
	0, 0, 0, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 1474, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 1456, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1451, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	1451, 1476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1429, 1468, 0, 0, 0, 0,
	1466, 0, 1449, 1441, 1442, 1448, 1447, 1443, 1469, 1446,
	1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 2506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462,
	1470, 1471, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1463, 0, 1452, 1453, 1454, 1455, 0,
	1430, 0, 0, 0, 1476, 1435, 0, 1466, 0, 0,
	1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438, 1439,
	1431, 1432, 1433, 1434, 1436, 1437, 0, 1429, 0, 1467,
	0, 0, 1477, 2503, 0, 1449, 1457, 1458, 1459, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 0, 1474,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 1453,
	1454, 1455, 0, 0, 0, 0, 0, 1475, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 1477, 0, 0, 0, 1457,
	1458, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 1474, 0, 1456, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 1460,
	1461, 1462, 1470, 1471, 1472, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 1451, 1476, 0, 0, 1466,
	0, 0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440,
	1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 1429,
	1468, 0, 0, 0, 0, 2502, 0, 1449, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470,
	1471, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 1453, 1454, 1455, 0, 0, 1429, 0, 0, 0,
	1435, 0, 1466, 0, 1449, 1441, 1442, 1448, 1447, 1443,
	1469, 1446, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 0, 0, 0, 1467, 0, 0, 1477, 2501, 0,
	0, 1457, 1458, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 1474, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 1452, 1453, 1454,
	1455, 0, 0, 0, 0, 0, 1465, 1435, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 1475, 0, 1477, 0, 0, 0, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 1474, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 1456,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 1428, 0, 1460, 1461,
	1462, 1470, 1471, 1472, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 1451, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1429, 1468,
	0, 0, 0, 0, 1466, 0, 1449, 1441, 1442, 1448,
	1447, 1443, 1469, 1446, 1440, 1438, 1439, 1431, 1432, 1433,
	1434, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	2044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1463, 0, 1452,
	1453, 1454, 1455, 0, 1430, 0, 0, 0, 1476, 1435,
	0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443, 1469,
	0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437,
	0, 1429, 0, 1467, 3392, 0, 1477, 0, 0, 1449,
	1457, 1458, 1459, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 0, 1474, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 1453, 1454, 1455, 0, 0, 0, 0,
	0, 1475, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 1477,
	0, 0, 0, 1457, 1458, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 0, 1474, 0, 1456, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 1451,
	1476, 0, 0, 1466, 0, 0, 1441, 1442, 1448, 1447,
	1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434,
	1436, 1437, 0, 1429, 1468, 0, 3388, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 1428, 0,
	1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 0, 1476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 1453, 1454, 1455, 0, 0,
	1429, 0, 0, 0, 1435, 0, 1466, 0, 1449, 1441,
	1442, 1448, 1447, 1443, 1469, 1446, 1440, 1438, 1439, 1431,
	1432, 1433, 1434, 1436, 1437, 0, 0, 0, 1467, 3319,
	0, 1477, 0, 0, 0, 1457, 1458, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 1474, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 1452, 1453, 1454, 1455, 0, 0, 0, 0, 0,
	1465, 1435, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 1475, 0, 1477, 0,
	0, 0, 1457, 1458, 1459, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 1474, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 1456, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1451, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 1463, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 1451, 1476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 1468, 0, 0, 0, 0, 1466, 0,
	1449, 1441, 1442, 1448, 1447, 1443, 1469, 1446, 1440, 1438,
	1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 0, 0,
	0, 3318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 1452, 1453, 1454, 1455, 0, 1430, 0,
	0, 0, 1476, 1435, 0, 1466, 0, 0, 1441, 1442,
	1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 0, 1429, 0, 1467, 3214, 0,
	1477, 0, 0, 1449, 1457, 1458, 1459, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 1474, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1453, 1454, 1455,
	0, 0, 0, 0, 0, 1475, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 1477, 0, 0, 0, 1457, 1458, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	1474, 0, 1456, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462,
	1470, 1471, 1472, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	1430, 0, 0, 1451, 1476, 0, 0, 1466, 0, 0,
	1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438, 1439,
	1431, 1432, 1433, 1434, 1436, 1437, 0, 1429, 1468, 0,
	3121, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 1476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 1453,
	1454, 1455, 0, 0, 1429, 0, 0, 0, 1435, 0,
	1466, 0, 1449, 1441, 1442, 1448, 1447, 1443, 1469, 1446,
	1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0,
	0, 0, 1467, 3073, 0, 1477, 0, 0, 0, 1457,
	1458, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 1474, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 1452, 1453, 1454, 1455, 0,
	0, 0, 0, 0, 1465, 1435, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	1475, 0, 1477, 0, 0, 0, 1457, 1458, 1459, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 0, 1474,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 1456, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1451, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
	1468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470,
	1471, 1472, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 1451, 1476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1429, 1468, 0, 0,
	0, 0, 1466, 0, 1449, 1441, 1442, 1448, 1447, 1443,
	1469, 1446, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 0, 0, 0, 0, 3072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 1460,
	1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 1452, 1453, 1454,
	1455, 0, 1430, 0, 0, 0, 1476, 1435, 0, 1466,
	0, 0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440,
	1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 1429,
	0, 1467, 3071, 0, 1477, 0, 0, 1449, 1457, 1458,
	1459, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 1474, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 1453, 1454, 1455, 0, 0, 0, 0, 0, 1475,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 1477, 0, 0,
	0, 1457, 1458, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 1474, 0, 1456, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 1451, 1476, 0,
	0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443, 1469,
	0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437,
	0, 1429, 1468, 0, 3038, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 1428, 0, 1460, 1461,
	1462, 1470, 1471, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 1453, 1454, 1455, 0, 0, 1429, 0,
	0, 0, 1435, 0, 1466, 0, 1449, 1441, 1442, 1448,
	1447, 1443, 1469, 1446, 1440, 1438, 1439, 1431, 1432, 1433,
	1434, 1436, 1437, 0, 0, 0, 1467, 2840, 0, 1477,
	0, 0, 0, 1457, 1458, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 0, 1474, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 1452,
	1453, 1454, 1455, 0, 0, 0, 0, 0, 1465, 1435,
	3488, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 1475, 0, 1477, 0, 0, 0,
	1457, 1458, 1459, 0, 0, 0, 0, 0, 0, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 0, 1474, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 1456, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1451,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 1428, 0,
	1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 2429, 0, 1430, 0, 0, 1451, 1476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1429, 1468, 0, 0, 0, 0, 1466, 0, 1449, 1441,
	1442, 1448, 1447, 1443, 1469, 1446, 1440, 1438, 1439, 1431,
	1432, 1433, 1434, 1436, 1437, 0, 0, 2458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2430, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 1452, 1453, 1454, 1455, 0, 1430, 0, 0, 0,
	1476, 1435, 0, 1466, 0, 0, 1441, 1442, 1448, 1447,
	1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434,
	1436, 1437, 0, 1429, 0, 1467, 0, 0, 1477, 0,
	0, 1449, 1457, 1458, 1459, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 1474, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 1453, 1454, 1455, 0, 0,
	0, 0, 0, 1475, 1435, 0, 2546, 0, 0, 2545,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 1477, 0, 0, 0, 1457, 1458, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 1474, 0,
	1456, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	1465, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2135, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471,
	1472, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 2134, 0, 0, 1430, 0,
	0, 1451, 1476, 0, 0, 1466, 0, 0, 1441, 1442,
	1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 0, 1429, 1468, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1463, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 0, 1476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1453, 1454, 1455,
	0, 0, 1429, 0, 0, 0, 1435, 0, 1466, 0,
	1449, 1441, 1442, 1448, 1447, 1443, 1469, 1446, 1440, 1438,
	1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 0, 0,
	1467, 0, 0, 1477, 0, 0, 0, 1457, 1458, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	1474, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 1452, 1453, 1454, 1455, 0, 0, 0,
	0, 0, 1465, 1435, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 1475, 0,
	1477, 0, 0, 0, 1457, 1458, 1459, 0, 0, 0,
	0, 0, 0, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 1474, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 1456, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1451, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 811, 0, 0, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	1451, 1476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1429, 1468, 0, 0, 0, 0,
	1466, 0, 1449, 1441, 1442, 1448, 1447, 1443, 1469, 1446,
	1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462,
	1470, 1471, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1463, 0, 1452, 1453, 1454, 1455, 0,
	1430, 0, 0, 0, 1476, 1435, 0, 1466, 0, 0,
	1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438, 1439,
	1431, 1432, 1433, 1434, 1436, 1437, 0, 1429, 0, 1467,
	0, 0, 1477, 0, 0, 1449, 1457, 1458, 1459, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 0, 1474,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 1453,
	1454, 1455, 0, 0, 0, 0, 0, 1475, 1435, 0,
	0, 0, 0, 2552, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 1477, 0, 0, 0, 1457,
	1458, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 1474, 0, 1456, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 1460,
	1461, 1462, 1470, 1471, 1472, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 2547,
	0, 0, 1430, 0, 0, 1451, 1476, 0, 0, 1466,
	0, 0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440,
	1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 1429,
	1468, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470,
	1471, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 1453, 1454, 1455, 0, 0, 1429, 0, 0, 0,
	1435, 0, 1466, 0, 1449, 1441, 1442, 1448, 1447, 1443,
	1469, 1446, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 0, 0, 0, 1467, 0, 0, 1477, 0, 0,
	0, 1457, 1458, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 1474, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 1452, 1453, 1454,
	1455, 0, 0, 0, 0, 0, 1465, 1435, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 1475, 0, 1477, 0, 0, 0, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 1474, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 1456,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 2514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 1428, 0, 1460, 1461,
	1462, 1470, 1471, 1472, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 2500, 0,
	0, 1430, 0, 0, 1451, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1429, 1468,
	0, 0, 0, 0, 1466, 0, 1449, 1441, 1442, 1448,
	1447, 1443, 1469, 1446, 1440, 1438, 1439, 1431, 1432, 1433,
	1434, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1463, 0, 1452,
	1453, 1454, 1455, 0, 1430, 0, 0, 0, 1476, 1435,
	0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443, 1469,
	0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437,
	0, 1429, 0, 1467, 0, 0, 1477, 0, 0, 1449,
	1457, 1458, 1459, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 0, 1474, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 1453, 1454, 1455, 0, 0, 0, 0,
	0, 1475, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 1477,
	0, 0, 0, 1457, 1458, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 0, 1474, 0, 1456, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 1451,
	1476, 0, 0, 1466, 0, 0, 1441, 1442, 1448, 1447,
	1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434,
	1436, 1437, 0, 1429, 1468, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 1428, 0,
	1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 0, 1476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 1453, 1454, 1455, 0, 0,
	1429, 0, 0, 0, 1435, 0, 1466, 0, 1449, 1441,
	1442, 1448, 1447, 1443, 1469, 1446, 1440, 1438, 1439, 1431,
	1432, 1433, 1434, 1436, 1437, 0, 0, 0, 1467, 0,
	0, 1477, 0, 0, 0, 1457, 1458, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 1474, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 1452, 1453, 1454, 1455, 0, 0, 0, 0, 0,
	1465, 1435, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 1475, 0, 1477, 0,
	0, 0, 1457, 1458, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 1474, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 1456, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1451, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 1647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1659, 1641, 1648, 1631, 1669, 1668, 0, 1451, 1633,
	1632, 0, 0, 0, 0, 0, 0, 1679, 1680, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 0, 0, 0, 0, 1466, 0,
	0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438,
	1439, 1431, 1432, 1433, 1434, 1436, 1437, 1670, 0, 1666,
	1665, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1664, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1663, 1661, 1662, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 1441, 1442,
	1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 1643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1652, 1646, 1654, 1656, 1657,
	1658, 1653, 0, 1651, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1675, 1676, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1667,
	0, 0, 0, 1644, 0, 1645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1660, 0, 0, 0, 1628, 1626,
	1627, 1630, 1629, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1636, 1637, 1639, 1640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1655, 1638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1678,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1634, 0, 1671, 1672, 1673,
	1674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1642, 0, 0,
	0, 0, 1649, 1677,
}
var sqlPact = [...]int{

	5376, -1000, -1000, -1000, -1000, -1000, -1000, 379, 378, 374,
	373, 368, 367, 348, 345, -1000, -1000, -1000, 344, -1000,
	-1000, 343, -1000, 342, 339, 338, 337, -1000, 335, 333,
	332, -1000, -1000, -1000, -1000, 331, 330, 328, 50901, 1730,
	62102, 53790, 1620, 45498, 61685, 45081, 61268, 60851, 327, -1000,
	60434, 326, 324, 318, -1000, -1000, 317, 1623, 37128, 315,
	295, 292, 2206, 288, 287, -1000, 285, -1000, 8185, 1300,
	-1000, 283, 269, -1000, 7068, 1119, 52962, 2173, 268, 267,
	36710, 2165, 2166, -1000, -1000, 1601, -1000, -1000, 266, 256,
	249, 246, 244, 243, 242, 240, 238, -1000, 219, 217,
	216, 207, 190, 187, 185, 183, 182, 175, 168, 166,
	163, 161, 160, 158, 152, 150, -1000, 7546, 1563, 1437,
	1436, 1425, 1424, 1423, 914, 148, 146, 141, 139, 134,
	132, -1000, -1000, 131, 130, 127, 126, -1000, 124, 123,
	274, 111, 110, 107, 99, 98, 2819, 2140, 1380, 527,
	17147, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 66212, 62513, 84, -83, 77, -1000, 2482,
	1000, 30441, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 577, -1000, -1000, -1000, 424, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1579, 735, -1000, -1000, -1000, 60017, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1729, -76, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 734, -1000, 1722, 233, 1609, -1000, -1000,
	-1000, -1000, -1000, 62513, -1000, -1000, 2822, 2820, 1627, 729,
	59606, -1000, 1289, -1000, 861, 19800, -1000, 1094, -1000, 19800,
	423, -1000, -1000, -1000, -1000, -1000, 44664, 14069, 44247, 43830,
	40923, 59189, 13642, 50490, 1131, -1000, -1000, -1000, -1000, -1000,
	8, 38361, 62513, -1000, 421, -1000, -1000, -1000, -1000, -1000,
	-1000, 26556, 515, 26103, 526, 25650, 414, -1000, -1000, -1000,
	-1000, 2818, 2817, 1023, 2815, 2433, 65801, 1460, 2813, 1366,
	1095, 964, 2812, 2810, 2809, 2808, 2807, 2806, 2804, 1254,
	58772, 2183, 40496, 40069, 50901, 50901, 1961, 58355, -1000, -1000,
	1153, 1146, -1000, -1000, -1000, -1000, 2306, 2145, 2139, 50073,
	-1000, -1000, 2803, 2802, 2801, 2800, 2797, 65390, 1447, 2796,
	1881, 2794, 2791, 2790, 2789, 2783, 2780, 2775, 2770, 2769,
	-1000, 49656, 49239, 48822, 48405, 57938, 39642, 39215, -1000, -1000,
	-1000, 32105, 4935, 57521, 33386, 50901, 50901, -1000, -1000, 26996,
	-89, -1000, -1000, -1000, 2124, -1000, 26996, -89, -1000, 62513,
	-1000, 2181, 1595, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2339, 1390, 2647, 38788, 1616, 1212, 2295, 2293,
	1293, 1874, 2290, 2287, 2266, 2235, 2234, 1360, 1910, 470,
	25197, 1323, 1303, 2203, 2199, 2661, 1702, 43413, 2764, 2763,
	2465, 2192, 2123, -1000, -1000, -1000, -1000, 1279, -1000, -1000,
	45909, -1000, -1000, 1067, -1000, -1000, 1067, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1127, 64568, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1361, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1568, -1000, 1590, -1000, -1000, 2760, 2140, 1866, 2466, 2466,
	2466, 2500, 549, 540, -1000, 274, -1000, -1000, 71967, -1000,
	-1000, 26996, 26996, 26996, 26996, 26996, 1510, -1000, 722, -1000,
	-1000, 784, -1000, 711, 671, -1000, -1000, -1000, -1000, -1000,
	-1000, 709, 2669, -1000, 989, -1000, -1000, -1000, -1000, 2605,
	-1000, 16254, -1000, -1000, -1000, 561, 708, 26996, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 420, 859, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	661, 1479, 659, 659, 659, -1000, -1000, 956, -1000, -1000,
	-1000, 413, 658, 410, 657, -1000, -1000, -1000, -1000, 2174,
	706, 705, -1000, 704, 702, 701, -1000, -1000, -1000, 700,
	699, 698, 696, 694, 693, 692, 691, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 952, -1000, 688, 686, 685, 683,
	681, 680, 676, 675, 674, -1000, -1000, -19, 62513, -1000,
	577, -19, -1000, -1000, 673, -1000, 20240, 20240, 20240, -1000,
	-1000, 1719, 26996, -1000, 3252, -1000, 448, -235, 839, 31271,
	-1000, 29592, 839, 790, 34633, -1000, 2117, -1000, -1000, 672,
	419, -1000, -1000, 2116, 62513, 14494, 62513, 50901, 50901, -1000,
	2390, 26996, -1000, -1000, 37950, 62513, 51312, 2559, 72599, 37950,
	62513, 2167, -1000, -1000, -1000, 62513, -1000, 26996, -1000, 2556,
	1252, -44, -1000, -1000, -1000, -1000, -1000, -1000, 1848, 1855,
	1034, 1747, 1170, -1000, 19800, 2425, -1000, -1000, -1000, 416,
	14494, -1000, 2374, 2360, 1200, -1000, 1744, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1421, 2359, -1000, 1815, 2347,
	1408, -1000, -1000, 927, 2346, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1677, -1000, -1000, 2450, -1000, -1000,
	1805, 2345, -192, -1000, -1000, 32536, 38361, -25, -1000, -1000,
	-66, -1000, 13215, 71967, -1000, -1000, -1000, 71967, 893, -1000,
	-1000, 2344, -1000, 71967, 847, -1000, -1000, 2343, -1000, -1000,
	-1000, 2759, -1000, 2747, 1806, 2746, 2742, 2741, -1000, 1268,
	1471, 2740, -1000, 2739, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 47988, 47571, 963, -1000, 1697, -1000, -1000, 47154, 885,
	1802, -1000, -1000, 1793, -1000, 946, -1000, 2735, 57104, 1992,
	885, 1792, -1000, -1000, -1000, -1000, -1000, 50901, -1000, 50901,
	-1000, 50901, -1000, 1273, -1000, 64979, -235, -1000, -1000, -1000,
	-1000, -1000, 2342, 2734, 2733, 2732, -1000, 62513, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 176, 2341, -1000,
	-1000, 176, 2338, -1000, 176, 2337, -1000, 172, 2333, -1000,
	-1000, 1663, 2330, -1000, -108, 2318, -1000, -1000, -108, 2316,
	-1000, 95, -1000, -1000, -1000, 1000, -1000, 31688, 56687, 41348,
	872, 780, 36293, 71967, -1000, 32536, 71967, -1000, 41348, 47154,
	-1000, 56270, 46743, -1000, -1000, 1175, 1891, -1000, -1000, -1000,
	-1000, 41348, 41348, 41348, -1000, 55853, -1000, 1617, 1337, 2454,
	50901, -1000, 1530, -1000, -1000, -1000, 2456, 2164, -1000, 37539,
	52545, -1000, 52134, -1000, 51723, -1000, 50901, -1000, 50901, -1000,
	2731, 2730, 2728, -1000, 2726, 71967, -1000, 2283, 1440, 1435,
	62513, -1000, -1000, 62513, -1000, 62513, -1000, -1000, -1000, 1845,
	-1000, -1000, -1000, -1000, 50901, -1000, -1000, -1000, -1000, -1000,
	-1000, 2163, -1000, 1502, -1000, 1161, -1000, -1000, 177, -1000,
	-1000, -44, -1000, 64568, -1000, -1000, 2140, 1866, -1000, 62513,
	-1000, -1000, -1000, 2140, 1621, 1944, 24744, 1912, 26996, 274,
	-1000, -1000, 274, 274, 19360, -1000, -1000, 72599, 72599, 14494,
	1138, 26996, 26996, 26996, 26996, 26996, 26996, 26996, 26996, 26996,
	26996, 26996, 26996, 26996, 26996, 26996, 26996, 26996, 26996, 26996,
	26996, 26996, 26996, 26996, 26996, 26996, 26996, 26996, 26996, 26996,
	26996, 26996, 26996, 26996, 26996, 26996, 1619, 26996, 1125, 26996,
	26996, 26996, 26996, 2056, -1000, -1000, 1552, 606, 1556, -1000,
	2626, 2626, 2626, 72326, 72326, 605, 2725, 784, -1000, 26996,
	-1000, -89, 26996, 14921, -1000, 2653, 1188, -1000, -1000, 540,
	8851, 1762, -1000, 524, 15374, -1000, -1000, -1000, 16254, 671,
	24291, 26996, 943, 71967, 12790, 2193, 2033, -1000, 2652, -1000,
	-1000, 2614, -1000, -1000, -1000, -1000, 2614, 1136, 1099, 2651,
	-1000, 2614, 2614, 669, 883, 878, 869, 860, 628, 26996,
	26996, 26996, 26996, 26996, 26996, 26996, 26996, -1000, 23851, 23398,
	22945, 28316, 22492, 26996, 16694, 22039, 21586, 62513, -19, 2552,
	26996, 179, -1000, 70761, -1000, 179, 179, 668, 91, 71967,
	1932, 1932, 30856, 1872, 1533, 1533, 1533, -1000, 667, 767,
	59, 57, 32, -1000, -1000, 28, 21, 839, 10224, 54201,
	1536, 839, 839, 385, 415, 523, 29177, 3252, 54201, -1000,
	-1000, 50901, 666, 14921, 14494, 1198, 78, 370, 1923, 1921,
	1920, -1000, 1345, 72, 1118, -156, -1000, 3992, 70, -1000,
	1183, -1000, -1000, -1000, -1000, 162, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 950, 665,
	662, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 661, 1479, 659, 659, 659, -1000, -1000,
	-1000, 413, 658, 410, 657, -1000, -1000, -1000, -1000, -1000,
	-1000, 2111, -66, 51312, 854, 68, 1033, -44, -1000, 1067,
	-1000, 1341, -1000, -1000, -1000, -1000, -1000, -1000, 1180, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2664, -1000, 2634, -1000,
	-1000, 2646, -23, -1000, -1000, 14494, -1000, -50, 1382, -1000,
	42996, 2453, 2452, 2445, 1265, -1000, 1221, 2499, 45909, 2525,
	2527, 23, -1000, 2110, -1000, -1000, 858, 1355, 1115, 45909,
	1815, -1000, 72599, -1000, 1983, 2494, 1234, 1229, 1234, 1234,
	1227, -1000, 45909, 1114, 1507, 41348, -1000, 1112, -1000, -52,
	2517, 2524, 17, -1000, 2109, 1109, -1000, -1000, 50901, 14494,
	835, -1000, 41348, -25, 38361, 62513, 321, -1000, 26996, -89,
	26996, -89, -1000, -1000, 2308, -1000, -1000, -1000, 2724, 1439,
	1880, -1000, -1000, -1000, 656, 1791, 1815, 1790, -1000, -1000,
	46326, 2108, 62513, 1941, -37, 50901, -1000, -1000, 1506, -1000,
	2299, 2284, 758, 2722, -1000, 1684, 1786, -1000, -1000, -1000,
	64157, 1148, 2278, 936, 136, 2545, 136, 35463, -1000, 62513,
	-1000, 62513, -1000, -1000, -1000, 2721, -1000, 50901, -1000, -1000,
	50901, -1000, 50901, -1000, 50901, -1000, 50901, 50901, -1000, 62513,
	41348, 41348, 41348, 4819, 42174, 66, 521, -1000, 55442, 62513,
	992, 42585, 62513, 2414, -199, -1000, 872, 872, 835, -1000,
	835, -1000, 50901, 2162, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2720, 2717, -1000, 881, 50901, 62513, 50901, -1000, -1000,
	62513, -1000, 62513, -1000, -1000, 62513, -1000, 62513, -1000, 62513,
	-1000, -1000, -1000, -1000, -1000, -1000, 1302, -1000, 2153, -1000,
	2144, -1000, 104, -1000, -1000, -1000, -1000, 1449, 50901, 50901,
	62513, 50901, -1000, 45909, -1000, -1000, 2140, -1000, -1000, -1000,
	-1000, -1000, 71967, -1000, 528, -1000, -1000, 71967, 1342, 1946,
	-1000, 1946, -31, -1000, 70376, 1896, 50901, -1000, -1000, -1000,
	-1000, -1000, 857, 1037, 1037, 1117, 1117, 1117, 1117, 2546,
	237, 320, 363, 3545, 3545, 3545, 3545, 3545, 3545, 3545,
	3545, 313, 369, 369, 313, 313, 313, 313, 313, 369,
	369, 369, 3545, 3545, 3545, 72326, 72249, 5798, 26996, 26996,
	1104, 1512, 606, 5623, 26996, 3557, 3557, 3557, 3557, -1000,
	1358, -1000, -1000, -1000, -1000, 2107, 654, 28316, 28316, -1000,
	-1000, -1000, -1000, 15814, 26996, -1000, -1000, -1000, -1000, 21133,
	-1000, -1000, 70017, -239, 520, -190, 47, -1000, 26996, 26996,
	26996, 516, -1000, 512, -1000, -1000, 1093, -1000, 1091, 1090,
	1089, -1000, 653, 275, 26996, 62513, -1000, 67785, 763, 44,
	-1000, 60, 1246, -1000, 26996, 234, -1000, 1531, 652, 649,
	509, 54, -1000, 508, 856, 851, 507, 506, 503, 26996,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	71864, 67503, 67400, 67118, 5826, 67041, 9730, 52, 502, -1000,
	2098, -190, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 501,
	-1000, 499, -1000, 71582, -190, 498, 5968, -1000, 28316, 28316,
	28316, -1000, 494, -1000, 70479, -1000, 71505, 20693, 20693, 20693,
	492, 71223, 26996, -190, 48, -1000, 25, -1000, -1000, 648,
	18, 936, 20240, 30023, 14494, -1000, 936, 936, 26996, -1000,
	26996, 1905, -1000, -1000, -1000, 1904, 2114, 1932, 30856, -1000,
	-1000, -1000, -1000, 54201, 608, 839, -1000, -1000, -1000, -1000,
	-1000, 54201, -1000, 2605, 2045, -1000, -1000, -1000, 62513, 577,
	-1000, 54201, 54201, 14494, 839, -1000, 490, 33801, 47, 180,
	-1000, -1000, 14494, 2005, 2005, 2005, -1000, -1000, 62513, 2558,
	-1000, 1491, -1000, 72599, -1000, 781, 1051, -1000, 2644, 647,
	-1000, 2614, 2614, 62513, 143, 19800, -1000, 1067, -1000, -1000,
	1332, -1000, 1467, -1000, 1071, -1000, -1000, -1000, 19800, -1000,
	2031, 62513, 62513, 50901, -1000, -1000, 1784, 63746, 1782, 72599,
	62513, -1000, -1000, 646, 645, 1895, 1893, 62513, 62513, 63335,
	62924, 62513, 1487, 26996, 1539, 1745, -89, -89, -1000, -1000,
	-89, 644, 1145, 50901, 50901, 50901, 1405, -1000, -1000, -1000,
	-1000, -1000, 50901, -1000, -1000, 2637, -1000, 1234, -1000, -1000,
	-1000, 1234, 1815, 1384, 50901, 41348, 924, 62513, 1500, -89,
	-89, -1000, -1000, -89, 643, 14494, 1444, -1000, 2003, -1000,
	9, -1000, -1000, 12365, 71967, -1000, 71967, -1000, 62513, -1000,
	959, 62513, 42585, 877, 2269, -1000, 1815, 2267, 577, -1000,
	-1000, 35048, -66, 872, 41348, 50901, -37, 41348, 41348, 41348,
	2716, 640, 2714, -1000, 50901, 2262, 1681, 1776, 2240, 809,
	62513, 1550, -1000, 26996, 1454, -1000, 34218, 977, 62513, 1372,
	108, -1000, -1000, -1000, 42, 62513, -1000, 2712, -1000, -1000,
	176, 176, 176, -1000, 172, 1663, -1000, -108, -108, -1000,
	-1000, 4819, 872, -43, 638, -1000, 823, 821, 32961, 41348,
	7, -1000, -1000, -1000, -1000, -1000, 50901, 62513, 764, 1982,
	62513, 5, -1000, 144, 635, -1000, 872, 32536, 2095, -1000,
	-1000, 923, -1000, 1160, -1000, -1000, -1000, -1000, -1000, -1000,
	-66, -66, -1000, -1000, -1000, -1000, 1296, 1291, 62513, -1000,
	14494, 62513, 50901, 14494, 50901, -1000, -1000, -1000, -1000, -1000,
	-1000, 1342, -1000, 26996, -1000, -1000, -1000, 19360, -1000, -1000,
	-1000, 50901, -220, 26996, 26996, 4730, 4170, 26996, 28316, 28316,
	-1000, 26996, 3946, -1000, -1000, -1000, -1000, -1000, 2082, 634,
	26996, 72599, 6103, 5935, -1000, 489, 9529, 313, -1000, 26996,
	-1000, 483, 18920, -1000, 70838, -17, 0, -1000, 2663, 1816,
	1516, 1402, 1326, 2632, 11940, -190, -1, -1000, -1000, 779,
	-1000, 2294, -1000, 26996, 71120, 11515, -1000, 35878, 938, 1550,
	-1000, -1000, 2614, 853, -1000, -1000, -1000, 853, -1000, 69735,
	72599, 72599, 26996, 26996, -1000, 26996, 26996, 26996, -1000, -1000,
	26996, -1000, -1000, 2080, 26996, -1000, 72599, 72599, 28316, 28316,
	28316, 28316, 28316, 28316, 28316, 28316, 28316, 28316, 28316, 28316,
	28316, 28316, 28316, 28316, 28316, 28316, 28316, 1887, 28316, 2607,
	2607, 2607, -1000, 2137, 2080, 26996, 26996, 72599, 482, 481,
	480, -1000, 26996, -190, -1000, -1000, 4819, -1000, 2028, -1000,
	-133, -1000, 3252, -1000, -1000, 2028, 2028, -9, 71967, 30856,
	30856, -1000, 633, 26996, 1902, -1000, 762, -1000, -15, -1000,
	54201, -1000, 757, -236, -1000, 817, -1000, -1000, -1000, -1000,
	577, -1000, -1000, -1000, 137, 54201, -1000, -21, -1000, 2543,
	479, 14494, -1000, -1000, -1000, -1000, -1000, -1000, -66, 1608,
	2659, -1000, 2625, 778, 742, 477, 2614, 476, 474, -66,
	62513, -1000, -44, -1000, -1000, -1000, 26996, -1000, -1000, 2449,
	1088, 1087, -1000, 2256, -1000, 1773, -1000, 973, -1000, 1344,
	-1000, 26996, 26996, 632, 627, 1465, 2711, 2244, 1663, 2243,
	1663, -1000, -1000, 867, -1000, 71967, 626, 625, -1000, -50,
	1378, 895, -1000, -1000, 26996, 26996, 55027, -1000, 2450, 2450,
	-1000, 1084, -1000, -1000, -1000, 1815, 1082, -1000, -1000, 1504,
	-1000, -1000, 892, -1000, -1000, 26996, -1000, -52, 1081, 872,
	2079, -1000, -1000, 2710, 2709, 2706, 471, -27, -60, 72599,
	2540, 1735, 62513, 50901, 50901, 2539, 849, -1000, 2605, -1000,
	-1000, -1000, -1000, 885, -1000, -1000, 2705, -1000, 984, 14494,
	50901, 2239, 1860, 809, 41763, -1000, 885, 1944, 71967, -1000,
	1372, 18467, 2447, -29, -1000, -1000, -1000, 936, 35463, 30856,
	26996, 2698, -33, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 54616, 54616, 41348, 41348, 41348, 872, 62513, 62513, 42585,
	2696, 624, 62513, 62513, 620, -1000, 62513, 62513, 2693, 41348,
	-1000, -1000, -89, -1000, 1554, 50901, -1000, -1000, 881, -1000,
	-1000, 1505, 1743, 1505, 1614, 69632, -1000, 2458, 14494, 2548,
	3557, 26996, 26996, 473, 5759, 1682, 3557, 26996, 26996, 72599,
	6655, -51, 26996, 26996, -1000, 26996, 740, 71967, 2657, 26996,
	459, 458, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 457, -1000, -1000, -1000, -1000, -1000, 71967, 26996, 109,
	-1000, -1000, -1000, 66623, -1000, 26996, 456, 455, -1000, -1000,
	-1000, 453, 452, 9195, 272, 69350, 69273, 68991, 71967, 2137,
	71967, -1000, -1000, 988, 988, 1214, 1214, 1214, 1214, 2607,
	818, 882, 723, 409, 409, 409, 544, 970, 970, 409,
	409, 409, 2069, 1830, 619, 6426, -1000, -1000, 71967, 71967,
	451, -1000, -1000, -1000, -190, 450, 2024, 2487, -1000, 30856,
	2024, 2024, -1000, -1000, 2114, 62513, 71967, 30856, -235, -1000,
	2605, -1000, -1000, 2045, -1000, 10661, -1000, 14494, -1000, -1000,
	33801, -1000, 617, -1000, 79, -1000, -1000, 739, 2690, 772,
	-1000, 449, -1000, -1000, -66, 71967, 62513, 62513, 62513, 2236,
	-1000, 3679, -1000, 68888, -53, -1000, 70376, 26996, 62513, -1000,
	1482, 1931, 1015, -1000, 62513, -1000, 62513, -1000, -1000, 62513,
	62513, 50901, 2225, -59, 71967, -68, -1000, 815, -1000, -1000,
	50901, 50901, 41348, 2221, -61, 14494, -1000, 41348, -1000, -1000,
	-1000, 1964, -1000, 53373, 1651, -89, -1000, 2684, 616, 1815,
	-89, -1000, 1553, -1000, 738, -1000, -1000, 614, 62513, 1673,
	613, 14494, 1876, 809, 41763, -1000, 1148, 1372, -1000, -1000,
	-94, -1000, 641, -89, 1550, -1000, -96, 71967, -1000, 811,
	-1000, -67, -1000, -1000, 445, -1000, 2411, 2410, -1000, -1000,
	26996, 612, 611, 62513, 2409, -1000, -1000, -79, -1000, 1765,
	-1000, -1000, -1000, -1000, 14494, 1353, -1000, -1000, -1000, -1000,
	2458, 3557, 3557, 26996, 26996, 26996, 3557, 6655, -85, -1000,
	3557, 3557, -190, -1000, -1000, 70838, -1000, -1000, -1000, 71967,
	11090, 1513, -1000, 68606, -1000, -1000, -1000, -1000, 26996, 26996,
	-1000, -1000, -1000, -1000, -1000, 28316, 2064, 610, 72599, -1000,
	-1000, 890, 26996, 26996, 3252, 890, 890, -1000, -86, -1000,
	839, -1000, -1000, -1000, 2605, 79, -1000, 2681, 14494, 769,
	-1000, 2680, -1000, -1000, -1000, -1000, 62513, -1000, 62513, -1000,
	14494, 62513, 2062, 1766, -1000, -1000, 1890, 607, 28316, 50901,
	889, 2038, 1503, 26996, -1000, -87, -92, 1759, -1000, -1000,
	1755, 26996, -1000, 72599, 1663, 1663, -99, -100, -1000, 26996,
	1075, 62513, 18027, -1000, -1000, -1000, 26996, 1074, -1000, -108,
	1500, 2009, -1000, -1000, -1000, -1000, 1889, -1000, -1000, 62513,
	1888, 880, -1000, 42585, 877, -1000, -1000, 875, -1000, 26996,
	-1000, 50901, 26996, 1661, -1000, 809, 41763, -1000, 2240, -1000,
	2372, 62513, 2439, -1000, 1944, 606, -1000, 872, 604, 603,
	-106, 26996, 26996, -112, 602, 872, -110, -1000, 896, 864,
	-1000, -1000, 50901, 50901, -1000, 3557, 3557, 3557, -1000, 437,
	-1000, -1000, 1550, 2485, -1000, 68529, 68247, 213, 28316, 72599,
	-113, -1000, 62513, 71967, -190, -1000, -1000, -1000, 54201, 737,
	-1000, 2678, -1000, -1000, 2399, -1000, -1000, -1000, 62513, 1771,
	-1000, -1000, 26996, 6426, 601, 26996, -1000, -1000, 1960, 2081,
	1964, 595, -1000, -1000, -1000, -1000, 1438, -1000, -1000, 71967,
	2467, -1000, -1000, 592, 590, 71967, 589, 804, 2060, -1000,
	71967, 588, 877, -1000, 1523, 1651, 586, -1000, -1000, -1000,
	1967, 436, 2537, 875, -1000, 2602, -1000, -117, 984, -118,
	50901, 41763, -1000, 1860, 1149, -125, 62513, 1372, -1000, -1000,
	41348, 41348, 1503, -136, -137, -1000, 41348, -1000, 1765, -1000,
	62513, -1000, 62513, -1000, -1000, -1000, 1498, 26996, -1000, -1000,
	213, -138, -1000, -135, -1000, 2532, -1000, -1000, -1000, -1000,
	-1000, 2232, 68144, 1831, 62513, 67862, 2077, -1000, -1000, 1500,
	62513, 50901, 983, 14494, 1505, 1505, 26996, 17587, 1522, 26996,
	-1000, 50901, 62513, -1000, 2405, 1964, -89, -1000, -1000, 1503,
	585, 1503, 582, -1000, 1876, 1237, -1000, 936, -1000, -1000,
	-147, -148, 1964, 1503, -1000, -152, -1000, -158, -160, 435,
	27876, 27876, 27876, -190, -1000, 62513, 580, 2205, -1000, 1638,
	1417, 434, 1004, -1000, -1000, 2038, -173, 577, -1000, 26996,
	-1000, -174, -1000, 974, -179, -1000, 971, -180, -1000, 2042,
	-1000, -193, 572, -195, -1000, -1000, -1000, 1500, 880, 1964,
	26996, 1964, 26996, -1000, 35463, -1000, 872, 872, 1500, 1964,
	872, -1000, -1000, -1000, -1000, -1000, 28741, 1666, 1354, 70094,
	-1000, -1000, -1000, -1000, 62513, -1000, 1655, 1647, 1297, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1831, 71967, -1000,
	1505, 2006, -1000, 1505, 2041, -1000, 1514, -1000, 62513, -1000,
	62513, 877, -1000, 1500, -200, 1500, -201, -185, -1000, -1000,
	-1000, 1500, -1000, 2550, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2297, -1000, 999, 1701, 1701, 1638, -1000, 563, -1000,
	560, -1000, -202, -1000, -1000, 884, 1503, 884, 1503, -1000,
	-1000, 27436, -1000, 2587, -1000, -1000, 1900, -1000, 2038, 26996,
	26996, 1646, -1000, 2674, 1964, -1000, 1964, -1000, -1000, -1000,
	-1000, -1000, -211, -212, -1000, -1000, -1000, -1000, 1500, 1500,
	1500, 1059, 884, 884, -1000, 553, -1000, -1000, 26996, -218,
	1500, -1000,
}
var sqlPgo = [...]int{

	0, 3320, 3319, 3317, 3316, 3315, 3314, 3312, 3310, 3309,
	3306, 3305, 3304, 3300, 3298, 3296, 3295, 3294, 3290, 3285,
	3284, 3283, 3278, 3274, 3271, 3269, 3267, 3266, 3265, 3263,
	3262, 3261, 3260, 3256, 3255, 3253, 3252, 3251, 3250, 3249,
	3243, 3241, 3238, 3236, 3226, 3225, 31, 3224, 3222, 3219,
	3218, 3216, 3215, 3214, 3213, 3212, 3207, 3201, 3200, 3199,
	3198, 3195, 3194, 3193, 34, 3192, 212, 3190, 3189, 3188,
	3183, 3179, 3173, 3171, 3170, 3168, 3167, 211, 3165, 115,
	3163, 3158, 3157, 3156, 3155, 210, 3154, 3153, 3150, 3148,
	3146, 3145, 3140, 3138, 129, 3137, 3136, 143, 3135, 3134,
	3133, 3132, 3131, 3130, 3128, 3126, 3125, 3121, 193, 3116,
	209, 3115, 3114, 3113, 3108, 3106, 3105, 3104, 3102, 3101,
	3100, 3098, 3097, 3092, 3091, 3090, 3086, 3085, 3084, 3082,
	3081, 3078, 3075, 3074, 3073, 3071, 3069, 217, 141, 3066,
	3065, 206, 204, 3064, 3062, 97, 93, 91, 3059, 85,
	146, 187, 6372, 180, 3057, 3048, 3047, 3043, 3039, 69,
	136, 133, 138, 131, 96, 3037, 3036, 71, 54, 36,
	29, 104, 3031, 3028, 3026, 2025, 89, 3023, 3022, 202,
	189, 3021, 1042, 3019, 213, 87, 107, 122, 90, 3018,
	118, 18, 3016, 137, 40, 3014, 126, 60, 30, 5461,
	6892, 3013, 108, 216, 73, 125, 188, 186, 165, 161,
	132, 378, 3012, 194, 3011, 95, 158, 3009, 3008, 3007,
	57, 149, 76, 3005, 8, 3, 147, 25, 84, 11,
	3004, 12, 3003, 3002, 3001, 3000, 26, 135, 2999, 114,
	67, 2998, 35, 2988, 14, 172, 2978, 171, 101, 2975,
	2972, 200, 159, 156, 10, 177, 2971, 2970, 2969, 2967,
	2960, 103, 21, 98, 2959, 2958, 111, 183, 2957, 56,
	148, 72, 124, 214, 92, 170, 88, 176, 142, 184,
	2956, 2955, 2954, 152, 2946, 2944, 116, 166, 2943, 2942,
	208, 33, 52, 181, 55, 2941, 2940, 120, 2938, 157,
	2937, 2935, 2934, 207, 140, 164, 5, 68, 100, 24,
	13, 179, 112, 80, 78, 2933, 3083, 1135, 2358, 2931,
	113, 82, 49, 99, 123, 197, 38, 2930, 2926, 1617,
	2925, 2924, 2923, 2922, 144, 2921, 2920, 2919, 110, 53,
	94, 2918, 117, 63, 7, 86, 205, 75, 169, 163,
	195, 2917, 150, 2914, 62, 109, 2913, 154, 198, 192,
	2912, 277, 130, 2911, 168, 2909, 2907, 2905, 2904, 50,
	2903, 2902, 83, 2901, 119, 2900, 2899, 151, 121, 134,
	79, 43, 2898, 64, 28, 2897, 153, 32, 2895, 3010,
	61, 0, 6228, 5002, 5723, 2894, 2520, 2893, 160, 106,
	2891, 2889, 2888, 70, 2887, 58, 2886, 2885, 37, 2884,
	16, 6, 9, 19, 17, 1032, 847, 2882, 2880, 74,
	102, 127, 2879, 215, 173, 2878, 2877, 2875, 65, 2874,
	27, 2873, 22, 2872, 2869, 23, 4, 2867, 2866, 190,
	2865, 185, 2864, 2863, 2570, 2862, 201, 105, 2859, 139,
	167, 2856, 2855, 2854, 2851, 196, 2847, 199, 2842, 15,
	20, 1, 2840, 2839, 2836, 162, 2, 2372, 2833, 2832,
	66, 155, 2828, 2827, 145,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 34, 34, 10, 10,
	9, 9, 9, 11, 11, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 24, 24, 14, 14,
	26, 26, 15, 15, 27, 27, 446, 446, 18, 29,
	19, 30, 12, 447, 447, 447, 447, 22, 20, 20,
	31, 31, 148, 148, 148, 148, 17, 17, 25, 25,
	161, 161, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 445, 445, 163, 163, 162, 158, 158,
	448, 448, 164, 164, 164, 166, 166, 35, 35, 93,
	93, 93, 94, 94, 95, 95, 149, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 81, 81, 389, 389,
	390, 390, 144, 144, 145, 145, 145, 145, 146, 146,
	147, 147, 147, 49, 37, 37, 37, 37, 37, 37,
	37, 38, 38, 38, 38, 39, 39, 39, 39, 39,
	39, 40, 40, 40, 40, 40, 40, 47, 47, 47,
	47, 138, 138, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 453, 453, 454, 454, 455, 455, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 61, 61, 238, 238, 214, 214,
	62, 62, 62, 63, 63, 64, 64, 51, 51, 441,
	441, 252, 252, 356, 356, 66, 66, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	75, 75, 75, 76, 76, 76, 73, 73, 73, 71,
	71, 71, 70, 70, 70, 74, 74, 74, 72, 72,
	72, 253, 253, 77, 77, 77, 77, 77, 77, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 358, 358, 78, 78, 78, 327,
	327, 82, 82, 82, 284, 284, 83, 83, 83, 83,
	83, 84, 84, 84, 84, 96, 96, 96, 96, 444,
	444, 245, 245, 179, 179, 179, 179, 89, 89, 89,
	89, 90, 90, 90, 91, 91, 143, 143, 102, 102,
	102, 102, 102, 101, 101, 101, 101, 101, 101, 41,
	41, 41, 42, 42, 43, 43, 44, 44, 45, 45,
	46, 46, 46, 46, 46, 104, 104, 449, 449, 106,
	103, 103, 103, 105, 105, 105, 105, 107, 108, 108,
	108, 108, 108, 108, 109, 109, 383, 383, 260, 260,
	381, 381, 397, 397, 382, 382, 218, 218, 218, 218,
	218, 219, 219, 219, 388, 388, 388, 388, 388, 388,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 128, 128, 128, 137, 137, 137, 137, 137, 137,
	137, 130, 130, 130, 119, 119, 111, 111, 111, 111,
	111, 115, 115, 115, 115, 115, 112, 112, 121, 121,
	121, 121, 116, 116, 118, 118, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 113, 113, 113, 113, 123,
	123, 123, 123, 290, 290, 290, 122, 122, 122, 122,
	122, 122, 122, 122, 133, 133, 133, 133, 133, 133,
	341, 341, 129, 129, 129, 129, 132, 132, 132, 132,
	274, 274, 126, 126, 126, 127, 127, 127, 131, 131,
	134, 134, 134, 134, 114, 114, 114, 458, 458, 458,
	135, 135, 125, 125, 136, 136, 136, 136, 136, 136,
	136, 136, 124, 124, 124, 124, 117, 442, 442, 439,
	439, 439, 439, 439, 439, 439, 440, 440, 443, 443,
	87, 87, 87, 56, 56, 459, 459, 459, 57, 57,
	460, 460, 460, 457, 457, 457, 457, 457, 457, 457,
	457, 220, 220, 221, 221, 308, 308, 308, 308, 308,
	224, 224, 165, 165, 165, 227, 228, 228, 225, 225,
	226, 226, 226, 230, 230, 229, 232, 232, 231, 307,
	404, 404, 406, 406, 406, 406, 406, 406, 406, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 402,
	402, 402, 403, 398, 398, 399, 399, 399, 399, 222,
	222, 223, 223, 223, 223, 400, 401, 243, 243, 344,
	405, 405, 407, 407, 409, 461, 461, 461, 461, 461,
	461, 462, 462, 306, 306, 236, 236, 410, 410, 410,
	410, 411, 411, 411, 411, 411, 414, 413, 412, 412,
	412, 412, 412, 337, 337, 337, 60, 60, 60, 271,
	271, 270, 270, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 140, 140, 58,
	58, 58, 171, 171, 55, 55, 55, 464, 464, 59,
	59, 59, 465, 465, 65, 65, 65, 65, 65, 65,
	54, 54, 54, 54, 54, 466, 466, 291, 291, 289,
	289, 242, 242, 343, 183, 183, 159, 159, 159, 21,
	23, 23, 16, 16, 32, 32, 33, 33, 28, 28,
	450, 450, 451, 451, 88, 88, 92, 92, 92, 100,
	100, 139, 139, 139, 139, 139, 139, 139, 36, 36,
	36, 36, 48, 48, 48, 48, 98, 468, 468, 468,
	99, 99, 467, 467, 178, 178, 178, 178, 180, 180,
	303, 303, 304, 304, 469, 469, 305, 305, 305, 305,
	173, 172, 174, 174, 53, 53, 53, 167, 167, 168,
	168, 169, 169, 170, 170, 470, 470, 85, 85, 85,
	142, 142, 213, 213, 299, 299, 299, 237, 237, 188,
	188, 302, 302, 300, 300, 300, 300, 269, 269, 269,
	141, 141, 250, 250, 262, 262, 263, 263, 353, 353,
	264, 97, 97, 152, 152, 150, 150, 150, 150, 150,
	150, 471, 471, 151, 151, 151, 153, 153, 153, 153,
	153, 153, 153, 156, 156, 156, 156, 157, 157, 157,
	155, 155, 421, 421, 421, 423, 423, 424, 420, 420,
	422, 422, 463, 463, 273, 273, 273, 234, 235, 233,
	233, 240, 240, 239, 241, 241, 342, 342, 342, 267,
	267, 267, 267, 294, 294, 292, 292, 293, 293, 295,
	295, 296, 296, 296, 297, 297, 298, 298, 266, 266,
	323, 323, 154, 154, 154, 247, 247, 247, 248, 248,
	314, 314, 314, 314, 314, 314, 315, 315, 313, 313,
	313, 313, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 346, 346, 249, 249, 347, 301, 301, 437, 437,
	437, 438, 438, 340, 340, 348, 348, 348, 348, 348,
	348, 338, 338, 339, 339, 354, 355, 355, 277, 277,
	277, 277, 275, 275, 278, 278, 278, 278, 276, 276,
	349, 349, 349, 349, 268, 268, 350, 350, 350, 351,
	309, 310, 310, 359, 359, 359, 359, 359, 374, 246,
	246, 246, 246, 246, 472, 472, 360, 360, 360, 360,
	360, 360, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 364, 364, 364, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 373, 373, 373, 373, 373,
	365, 365, 370, 370, 371, 371, 371, 366, 367, 372,
	372, 372, 372, 473, 473, 376, 376, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 362, 362, 362, 369,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 285, 285, 286, 286, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 318, 318, 318, 318, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 415, 415, 415, 415, 415, 415, 415, 415, 418,
	418, 419, 419, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 425, 425, 426, 426, 428, 428, 429, 429,
	430, 431, 431, 431, 432, 433, 433, 427, 427, 434,
	434, 434, 434, 435, 435, 436, 436, 436, 436, 436,
	329, 329, 330, 330, 336, 336, 336, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 181, 181, 181, 181, 181, 258, 258,
	256, 256, 256, 259, 259, 257, 257, 255, 255, 254,
	254, 326, 326, 324, 324, 328, 328, 279, 279, 375,
	375, 375, 375, 375, 375, 375, 280, 280, 280, 288,
	281, 281, 282, 282, 282, 282, 282, 320, 321, 283,
	283, 283, 322, 322, 331, 335, 335, 334, 333, 333,
	332, 332, 311, 311, 312, 312, 265, 265, 474, 474,
	261, 261, 352, 352, 352, 352, 216, 216, 251, 251,
	215, 215, 208, 208, 209, 209, 209, 209, 244, 244,
	377, 377, 377, 378, 379, 380, 325, 198, 197, 185,
	186, 196, 195, 194, 184, 187, 191, 192, 193, 189,
	190, 204, 203, 202, 200, 201, 357, 210, 210, 211,
	211, 211, 212, 212, 212, 212, 182, 182, 205, 205,
	206, 207, 207, 199, 199, 199, 175, 175, 175, 176,
	176, 177, 177, 387, 387, 385, 385, 385, 386, 386,
	386, 386, 384, 384, 384, 384, 384, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 393, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 396, 396,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 9,
	6, 9, 6, 5, 6, 5, 1, 1, 5, 5,
	6, 6, 4, 4, 4, 4, 3, 4, 4, 7,
	4, 7, 5, 3, 5, 7, 4, 12, 4, 12,
	1, 3, 5, 5, 2, 5, 3, 6, 4, 6,
	5, 6, 6, 4, 8, 3, 4, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 3, 1, 3, 1, 6, 4, 9,
	7, 12, 12, 12, 9, 2, 7, 2, 1, 1,
	1, 3, 3, 0, 3, 1, 3, 1, 1, 3,
	2, 5, 0, 5, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 3, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 6,
	3, 1, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 3, 3, 4, 3, 4, 7, 4, 4,
	4, 3, 5, 7, 4, 3, 3, 4, 3, 3,
	3, 3, 3, 2, 0, 1, 0, 1, 0, 3,
	3, 3, 3, 3, 6, 4, 4, 4, 3, 5,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 1,
	1, 2, 1, 2, 7, 3, 2, 0, 1, 3,
	3, 1, 0, 1, 2, 2, 1, 6, 5, 1,
	2, 1, 3, 2, 0, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 3, 5, 7, 2, 3,
	0, 3, 5, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 3, 4, 4, 4,
	3, 4, 4, 3, 4, 4, 5, 3, 5, 5,
	5, 3, 3, 3, 4, 3, 4, 3, 5, 4,
	5, 3, 4, 5, 3, 4, 3, 4, 3, 3,
	4, 4, 5, 0, 1, 1, 3, 2, 4, 3,
	3, 4, 3, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 5, 5, 5, 3, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 3,
	0, 2, 4, 3, 3, 1, 5, 1, 3, 1,
	2, 0, 1, 2, 2, 0, 1, 3, 3, 2,
	2, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 5, 8, 4, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 1, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 1, 1, 8,
	7, 5, 0, 1, 6, 7, 6, 5, 3, 4,
	14, 17, 14, 17, 4, 0, 2, 2, 0, 1,
	0, 1, 3, 2, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 0,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 3, 4, 3, 0, 2, 2, 0,
	10, 3, 2, 0, 1, 3, 1, 1, 3, 3,
	5, 1, 1, 3, 3, 2, 3, 4, 3, 4,
	5, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 1, 1, 1, 3, 2, 4,
	4, 0, 8, 4, 3, 4, 1, 5, 3, 4,
	5, 1, 5, 1, 3, 2, 0, 3, 0, 2,
	3, 1, 3, 2, 0, 3, 5, 6, 4, 6,
	4, 3, 2, 1, 0, 5, 1, 0, 2, 2,
	2, 1, 1, 0, 1, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 1, 0, 2, 5, 7, 2, 1, 1, 2,
	4, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 5, 4, 1, 2, 1, 4, 1, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 2, 5,
	1, 4, 2, 5, 1, 4, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 1, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 1, 2, 2, 2,
	4, 3, 5, 6, 8, 6, 5, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 8, 6, 4, 6,
	6, 6, 4, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	1, 2, 3, 2, 3, 2, 3, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 1, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	3, 1, 1, 1, 1, 5, 3, 1, 1, 3,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 454, -79, -49, -47, -82, -83, -67,
	-84, -78, -96, -100, -88, -102, -139, -3, -35, -37,
	-50, -66, -68, -77, -86, -85, -87, -89, -93, -92,
	-81, -41, -97, -101, -110, -140, -141, -142, 81, 68,
	121, 103, 108, 154, 285, 314, 324, 308, -105, -106,
	343, -36, -48, -99, -98, -4, -10, 27, 39, -38,
	-39, -40, 53, -58, -55, -52, -61, -452, 83, -422,
	-69, -72, -74, -456, 113, 127, 171, 277, -90, -91,
	310, 312, 128, -43, -42, 122, -150, -152, -103, -104,
	-143, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, -128, -129,
	-130, -131, -132, -133, -134, -135, -136, 346, 391, 40,
	355, 69, 116, 318, 21, -5, -6, -7, -8, -9,
	-11, -23, -51, -53, -54, -56, -57, -65, -59, -60,
	-421, -70, -71, -73, -75, -76, 309, -153, -151, 451,
	404, -13, -18, -19, -14, -15, -17, -20, -16, -24,
	-29, -30, -26, -27, -25, -28, -31, -32, -33, -34,
	-21, -22, -12, 422, 430, -156, -154, -155, -157, 331,
	412, 369, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, -200, -205, -206, -207, -199, -175, -393, -396,
	4, -391, -394, 133, 179, 246, 21, 22, 23, 24,
	25, 27, 37, 38, 39, 40, 43, 45, 46, 49,
	50, 51, 52, 53, 54, 57, 62, 67, 68, 69,
	70, 71, 76, 73, 74, 75, 78, 80, 81, 82,
	85, 86, 94, 95, 96, 97, 98, 99, 103, 106,
	105, 108, 111, 112, 113, 115, 117, 118, 121, 122,
	125, 123, 375, 124, 126, 127, 128, 129, 139, 140,
	141, 143, 144, 146, 148, 152, 153, 155, 159, 161,
	162, 163, 164, 170, 171, 173, 174, 180, 175, 181,
	185, 188, 187, 189, 190, 191, 182, 196, 200, 201,
	202, 204, 205, 208, 209, 210, 211, 214, 213, 216,
	219, 220, 223, 224, 227, 228, 230, 231, 234, 232,
	235, 233, 236, 239, 237, 238, 241, 242, 244, 243,
	168, 251, 252, 254, 255, 256, 271, 259, 260, 261,
	264, 267, 270, 272, 273, 274, 275, 276, 277, 278,
	280, 281, 283, 285, 287, 289, 290, 291, 292, 293,
	294, 296, 297, 299, 300, 301, 302, 303, 308, 305,
	306, 307, 309, 310, 311, 312, 314, 316, 317, 318,
	319, 321, 323, 344, 345, 357, 324, 325, 326, 327,
	328, 329, 330, 334, 338, 335, 336, 337, 339, 332,
	333, 340, 341, 343, 346, 348, 350, 351, 354, 355,
	356, 358, 361, 362, 363, 359, 360, 353, 368, 366,
	367, 370, 371, 372, 373, 374, 376, 385, 386, 388,
	391, 392, 393, 383, 395, 396, 399, 400, 401, 402,
	403, 408, 404, 406, 409, 410, 411, 417, 416, 423,
	424, 426, 427, 428, 32, 41, 42, 44, 47, 58,
	59, 60, 63, 100, 101, 120, 130, 131, 142, 156,
	158, 165, 166, 167, 186, 192, 194, 198, 217, 249,
	250, 265, 269, 282, 284, 295, 320, 349, 364, 378,
	379, 380, 381, 387, 389, 412, 413, 414, 418, 425,
	257, -193, 2, -175, -175, 285, 26, 2, 26, 281,
	333, 371, 373, 2, -444, -245, 2, 26, -179, -175,
	83, 154, 331, -193, 2, -444, -245, 24, 2, -175,
	2, -180, 2, 324, -175, 454, 78, 224, 62, 320,
	340, -108, 386, -107, 378, 326, -109, -383, 2, 239,
	-175, 454, 454, 454, 454, 2, 369, 274, 416, 332,
	405, 96, 292, 179, -439, 2, 4, -394, -391, -209,
	-208, 369, 96, -207, -199, 444, -206, 454, 454, 454,
	2, 201, 202, 291, 290, 340, 341, 454, 454, 454,
	2, 25, 56, 77, 80, 102, 129, 149, 152, 262,
	-453, 231, 271, 289, 326, 339, 368, 376, 388, -457,
	356, 57, 405, -464, 393, 111, -289, 96, 373, 371,
	224, 153, 400, 316, 157, 398, 106, 185, 403, 402,
	454, 454, 25, 56, 65, 80, 111, 129, 149, 152,
	-455, 271, 289, 323, 326, 339, 368, 376, 393, 388,
	2, 416, 332, 369, 179, 96, 405, 316, 288, -79,
	2, 451, 29, 343, -149, 369, 195, 2, -175, 201,
	202, 2, 454, 454, -439, 2, 201, 202, 2, 195,
	2, 57, 328, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	2, -137, 340, 356, 163, 39, 62, 26, 67, 275,
	97, 155, 179, 180, 209, 77, 78, -290, 38, 202,
	201, -341, 370, 327, 333, 366, 386, 83, 406, 317,
	428, 293, 123, 4, 96, 239, 342, 378, 224, 71,
	-463, 2, 369, -467, 2, 386, 386, 2, -467, 2,
	-467, 2, -178, 2, 386, 382, -468, 386, 425, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, -151, -153, -152, 454, 454, 454, 454, 454, -137,
	340, 2, 62, 26, -471, 147, -239, -240, 397, 193,
	119, 263, -150, -152, 2, -421, -381, 2, -316, -397,
	-318, 442, 443, 437, 245, 429, -329, 102, 398, 257,
	-396, -319, -331, 120, 320, -259, 8, 9, 5, 6,
	7, -182, -361, -325, -369, 390, 132, 248, -212, 456,
	10, 451, -418, -152, -330, 33, 158, 55, -385, -211,
	-363, -371, -367, -368, -472, 45, 51, 50, 376, 238,
	334, 335, 350, 336, 337, 43, 408, 175, 254, 256,
	187, 4, 194, -210, -199, -415, -416, -391, -392, 186,
	192, 188, 349, 189, 190, 191, 42, 295, 143, 144,
	142, 112, 101, 100, 250, 47, 46, 44, 413, -372,
	98, 378, 379, 380, 381, 204, 205, -175, -393, 65,
	88, 89, 87, 92, 91, 93, 90, 342, 405, 56,
	32, 165, 166, 198, 249, 167, 63, -417, 360, 84,
	151, 184, 169, 197, 199, 203, 218, 221, 240, 247,
	266, 268, 315, 347, -473, 414, 130, 131, 269, 282,
	364, 387, 389, 156, 217, 58, 59, -423, 296, -424,
	-193, -423, 454, 454, 455, 454, -233, -234, -235, 2,
	26, 109, 451, 2, -345, 2, 449, -349, -152, 212,
	-348, 451, -346, -200, 258, -419, 321, -415, -416, -182,
	-199, -211, 4, -236, 451, 453, 96, 369, 66, 2,
	-284, 451, -175, 26, 257, 382, 455, -327, 451, 257,
	150, 260, -175, 2, 2, 344, 2, 451, -108, 60,
	386, -304, 2, -305, -172, -173, -174, -354, 200, 287,
	294, 431, 428, -381, -449, 150, 434, 382, -381, -260,
	453, 2, -349, 165, -200, 2, -197, -384, 4, -391,
	-394, -392, -395, 65, -393, 26, 28, 29, 30, 31,
	33, 34, 35, 36, 48, 55, 56, 61, 64, 66,
	77, 83, 87, 88, 90, 89, 91, 92, 93, 102,
	104, 107, 109, 110, 114, 116, 119, 132, 134, 147,
	149, 150, 154, 157, 160, 172, 183, 193, 195, 212,
	215, 222, 225, 226, 245, 248, 253, 257, 258, 262,
	263, 279, 286, 298, 313, 331, 342, 352, 365, 369,
	377, 382, 384, 390, 397, 398, 405, 407, 415, 419,
	420, 421, 422, -396, 2, -349, 165, 2, -202, 165,
	-349, -205, 2, -389, 165, -387, 10, -386, 5, 4,
	-391, -394, -392, 2, -184, -175, 2, -196, -384, 2,
	-215, 165, -200, -201, -205, 382, 455, -251, -208, -209,
	-244, -175, 453, -316, 2, -97, 2, -316, 165, 2,
	-97, 165, 2, -316, 165, 2, -97, 165, 2, 2,
	2, 388, 2, 80, 165, -175, 369, 95, 2, 307,
	-454, 323, 392, 416, 2, 2, 2, 2, 2, 2,
	2, 369, 332, -465, 296, -189, 2, -175, 147, -389,
	165, 2, -389, 165, 2, -203, -205, -203, 179, 196,
	-184, 165, 2, 373, 371, 373, 371, 150, 2, 195,
	2, 195, 2, -350, 2, -351, -200, 2, 2, 2,
	2, 2, 165, -175, 369, 95, 2, 211, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -253, 165, 2,
	-200, -253, 165, 2, -253, 165, 2, -216, 165, 2,
	-215, -184, 165, 2, -390, 165, 2, -389, -390, 165,
	2, -358, 2, -357, -386, 412, -79, 451, 340, 451,
	-389, -200, -200, -316, -97, 150, -316, -97, -149, 147,
	2, 96, 369, -137, 2, 147, 407, 2, 8, 2,
	-389, 327, 293, 139, 2, 344, 2, 62, -290, 428,
	150, 2, 150, 2, -274, 2, 422, -442, 2, 257,
	150, 2, 150, 2, 150, 2, 150, 2, 150, 2,
	290, 341, 202, 2, -97, -316, 2, 385, 210, 124,
	150, -274, 2, 150, 2, 150, 2, 5, 2, 200,
	287, 357, 2, -200, -458, 2, 369, 416, 332, 2,
	2, 73, 74, 150, 2, 150, 428, 2, -268, -349,
	-303, -304, -303, 382, -180, -471, -239, -240, -137, 344,
	2, 2, -471, -267, -292, -293, 222, 134, 253, -273,
	26, 109, -273, -273, 49, 452, 452, 11, 12, 64,
	37, 442, 443, 444, 445, 145, 446, 447, 440, 441,
	439, 432, 433, 436, 206, 207, 79, 435, 434, 72,
	229, 322, 135, 136, 137, 138, 304, 176, 177, 178,
	14, 15, 16, 30, 262, 221, 429, 169, 347, 437,
	17, 18, 19, 197, 199, 247, 41, 172, -181, -217,
	-316, -316, -316, -316, -316, 268, 451, -265, -311, 449,
	-152, 451, 451, 451, 5, 451, 5, -380, 8, -152,
	-316, -329, 452, -257, 451, -152, -329, -324, 451, 320,
	449, 451, -332, -316, 453, -425, 423, -365, 451, 284,
	-364, 451, -364, -364, 417, -362, 451, 430, 424, 451,
	-362, 451, 451, 147, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 417, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 455, -423, -236,
	451, -261, -352, -316, 444, -261, -261, 257, -254, -316,
	84, -277, 203, 240, 151, 218, 315, 184, -380, -80,
	-66, -77, -85, -97, -110, -141, -142, -313, 456, -340,
	430, -152, -346, -199, -152, -348, 451, -345, -340, 444,
	-200, 451, 150, 451, 453, 150, -244, -384, -184, -200,
	-210, -211, 108, -254, -439, -244, -179, 34, -326, -359,
	-360, -373, -361, -370, -366, -369, 300, 301, 299, 303,
	302, 45, 51, 50, 376, 238, 334, 335, 350, 336,
	337, 43, 408, 175, 254, 256, 187, 4, 44, 413,
	-372, 194, 186, 192, 188, 349, 189, 190, 191, 42,
	295, 143, 144, 142, 112, 101, 100, 250, 47, 46,
	98, 378, 379, 380, 381, 204, 205, 414, 360, 58,
	59, -439, -244, 147, -383, -254, 34, -304, 2, -469,
	455, 220, -219, 228, 244, 162, 258, 426, 251, -388,
	5, 4, -325, -337, 102, 224, -369, 9, 443, -377,
	8, 442, -382, -381, 86, 453, -384, -161, 305, -160,
	23, 27, 113, 410, 125, -226, 181, 274, 120, 353,
	401, -446, -447, 325, 374, 375, 75, 251, 305, 120,
	-270, -272, 34, 94, 242, 270, 52, 173, 233, 234,
	355, 418, 120, 305, 422, 120, -447, 305, -447, -163,
	353, 401, -446, -447, 325, 305, -162, -226, 120, 456,
	-94, -389, 451, -251, 455, 455, -384, 444, 120, 120,
	120, 120, 2, 2, 245, 2, 2, 2, 152, -457,
	-455, 2, 2, 2, -200, 165, -202, 165, 2, -205,
	416, -238, 257, -441, -252, 369, -200, -171, -420, 422,
	245, 245, 34, 451, 2, -186, 165, 2, -176, -175,
	179, -420, 245, -350, -213, -200, -213, 343, -193, 34,
	-313, 120, 2, 2, 2, -175, -164, 455, 54, 311,
	120, -164, 120, -164, 120, -164, 455, 120, -164, 120,
	455, 120, 120, 452, 455, -358, -389, -147, 422, 150,
	83, 451, 451, -149, -95, -94, -389, -441, -184, 2,
	-200, 2, 369, 204, -389, -389, -389, -383, 26, 345,
	2, 290, 341, 74, -200, 369, 96, 179, 68, -443,
	147, -440, 316, -439, -200, 96, -200, 96, -200, 96,
	-200, -200, 2, 2, 2, 2, 147, 2, 385, 2,
	385, 2, -175, -175, -175, 220, -200, 147, 369, 179,
	96, 369, -164, 455, -180, -471, -267, -383, -471, -293,
	-292, -295, -316, 26, -298, 141, 241, -316, -318, -151,
	-151, -151, -241, -342, -316, 286, 179, -374, -359, -359,
	-198, -384, 378, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, 221, 169,
	347, 41, 172, -316, 382, -316, -316, -316, -316, 237,
	245, 248, 390, 132, 399, 109, 251, -474, 365, 36,
	-322, -152, -258, 451, -336, 31, 352, 26, -329, 451,
	2, -311, -316, -312, -255, -254, -254, 452, 415, 26,
	109, 444, 2, 8, -285, -287, 427, 236, 99, 164,
	235, -286, 330, 452, 455, 34, 452, -316, -255, -328,
	-324, -254, -335, -334, 419, -384, 444, -426, 140, 157,
	8, -378, 8, -378, 378, 378, 8, -378, -378, 451,
	452, 2, 452, 2, 452, 2, 452, 2, 452, 2,
	-316, -316, -316, -316, -316, -316, -316, -254, -279, 2,
	-375, -254, 4, 427, 236, 99, 164, 235, 330, -279,
	2, -280, 2, -316, -254, -281, -317, -318, 442, 443,
	437, -329, -282, 2, -316, -255, -316, 48, 215, 384,
	-283, -316, 150, -254, -254, 2, -254, 2, -424, 34,
	-254, -247, 455, 150, 34, 4, -247, -247, 451, 452,
	455, -278, 161, 232, 227, -278, -345, -277, 203, -275,
	266, -275, -275, -437, 451, 450, 454, 454, 454, 454,
	454, -340, -185, 449, 457, -384, -339, -338, 34, -193,
	264, -340, -340, 453, 452, -339, -200, 451, -254, -384,
	358, 452, 453, 197, 197, 197, 321, 452, 382, 422,
	-79, 259, 452, 455, -246, 33, 449, -287, 451, -376,
	417, 451, 451, 150, -245, -449, 452, 386, -305, -218,
	294, 351, 306, 338, 367, 9, 8, 8, 455, -384,
	455, -450, 77, 382, 66, -307, 165, 66, -398, -187,
	77, -399, -175, 61, 398, 286, 149, -450, 77, -450,
	77, 77, 343, 356, 49, -349, 37, 37, 26, -97,
	216, 150, 428, 369, 179, 382, -349, -272, -359, 94,
	233, 234, 49, -379, -377, 443, -379, 49, -379, -379,
	-379, 422, -202, -349, 382, 276, -389, 382, 455, 37,
	37, 26, -97, 216, 150, 382, -215, -185, -355, -354,
	-390, -208, -175, 453, -316, -97, -316, -97, 120, 2,
	-465, 211, 451, -222, 245, -271, -270, 245, -204, 2,
	-200, 150, -244, -356, 195, 455, -252, 276, 120, 120,
	451, 117, 292, 2, 257, 245, -186, 165, -167, 372,
	120, -310, -309, 420, -299, -97, 451, 102, 34, -299,
	-262, -263, -353, -264, -187, 451, -193, -175, 2, -200,
	-253, -253, -253, -215, -216, -184, -389, -390, -390, -79,
	-357, 452, 452, -146, 261, -145, -175, 5, -149, 407,
	-221, -308, -307, -402, -403, -398, 221, 179, 398, 196,
	133, -237, -188, -187, 95, -147, -354, 455, -147, -147,
	-355, -355, -200, 147, 2, 2, -274, -200, -184, -215,
	-244, -244, -184, -184, -184, 340, 147, 147, 453, -274,
	292, 96, 369, 274, 179, -200, -215, -184, -200, -349,
	-471, -296, -377, 451, -297, 320, 321, 455, -159, 35,
	107, 208, -200, 428, 118, -316, -316, 382, -474, 365,
	-322, 118, -316, 237, 248, 390, 132, 399, 109, 251,
	150, 451, -317, -317, 452, -256, -316, -316, 450, 459,
	452, -240, 455, -239, -316, -254, -254, 452, 452, 382,
	382, 382, 382, 451, 453, -254, -244, 450, 450, 455,
	452, -333, -334, 114, -316, 453, -431, 267, 451, 451,
	452, 452, 455, 452, 428, 428, 452, 452, 452, -316,
	34, 455, 455, 455, 452, 455, 455, 455, 452, 452,
	150, 452, 452, -288, 279, 452, 11, 12, 442, 443,
	444, 445, 145, 446, 447, 440, 441, 439, 432, 433,
	434, 72, 229, 322, 14, 15, 16, 197, 172, -317,
	-317, -317, 452, -320, -321, 150, 147, 34, -283, -283,
	-283, 452, 150, -254, 452, 452, 451, 452, -310, -352,
	-248, 2, -345, -195, -384, -310, -310, -254, -316, 203,
	203, -276, 407, 257, -278, -345, -338, 452, -438, -380,
	-340, -339, -380, -315, -314, 148, 35, 107, 243, 168,
	-193, -236, -339, -339, -384, -340, 452, -249, -347, -419,
	-240, 453, -384, -138, 5, 248, -138, -138, -244, 24,
	280, -359, 449, 450, 8, 8, 451, -378, -378, -244,
	150, -381, -304, 396, 70, 294, 378, -381, -160, 305,
	-187, -187, -200, 245, -307, 165, -166, 245, -359, -194,
	-175, 451, 451, 208, 208, -187, -194, 165, -187, 165,
	-194, -194, -445, 294, 252, -316, 223, 292, 246, -161,
	305, -97, -97, -97, 451, -449, 407, 108, -200, -215,
	-204, 305, -210, -379, -379, -270, 305, -202, -389, 422,
	-184, -162, -97, -97, -97, 451, -185, -163, 305, -144,
	174, 452, 444, -175, 416, -175, -220, -223, -221, -187,
	-459, 424, 422, 120, 120, -236, -214, -200, 449, -147,
	-389, -200, -389, -389, -389, 2, 451, 2, -200, 120,
	257, 245, -168, 115, -470, 434, -184, -240, -316, -269,
	-302, 313, 257, -237, 412, -193, -269, -250, 455, 150,
	434, 453, -237, 2, -164, -164, -164, -164, -164, -79,
	-147, 455, 451, 434, 434, 451, -389, -389, 452, 455,
	-200, -186, 179, 179, -192, -176, 452, 455, 453, 451,
	-147, -94, 150, -44, 422, 369, 340, 340, -175, -196,
	-184, -200, -197, -215, -297, -316, -342, -200, 456, -316,
	-316, 118, 118, -316, -317, -317, -316, 118, 150, 451,
	-316, -326, 30, 30, 452, 455, -312, -316, 452, 415,
	-240, -240, 452, 5, 236, 164, 235, -286, 235, -286,
	-286, 8, 444, -384, 452, -324, 116, -316, 377, -384,
	444, -432, -190, 451, -175, 420, -239, -378, -362, -362,
	452, -374, -359, -316, -316, -316, -316, -316, -316, -320,
	-316, -374, -359, -317, -317, -317, -317, -317, -317, -317,
	-317, -317, -317, -317, -317, -317, -317, -317, -317, -317,
	-317, -317, 109, 245, 251, -317, -321, -320, -316, -316,
	-359, 452, 452, 452, -254, -79, -266, 157, -355, 455,
	-266, -266, 452, -345, -345, 451, -316, 203, 450, 452,
	455, -339, 450, 455, 458, 434, -236, 453, -338, 452,
	455, -301, 34, 452, -384, 260, 5, 8, 449, 450,
	452, -378, 452, 452, -244, -316, 382, 382, 120, 245,
	409, -404, -399, -316, -242, -343, -316, 451, 451, -158,
	113, 343, -451, 2, 120, -164, 120, -164, 426, 451,
	451, 382, 422, -254, -316, -148, 102, -383, -447, -447,
	382, 382, 276, 422, -254, 382, -147, 150, 2, 2,
	2, 452, 452, 455, -405, 34, 255, -175, -200, -202,
	34, -62, 422, -354, -380, -171, 2, -291, 407, -185,
	-200, 120, -169, 214, -470, -387, -420, -294, -292, -269,
	-261, 246, 76, 452, -310, -263, -248, -316, 2, 452,
	-145, -146, -389, -389, -389, -147, -149, -149, -308, 2,
	451, -186, -176, 451, -149, -188, 2, -390, -97, 261,
	-200, -274, -228, -227, 274, 251, -228, 258, 452, -159,
	-185, -316, -316, 118, 30, 30, -316, -316, -326, 452,
	-316, -316, -254, 450, 5, -316, 452, 452, 452, -316,
	453, -433, -175, -316, 452, 452, 452, 452, 455, 455,
	452, 452, 452, 452, -321, 150, 109, 251, 451, 452,
	452, -323, 160, 49, -345, -323, -323, -276, -244, -345,
	-313, -380, -314, -185, 449, -384, -347, 451, 453, 450,
	2, 449, 452, -187, -187, -307, 120, -406, 77, -408,
	64, 133, 83, 245, 248, 398, 286, 61, 102, 298,
	34, 452, 452, 455, -159, -242, -244, 245, 362, 102,
	245, 102, 95, 393, -187, -194, -244, -244, -200, 126,
	452, 455, 434, -204, -202, -389, 126, 452, -185, -390,
	-224, 182, -187, -403, -400, -401, 286, -407, -409, 133,
	286, -97, 2, 451, -222, -271, -97, 261, 450, 451,
	-175, 257, 451, -185, -170, 213, -470, -387, -167, -269,
	-300, 451, 257, -97, -240, 434, 452, 452, 95, 95,
	-242, 451, 451, -244, 95, 452, -45, -46, 179, 77,
	278, -197, 369, 179, -159, -316, -316, -316, 452, -240,
	-384, 444, -427, 274, 452, -316, -316, -317, 150, 451,
	-326, -428, 421, -316, -254, -428, -428, 452, -340, -380,
	2, 449, 2, -307, -194, -198, -191, -175, 133, 165,
	248, 208, 451, -317, -200, 451, 2, -461, 104, 183,
	-306, -462, 82, 363, -343, 452, 452, 248, 248, -316,
	-359, -164, -164, 452, 452, -316, 382, -383, 81, -381,
	-316, 382, -225, -226, 172, -405, 208, -191, 208, -460,
	422, -220, -459, -63, -64, 383, -354, -242, -200, -242,
	257, -470, -387, -168, 110, -244, 77, -294, -322, -147,
	451, 451, 452, -242, -242, 452, 451, -147, 455, 26,
	451, 26, 451, -200, -215, 452, -240, 49, 452, 452,
	-317, -326, 452, -429, -430, -190, -339, 450, 2, -408,
	-191, 245, -316, -177, 451, -316, 183, 105, 170, -224,
	451, 298, -183, 64, 451, 451, 451, 434, 150, 451,
	-459, 272, 451, 95, 242, 452, 34, -64, 9, 452,
	-291, 452, -200, -387, -169, 402, 246, 452, -194, -269,
	-390, -390, -306, 452, 452, -390, -46, -244, -244, -434,
	292, 321, 159, -254, 452, 455, 34, 120, 452, -410,
	230, -175, 452, 105, 170, -225, -244, -200, -448, 407,
	-198, -230, -229, -227, -232, -231, -227, -254, -381, 81,
	272, -254, -200, -243, -344, -187, 95, -224, -97, -306,
	451, -306, 451, -170, 343, -309, 452, 452, -224, -306,
	452, 452, 452, 452, -435, -436, 41, 395, 86, -316,
	-435, -435, -430, -432, 133, -411, -414, -413, 257, 348,
	151, 273, 452, 362, 418, -461, 452, -236, -316, 452,
	455, 412, 452, 455, 412, 452, 150, 452, 451, 452,
	455, -225, -460, -224, -242, -224, -242, -262, -147, -147,
	-225, -224, -147, -436, 283, 146, 320, 283, 146, -191,
	-413, 257, -414, 257, 402, 106, -410, -229, 172, -231,
	150, 272, -244, -344, -459, -225, 452, -225, 452, -310,
	-225, 30, -412, 242, 311, 54, 343, -412, -411, 451,
	451, 452, -466, 420, -306, -466, -306, -436, 22, 248,
	102, -461, -254, -254, -165, 54, 311, 2, -224, -224,
	452, 452, -225, -225, -225, 382, -466, -466, 451, -254,
	452, -225,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 359, 360, 362,
	363, 364, 366, 367, 369, 371, 373, 375, 376, 378,
	380, 382, 383, 384, 385, 386, 388, 390, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 450,
	0, 911, 913, 915, 917, 25, 26, 0, 0, 184,
	186, 188, 0, 213, 215, 217, 218, 220, -2, 0,
	313, 314, 316, 318, -2, -2, 0, 0, 437, 439,
	0, 0, 0, 459, 460, 0, 1001, -2, 453, 455,
	457, 520, 522, 524, 526, 528, 530, 532, 533, 535,
	537, 539, 541, 543, 545, 547, 549, 551, 553, 555,
	557, 559, 561, 563, 565, 567, 569, -2, -2, -2,
	0, -2, -2, -2, 929, 29, 31, 33, 35, 37,
	39, 58, 269, 270, 272, 274, 276, 279, 280, 282,
	1040, 320, 322, 324, 326, 328, 0, -2, 1052, 0,
	0, 41, 42, 43, 44, 45, 46, 47, 48, 65,
	66, 67, 68, 69, 70, 71, 72, 51, 53, 54,
	60, 61, 63, 0, 0, 1016, 1018, 1020, 1022, -2,
	0, 0, 7, 9, 11, 13, 15, 17, 19, 21,
	361, 365, 368, 370, 372, 374, 377, 379, 381, 387,
	389, 391, 806, 1644, 1658, 1659, 1660, 1663, 1664, 1665,
	1666, 1667, 1668, 1998, 2078, 2079, 1687, 1688, 1689, 1690,
	1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	0, 415, 413, 1638, 416, 1834, 418, 420, 307, 308,
	309, 310, 311, 312, 0, 430, 424, 429, 431, 433,
	434, 435, 436, 410, 408, 0, 430, 1690, 428, 909,
	910, 904, 905, 1867, 939, 449, -2, -2, -2, 1967,
	-2, 481, -2, 488, 1970, 1869, 491, 0, 493, -2,
	496, 912, 914, 916, 27, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, -2, -2, -2, -2,
	0, 0, 1725, 1614, 1660, 1617, 1612, 185, 187, 189,
	190, 0, 0, 0, 0, 0, 0, 214, 216, 219,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 862,
	0, 0, 0, 0, 0, 0, 0, 0, 713, 714,
	0, 0, 719, 857, 858, 879, 0, 0, 0, 0,
	315, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 0, 0, 0, 247, 353,
	354, 0, 1041, 0, 0, 0, 0, 165, 156, 0,
	0, 702, 438, 440, 0, 151, 0, 0, 908, 0,
	167, 0, 0, 454, 456, 458, 521, 523, 525, 527,
	529, 531, 534, 536, 538, 540, 542, 544, 546, 548,
	550, 552, 554, 556, 558, 560, 562, 564, 566, 568,
	570, 571, 0, 0, 0, 0, -2, -2, 0, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 0, 574, 576, 577, 578, 0, 625, 640,
	0, 848, 1042, 941, 919, 932, 941, 921, 922, 923,
	924, 925, 930, 931, 934, 0, 926, 927, 928, 30,
	32, 34, 36, 38, 40, 271, 273, 275, 277, 281,
	283, -2, 1014, 1015, 321, 323, 325, 327, 329, 441,
	0, 443, 0, 575, 1005, 0, -2, 0, 1046, 1046,
	1046, 0, 0, 1015, 1013, 0, 446, 447, 500, 501,
	1277, 0, 0, 0, 0, 0, 1512, 1361, 0, 502,
	-2, 1392, 1394, 1946, 1967, 1511, 1396, 1397, 1398, 1399,
	1400, 0, 0, 1403, 0, 1405, 1406, 1407, 1408, 0,
	1410, 0, 1414, 1415, 1416, 0, 1951, 1591, 1656, -2,
	1182, 1183, 1184, 1185, 1186, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1652, 0, 1483, 1430, -2, 1677, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1734, -2, -2, -2, -2, -2, -2, -2, 1238,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1981,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 0,
	1935, 1952, 1953, 1958, 1960, 1954, 1943, 1453, -2, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1994, 1995, 1996, 1239, -2, 1947, 1948, 1963, 1964,
	1969, 1974, 1975, 1950, 1959, -2, -2, 1032, 1842, 1035,
	806, 1033, 1017, 1019, 0, 1021, 0, 0, 0, 1026,
	1049, 1047, 0, 1083, 1030, 1031, 1041, 1101, 1124, 0,
	1106, 0, 1124, 1150, 0, 1111, 1862, 1431, 1432, 0,
	1660, 1657, -2, 0, 0, 0, 0, 0, 0, 210,
	411, 0, 417, 419, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 451, 452, 0, 476, 0, 480, 1942,
	-2, -2, 484, 942, 946, 947, 948, 949, 0, 0,
	0, 0, 0, 490, 0, 0, 477, 478, 494, 497,
	0, 49, 0, 1952, 1150, 50, 0, 1628, 1682, 1683,
	1684, 1685, 1686, 1981, 1997, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,
	2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
	2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
	2074, 2075, 2076, 2077, 52, 0, 1952, 55, 0, 1952,
	0, -2, 59, 0, 1952, 168, 169, 1673, 1674, 1678,
	1679, 1680, 1681, 62, 0, 1634, 64, 0, 1631, 73,
	0, 1952, 0, 1611, -2, 0, 0, 694, 1608, 1613,
	695, 1618, 0, 191, 192, 193, 194, 195, 1952, 197,
	198, 0, 200, 201, 1952, 203, 204, 0, 206, 222,
	223, 0, 225, 0, 1952, 0, 0, 0, 231, -2,
	248, 0, 245, 0, 235, 236, 238, 239, 240, 241,
	242, 0, 0, 0, 863, 287, 285, 1639, 0, -2,
	1952, 851, 854, 1952, 856, 868, 1642, 0, -2, 0,
	1039, 1952, 956, 715, 716, 717, 718, 0, 306, 0,
	969, 0, 971, 0, 991, 1156, 1101, 249, 250, 251,
	252, 253, 1952, 0, 0, 0, 258, 0, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 144, 1952, 332,
	351, 144, 1952, 335, 144, 1952, 338, 144, 1952, 341,
	1606, 144, 1952, 344, 345, 1952, 347, 170, 348, 1952,
	350, 0, -2, 404, 1646, -2, 356, 0, -2, 0,
	182, 0, 0, 700, 701, 0, 906, 907, 0, 0,
	461, 0, 0, 572, 573, 0, 0, 583, 584, 585,
	586, 1870, 1840, 1749, 590, 0, 593, -2, 0, 0,
	0, 597, 0, 601, 602, 603, 0, 699, 605, 0,
	0, 607, 0, 611, 0, 614, 0, 616, 0, 618,
	-2, -2, -2, 629, -2, 632, 633, 0, 0, 0,
	0, 648, 649, 0, 654, 0, 657, 658, 659, 0,
	661, 662, 663, 664, 0, 666, 667, -2, -2, 671,
	673, 0, 680, 0, 685, 0, 579, 580, 144, 1154,
	918, -2, 920, 0, 936, 1008, -2, 0, 442, 0,
	445, 1012, 1006, 1011, 1061, 1062, 0, 0, 0, 0,
	1044, 1045, 0, 0, 0, 1003, 1004, 0, 0, 0,
	0, 1517, 1518, 1519, 1520, 1521, 1522, 1525, 1526, 1523,
	1524, 1527, 1528, 0, 0, 0, 0, 0, 1529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1530, 1531, 1532, 0, 0, 1534, 0, 1536, 0, 0,
	0, 0, 0, 0, 1340, 1342, 1599, 0, 0, 1533,
	1282, 1283, 1284, 1319, 1320, 0, 0, 1393, 1596, 1595,
	1395, 0, 1548, 0, 1402, 0, 1274, 1409, 1625, -2,
	0, 1512, 1543, 0, 0, 1417, 1418, 1419, 0, 0,
	1548, 0, 0, 1590, 0, 1485, 0, 1218, 0, 1219,
	1220, 0, 1221, 1222, 1235, 1248, 0, 0, 0, 0,
	1252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1240, 0, 0,
	0, 1571, -2, 0, 0, 0, 0, 0, 1034, 0,
	0, 1087, 1600, 1604, 1605, 1087, 1087, 0, 0, 1549,
	1147, 1147, 0, 0, 1143, 1143, 1143, 1141, 1118, 0,
	392, 394, 396, 398, 399, 400, 402, 1124, 0, 1134,
	0, 1124, 1124, 0, -2, 1106, 0, 0, 1134, 1151,
	1152, 0, 0, 0, 0, 0, 0, 1661, 0, 0,
	0, 1648, 0, 0, 0, 422, 432, 1041, 0, 1551,
	1173, 1167, 1176, 1177, 1178, 1179, 1225, 1226, 1227, 1228,
	1229, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, -2, 1236,
	1238, 1259, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 1231, 0, 1206, 1206, 1206, 1223, 1224,
	1247, 1258, 1250, 1258, 1254, 1174, 1175, 1241, 1242, 1243,
	1244, 0, 426, 0, 0, 0, 0, -2, 486, 0,
	944, 0, 950, 511, 512, 513, 952, 953, 0, 489,
	514, 515, 516, 517, 518, 519, 0, 823, 0, 825,
	1620, 0, 487, 504, 492, 0, 498, 74, 901, 110,
	0, 901, 901, 0, 0, 131, 0, 0, 0, 0,
	0, 0, 98, 106, 86, 87, 0, 0, 0, 0,
	56, 831, 0, 834, 0, 0, 0, 0, 0, 0,
	0, 846, 0, 0, 0, 0, 97, 0, 92, 76,
	0, 0, 0, 100, 108, 0, 135, 137, 0, 0,
	1137, 152, 0, 693, 0, 0, 1661, 1616, 0, 0,
	0, 0, 224, 226, 0, 228, 229, 230, 0, 862,
	0, 237, 234, 278, 780, 1952, 830, 1952, 828, 1643,
	0, 0, 0, 304, 299, 0, 301, 849, 0, 1038,
	0, 0, 0, 0, 869, 0, 1952, 874, 1630, 1669,
	1670, 958, 0, 1162, 0, 972, 0, 0, 1157, 0,
	1159, 0, 255, 256, 257, 0, 330, 0, 142, 143,
	0, 333, 0, 336, 0, 339, 0, 0, 342, 0,
	0, 0, 0, 1041, 0, 0, 0, 158, 0, 0,
	0, 0, 0, 0, 182, 154, 182, 182, 1137, 463,
	1137, 465, 0, 0, 587, 588, 589, 591, 592, 594,
	595, -2, -2, 681, 651, 0, 0, 0, 650, 604,
	0, 687, 1858, 697, 606, 1725, 609, 1725, 612, 1725,
	615, 617, 620, 643, 628, 631, 0, 635, 0, 637,
	0, 639, 651, 652, 655, 660, 665, 0, 0, 0,
	0, 0, 847, 0, 935, 1009, 1011, 444, 1007, 1059,
	1060, 1065, 1069, 1070, 1073, 1076, 1077, 1067, 1277, 1027,
	1028, 1029, 1053, 1054, 888, 0, 2078, 1278, 1168, 1279,
	1280, 1627, 0, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, -2, -2, -2, -2, -2, -2, -2,
	-2, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, -2, -2, -2, 1317, 1318, -2, 1535, 1537,
	0, 1599, 0, -2, 0, -2, -2, -2, -2, 1337,
	0, 1339, 1344, 1346, 1348, 0, 0, 0, 0, 1598,
	1358, 1582, 1583, 0, 0, 1514, 1515, 1516, 1343, 0,
	1362, 1597, 1594, 0, 0, 1547, 1052, 1421, 0, 0,
	0, 0, 1428, 0, 1626, 1273, 1260, 1261, 1262, 1263,
	1264, 1265, 1275, 1413, 1545, 0, 1544, 0, 0, 0,
	1555, 0, 1589, 1585, 0, 1649, 1655, 1493, 0, 0,
	0, 0, 1623, 0, 0, 0, 0, 0, 0, 0,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1558, -2, -2, -2, -2, -2, -2, -2, 0,
	1467, 0, 1469, 1549, 1568, 0, 0, 1363, 0, 0,
	0, 1512, 0, 1472, 1549, 1576, 0, 0, 0, 0,
	0, 1549, 0, 1581, 0, 1479, 0, 1481, 1036, 0,
	0, 1162, 0, 0, 0, 1603, 1162, 1162, 0, 1082,
	0, 0, 1144, 1145, 1146, 0, 0, 1147, 0, 1138,
	1142, 1139, 1140, 0, 0, 1124, 393, 395, 397, 401,
	403, 1134, 1098, 0, 0, 1629, 1104, 1133, 0, 806,
	1123, 1134, 1134, 0, -2, 1108, 0, 0, 1052, -2,
	183, 805, 0, 0, 0, 0, 412, 414, 0, 0,
	406, 0, 409, 0, 1163, 1166, 0, 1180, 0, 0,
	-2, 0, 0, 0, 0, 0, 479, 0, 943, 951,
	0, 508, 0, 510, 0, 824, 1622, 1621, 0, 499,
	0, 0, 0, 0, 900, 114, 1952, 0, 146, 0,
	0, 774, 1635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 88,
	0, 0, 0, 0, 0, 0, 0, 832, 833, 835,
	841, 843, 0, 837, 1624, 0, 838, 0, 840, 842,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 89, 0, 0, 0, 0, 1610, 173, 1136,
	0, 1609, 1619, 0, 196, 199, 202, 205, 0, 232,
	0, 0, 722, 705, 0, 826, 829, 0, 806, 861,
	1641, 0, 286, 182, 0, 0, 300, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 1952, 960, 966,
	0, 1052, 1161, 0, 989, 974, 0, 0, 0, 989,
	993, 994, 996, 997, 0, 0, 1158, 0, 259, 352,
	144, 144, 144, 1607, 144, 144, 171, 346, 349, 355,
	405, 1041, 182, 180, 1820, 178, 175, 177, 0, 0,
	0, 723, 725, 726, 727, 728, 0, 1670, 0, 1778,
	1670, 0, 977, 979, 0, 149, 182, 0, 0, 298,
	462, 467, 581, 0, 622, 645, 596, 598, 599, 600,
	698, 696, 608, 610, 613, 634, 0, 0, 0, 647,
	0, 0, 0, 0, 0, 682, 683, 684, 686, 1155,
	1010, 0, 1071, 0, 1068, 1074, 1075, 0, 1056, 886,
	887, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1359, 0, -2, 1338, 1341, 1345, 1347, 1349, 0, 0,
	0, 0, 0, 0, 1538, 0, 1540, 1360, 1592, 1595,
	1510, 0, 0, 1051, 1052, 1052, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 1546, 0, 1553, 1554, 0,
	1420, 0, 1586, 0, 0, 0, 1429, 0, 0, 0,
	1230, 1204, 0, 1258, 1256, 1257, 1251, 1258, 1255, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 1452, 1464,
	0, 1466, 1468, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1366,
	1367, 1368, 1471, 1574, 1575, 0, 0, 0, 0, 0,
	0, 1477, 0, 1580, 1478, 1480, 1041, 1084, 1079, 1601,
	1137, 1086, 1088, 1602, 1632, 1079, 1079, 0, 1550, 0,
	0, 1128, 0, 0, 0, 1130, 0, 1119, 0, 1121,
	1134, 1103, 0, 0, 1096, 0, 1092, 1093, 1094, 1095,
	806, 1132, 1105, 1109, 1649, 0, 1153, 0, 1113, 1116,
	0, 0, 1662, 207, 211, 212, 208, 209, 421, 0,
	0, 1552, 0, 1169, 0, 0, 0, 0, 0, 425,
	0, 475, -2, 506, 507, 509, 0, 505, 111, 901,
	0, 0, 892, 0, 116, 1952, 125, 0, 751, 0,
	1633, 0, 0, 0, 0, 903, 0, 1952, 144, 1952,
	144, 127, 130, 0, 134, 132, 0, 0, 742, 75,
	901, 78, 82, 90, 0, 0, 0, 96, 0, 0,
	894, 0, 836, 839, 845, 57, 0, 896, 890, 0,
	889, 136, 80, 84, 91, 0, 898, 77, 0, 182,
	0, 153, 1615, 0, 0, 0, 0, 0, 721, 791,
	0, 0, 0, 0, 0, 0, 292, 288, 0, 297,
	303, 302, 852, -2, 855, 864, 0, 866, 878, 0,
	0, 0, 962, 966, 0, 965, 1039, 1064, 1160, 967,
	989, 0, 0, 0, 976, 973, 970, 1162, 0, 0,
	0, 0, 0, 254, 331, 334, 337, 340, 343, 357,
	157, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 1670, 1670, 0, 1637, 0, 0, 0, 0,
	150, 155, 0, 464, 0, 0, 636, 638, 651, 674,
	675, 737, 0, 737, 0, 0, 1055, 888, 0, 1281,
	1322, 0, 0, -2, 0, 0, 1326, 0, 0, 0,
	-2, 0, 0, 0, 1539, 1541, 0, 1594, 1422, 0,
	0, 0, 1426, 1404, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 0, 1411, 1412, 1513, 1556, 1584, 1588, 0, 1650,
	1654, 1491, 1492, 1496, 1640, 0, 0, 0, 1249, 1253,
	1433, 0, 0, 0, 0, 0, 0, 0, 1557, 1567,
	1569, 1364, 1365, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, -2, -2, -2, 1382, 1383, 1384, -2,
	-2, -2, 0, 0, 0, 1570, 1572, 1573, 1577, 1578,
	0, 1474, 1475, 1476, 1579, 0, 1081, 0, 1085, 0,
	1081, 1081, 1048, 1126, 0, 0, 1149, 0, 1101, 1120,
	0, 1110, 1099, 0, 1100, 0, 1131, 0, 1107, 1112,
	0, 1115, 0, 1422, -2, 423, 407, 0, 0, 1171,
	1181, 0, 1233, 1237, 427, 1135, 0, 0, 0, 0,
	145, 749, 773, 0, 0, 881, 888, 0, 0, 118,
	0, 0, 0, 126, 0, 123, 0, 129, 133, 0,
	0, 0, 0, 0, 93, 94, 95, 0, 99, 101,
	0, 0, 0, 0, 0, 0, 147, 0, 227, 860,
	233, 731, 779, 0, 781, 0, 706, 0, 780, 830,
	0, 284, 0, 291, 0, 850, 865, 0, 0, 0,
	0, 0, 964, 966, 0, 957, 958, 989, 1063, 968,
	987, -2, 986, 0, 1052, 995, 992, 998, 999, 0,
	179, 0, 174, 176, 0, 160, 0, 0, 724, 729,
	0, 0, 0, 0, 0, 978, 980, 0, 166, 0,
	582, 646, 676, 736, 0, 0, 678, 1066, 1072, 1057,
	888, 1324, 1328, 0, 0, 0, 1330, -2, 0, 1352,
	-2, -2, 1542, 1593, 1401, 1052, 1423, 1425, 1276, 1587,
	0, 1498, 1495, 0, 1482, 1205, 1443, 1444, 0, 0,
	1447, 1449, 1450, 1451, 1566, 0, 0, 0, 0, 1473,
	1037, 1487, 0, 0, 1089, 1487, 1487, 1127, 0, 1129,
	1124, 1122, 1097, 1090, 0, 1650, 1114, 0, 0, 1164,
	1170, 0, 1232, 112, 113, 115, 0, 750, 0, 753,
	0, 0, 0, 0, 760, 761, 0, 0, 0, 0,
	0, 795, 804, 0, 883, 0, 0, 0, 120, 139,
	0, 0, 902, 0, 144, 144, 0, 0, 893, 0,
	0, 0, 0, 895, 897, 891, 0, 0, 899, 172,
	739, 0, 791, 783, 784, 785, 0, 790, 792, 0,
	0, 710, 707, 722, 705, 827, 859, 0, 289, 0,
	877, 0, 0, 0, 954, 966, 0, 959, 960, 305,
	0, 0, 0, 975, 1064, 0, 181, 182, 0, 0,
	0, 0, 0, 0, 0, 182, 466, 468, 0, 0,
	474, 735, 0, 0, 1058, 1332, -2, -2, 1353, 0,
	1651, 1653, 1052, 0, 1484, 0, 0, -2, 0, 0,
	0, 1023, 0, 1080, 1078, 1024, 1025, 1148, 1134, 0,
	1117, 0, 1172, 117, 0, 754, 755, 1636, 757, 0,
	759, 762, 0, 764, 1672, 0, 768, 775, 796, 0,
	731, 0, 801, 802, 882, 777, 0, 119, 121, 138,
	885, 122, 128, 0, 0, 79, 0, 0, 1719, 103,
	81, 0, 705, 738, 0, 782, 0, 793, 794, 708,
	0, 0, 0, 290, 293, 0, 296, 0, 878, 0,
	0, 0, 961, 962, 0, 0, 0, 989, 1000, 159,
	0, 0, 804, 0, 0, 772, 0, 164, 0, 470,
	0, 472, 0, 677, 679, 1424, 1502, 0, 1445, 1446,
	-2, 0, 1390, 1486, 1488, 0, 1102, 1091, 1165, 752,
	756, 0, 0, 810, 0, 0, 0, 799, 800, 739,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	703, 0, 0, 711, 0, 731, 0, 294, 295, 804,
	0, 804, 0, 963, 964, 0, 982, 983, 985, 990,
	0, 0, 731, 804, 771, 0, 469, 0, 0, 0,
	0, 0, 0, 1497, 1391, 0, 0, 0, 763, 815,
	0, 0, 0, 797, 798, 795, 0, 806, 124, 0,
	884, 0, 743, 0, 0, 746, 0, 0, 104, 1719,
	102, 0, 0, 0, 787, 789, 712, 739, 710, 731,
	0, 731, 0, 955, 0, 984, 182, 182, 739, 731,
	182, 471, 473, 1494, 1499, 1503, -2, 1915, 1722, 0,
	1500, 1501, 1489, 1490, 0, 765, 811, 812, 0, 807,
	808, 809, 1671, 766, 767, 776, 803, 810, 140, 740,
	0, 0, 741, 0, 0, 107, 0, 109, 0, 786,
	0, 705, 709, 739, 0, 739, 0, 1162, 161, 162,
	769, 739, 163, 0, 1505, 1506, 1507, 1508, 1509, 758,
	813, 0, 814, 0, 0, 0, 815, 744, 0, 747,
	0, 105, 0, 788, 704, 875, 804, 875, 804, 981,
	770, 0, 816, 0, 819, 820, 0, 817, 795, 0,
	0, 734, 870, 0, 731, 872, 731, 1504, 818, 821,
	822, 778, 0, 0, 730, 732, 733, 876, 739, 739,
	739, 0, 875, 875, 745, 0, 871, 873, 0, 0,
	739, 748,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 440, 3, 446, 441, 3,
	451, 452, 444, 442, 455, 443, 453, 445, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 459, 3,
	432, 434, 433, 436, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 449, 3, 450, 447, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 457, 439, 458, 437,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 435,
	57775, 438, 57776, 448, 57777, 454, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1062
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1076
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1077
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1078
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1082
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1098
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1166
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1181
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1185
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1189
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1212
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1231
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1264
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1268
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1278
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1282
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1288
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1297
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1308
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1312
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1318
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1326
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1340
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1350
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1361
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1368
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1380
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1395
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1404
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1415
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1423
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1432
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1444
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1452
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1481
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1486
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1501
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1507
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1523
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1528
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1533
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1548
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1553
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1558
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1563
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1568
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1589
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1606
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1609
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1639
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1646
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1654
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1655
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1687
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1716
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1742
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1745
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1775
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1836
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1845
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1851
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1856
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1861
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1866
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1871
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1875
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1891
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1894
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1902
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1910
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1930
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1942
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1948
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1966
		{
			sqlVAL.union.val = nil
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1972
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1985
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1986
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1987
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1988
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1998
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2006
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2008
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2011
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2044
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2066
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2080
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2087
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2091
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2095
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2110
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2116
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2121
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2133
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2136
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2137
		{
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2138
		{
			return helpWith(sqllex, "CREATE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2141
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2142
		{
			return unimplemented(sqllex, "create cast")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2143
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2145
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2146
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2147
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2148
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2151
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2154
		{
			return unimplemented(sqllex, "create operator")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			return unimplemented(sqllex, "create publication")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2156
		{
			return unimplemented(sqllex, "create rule")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2157
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return unimplemented(sqllex, "create server")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2159
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2164
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2165
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2168
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2169
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2172
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2173
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2176
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2177
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2178
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2179
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2180
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2181
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2182
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2183
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2184
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2186
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2187
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2188
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "drop server")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2195
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2199
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2200
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2204
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2205
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2207
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2217
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2225
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2233
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2239
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2259
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2265
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2271
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2275
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2306
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2314
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2324
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2334
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2345
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2349
		{

			sqlVAL.union.val = nil
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2363
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2373
		{
			return helpWith(sqllex, "DELETE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2383
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2384
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2385
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2386
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2387
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2396
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2397
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2398
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2399
		{
			return helpWith(sqllex, "DROP")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2402
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2403
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2404
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2405
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2406
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2414
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2421
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2429
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2433
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2436
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2444
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2451
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2459
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2482
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2490
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2497
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2505
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2531
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2536
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2562
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2564
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2568
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2579
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2583
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2586
		{
			return helpWith(sqllex, "DELETE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2588
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2589
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2590
		{
			return helpWith(sqllex, "INSERT")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2591
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2593
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2594
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2595
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2598
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2603
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2604
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2605
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2610
		{
			return helpWith(sqllex, "DELETE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2611
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2612
		{
			return helpWith(sqllex, "INSERT")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2614
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2618
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2623
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2645
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2657
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2661
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2671
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2678
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2690
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2694
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2708
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2716
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2719
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2739
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2743
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2774
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2778
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2786
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2790
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2800
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2818
		{
			return helpWith(sqllex, "RESET")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2819
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2827
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2831
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2834
		{
			return helpWith(sqllex, "RESET")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2845
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2859
		{
			return helpWith(sqllex, "USE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2864
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2865
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2866
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2870
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2871
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2872
		{
			return helpWith(sqllex, "USE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2903
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2906
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2924
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2936
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2946
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2968
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2983
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2986
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2996
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3012
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3021
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3043
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3050
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3069
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3076
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3082
		{
			return unimplemented(sqllex, "set from current")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3083
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3091
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3096
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3103
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3107
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3113
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3124
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3155
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3159
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3163
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3171
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3177
		{
			sqlVAL.union.val = tree.Low
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3181
		{
			sqlVAL.union.val = tree.Normal
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3185
		{
			sqlVAL.union.val = tree.High
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3196
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3200
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3204
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3209
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3213
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3227
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3228
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3229
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3231
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3233
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3234
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3235
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3236
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3237
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3239
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3240
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3243
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3244
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3245
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3246
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3247
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3249
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3250
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3259
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3261
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3272
		{
			sqlVAL.str = "client_encoding"
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3275
		{
			sqlVAL.str = "timezone"
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3276
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3294
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3309
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3325
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3340
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3348
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3365
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3369
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3372
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3385
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3396
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.unresolvedObjectName().String(), IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].str, IsDB: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3404
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.newTableIndexName().String(), IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3415
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3418
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3431
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3439
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3447
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3450
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3452
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3456
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3472
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3480
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3483
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3496
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3499
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3501
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3504
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3508
		{
			sqlVAL.union.val = true
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3510
		{
			sqlVAL.union.val = true
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = false
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3522
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3529
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3530
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3532
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3535
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3544
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3556
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3558
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3563
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3567
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3570
		{
			sqlVAL.union.val = true
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3571
		{
			sqlVAL.union.val = false
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3579
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3582
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3584
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3587
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3595
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3605
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3615
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3618
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = true
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = false
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3629
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3633
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3643
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3647
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3650
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3657
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3661
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3669
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3674
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3679
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3683
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3691
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3695
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3699
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3712
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3715
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3723
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3726
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3730
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3734
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3738
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3746
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3754
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3761
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3768
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3772
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3783
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3788
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3792
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: sqlDollar[5].str}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3795
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3799
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3806
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3811
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3931
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3935
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3939
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3978
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3982
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3987
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3991
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4000
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4007
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4011
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4023
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4032
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4035
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4071
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4083
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4096
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4097
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4098
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4102
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4113
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4125
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4126
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4127
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4141
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4142
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4143
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4144
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4145
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4146
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4147
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4148
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4153
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4159
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4169
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4175
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4178
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4182
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4191
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4198
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4203
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4208
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4214
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.str = ""
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4228
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4234
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4241
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4248
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4254
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4258
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4264
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4274
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4284
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4298
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4313
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4319
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4323
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4327
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4331
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4335
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4339
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4343
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4361
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4365
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4369
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4373
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4377
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4381
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4385
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4399
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 769:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4410
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4420
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4432
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4442
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4459
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4465
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4471
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4482
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4492
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4506
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4510
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4516
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4526
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4541
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4554
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4565
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4581
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4585
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4591
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4595
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4601
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4606
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4607
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4608
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4609
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4610
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4611
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4628
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4632
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4638
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4642
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4670
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4674
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4683
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4687
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4691
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4695
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4699
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4705
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4711
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4719
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4723
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4727
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4731
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4735
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4741
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4745
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4770
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4775
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4779
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4783
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4790
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4791
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4794
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4795
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4798
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4800
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4802
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4805
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4807
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4808
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4810
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4812
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4820
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4823
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4831
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4835
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4838
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4842
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4846
		{
			sqlVAL.union.val = nil
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4856
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4860
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4863
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4868
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4869
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4877
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4885
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4886
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4889
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4890
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4896
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4898
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4900
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4902
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4904
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4906
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4922
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4936
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4951
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4965
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4979
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4982
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4983
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4987
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5002
		{
			sqlVAL.union.val = false
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5008
		{
			sqlVAL.union.val = true
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5012
		{
			sqlVAL.union.val = false
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5018
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5031
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5042
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5043
		{
			sqlVAL.str = ""
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5047
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5051
		{
			sqlVAL.union.val = tree.Descending
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 889:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5061
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5072
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5078
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5084
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5092
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5098
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5106
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5112
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5120
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5124
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5129
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5130
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5133
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5134
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5142
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5145
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5164
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5167
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5175
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5178
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5182
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5183
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5184
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5200
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5203
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5205
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5208
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5218
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5221
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5223
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5226
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5230
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5235
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5236
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5237
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5245
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5252
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5255
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5256
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5260
		{
			sqlVAL.str = ""
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5264
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5268
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5272
		{
			sqlVAL.str = ""
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5278
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5282
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5288
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5292
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5298
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5302
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5315
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5317
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5321
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5326
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5330
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5334
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5340
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5346
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5356
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 954:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5366
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5376
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5386
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5390
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5394
		{
			sqlVAL.str = ""
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5400
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5404
		{
			sqlVAL.str = ""
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5410
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5414
		{
			sqlVAL.str = ""
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5424
		{
			sqlVAL.str = ""
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5429
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5430
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5442
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5449
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5456
		{
			return helpWith(sqllex, "INSERT")
		}
	case 970:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5467
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5474
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5478
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5487
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5494
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5498
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5502
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5508
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5532
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 981:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5536
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5540
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5546
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5549
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5550
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5552
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5558
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5563
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5567
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 990:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5584
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5596
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5599
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5608
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5612
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5625
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5628
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5675
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5681
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5685
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5700
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5704
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5712
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5716
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5720
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5725
		{
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5726
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5731
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5766
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5767
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5768
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5803
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5817
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5829
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5833
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5842
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5851
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5866
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5873
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5885
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5889
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5893
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5897
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5907
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5915
		{
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5916
		{
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5920
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5924
		{
			sqlVAL.union.val = nil
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5929
		{
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5930
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = true
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = false
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5942
		{
			sqlVAL.union.val = false
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5948
		{
			sqlVAL.union.val = true
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5954
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5959
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5960
		{
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5964
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5968
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5974
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5980
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5984
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5990
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5994
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5999
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6014
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6034
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6038
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6053
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6060
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6067
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6076
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6080
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6090
		{
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6091
		{
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6094
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6095
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6116
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6122
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6145
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6148
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6150
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6162
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6165
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6167
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6173
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6177
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6183
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6187
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6192
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6197
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6208
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6215
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6220
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6231
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6239
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6247
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6278
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6292
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6310
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6319
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6327
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6338
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6362
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6384
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6390
		{
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6392
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6395
		{
			sqlVAL.union.val = nil
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6396
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6397
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6401
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6405
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6411
		{
			sqlVAL.union.val = true
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6415
		{
			sqlVAL.union.val = false
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6435
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6439
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6443
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6447
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6451
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6465
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6472
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6491
		{
			sqlVAL.str = tree.AstFull
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.str = tree.AstRight
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.str = tree.AstInner
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6509
		{
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6510
		{
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6531
		{
			sqlVAL.str = tree.AstHash
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6535
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6539
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6543
		{
			sqlVAL.str = ""
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6556
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6560
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6565
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6566
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6568
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6572
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6577
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6591
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6595
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6601
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6609
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6619
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6638
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6651
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6659
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6660
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6668
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6674
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6682
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6684
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6692
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6693
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6704
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6705
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6722
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6726
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6734
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6738
		{
			sqlVAL.union.val = types.String
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6742
		{
			sqlVAL.union.val = types.Name
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6746
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6755
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6759
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6763
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6767
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6771
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6775
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6779
		{
			sqlVAL.union.val = types.INet
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6783
		{
			sqlVAL.union.val = types.Oid
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6787
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6791
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6795
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6826
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6834
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = nil
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6849
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6857
		{
			sqlVAL.union.val = types.Int2
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6861
		{
			sqlVAL.union.val = types.Int2
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6865
		{
			sqlVAL.union.val = types.Int4
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6869
		{
			sqlVAL.union.val = types.Int
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6873
		{
			sqlVAL.union.val = types.Int
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6877
		{
			sqlVAL.union.val = types.Int
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6881
		{
			sqlVAL.union.val = types.Float4
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6885
		{
			sqlVAL.union.val = types.Float4
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6889
		{
			sqlVAL.union.val = types.Float
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6893
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6897
		{
			sqlVAL.union.val = types.Float
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6901
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6909
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6917
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6925
		{
			sqlVAL.union.val = types.Bool
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6929
		{
			sqlVAL.union.val = types.Bool
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = types.RegType
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6958
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6971
		{
			sqlVAL.union.val = types.Float
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6977
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6983
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6991
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6995
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6999
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7005
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7031
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7035
		{
			sqlVAL.union.val = types.String
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = true
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = false
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7050
		{
			sqlVAL.union.val = types.Date
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7054
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7059
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7066
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7067
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7069
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7077
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7093
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7102
		{
			sqlVAL.union.val = true
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = false
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = false
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7108
		{
			sqlVAL.union.val = types.Interval
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7114
		{
			sqlVAL.union.val = tree.Year
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7118
		{
			sqlVAL.union.val = tree.Month
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7122
		{
			sqlVAL.union.val = tree.Day
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7126
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7130
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7134
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7140
		{
			sqlVAL.union.val = tree.Month
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7144
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7148
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7152
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7156
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7160
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7164
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = nil
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = tree.Second
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7180
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7204
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7208
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7212
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7216
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7227
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7232
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7236
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7240
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7244
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7248
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7252
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7256
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7268
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7284
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7288
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7292
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7348
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7471
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7537
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7559
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7571
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7575
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7579
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7583
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7587
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7591
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7595
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7599
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7607
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7611
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7615
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7619
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7623
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7627
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7631
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7635
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7639
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7643
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7647
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7655
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7659
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7663
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7667
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7693
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7701
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7737
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7745
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7749
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7753
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7758
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7760
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7764
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7767
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7777
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7781
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7785
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7794
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7801
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7805
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7833
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7837
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7841
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7844
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7845
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7860
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7871
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7878
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7915
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7919
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7925
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7929
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7933
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7937
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7941
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7983
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7988
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7993
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7995
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7998
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8000
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8003
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8008
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8013
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8018
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8020
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8024
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8027
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8028
		{
			return unimplemented(sqllex, "treat")
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8049
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8054
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8059
		{
			return unimplemented(sqllex, "within group")
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8060
		{
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8095
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.str = ""
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8144
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8148
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8180
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8186
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8199
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8239
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8273
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = tree.Any
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8289
		{
			sqlVAL.union.val = tree.Some
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8293
		{
			sqlVAL.union.val = tree.All
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8301
		{
			sqlVAL.union.val = tree.Div
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8303
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8307
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = tree.LT
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = tree.GT
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8310
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8311
		{
			sqlVAL.union.val = tree.LE
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = tree.GE
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = tree.NE
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = tree.Like
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8320
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8347
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8357
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8361
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8372
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8409
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8419
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8443
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8465
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8469
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8529
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8541
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8545
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8549
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8555
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8574
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8590
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8601
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8607
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8618
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8624
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8628
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8633
		{
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8634
		{
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8638
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8642
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8648
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8657
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8661
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8665
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8673
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8677
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8683
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8706
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8714
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8737
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8754
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8758
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8764
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8776
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8780
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8789
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8800
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8809
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8817
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8914
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8921
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8925
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8929
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8943
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8947
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8951
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8964
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8982
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8995
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9002
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9027
		{
			sqlVAL.str = ""
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9033
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9037
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
