// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:55
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:564
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8531

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	426, 57,
	-2, 908,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	170, 743,
	-2, 0,
	-1, 60,
	102, 908,
	176, 908,
	374, 908,
	375, 908,
	-2, 0,
	-1, 74,
	115, 882,
	128, 882,
	184, 882,
	211, 882,
	239, 882,
	247, 882,
	371, 882,
	-2, 871,
	-1, 108,
	120, 553,
	200, 553,
	361, 553,
	-2, 0,
	-1, 113,
	4, 910,
	20, 910,
	21, 910,
	22, 910,
	23, 910,
	25, 910,
	30, 910,
	35, 910,
	36, 910,
	37, 910,
	38, 910,
	39, 910,
	40, 910,
	41, 910,
	42, 910,
	43, 910,
	44, 910,
	46, 910,
	47, 910,
	48, 910,
	49, 910,
	50, 910,
	51, 910,
	52, 910,
	55, 910,
	56, 910,
	57, 910,
	58, 910,
	60, 910,
	61, 910,
	65, 910,
	66, 910,
	67, 910,
	68, 910,
	69, 910,
	71, 910,
	72, 910,
	73, 910,
	74, 910,
	76, 910,
	78, 910,
	79, 910,
	82, 910,
	83, 910,
	91, 910,
	92, 910,
	93, 910,
	94, 910,
	95, 910,
	96, 910,
	97, 910,
	98, 910,
	100, 910,
	102, 910,
	104, 910,
	107, 910,
	108, 910,
	109, 910,
	111, 910,
	113, 910,
	114, 910,
	116, 910,
	117, 910,
	118, 910,
	119, 910,
	120, 910,
	121, 910,
	122, 910,
	123, 910,
	124, 910,
	125, 910,
	133, 910,
	134, 910,
	135, 910,
	136, 910,
	137, 910,
	138, 910,
	140, 910,
	142, 910,
	146, 910,
	148, 910,
	149, 910,
	151, 910,
	152, 910,
	154, 910,
	155, 910,
	156, 910,
	157, 910,
	158, 910,
	159, 910,
	160, 910,
	161, 910,
	162, 910,
	165, 910,
	166, 910,
	171, 910,
	172, 910,
	173, 910,
	176, 910,
	177, 910,
	178, 910,
	179, 910,
	180, 910,
	181, 910,
	182, 910,
	183, 910,
	185, 910,
	187, 910,
	190, 910,
	191, 910,
	192, 910,
	194, 910,
	195, 910,
	198, 910,
	199, 910,
	200, 910,
	202, 910,
	203, 910,
	205, 910,
	206, 910,
	208, 910,
	209, 910,
	212, 910,
	213, 910,
	216, 910,
	218, 910,
	221, 910,
	222, 910,
	223, 910,
	224, 910,
	225, 910,
	227, 910,
	228, 910,
	229, 910,
	230, 910,
	235, 910,
	236, 910,
	237, 910,
	238, 910,
	240, 910,
	241, 910,
	243, 910,
	244, 910,
	245, 910,
	248, 910,
	249, 910,
	251, 910,
	253, 910,
	254, 910,
	255, 910,
	256, 910,
	257, 910,
	258, 910,
	259, 910,
	260, 910,
	262, 910,
	263, 910,
	264, 910,
	265, 910,
	266, 910,
	268, 910,
	269, 910,
	270, 910,
	271, 910,
	272, 910,
	273, 910,
	274, 910,
	275, 910,
	276, 910,
	278, 910,
	279, 910,
	280, 910,
	281, 910,
	282, 910,
	284, 910,
	285, 910,
	286, 910,
	287, 910,
	288, 910,
	289, 910,
	290, 910,
	292, 910,
	294, 910,
	295, 910,
	296, 910,
	297, 910,
	298, 910,
	299, 910,
	301, 910,
	302, 910,
	303, 910,
	304, 910,
	305, 910,
	306, 910,
	307, 910,
	309, 910,
	310, 910,
	311, 910,
	312, 910,
	313, 910,
	314, 910,
	315, 910,
	316, 910,
	317, 910,
	319, 910,
	320, 910,
	321, 910,
	322, 910,
	324, 910,
	325, 910,
	326, 910,
	327, 910,
	329, 910,
	330, 910,
	331, 910,
	332, 910,
	333, 910,
	334, 910,
	335, 910,
	336, 910,
	337, 910,
	338, 910,
	339, 910,
	340, 910,
	342, 910,
	343, 910,
	345, 910,
	346, 910,
	347, 910,
	348, 910,
	349, 910,
	350, 910,
	351, 910,
	352, 910,
	353, 910,
	355, 910,
	356, 910,
	357, 910,
	358, 910,
	361, 910,
	362, 910,
	363, 910,
	364, 910,
	366, 910,
	367, 910,
	369, 910,
	370, 910,
	373, 910,
	374, 910,
	375, 910,
	376, 910,
	378, 910,
	380, 910,
	381, 910,
	382, 910,
	383, 910,
	384, 910,
	385, 910,
	387, 910,
	388, 910,
	389, 910,
	394, 910,
	395, 910,
	396, 910,
	397, 910,
	398, 910,
	399, 910,
	-2, 0,
	-1, 135,
	115, 881,
	128, 881,
	184, 881,
	211, 881,
	239, 881,
	247, 881,
	371, 881,
	-2, 874,
	-1, 140,
	1, 804,
	190, 804,
	268, 804,
	273, 804,
	425, 804,
	426, 804,
	-2, 0,
	-1, 142,
	1, 804,
	425, 804,
	426, 804,
	-2, 0,
	-1, 143,
	1, 804,
	425, 804,
	426, 804,
	-2, 0,
	-1, 144,
	1, 808,
	425, 808,
	426, 808,
	-2, 0,
	-1, 172,
	4, 917,
	5, 917,
	6, 917,
	7, 917,
	8, 917,
	9, 917,
	20, 917,
	21, 917,
	22, 917,
	23, 917,
	25, 917,
	30, 917,
	31, 917,
	35, 917,
	36, 917,
	37, 917,
	38, 917,
	39, 917,
	40, 917,
	41, 917,
	42, 917,
	43, 917,
	44, 917,
	46, 917,
	47, 917,
	48, 917,
	49, 917,
	50, 917,
	51, 917,
	52, 917,
	53, 917,
	54, 917,
	55, 917,
	56, 917,
	57, 917,
	58, 917,
	60, 917,
	61, 917,
	63, 917,
	65, 917,
	66, 917,
	67, 917,
	68, 917,
	69, 917,
	71, 917,
	72, 917,
	73, 917,
	74, 917,
	76, 917,
	78, 917,
	79, 917,
	81, 917,
	82, 917,
	83, 917,
	84, 917,
	85, 917,
	86, 917,
	87, 917,
	88, 917,
	89, 917,
	90, 917,
	91, 917,
	92, 917,
	93, 917,
	94, 917,
	95, 917,
	96, 917,
	97, 917,
	98, 917,
	99, 917,
	100, 917,
	102, 917,
	104, 917,
	107, 917,
	108, 917,
	109, 917,
	111, 917,
	113, 917,
	114, 917,
	116, 917,
	117, 917,
	118, 917,
	119, 917,
	120, 917,
	121, 917,
	122, 917,
	123, 917,
	124, 917,
	125, 917,
	126, 917,
	127, 917,
	133, 917,
	134, 917,
	135, 917,
	136, 917,
	137, 917,
	138, 917,
	140, 917,
	142, 917,
	145, 917,
	146, 917,
	148, 917,
	149, 917,
	151, 917,
	152, 917,
	154, 917,
	155, 917,
	156, 917,
	157, 917,
	158, 917,
	159, 917,
	160, 917,
	161, 917,
	162, 917,
	163, 917,
	165, 917,
	166, 917,
	171, 917,
	172, 917,
	173, 917,
	175, 917,
	176, 917,
	177, 917,
	178, 917,
	179, 917,
	180, 917,
	181, 917,
	182, 917,
	183, 917,
	185, 917,
	187, 917,
	188, 917,
	189, 917,
	190, 917,
	191, 917,
	192, 917,
	193, 917,
	194, 917,
	195, 917,
	198, 917,
	199, 917,
	200, 917,
	202, 917,
	203, 917,
	205, 917,
	206, 917,
	207, 917,
	208, 917,
	209, 917,
	210, 917,
	212, 917,
	213, 917,
	216, 917,
	218, 917,
	219, 917,
	220, 917,
	221, 917,
	222, 917,
	223, 917,
	224, 917,
	225, 917,
	226, 917,
	227, 917,
	228, 917,
	229, 917,
	230, 917,
	231, 917,
	233, 917,
	234, 917,
	235, 917,
	236, 917,
	237, 917,
	238, 917,
	240, 917,
	241, 917,
	244, 917,
	245, 917,
	248, 917,
	249, 917,
	250, 917,
	251, 917,
	252, 917,
	253, 917,
	254, 917,
	255, 917,
	256, 917,
	257, 917,
	258, 917,
	259, 917,
	260, 917,
	262, 917,
	263, 917,
	264, 917,
	265, 917,
	266, 917,
	268, 917,
	269, 917,
	270, 917,
	271, 917,
	272, 917,
	273, 917,
	274, 917,
	275, 917,
	276, 917,
	278, 917,
	279, 917,
	280, 917,
	281, 917,
	282, 917,
	284, 917,
	285, 917,
	286, 917,
	287, 917,
	288, 917,
	289, 917,
	290, 917,
	292, 917,
	293, 917,
	294, 917,
	295, 917,
	296, 917,
	297, 917,
	298, 917,
	299, 917,
	301, 917,
	302, 917,
	303, 917,
	304, 917,
	305, 917,
	306, 917,
	307, 917,
	309, 917,
	310, 917,
	311, 917,
	312, 917,
	313, 917,
	314, 917,
	315, 917,
	316, 917,
	317, 917,
	318, 917,
	319, 917,
	320, 917,
	321, 917,
	322, 917,
	323, 917,
	324, 917,
	325, 917,
	326, 917,
	327, 917,
	329, 917,
	330, 917,
	331, 917,
	332, 917,
	333, 917,
	334, 917,
	335, 917,
	336, 917,
	337, 917,
	338, 917,
	339, 917,
	340, 917,
	342, 917,
	343, 917,
	345, 917,
	346, 917,
	347, 917,
	348, 917,
	349, 917,
	350, 917,
	351, 917,
	352, 917,
	353, 917,
	355, 917,
	356, 917,
	357, 917,
	358, 917,
	361, 917,
	362, 917,
	363, 917,
	364, 917,
	365, 917,
	366, 917,
	367, 917,
	369, 917,
	370, 917,
	373, 917,
	374, 917,
	375, 917,
	376, 917,
	377, 917,
	378, 917,
	380, 917,
	381, 917,
	382, 917,
	383, 917,
	384, 917,
	385, 917,
	387, 917,
	388, 917,
	389, 917,
	394, 917,
	395, 917,
	396, 917,
	397, 917,
	398, 917,
	399, 917,
	400, 917,
	408, 917,
	413, 917,
	414, 917,
	415, 917,
	422, 917,
	428, 917,
	-2, 0,
	-1, 175,
	1, 57,
	426, 57,
	-2, 908,
	-1, 208,
	424, 1507,
	427, 1507,
	-2, 596,
	-1, 209,
	424, 1509,
	427, 1509,
	-2, 597,
	-1, 210,
	424, 1508,
	427, 1508,
	-2, 598,
	-1, 211,
	427, 1459,
	-2, 599,
	-1, 626,
	144, 1627,
	359, 1627,
	405, 1627,
	424, 1627,
	-2, 0,
	-1, 627,
	144, 1547,
	359, 1547,
	405, 1547,
	424, 1547,
	-2, 0,
	-1, 629,
	144, 1700,
	359, 1700,
	405, 1700,
	424, 1700,
	-2, 0,
	-1, 631,
	144, 1728,
	359, 1728,
	405, 1728,
	424, 1728,
	-2, 0,
	-1, 638,
	144, 1632,
	359, 1632,
	405, 1632,
	424, 1632,
	-2, 430,
	-1, 671,
	1, 526,
	421, 526,
	423, 526,
	425, 526,
	426, 526,
	-2, 0,
	-1, 672,
	1, 595,
	141, 595,
	421, 595,
	423, 595,
	425, 595,
	426, 595,
	-2, 0,
	-1, 678,
	1, 540,
	421, 540,
	423, 540,
	425, 540,
	426, 540,
	-2, 0,
	-1, 680,
	1, 544,
	421, 544,
	423, 544,
	425, 544,
	426, 544,
	-2, 0,
	-1, 682,
	1, 554,
	421, 554,
	423, 554,
	425, 554,
	426, 554,
	-2, 0,
	-1, 683,
	1, 560,
	421, 560,
	423, 560,
	425, 560,
	426, 560,
	-2, 0,
	-1, 684,
	1, 563,
	421, 563,
	423, 563,
	425, 563,
	426, 563,
	-2, 0,
	-1, 688,
	1, 577,
	421, 577,
	423, 577,
	425, 577,
	426, 577,
	-2, 0,
	-1, 689,
	1, 579,
	421, 579,
	423, 579,
	425, 579,
	426, 579,
	-2, 0,
	-1, 717,
	128, 921,
	211, 921,
	239, 921,
	-2, 877,
	-1, 725,
	128, 920,
	211, 920,
	239, 920,
	-2, 875,
	-1, 752,
	422, 1804,
	-2, 1209,
	-1, 753,
	422, 1805,
	-2, 1210,
	-1, 780,
	422, 1501,
	-2, 1492,
	-1, 786,
	5, 1043,
	-2, 1537,
	-1, 787,
	5, 1044,
	-2, 1542,
	-1, 788,
	5, 1045,
	-2, 1541,
	-1, 789,
	5, 1046,
	-2, 1725,
	-1, 790,
	5, 1047,
	-2, 1634,
	-1, 791,
	5, 1048,
	-2, 1693,
	-1, 792,
	5, 1049,
	-2, 1695,
	-1, 793,
	5, 1050,
	-2, 1696,
	-1, 794,
	5, 1051,
	-2, 1697,
	-1, 795,
	5, 1052,
	-2, 1705,
	-1, 796,
	5, 1053,
	-2, 1736,
	-1, 797,
	5, 1054,
	-2, 1603,
	-1, 798,
	5, 1055,
	-2, 1536,
	-1, 799,
	5, 1056,
	-2, 1641,
	-1, 800,
	5, 1057,
	-2, 1642,
	-1, 801,
	5, 1058,
	-2, 1607,
	-1, 802,
	5, 1059,
	422, 1516,
	-2, 1507,
	-1, 803,
	5, 1107,
	422, 1107,
	-2, 1771,
	-1, 808,
	422, 1517,
	-2, 1508,
	-1, 810,
	5, 1063,
	-2, 1769,
	-1, 811,
	5, 1064,
	-2, 1606,
	-1, 812,
	5, 1065,
	-2, 1608,
	-1, 813,
	5, 1066,
	-2, 1609,
	-1, 814,
	5, 1067,
	-2, 1610,
	-1, 815,
	5, 1068,
	-2, 1770,
	-1, 816,
	5, 1069,
	-2, 1782,
	-1, 817,
	5, 1070,
	-2, 1751,
	-1, 818,
	5, 1071,
	-2, 1780,
	-1, 819,
	5, 1072,
	-2, 1589,
	-1, 820,
	5, 1073,
	-2, 1590,
	-1, 821,
	5, 1087,
	-2, 1763,
	-1, 823,
	5, 1062,
	-2, 1759,
	-1, 824,
	5, 1062,
	-2, 1758,
	-1, 825,
	5, 1062,
	-2, 1775,
	-1, 826,
	5, 1079,
	-2, 1753,
	-1, 827,
	5, 1080,
	-2, 1538,
	-1, 828,
	5, 1097,
	-2, 1752,
	-1, 830,
	5, 1098,
	-2, 1566,
	-1, 831,
	5, 1099,
	-2, 1784,
	-1, 832,
	5, 1101,
	-2, 1785,
	-1, 833,
	5, 1103,
	-2, 1786,
	-1, 834,
	5, 1105,
	-2, 1726,
	-1, 835,
	5, 1031,
	-2, 1616,
	-1, 836,
	5, 1032,
	-2, 1617,
	-1, 856,
	5, 1095,
	-2, 1715,
	-1, 873,
	5, 1097,
	-2, 1755,
	-1, 874,
	5, 1097,
	-2, 1754,
	-1, 875,
	5, 1094,
	-2, 1790,
	-1, 936,
	422, 1516,
	-2, 1507,
	-1, 951,
	284, 1489,
	415, 1489,
	-2, 1488,
	-1, 1100,
	258, 906,
	-2, 722,
	-1, 1112,
	242, 1511,
	-2, 0,
	-1, 1155,
	1, 297,
	421, 297,
	425, 297,
	426, 297,
	-2, 880,
	-1, 1158,
	4, 1789,
	10, 1789,
	11, 1789,
	13, 1789,
	14, 1789,
	15, 1789,
	16, 1789,
	17, 1789,
	18, 1789,
	20, 1789,
	21, 1789,
	22, 1789,
	23, 1789,
	25, 1789,
	28, 1789,
	30, 1789,
	32, 1789,
	35, 1789,
	36, 1789,
	37, 1789,
	38, 1789,
	39, 1789,
	40, 1789,
	41, 1789,
	42, 1789,
	43, 1789,
	44, 1789,
	46, 1789,
	47, 1789,
	48, 1789,
	49, 1789,
	50, 1789,
	51, 1789,
	52, 1789,
	55, 1789,
	56, 1789,
	57, 1789,
	58, 1789,
	60, 1789,
	61, 1789,
	62, 1789,
	65, 1789,
	66, 1789,
	67, 1789,
	68, 1789,
	69, 1789,
	70, 1789,
	71, 1789,
	72, 1789,
	73, 1789,
	74, 1789,
	76, 1789,
	77, 1789,
	78, 1789,
	79, 1789,
	81, 1789,
	82, 1789,
	83, 1789,
	91, 1789,
	92, 1789,
	93, 1789,
	94, 1789,
	95, 1789,
	96, 1789,
	97, 1789,
	98, 1789,
	100, 1789,
	102, 1789,
	104, 1789,
	107, 1789,
	108, 1789,
	109, 1789,
	111, 1789,
	113, 1789,
	114, 1789,
	116, 1789,
	117, 1789,
	118, 1789,
	119, 1789,
	120, 1789,
	121, 1789,
	122, 1789,
	123, 1789,
	124, 1789,
	125, 1789,
	129, 1789,
	130, 1789,
	131, 1789,
	132, 1789,
	133, 1789,
	134, 1789,
	135, 1789,
	136, 1789,
	137, 1789,
	138, 1789,
	139, 1789,
	140, 1789,
	142, 1789,
	145, 1789,
	146, 1789,
	148, 1789,
	149, 1789,
	151, 1789,
	152, 1789,
	154, 1789,
	155, 1789,
	156, 1789,
	157, 1789,
	158, 1789,
	159, 1789,
	160, 1789,
	161, 1789,
	162, 1789,
	163, 1789,
	164, 1789,
	165, 1789,
	166, 1789,
	167, 1789,
	168, 1789,
	169, 1789,
	171, 1789,
	172, 1789,
	173, 1789,
	175, 1789,
	176, 1789,
	177, 1789,
	178, 1789,
	179, 1789,
	180, 1789,
	181, 1789,
	182, 1789,
	183, 1789,
	185, 1789,
	187, 1789,
	188, 1789,
	189, 1789,
	190, 1789,
	191, 1789,
	192, 1789,
	193, 1789,
	194, 1789,
	195, 1789,
	196, 1789,
	197, 1789,
	198, 1789,
	199, 1789,
	200, 1789,
	202, 1789,
	203, 1789,
	205, 1789,
	206, 1789,
	207, 1789,
	208, 1789,
	209, 1789,
	210, 1789,
	212, 1789,
	213, 1789,
	216, 1789,
	217, 1789,
	218, 1789,
	221, 1789,
	222, 1789,
	223, 1789,
	224, 1789,
	225, 1789,
	226, 1789,
	227, 1789,
	228, 1789,
	229, 1789,
	230, 1789,
	233, 1789,
	235, 1789,
	236, 1789,
	237, 1789,
	238, 1789,
	240, 1789,
	241, 1789,
	244, 1789,
	245, 1789,
	246, 1789,
	248, 1789,
	249, 1789,
	251, 1789,
	253, 1789,
	254, 1789,
	255, 1789,
	256, 1789,
	257, 1789,
	258, 1789,
	259, 1789,
	260, 1789,
	262, 1789,
	263, 1789,
	264, 1789,
	265, 1789,
	266, 1789,
	268, 1789,
	269, 1789,
	270, 1789,
	271, 1789,
	272, 1789,
	273, 1789,
	274, 1789,
	275, 1789,
	276, 1789,
	278, 1789,
	279, 1789,
	280, 1789,
	281, 1789,
	282, 1789,
	283, 1789,
	284, 1789,
	285, 1789,
	286, 1789,
	287, 1789,
	288, 1789,
	289, 1789,
	290, 1789,
	292, 1789,
	293, 1789,
	294, 1789,
	295, 1789,
	296, 1789,
	297, 1789,
	298, 1789,
	299, 1789,
	300, 1789,
	301, 1789,
	302, 1789,
	303, 1789,
	304, 1789,
	305, 1789,
	306, 1789,
	307, 1789,
	309, 1789,
	310, 1789,
	311, 1789,
	312, 1789,
	313, 1789,
	314, 1789,
	315, 1789,
	316, 1789,
	317, 1789,
	319, 1789,
	320, 1789,
	321, 1789,
	322, 1789,
	323, 1789,
	324, 1789,
	325, 1789,
	326, 1789,
	327, 1789,
	329, 1789,
	330, 1789,
	331, 1789,
	332, 1789,
	333, 1789,
	334, 1789,
	335, 1789,
	336, 1789,
	337, 1789,
	338, 1789,
	339, 1789,
	340, 1789,
	342, 1789,
	343, 1789,
	345, 1789,
	346, 1789,
	347, 1789,
	348, 1789,
	349, 1789,
	350, 1789,
	351, 1789,
	352, 1789,
	353, 1789,
	355, 1789,
	356, 1789,
	357, 1789,
	358, 1789,
	361, 1789,
	362, 1789,
	363, 1789,
	364, 1789,
	366, 1789,
	367, 1789,
	369, 1789,
	370, 1789,
	373, 1789,
	374, 1789,
	375, 1789,
	376, 1789,
	378, 1789,
	380, 1789,
	381, 1789,
	382, 1789,
	383, 1789,
	384, 1789,
	385, 1789,
	387, 1789,
	388, 1789,
	389, 1789,
	394, 1789,
	395, 1789,
	396, 1789,
	397, 1789,
	398, 1789,
	399, 1789,
	400, 1789,
	401, 1789,
	403, 1789,
	404, 1789,
	405, 1789,
	406, 1789,
	407, 1789,
	408, 1789,
	410, 1789,
	411, 1789,
	412, 1789,
	413, 1789,
	414, 1789,
	415, 1789,
	416, 1789,
	417, 1789,
	418, 1789,
	420, 1789,
	423, 1789,
	424, 1789,
	427, 1789,
	428, 1789,
	-2, 0,
	-1, 1177,
	144, 1700,
	359, 1700,
	405, 1700,
	424, 1700,
	-2, 0,
	-1, 1206,
	144, 1728,
	359, 1728,
	405, 1728,
	424, 1728,
	-2, 0,
	-1, 1207,
	190, 816,
	268, 816,
	273, 816,
	-2, 417,
	-1, 1278,
	1, 1743,
	421, 1743,
	423, 1743,
	424, 1743,
	425, 1743,
	426, 1743,
	-2, 575,
	-1, 1279,
	1, 1698,
	421, 1698,
	423, 1698,
	424, 1698,
	425, 1698,
	426, 1698,
	-2, 576,
	-1, 1289,
	128, 920,
	211, 920,
	239, 920,
	-2, 878,
	-1, 1379,
	115, 882,
	128, 882,
	184, 882,
	211, 882,
	239, 882,
	247, 882,
	371, 882,
	-2, 1262,
	-1, 1431,
	423, 1394,
	-2, 0,
	-1, 1435,
	190, 816,
	268, 816,
	273, 816,
	-2, 811,
	-1, 1469,
	115, 882,
	128, 882,
	184, 882,
	211, 882,
	239, 882,
	247, 882,
	371, 882,
	-2, 990,
	-1, 1688,
	190, 816,
	268, 816,
	273, 816,
	-2, 419,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1142,
	-1, 1789,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1143,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1144,
	-1, 1791,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1145,
	-1, 1792,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1146,
	-1, 1793,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1147,
	-1, 1794,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1148,
	-1, 1795,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1149,
	-1, 1807,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1161,
	-1, 1808,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1162,
	-1, 1809,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1163,
	-1, 1812,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1168,
	-1, 1818,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1172,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1180,
	-1, 1821,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1181,
	-1, 1822,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1182,
	-1, 1823,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1183,
	-1, 1911,
	5, 1059,
	144, 1405,
	422, 1516,
	-2, 1507,
	-1, 1912,
	144, 1406,
	-2, 1747,
	-1, 1913,
	144, 1407,
	-2, 1631,
	-1, 1914,
	144, 1408,
	-2, 1567,
	-1, 1915,
	144, 1409,
	-2, 1598,
	-1, 1916,
	144, 1410,
	-2, 1630,
	-1, 1917,
	144, 1411,
	-2, 1692,
	-1, 1986,
	1, 991,
	81, 991,
	115, 991,
	128, 991,
	145, 991,
	150, 991,
	153, 991,
	175, 991,
	184, 991,
	193, 991,
	207, 991,
	211, 991,
	226, 991,
	239, 991,
	242, 991,
	247, 991,
	291, 991,
	293, 991,
	371, 991,
	379, 991,
	391, 991,
	392, 991,
	402, 991,
	421, 991,
	423, 991,
	425, 991,
	426, 991,
	427, 991,
	-2, 990,
	-1, 1991,
	422, 1493,
	-2, 1505,
	-1, 2075,
	423, 1464,
	427, 1464,
	-2, 1480,
	-1, 2207,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1170,
	-1, 2208,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1174,
	-1, 2214,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1176,
	-1, 2450,
	258, 906,
	-2, 722,
	-1, 2521,
	190, 816,
	268, 816,
	273, 816,
	-2, 416,
	-1, 2539,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1178,
	-1, 2546,
	188, 0,
	189, 0,
	233, 0,
	-2, 1197,
	-1, 2607,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1227,
	-1, 2608,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1228,
	-1, 2609,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1229,
	-1, 2613,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1233,
	-1, 2614,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1234,
	-1, 2615,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1235,
	-1, 2657,
	422, 1494,
	-2, 1506,
	-1, 2772,
	188, 0,
	189, 0,
	233, 0,
	-2, 1198,
	-1, 2775,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1201,
	-1, 2776,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1203,
	-1, 2922,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1202,
	-1, 2923,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1204,
	-1, 2933,
	188, 0,
	-2, 1236,
	-1, 3021,
	188, 0,
	-2, 1237,
	-1, 3116,
	38, 0,
	163, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1750,
}

const sqlPrivate = 57344

const sqlLast = 60407

var sqlAct = [...]int{

	808, 3125, 2873, 3115, 3179, 3095, 3093, 1946, 3080, 3126,
	2108, 3127, 2961, 3092, 2702, 2950, 2137, 2577, 1775, 3025,
	2116, 2888, 2912, 2720, 3114, 1145, 1084, 2666, 2829, 2715,
	2200, 955, 2235, 1835, 2844, 2725, 2460, 2468, 726, 1612,
	1058, 210, 1292, 2667, 2462, 2937, 499, 2493, 2473, 2105,
	1464, 1978, 2073, 499, 1613, 2491, 2353, 494, 2364, 2807,
	499, 2315, 2233, 499, 499, 1462, 499, 210, 1443, 499,
	499, 2117, 2329, 971, 1141, 594, 499, 1557, 2077, 1106,
	948, 1566, 1994, 965, 499, 1558, 780, 1554, 2076, 2668,
	1979, 2003, 1148, 2340, 1501, 2058, 1569, 1472, 551, 2630,
	3026, 2314, 1772, 1387, 1847, 1767, 1435, 547, 1864, 2196,
	1713, 2472, 2431, 734, 129, 1523, 1981, 1517, 1555, 1480,
	804, 1444, 1875, 1482, 1832, 921, 2032, 1209, 586, 1974,
	1423, 1399, 2059, 1858, 2074, 957, 1156, 2110, 1377, 1138,
	1551, 1582, 2874, 496, 2031, 211, 2080, 924, 929, 1848,
	495, 1907, 1128, 212, 1966, 1951, 1368, 135, 1453, 1293,
	1291, 903, 1712, 636, 2371, 206, 807, 499, 499, 725,
	136, 765, 616, 589, 129, 630, 544, 1154, 1576, 1125,
	1062, 1493, 601, 1943, 479, 926, 1540, 1434, 901, 572,
	28, 482, 1297, 663, 1109, 2646, 2231, 609, 2647, 499,
	499, 499, 960, 499, 499, 974, 974, 2138, 806, 3206,
	479, 2109, 1463, 1960, 499, 499, 2060, 482, 730, 2534,
	1584, 3200, 1584, 1584, 3199, 1960, 3176, 3173, 1960, 2060,
	2843, 1532, 603, 73, 3151, 3145, 3144, 2511, 2843, 1960,
	1960, 1596, 3141, 2287, 2288, 3138, 3142, 2479, 3135, 3139,
	740, 3112, 1532, 3111, 2633, 1532, 3110, 1532, 951, 3109,
	1596, 935, 3075, 1596, 3061, 3054, 2150, 3052, 1532, 2843,
	3050, 2843, 918, 548, 2843, 3023, 3005, 2995, 968, 2150,
	2741, 2843, 2990, 904, 904, 730, 1532, 718, 2988, 129,
	1526, 2979, 2843, 2978, 953, 1532, 579, 1532, 550, 2971,
	717, 2970, 2943, 1532, 2924, 2843, 1532, 40, 2150, 2868,
	2864, 2842, 1960, 1960, 1960, 2843, 2287, 2288, 2480, 2774,
	3076, 1929, 44, 2150, 941, 945, 950, 1308, 1309, 2444,
	3009, 2250, 735, 1351, 1352, 1353, 2739, 2251, 2731, 2652,
	2732, 932, 2732, 2653, 2642, 2636, 2570, 1180, 2643, 1960,
	1532, 578, 1311, 1953, 2501, 1357, 905, 479, 2436, 1064,
	1596, 1532, 2326, 2140, 482, 28, 1960, 1063, 907, 1192,
	908, 731, 2293, 2287, 2288, 2633, 2305, 2306, 2307, 1310,
	580, 2282, 2281, 931, 1952, 1960, 1960, 1330, 59, 582,
	2277, 2770, 2262, 60, 1960, 2168, 2263, 1532, 1960, 1960,
	2149, 1065, 2136, 2133, 2150, 2069, 1601, 1960, 1959, 1532,
	1600, 1691, 1960, 2741, 1601, 1181, 2047, 1308, 1309, 1992,
	2090, 2436, 2199, 2179, 1531, 1439, 1061, 175, 63, 1710,
	1176, 172, 2481, 2302, 1175, 1174, 1173, 1172, 1171, 1170,
	1169, 1168, 1311, 1167, 1166, 2293, 1333, 1334, 1335, 1336,
	2303, 2482, 1378, 1165, 1164, 1163, 1316, 1585, 1162, 1585,
	1585, 1161, 1160, 3132, 909, 2234, 906, 174, 724, 1310,
	723, 722, 721, 720, 716, 715, 714, 713, 712, 711,
	1348, 1358, 2287, 2288, 1338, 1339, 1340, 710, 1861, 709,
	708, 707, 706, 702, 701, 700, 661, 660, 659, 658,
	657, 656, 2293, 655, 1308, 1309, 654, 173, 499, 499,
	653, 499, 960, 960, 499, 499, 499, 652, 2822, 499,
	1181, 651, 499, 2303, 650, 649, 648, 1346, 499, 1311,
	64, 647, 646, 2304, 1331, 1071, 645, 644, 499, 499,
	499, 499, 499, 960, 960, 137, 1316, 643, 1862, 2113,
	960, 2308, 642, 1083, 641, 1077, 1310, 640, 138, 66,
	625, 67, 624, 623, 622, 621, 620, 535, 1099, 1149,
	534, 505, 1110, 1110, 1338, 1339, 1340, 579, 504, 172,
	2303, 503, 499, 485, 499, 1308, 1309, 484, 40, 483,
	581, 1096, 196, 108, 195, 1592, 499, 1583, 1751, 1985,
	1337, 2479, 1114, 44, 1100, 1103, 2304, 194, 193, 192,
	1311, 2293, 1532, 1863, 1860, 174, 191, 1332, 190, 499,
	763, 189, 188, 187, 1331, 1142, 186, 185, 184, 183,
	499, 182, 578, 1316, 3113, 181, 1952, 1310, 180, 179,
	1349, 178, 1308, 1309, 2296, 2297, 2289, 2290, 2291, 2292,
	2294, 2295, 1181, 1127, 177, 173, 176, 2098, 2786, 1178,
	2733, 580, 2650, 2304, 166, 2367, 2256, 1311, 960, 59,
	582, 2246, 167, 2188, 60, 2287, 2288, 2070, 1070, 2063,
	1075, 1465, 1081, 1716, 1898, 1157, 1479, 1609, 499, 2303,
	1393, 1132, 1135, 549, 1310, 1896, 1223, 1894, 1892, 1865,
	1086, 1067, 1330, 1304, 499, 1890, 3016, 1332, 1389, 63,
	1111, 1082, 2991, 1076, 1316, 2960, 2910, 1347, 2297, 2289,
	2290, 2291, 2292, 2294, 2295, 1350, 2906, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 2287, 2288, 1207, 3012,
	3010, 2806, 1338, 1339, 1340, 1217, 2768, 2896, 2805, 1221,
	1289, 1608, 172, 2793, 2792, 2791, 1290, 2790, 172, 2784,
	1231, 1333, 1334, 1335, 1336, 2783, 2299, 2300, 2301, 2782,
	2781, 1316, 2304, 2298, 2296, 2297, 2289, 2290, 2291, 2292,
	2294, 2295, 2753, 731, 2751, 2656, 2439, 2627, 174, 1185,
	1859, 2626, 1331, 2625, 174, 933, 1190, 2554, 2550, 1338,
	1339, 1340, 2435, 2362, 2293, 1204, 2322, 2313, 2286, 2283,
	2280, 64, 2287, 2288, 2155, 2099, 2278, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 2261, 2240, 173, 1288,
	1390, 2239, 1388, 1563, 173, 1711, 2033, 166, 2232, 138,
	66, 172, 67, 166, 2195, 167, 2141, 1986, 1869, 1331,
	1304, 167, 1389, 1376, 1303, 3204, 1308, 1309, 1224, 172,
	172, 172, 917, 1537, 3187, 2293, 137, 1535, 2346, 3186,
	1085, 581, 2112, 2579, 108, 1332, 3104, 174, 3099, 3056,
	3047, 1311, 2298, 2296, 2297, 2289, 2290, 2291, 2292, 2294,
	2295, 3046, 718, 3043, 2505, 174, 174, 174, 499, 3042,
	3037, 3034, 3008, 499, 3007, 717, 1838, 2956, 1310, 1314,
	1315, 1317, 1318, 2935, 2050, 1337, 3028, 173, 2882, 2878,
	2876, 1300, 1301, 2821, 1450, 2804, 166, 2895, 2742, 499,
	1305, 1441, 1332, 2718, 167, 173, 173, 173, 2709, 2708,
	2706, 2293, 2684, 2303, 166, 166, 166, 2683, 2673, 2672,
	2638, 2545, 167, 167, 167, 137, 1401, 1402, 2507, 1403,
	2499, 2454, 2420, 2403, 2381, 2380, 2097, 2325, 2260, 1308,
	1309, 2259, 2245, 137, 137, 137, 1844, 1473, 2223, 1400,
	1447, 1448, 1397, 1308, 1309, 1316, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 1311, 2157, 1989, 2152, 1971, 1958,
	1888, 1372, 1546, 1478, 1442, 1424, 1433, 731, 1311, 1432,
	935, 766, 935, 1338, 1339, 1340, 1431, 172, 1430, 904,
	1429, 1310, 1428, 1427, 1426, 1425, 2304, 1422, 1461, 1610,
	1421, 1420, 1419, 1418, 129, 1310, 1417, 1416, 2381, 1415,
	1414, 1413, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 1412, 1411, 174, 1474, 1410, 1373, 1371, 1203, 1460,
	1187, 960, 499, 1331, 1182, 1159, 1153, 1500, 974, 2909,
	1438, 2778, 2750, 1470, 2645, 2641, 1436, 2249, 2289, 2290,
	2291, 2292, 2294, 2295, 1488, 1972, 499, 974, 499, 499,
	932, 1440, 932, 173, 1390, 2503, 499, 1369, 1316, 2167,
	2060, 1220, 166, 2287, 2288, 1897, 2305, 2306, 2307, 1467,
	167, 1524, 2463, 499, 499, 1710, 1895, 1547, 1893, 1891,
	499, 2769, 499, 1710, 499, 2901, 1889, 2744, 499, 2287,
	2288, 137, 931, 1562, 931, 2959, 1710, 3013, 3011, 2289,
	2290, 2291, 2292, 2294, 2295, 2166, 1332, 2743, 2648, 1465,
	1519, 1407, 1405, 1529, 1286, 1977, 1198, 1408, 1406, 731,
	960, 1599, 2984, 2302, 2424, 2419, 2414, 2402, 2267, 1417,
	2020, 2266, 2265, 1417, 2264, 1545, 2035, 2205, 499, 960,
	210, 499, 499, 960, 1494, 1684, 1216, 1697, 2682, 960,
	1395, 899, 210, 499, 2109, 1571, 499, 499, 2138, 1559,
	1573, 2513, 499, 2413, 1513, 479, 2938, 1064, 2581, 1543,
	2254, 1686, 482, 1876, 1674, 1063, 1404, 2291, 2292, 2294,
	2295, 3133, 3143, 1564, 974, 900, 3140, 2475, 2662, 3089,
	2716, 2143, 2293, 960, 960, 543, 499, 512, 201, 3166,
	2856, 499, 1530, 3060, 1580, 1127, 210, 499, 3167, 499,
	2169, 499, 2523, 499, 3203, 499, 1742, 2983, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 499, 733, 499, 893, 1228,
	1375, 1603, 3134, 172, 1587, 1607, 499, 1589, 2982, 1678,
	1591, 2308, 916, 895, 1594, 2981, 2980, 891, 829, 2696,
	1996, 2691, 2690, 2659, 2658, 1157, 2244, 2243, 889, 1575,
	886, 2687, 1578, 1740, 524, 2242, 2241, 499, 2504, 174,
	2303, 974, 2209, 1688, 2139, 2053, 1218, 2046, 542, 2042,
	511, 2023, 1819, 479, 1262, 1720, 1721, 1437, 2005, 1060,
	482, 2872, 1887, 1886, 729, 479, 1754, 1602, 1885, 1996,
	1884, 1698, 482, 1709, 1777, 1604, 2106, 1088, 3015, 173,
	1995, 2526, 704, 1204, 2057, 1606, 1749, 1675, 166, 1718,
	972, 1059, 1219, 1773, 1774, 1685, 167, 1605, 1495, 2701,
	1194, 1748, 1312, 1313, 1314, 1315, 1317, 1318, 525, 1676,
	1849, 1850, 1714, 2068, 2015, 3059, 2153, 137, 1702, 479,
	1834, 1318, 615, 2304, 974, 1492, 482, 1834, 1849, 1722,
	3107, 2963, 614, 728, 1261, 2014, 1579, 2528, 1226, 2287,
	2288, 1731, 2008, 2564, 1257, 764, 1725, 1496, 1497, 615,
	1842, 2527, 1307, 2675, 2561, 1840, 2185, 2852, 1202, 1750,
	1906, 1865, 3158, 1910, 1910, 1920, 1922, 1927, 499, 1849,
	499, 3073, 2287, 2288, 1236, 2305, 2306, 2307, 2197, 2198,
	1950, 1752, 1753, 2470, 1273, 718, 2410, 2405, 718, 718,
	2549, 1195, 1258, 750, 974, 499, 730, 2471, 1763, 2302,
	1771, 1764, 1765, 1225, 499, 692, 3039, 499, 1512, 1498,
	974, 1474, 2524, 536, 499, 1398, 1990, 2692, 2393, 2562,
	1876, 2093, 499, 2043, 1873, 739, 2299, 2300, 2301, 1865,
	499, 2039, 2302, 2298, 2296, 2297, 2289, 2290, 2291, 2292,
	2294, 2295, 499, 1973, 3189, 960, 2470, 1983, 1984, 1861,
	3166, 1711, 2033, 2392, 1845, 1987, 499, 974, 3129, 1711,
	2033, 1197, 499, 499, 1490, 1515, 2007, 2295, 2293, 1883,
	1871, 935, 1711, 2033, 933, 1747, 933, 499, 3157, 2515,
	499, 1285, 1963, 499, 2522, 2986, 904, 2026, 935, 2850,
	3071, 1584, 1997, 2918, 693, 1260, 2929, 2009, 2011, 951,
	1366, 2293, 172, 2001, 541, 1865, 527, 526, 1918, 1862,
	499, 1938, 499, 1868, 499, 2685, 2258, 499, 3072, 499,
	727, 499, 2040, 499, 499, 2025, 499, 960, 960, 960,
	2054, 1948, 960, 1956, 1957, 731, 1982, 2044, 174, 499,
	1947, 499, 1968, 1969, 1964, 1741, 2303, 2017, 731, 1470,
	2308, 932, 731, 2131, 2132, 2024, 2518, 1087, 887, 1816,
	2000, 197, 1490, 2676, 1993, 1967, 2001, 2041, 932, 3130,
	897, 2006, 1270, 896, 1863, 1860, 1227, 887, 173, 2303,
	2025, 540, 2034, 2036, 2037, 2038, 2055, 166, 888, 2423,
	887, 2964, 1739, 931, 2172, 167, 2851, 2127, 2914, 2120,
	1483, 730, 3156, 1484, 2755, 479, 2174, 1064, 499, 2129,
	931, 2745, 482, 2019, 2142, 2061, 137, 1193, 541, 2130,
	1520, 2158, 1689, 2091, 705, 202, 694, 2211, 2122, 2304,
	2001, 1516, 2762, 3182, 1833, 731, 2175, 3131, 2134, 2049,
	2145, 1237, 1196, 2517, 129, 3128, 2115, 974, 2173, 499,
	1271, 1244, 202, 2220, 1841, 129, 2065, 2514, 2067, 499,
	1865, 499, 2304, 2128, 3165, 1724, 2087, 1157, 2135, 2124,
	1306, 2125, 533, 2126, 2218, 2144, 1201, 3163, 499, 499,
	499, 3190, 499, 2154, 1814, 1817, 1208, 1485, 1830, 1238,
	2395, 2887, 1235, 2913, 528, 540, 2111, 2885, 2111, 1487,
	2103, 499, 203, 2156, 2162, 543, 2163, 2101, 1549, 1828,
	2397, 1449, 1213, 1701, 1700, 1272, 1710, 1707, 1191, 695,
	538, 1401, 1402, 1296, 1179, 502, 2616, 2919, 1585, 203,
	2516, 1813, 1424, 1366, 2428, 2802, 2161, 2159, 1528, 2298,
	2296, 2297, 2289, 2290, 2291, 2292, 2294, 2295, 2170, 2396,
	1489, 1859, 3195, 2190, 2973, 539, 696, 2560, 2432, 1490,
	2972, 2954, 1696, 1759, 3031, 2299, 2300, 2301, 1295, 2661,
	1456, 2215, 2298, 2296, 2297, 2289, 2290, 2291, 2292, 2294,
	2295, 2212, 2216, 2915, 2377, 2221, 1522, 2373, 542, 205,
	1214, 2237, 2238, 2104, 2102, 1215, 805, 1574, 537, 499,
	1459, 1561, 1560, 204, 1521, 2247, 1824, 2192, 1704, 3180,
	1213, 1556, 3081, 1548, 1825, 2194, 205, 1826, 1965, 543,
	1831, 2354, 2027, 1295, 1694, 1745, 1692, 2721, 692, 2855,
	204, 1518, 1457, 2889, 538, 1490, 2854, 480, 1695, 2955,
	2383, 200, 497, 2382, 1815, 2183, 2203, 2184, 739, 520,
	1719, 1294, 2617, 1496, 1497, 1760, 546, 2343, 2618, 590,
	597, 1962, 546, 480, 1961, 590, 612, 2803, 200, 539,
	3181, 2210, 619, 2072, 1213, 2071, 198, 2089, 728, 1296,
	639, 577, 36, 2324, 2703, 974, 607, 3194, 1214, 486,
	2437, 1245, 2327, 1215, 1644, 1113, 2336, 2334, 2335, 1112,
	3183, 499, 542, 198, 499, 3170, 1294, 2875, 2355, 201,
	2427, 499, 537, 2217, 499, 499, 974, 693, 1458, 199,
	3, 2219, 1705, 2808, 499, 499, 499, 2253, 2631, 2952,
	499, 1881, 529, 499, 3172, 600, 201, 2884, 2357, 2934,
	499, 499, 499, 499, 499, 1283, 199, 1124, 1827, 1122,
	2028, 2029, 1214, 2349, 499, 2350, 1829, 1215, 2801, 584,
	1486, 499, 2953, 546, 546, 2358, 2359, 2361, 2853, 2700,
	935, 934, 2316, 499, 960, 576, 35, 499, 935, 935,
	530, 2331, 935, 2366, 974, 2248, 2378, 2433, 499, 2338,
	2339, 2345, 2544, 2344, 974, 497, 497, 497, 2490, 966,
	497, 974, 731, 2279, 2328, 933, 935, 2222, 2374, 2160,
	480, 1066, 2052, 499, 2370, 499, 531, 499, 532, 2001,
	960, 499, 933, 499, 960, 960, 960, 2356, 1880, 2384,
	1099, 2387, 499, 2404, 499, 2445, 1267, 2883, 499, 1265,
	2348, 744, 2022, 499, 2351, 499, 2368, 1545, 1539, 694,
	932, 885, 499, 2411, 2319, 2320, 2321, 36, 932, 932,
	2415, 1483, 932, 1477, 1484, 1488, 2412, 2398, 2365, 499,
	499, 2466, 1255, 1253, 960, 605, 606, 2465, 487, 488,
	1099, 2406, 1251, 2477, 2224, 2225, 932, 1282, 2498, 2409,
	1488, 499, 931, 2416, 2438, 1284, 939, 2379, 575, 32,
	931, 931, 2422, 2448, 931, 2385, 2509, 2389, 2390, 1188,
	2407, 2441, 2446, 2421, 2408, 2434, 2449, 2450, 2451, 499,
	1524, 2464, 1711, 1708, 598, 599, 1738, 1524, 931, 1619,
	2317, 1123, 2474, 1121, 499, 2502, 2187, 2186, 2400, 2182,
	2401, 2474, 695, 583, 1249, 1452, 2840, 2164, 1485, 1483,
	1728, 35, 1484, 1533, 574, 79, 490, 489, 1706, 1677,
	1487, 2476, 1409, 2483, 573, 78, 2500, 1381, 2417, 1095,
	2418, 1386, 1541, 2837, 2489, 570, 23, 974, 1266, 696,
	129, 1264, 3124, 2310, 2311, 2312, 2698, 974, 3078, 499,
	571, 24, 1527, 2547, 890, 892, 2484, 2485, 2486, 2826,
	2487, 2488, 1247, 491, 492, 2442, 2521, 2519, 2520, 1456,
	737, 1489, 692, 2838, 1254, 1252, 2452, 1241, 569, 30,
	2525, 568, 21, 2582, 1250, 2680, 2508, 566, 20, 2556,
	2557, 2558, 739, 2530, 1120, 2532, 1485, 567, 19, 1459,
	556, 15, 557, 16, 565, 57, 564, 56, 1487, 2678,
	1619, 1619, 555, 55, 1773, 2586, 2496, 1454, 2461, 563,
	12, 2628, 2660, 554, 50, 1737, 2552, 2459, 738, 2457,
	2107, 1457, 1773, 2596, 32, 2095, 731, 2510, 561, 47,
	499, 2563, 2565, 2566, 2094, 2571, 1248, 2092, 2086, 2578,
	1455, 1598, 499, 1597, 562, 48, 1490, 1595, 974, 1489,
	1593, 693, 2585, 2624, 497, 1094, 2620, 497, 1590, 1717,
	497, 497, 497, 2649, 1588, 966, 2593, 1586, 1117, 1538,
	2595, 1536, 1525, 2399, 497, 553, 49, 560, 7, 1514,
	79, 2644, 2583, 1511, 497, 497, 497, 497, 966, 1499,
	78, 2689, 1491, 2572, 1246, 2833, 3000, 2621, 2834, 559,
	6, 23, 3167, 2201, 2629, 2632, 2908, 1458, 2695, 1240,
	935, 558, 38, 2637, 2634, 2635, 24, 499, 499, 129,
	499, 2640, 1298, 2699, 2907, 499, 1119, 1715, 639, 3002,
	597, 2836, 2651, 2013, 1490, 2730, 552, 37, 974, 2870,
	974, 2839, 497, 960, 30, 913, 1776, 21, 935, 2056,
	2710, 2664, 2051, 20, 2045, 2021, 1643, 1682, 1683, 2165,
	499, 1481, 2686, 19, 1996, 1199, 15, 914, 16, 2734,
	57, 1486, 56, 2202, 2723, 2012, 639, 585, 55, 3041,
	960, 499, 499, 694, 2025, 12, 2722, 2727, 2726, 50,
	932, 1996, 499, 2845, 1619, 974, 499, 499, 974, 499,
	1239, 2707, 2010, 1299, 47, 2704, 2001, 499, 2713, 2679,
	2669, 2681, 2540, 2541, 2705, 974, 2712, 3018, 2809, 2728,
	48, 2030, 2016, 1302, 2048, 2018, 3077, 2881, 932, 1877,
	2724, 2735, 931, 2736, 497, 2655, 2835, 2114, 2759, 2777,
	2096, 2085, 1949, 1687, 2764, 1611, 608, 935, 915, 2120,
	497, 49, 3178, 7, 933, 2497, 2747, 2748, 2331, 1486,
	499, 3193, 933, 933, 1378, 2773, 933, 2717, 2756, 2719,
	931, 2749, 2746, 2760, 736, 6, 695, 1643, 1643, 2757,
	1308, 1309, 2946, 1616, 2567, 1308, 1309, 38, 2287, 2288,
	933, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605,
	2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615,
	1311, 2619, 37, 696, 2506, 1991, 1308, 1309, 1230, 499,
	2177, 2176, 2177, 1229, 2178, 1882, 2752, 932, 1857, 974,
	1269, 974, 1310, 1268, 2779, 2800, 2559, 1310, 1376, 499,
	499, 499, 1374, 2899, 2765, 2738, 2714, 2455, 2453, 2100,
	1565, 1281, 1280, 1263, 499, 1259, 1256, 1242, 1200, 499,
	2740, 499, 1690, 898, 499, 499, 499, 499, 499, 931,
	703, 499, 499, 960, 2811, 2812, 2962, 974, 2754, 1275,
	2848, 960, 2677, 2816, 2846, 3088, 690, 2814, 2391, 499,
	499, 1727, 2820, 1243, 1550, 1729, 2347, 1970, 3070, 2787,
	935, 2257, 3024, 960, 1616, 1616, 2871, 2928, 1879, 1394,
	53, 2810, 774, 499, 2877, 855, 2827, 2663, 2079, 2825,
	935, 2078, 499, 499, 960, 960, 2886, 977, 2823, 1099,
	2001, 1699, 779, 1909, 2891, 1615, 782, 1617, 785, 935,
	784, 783, 2880, 2893, 619, 2917, 2890, 2466, 2857, 546,
	2865, 1618, 2866, 2900, 2892, 1396, 2862, 781, 2817, 1614,
	2088, 2898, 2815, 2118, 681, 2867, 1703, 974, 1839, 2902,
	1468, 1643, 934, 935, 1874, 497, 2920, 2252, 2903, 2001,
	932, 1391, 2365, 755, 776, 935, 1872, 1186, 754, 2352,
	2469, 2654, 2894, 1758, 2193, 1755, 516, 2940, 2284, 1152,
	932, 2669, 2474, 974, 2824, 2813, 2869, 499, 1935, 499,
	1843, 974, 499, 1928, 1451, 1924, 2904, 2905, 1287, 932,
	499, 1367, 931, 2925, 2936, 2858, 974, 2119, 1381, 2949,
	1222, 758, 2863, 1837, 1383, 2669, 2227, 2941, 2942, 2363,
	2849, 2478, 931, 2151, 2967, 2944, 1766, 2669, 912, 911,
	2859, 2860, 2180, 932, 910, 2966, 3094, 2968, 3091, 2916,
	1693, 931, 2171, 1360, 770, 932, 499, 2965, 499, 2332,
	2440, 960, 1092, 3040, 1934, 2879, 499, 1359, 894, 3033,
	1212, 1211, 1210, 2376, 2987, 2947, 2989, 3188, 2674, 171,
	2993, 2975, 168, 170, 169, 931, 2001, 2426, 1616, 974,
	82, 2897, 2998, 3006, 34, 33, 107, 931, 480, 2999,
	935, 106, 105, 104, 2997, 3004, 3003, 103, 102, 499,
	101, 100, 99, 2726, 98, 499, 97, 96, 95, 94,
	93, 92, 1066, 499, 497, 1544, 91, 2945, 90, 3014,
	89, 2466, 497, 935, 933, 935, 88, 3017, 3030, 935,
	87, 86, 85, 84, 742, 3022, 3036, 3029, 635, 1570,
	1570, 499, 499, 632, 81, 80, 497, 499, 497, 31,
	497, 26, 2669, 2948, 546, 111, 3027, 112, 960, 2976,
	2977, 3051, 933, 499, 3038, 25, 3053, 77, 960, 960,
	932, 76, 499, 1619, 499, 29, 499, 18, 11, 17,
	22, 134, 133, 3058, 3055, 2669, 3074, 2669, 132, 3057,
	131, 2669, 3066, 3064, 3065, 499, 130, 14, 499, 3084,
	499, 3063, 974, 932, 639, 932, 480, 1066, 590, 932,
	3096, 13, 931, 126, 3097, 3098, 3102, 128, 480, 1066,
	3090, 127, 966, 497, 125, 3101, 3100, 3103, 639, 3086,
	3044, 2992, 3108, 124, 123, 122, 121, 499, 10, 8,
	3106, 110, 3001, 9, 3105, 931, 2911, 931, 2512, 70,
	71, 931, 27, 43, 42, 3123, 3122, 3120, 3121, 41,
	499, 933, 639, 3147, 109, 162, 161, 497, 499, 160,
	2333, 159, 480, 497, 3136, 497, 3148, 497, 3149, 497,
	3155, 497, 1452, 2933, 155, 499, 3153, 3154, 3152, 154,
	158, 1743, 3150, 1744, 156, 157, 153, 3164, 3162, 120,
	3161, 2360, 497, 935, 164, 3168, 3045, 163, 3171, 3096,
	151, 3174, 3175, 3169, 148, 147, 150, 152, 149, 146,
	2957, 165, 1619, 3177, 506, 119, 1502, 3062, 118, 117,
	3185, 116, 3184, 639, 115, 114, 5, 2, 1, 0,
	0, 0, 3192, 0, 1506, 0, 1456, 0, 0, 3191,
	0, 935, 0, 0, 3196, 3197, 0, 2120, 3067, 0,
	3068, 3201, 3202, 0, 0, 2669, 3198, 0, 0, 3207,
	0, 0, 3205, 0, 0, 0, 1459, 509, 0, 2430,
	0, 0, 0, 932, 3085, 1503, 2430, 1308, 1309, 0,
	0, 0, 0, 0, 1454, 1619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 1311, 2669, 933, 518, 3021, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 1455, 0, 515,
	0, 932, 0, 0, 933, 0, 0, 0, 0, 1310,
	2840, 1619, 1619, 2342, 0, 0, 3146, 0, 0, 0,
	1643, 0, 1507, 933, 0, 0, 1934, 1934, 0, 1619,
	1619, 0, 0, 0, 619, 0, 546, 2837, 0, 0,
	2830, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	0, 934, 1068, 2828, 1072, 0, 1078, 933, 2832, 0,
	1619, 546, 0, 0, 1458, 0, 0, 0, 934, 933,
	546, 0, 0, 497, 0, 0, 0, 2838, 0, 517,
	2004, 0, 0, 1508, 1509, 0, 1316, 0, 497, 0,
	0, 0, 1504, 0, 0, 0, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 2831, 0, 0, 497, 0,
	0, 0, 0, 0, 1338, 1339, 1340, 0, 1505, 1308,
	1309, 0, 497, 0, 0, 1934, 1934, 1934, 480, 2062,
	0, 0, 2569, 0, 0, 0, 509, 0, 1762, 0,
	0, 0, 2575, 2075, 1311, 0, 1066, 1616, 0, 497,
	2341, 0, 500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1184, 1331, 0, 0, 0, 0, 1643,
	1189, 1310, 0, 0, 518, 0, 2004, 0, 546, 1330,
	497, 0, 0, 497, 0, 497, 512, 497, 515, 497,
	497, 0, 966, 209, 933, 1510, 0, 0, 0, 742,
	0, 510, 0, 742, 0, 597, 0, 2004, 0, 2833,
	0, 0, 2834, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 2543, 508, 0, 0, 933, 0, 933,
	0, 0, 0, 933, 0, 0, 507, 0, 1333, 1334,
	1335, 1336, 1643, 0, 0, 2836, 0, 1332, 1316, 0,
	0, 0, 0, 2657, 0, 2839, 0, 0, 0, 514,
	0, 0, 0, 0, 519, 0, 0, 0, 517, 511,
	0, 0, 1930, 0, 590, 0, 1338, 1339, 1340, 513,
	0, 0, 0, 0, 0, 0, 0, 1619, 1643, 1643,
	0, 0, 0, 0, 0, 0, 1616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1643, 1643, 0, 0,
	1361, 1362, 1363, 1364, 1365, 497, 0, 0, 0, 0,
	0, 0, 1308, 1309, 0, 1066, 1331, 1066, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1643, 1380, 0,
	0, 0, 0, 1392, 497, 497, 497, 1311, 497, 0,
	2835, 0, 0, 0, 961, 0, 0, 975, 975, 0,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 497, 0, 1616,
	0, 0, 0, 0, 1310, 512, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 1308, 1309, 0, 0,
	510, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 1059, 1934, 1934, 0, 933, 0, 1332,
	0, 1311, 0, 508, 0, 1616, 1616, 0, 0, 0,
	0, 0, 0, 0, 0, 507, 2538, 0, 0, 0,
	0, 0, 0, 1616, 1616, 0, 0, 0, 1310, 0,
	0, 1333, 1334, 1335, 1336, 0, 1330, 0, 514, 0,
	0, 1316, 0, 519, 0, 933, 0, 0, 511, 0,
	0, 809, 0, 0, 1616, 1066, 0, 0, 513, 0,
	0, 0, 0, 0, 0, 1445, 1445, 1445, 0, 1338,
	1339, 1340, 0, 1934, 1934, 1934, 1934, 1934, 1934, 1934,
	1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934,
	1934, 1934, 0, 1934, 0, 1333, 1334, 1335, 1336, 0,
	0, 0, 0, 0, 0, 1316, 0, 0, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 1331,
	0, 0, 0, 0, 0, 0, 2819, 0, 0, 0,
	0, 0, 0, 1338, 1339, 1340, 1619, 0, 0, 0,
	934, 0, 0, 0, 0, 0, 0, 0, 934, 934,
	0, 0, 934, 0, 1643, 0, 0, 546, 0, 0,
	546, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	546, 546, 0, 0, 0, 0, 1468, 0, 0, 0,
	497, 2004, 2372, 1331, 0, 1337, 2004, 0, 1619, 2372,
	0, 0, 0, 0, 0, 0, 2004, 2372, 2004, 2372,
	2372, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	497, 0, 0, 0, 0, 0, 0, 1544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 497,
	0, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 497, 0, 0, 0, 0, 1337,
	0, 0, 0, 962, 961, 961, 976, 976, 0, 0,
	0, 0, 2926, 0, 1930, 1930, 1332, 1619, 0, 1570,
	0, 1570, 0, 497, 0, 0, 0, 497, 0, 497,
	0, 1616, 0, 0, 0, 961, 961, 0, 497, 0,
	497, 0, 961, 0, 966, 0, 0, 0, 2926, 2004,
	0, 546, 0, 0, 0, 0, 1776, 0, 2004, 0,
	0, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 1776, 0, 0, 0, 2494, 1066, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1930, 1930, 1930, 0, 0, 0, 0,
	0, 0, 0, 742, 742, 2529, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0, 0,
	497, 0, 0, 0, 1059, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 1643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2580, 0, 0, 0, 1756,
	0, 1761, 0, 0, 0, 0, 0, 1768, 0, 0,
	0, 0, 0, 0, 0, 1643, 0, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 0, 1818, 0, 1820, 1821, 1822, 1823, 0,
	0, 0, 0, 0, 0, 0, 0, 1776, 0, 0,
	0, 0, 0, 0, 1846, 0, 0, 0, 0, 0,
	934, 0, 0, 0, 0, 0, 546, 0, 0, 1380,
	1616, 0, 0, 1870, 1643, 0, 0, 0, 546, 0,
	0, 0, 0, 1308, 1309, 0, 0, 0, 0, 0,
	0, 0, 0, 962, 962, 0, 0, 0, 2671, 0,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 0, 1311, 0,
	0, 0, 0, 0, 1926, 1934, 1937, 1939, 1944, 0,
	0, 0, 1616, 0, 962, 962, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 1934, 2004, 1570, 0, 1570, 0, 0, 0,
	0, 497, 0, 0, 2287, 2288, 0, 2305, 2306, 2307,
	0, 0, 1930, 1930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1308, 1309, 0, 2537, 0, 0,
	0, 0, 0, 0, 0, 0, 2004, 934, 0, 0,
	0, 1616, 1333, 1334, 1335, 1336, 0, 0, 0, 1311,
	0, 0, 1316, 0, 0, 0, 0, 597, 597, 0,
	2064, 0, 2066, 0, 2302, 0, 0, 0, 1066, 0,
	0, 0, 966, 497, 0, 497, 1310, 0, 0, 0,
	1338, 1339, 1340, 497, 1330, 0, 0, 0, 1934, 962,
	0, 1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
	1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
	0, 1930, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2213, 0,
	1331, 0, 0, 2293, 0, 0, 2788, 0, 0, 0,
	0, 0, 0, 1333, 1334, 1335, 1336, 0, 0, 0,
	0, 0, 0, 1316, 0, 927, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	975, 1338, 1339, 1340, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 0, 0, 1066, 1337, 0, 0, 975,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	1468, 2303, 0, 1332, 0, 2004, 2372, 2004, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2671,
	1066, 1331, 0, 0, 0, 2004, 0, 2372, 0, 0,
	1066, 1066, 497, 2004, 2372, 0, 0, 497, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2671, 0, 1066, 2075, 0, 0, 0,
	0, 0, 961, 0, 0, 2671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2004,
	0, 961, 209, 0, 2304, 961, 0, 1337, 2494, 2494,
	0, 961, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 0, 0, 0, 0, 975, 0, 2207, 2208,
	0, 0, 0, 0, 2214, 961, 961, 0, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 0, 209, 970,
	0, 0, 0, 2228, 2229, 0, 0, 0, 0, 1870,
	0, 0, 0, 0, 0, 775, 74, 2236, 0, 0,
	0, 0, 0, 2004, 0, 2372, 0, 0, 2951, 0,
	0, 0, 0, 0, 0, 0, 497, 2299, 2300, 2301,
	2671, 2255, 0, 0, 2298, 2296, 2297, 2289, 2290, 2291,
	2292, 2294, 2295, 2268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 2671, 0, 2671, 74, 0, 0, 2671,
	0, 0, 497, 0, 497, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1944, 1944, 1944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 962, 0, 0, 2337, 0, 0, 0, 976,
	0, 0, 0, 0, 0, 2580, 0, 0, 0, 0,
	0, 546, 0, 0, 0, 719, 975, 0, 976, 2951,
	0, 0, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2004, 2372, 0,
	2394, 0, 0, 497, 0, 0, 0, 0, 0, 0,
	922, 74, 0, 0, 0, 0, 0, 0, 0, 2372,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	1066, 0, 497, 0, 0, 0, 975, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 1308, 1309, 0, 0,
	0, 3082, 975, 0, 1066, 0, 497, 0, 0, 0,
	962, 0, 0, 1930, 962, 0, 0, 0, 0, 0,
	962, 1311, 0, 2671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 2580, 2467, 0, 0, 0, 1310, 975,
	1930, 0, 0, 0, 0, 976, 1330, 0, 0, 0,
	0, 0, 0, 0, 962, 962, 1066, 0, 0, 0,
	0, 2671, 0, 1090, 2004, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2951, 0, 0, 0, 0, 0, 0, 0, 0,
	2206, 742, 742, 1131, 1131, 1131, 970, 0, 0, 0,
	0, 0, 0, 0, 742, 1333, 1334, 1335, 1336, 961,
	961, 961, 0, 0, 961, 1316, 0, 0, 0, 0,
	2531, 0, 0, 0, 1768, 0, 0, 0, 0, 0,
	2535, 2536, 976, 0, 2539, 0, 1930, 0, 2542, 0,
	0, 0, 0, 1338, 1339, 1340, 0, 2546, 0, 0,
	0, 1183, 0, 0, 0, 0, 2553, 2287, 2288, 2337,
	2305, 2306, 2307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2548, 0, 0, 0, 2573,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 2587, 2588, 0, 2589,
	2590, 2591, 1378, 0, 2592, 0, 0, 0, 0, 0,
	2594, 0, 0, 0, 0, 976, 0, 2302, 0, 0,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2622, 2623, 1274, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 74, 0, 74, 2639, 74, 0,
	0, 0, 0, 0, 0, 578, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 2293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 0, 0, 580, 2665, 0, 0, 0, 0,
	0, 0, 59, 582, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 2688, 0, 0,
	0, 0, 0, 0, 0, 2308, 962, 0, 0, 2693,
	0, 0, 0, 0, 2694, 0, 0, 0, 976, 2697,
	0, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2737, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 962, 962,
	962, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2146, 0, 0, 0, 0,
	2287, 2288, 0, 2305, 2306, 2307, 40, 2304, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 44, 2766, 2767, 0, 0, 0, 975, 2771, 2772,
	0, 0, 0, 2775, 2776, 0, 0, 0, 0, 0,
	2780, 0, 138, 66, 1475, 67, 0, 0, 0, 0,
	2147, 0, 0, 0, 0, 0, 0, 0, 975, 2785,
	2302, 0, 0, 172, 0, 0, 2789, 0, 0, 0,
	719, 0, 0, 0, 581, 0, 0, 108, 0, 2148,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 0,
	0, 0, 1370, 0, 0, 0, 0, 0, 976, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1379,
	2299, 2300, 2301, 1385, 0, 0, 961, 2298, 2296, 2297,
	2289, 2290, 2291, 2292, 2294, 2295, 975, 63, 0, 2293,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 173,
	0, 0, 0, 975, 0, 0, 1308, 1309, 166, 1341,
	1342, 1343, 1351, 1352, 1353, 2847, 167, 0, 0, 0,
	0, 0, 961, 0, 1344, 0, 961, 961, 961, 0,
	0, 1311, 0, 0, 1357, 0, 0, 137, 2308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 0, 0, 1542, 0, 0, 1330, 2303, 0, 0,
	0, 1553, 0, 1327, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 1577, 0, 1577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2921, 2922, 2923, 74, 138, 66, 1466,
	67, 1469, 0, 0, 0, 1333, 1334, 1335, 1336, 0,
	0, 0, 0, 0, 0, 1316, 0, 0, 172, 2931,
	2932, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	2304, 0, 108, 2939, 0, 0, 0, 0, 0, 1348,
	1358, 0, 0, 1338, 1339, 1340, 0, 0, 0, 0,
	0, 0, 1680, 0, 174, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 1354, 1355, 0, 0, 0, 975,
	0, 0, 1325, 1326, 0, 0, 976, 0, 0, 2974,
	0, 0, 0, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 1331, 173, 0, 1726, 2985, 0, 0,
	0, 0, 1732, 166, 1733, 0, 1734, 976, 1735, 1356,
	1736, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 1746, 137, 2299, 2300, 2301, 0, 0, 0, 0,
	2298, 2296, 2297, 2289, 2290, 2291, 2292, 2294, 2295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 1332, 0, 0, 0,
	975, 3032, 0, 0, 3035, 976, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3048,
	0, 962, 0, 0, 0, 962, 962, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	975, 0, 975, 0, 0, 961, 1347, 0, 0, 1322,
	1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 0, 3119, 3119, 3119, 2796,
	0, 0, 0, 2795, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 0, 3137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	975, 0, 1988, 0, 0, 0, 0, 0, 0, 0,
	0, 3119, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 976, 0,
	0, 0, 0, 719, 0, 0, 719, 719, 976, 0,
	0, 970, 0, 1311, 0, 0, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3119, 0, 0, 0, 0, 1553, 0,
	1310, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 1836, 0, 0, 0, 0, 2123,
	0, 0, 1131, 0, 1131, 0, 1131, 732, 970, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1379, 975, 0, 975, 1379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 1334, 1335,
	1336, 0, 0, 0, 0, 0, 0, 1316, 0, 976,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 975,
	0, 1348, 1358, 961, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	922, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 961, 1346, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 74,
	0, 0, 0, 0, 2181, 0, 0, 0, 0, 976,
	0, 976, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 975,
	0, 0, 0, 2189, 970, 2191, 0, 0, 0, 0,
	0, 0, 74, 0, 74, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 2204, 0, 0, 0,
	0, 1337, 0, 0, 0, 975, 976, 0, 0, 976,
	0, 0, 0, 975, 0, 0, 0, 0, 1332, 0,
	0, 0, 74, 0, 74, 0, 976, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 1308, 1309, 74, 1341, 1342, 1343,
	1351, 1352, 1353, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 1357, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 0,
	0, 975, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 0, 0, 1347, 0,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0,
	976, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1333, 1334, 1335, 1336, 0, 0, 0,
	0, 0, 0, 1316, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 962, 0, 0, 0, 976, 0,
	961, 961, 962, 0, 0, 0, 0, 1348, 1358, 0,
	0, 1338, 1339, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 2369,
	0, 0, 1354, 1355, 975, 0, 0, 0, 0, 0,
	1325, 1326, 0, 0, 0, 962, 962, 0, 0, 0,
	0, 0, 0, 0, 1346, 0, 0, 0, 0, 1108,
	0, 1331, 0, 0, 0, 2287, 2288, 0, 2305, 2306,
	2307, 0, 0, 1836, 0, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	1345, 0, 0, 2425, 1379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2443, 0, 976, 2302, 2447, 1337, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 2456, 0, 2458,
	0, 0, 0, 0, 1332, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 0, 0,
	0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 962, 0, 2293, 0, 1311, 0, 0, 1357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 922,
	0, 0, 0, 0, 0, 0, 0, 922, 922, 2309,
	976, 922, 0, 1310, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 1327, 2533,
	0, 0, 0, 2308, 1347, 0, 0, 1322, 1323, 1329,
	1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 0, 0, 0, 0, 2273, 0, 0,
	0, 2274, 2303, 0, 74, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 1334, 1335, 1336, 0, 0, 0, 0, 0, 962,
	1316, 0, 0, 0, 74, 0, 74, 0, 0, 962,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 976, 0, 0, 0, 0, 0, 1354,
	1355, 0, 74, 0, 0, 2304, 0, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 1356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2299, 2300,
	2301, 1332, 0, 0, 0, 2298, 2296, 2297, 2289, 2290,
	2291, 2292, 2294, 2295, 0, 0, 0, 0, 0, 0,
	2711, 0, 0, 0, 1349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2758, 0, 970, 0, 0, 0, 0, 0,
	0, 1347, 2761, 0, 1322, 1323, 1329, 1328, 1324, 1350,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	0, 74, 0, 0, 1866, 0, 0, 0, 1867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 922,
	0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 1357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 2861, 1333, 1334, 1335, 1336, 1108, 0, 0, 0,
	1344, 0, 1316, 0, 0, 0, 922, 1311, 0, 0,
	1357, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 1358, 0, 0,
	1338, 1339, 1340, 0, 1310, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 1327,
	0, 1354, 1355, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 0, 0, 0,
	0, 1333, 1334, 1335, 1336, 0, 0, 0, 0, 1345,
	0, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 0, 0, 0, 2958, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 922,
	1354, 1355, 0, 1332, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 0, 0, 0, 1349, 0, 0, 1331,
	0, 2994, 0, 2996, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 74, 0, 0,
	0, 0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328,
	1324, 1350, 1332, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	2794, 0, 3049, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 2551,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1836, 259, 260,
	261, 262, 978, 263, 979, 980, 981, 982, 215, 983,
	984, 985, 986, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 987, 270, 271, 272, 273, 274, 275,
	276, 988, 989, 277, 220, 221, 222, 990, 278, 223,
	991, 963, 992, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 993, 288, 0, 289, 290, 994, 857,
	291, 292, 995, 996, 998, 997, 999, 1000, 1001, 293,
	294, 501, 295, 296, 297, 224, 225, 1002, 298, 1003,
	299, 1004, 300, 1005, 1006, 301, 302, 303, 1007, 304,
	1008, 305, 306, 1009, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 1010, 858, 1011, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 1012,
	322, 1013, 1014, 859, 323, 1015, 324, 230, 1016, 231,
	325, 1017, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 861, 1018, 238, 333, 0, 0, 0, 1019, 332,
	334, 341, 1020, 860, 335, 235, 337, 336, 338, 339,
	340, 236, 1021, 237, 1022, 342, 862, 863, 343, 344,
	345, 864, 346, 347, 0, 0, 348, 349, 350, 1023,
	352, 351, 1024, 353, 239, 865, 354, 355, 866, 1025,
	356, 357, 1026, 1027, 358, 0, 359, 938, 937, 360,
	361, 363, 364, 362, 867, 365, 366, 368, 367, 1028,
	1029, 868, 1030, 240, 241, 369, 370, 1031, 371, 372,
	1032, 1033, 373, 374, 1034, 1035, 375, 242, 869, 376,
	870, 243, 377, 378, 379, 380, 381, 382, 383, 1036,
	384, 244, 385, 245, 386, 1037, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 1038, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 1039,
	407, 871, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 1040, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 1041, 432, 413, 414,
	433, 872, 434, 248, 435, 436, 1042, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 1043,
	447, 448, 1044, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 1045, 250, 251, 252, 456, 1046, 1047, 457,
	458, 253, 254, 1048, 459, 460, 0, 461, 462, 1049,
	1050, 463, 464, 465, 467, 1051, 468, 1052, 466, 469,
	470, 471, 255, 256, 1053, 473, 472, 257, 1054, 1055,
	1056, 1057, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 1975, 0,
	0, 0, 0, 0, 0, 0, 0, 1976, 259, 260,
	261, 262, 978, 263, 979, 980, 981, 982, 215, 983,
	984, 985, 986, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 987, 270, 271, 272, 273, 274, 275,
	276, 988, 989, 277, 220, 221, 222, 990, 278, 223,
	991, 963, 992, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 993, 288, 0, 289, 290, 994, 857,
	291, 292, 995, 996, 998, 997, 999, 1000, 1001, 293,
	294, 501, 295, 296, 297, 224, 225, 1002, 298, 1003,
	299, 1004, 300, 1005, 1006, 301, 302, 303, 1007, 304,
	1008, 305, 306, 1009, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 1010, 858, 1011, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 1012,
	322, 1013, 1014, 859, 323, 1015, 324, 230, 1016, 231,
	325, 1017, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 861, 1018, 238, 333, 0, 0, 0, 1019, 332,
	334, 341, 1020, 860, 335, 235, 337, 336, 338, 339,
	340, 236, 1021, 237, 1022, 342, 862, 863, 343, 344,
	345, 864, 346, 347, 0, 0, 348, 349, 350, 1023,
	352, 351, 1024, 353, 239, 865, 354, 355, 866, 1025,
	356, 357, 1026, 1027, 358, 0, 359, 938, 937, 360,
	361, 363, 364, 362, 867, 365, 366, 368, 367, 1028,
	1029, 868, 1030, 240, 241, 369, 370, 1031, 371, 372,
	1032, 1033, 373, 374, 1034, 1035, 375, 242, 869, 376,
	870, 243, 377, 378, 379, 380, 381, 382, 383, 1036,
	384, 244, 385, 245, 386, 1037, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 1038, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 1039,
	407, 871, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 1040, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 1041, 432, 413, 414,
	433, 872, 434, 248, 435, 436, 1042, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 1043,
	447, 448, 1044, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 1045, 250, 251, 252, 456, 1046, 1047, 457,
	458, 253, 254, 1048, 459, 460, 0, 461, 462, 1049,
	1050, 463, 464, 465, 467, 1051, 468, 1052, 466, 469,
	470, 471, 255, 256, 1053, 473, 472, 257, 1054, 1055,
	1056, 1057, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2818, 259,
	260, 261, 262, 978, 263, 979, 980, 981, 982, 215,
	983, 984, 985, 986, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 987, 270, 271, 272, 273, 274,
	275, 276, 988, 989, 277, 220, 221, 222, 990, 278,
	223, 991, 963, 992, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 993, 288, 0, 289, 290, 994,
	857, 291, 292, 995, 996, 998, 997, 999, 1000, 1001,
	293, 294, 501, 295, 296, 297, 224, 225, 1002, 298,
	1003, 299, 1004, 300, 1005, 1006, 301, 302, 303, 1007,
	304, 1008, 305, 306, 1009, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 1010, 858, 1011, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	1012, 322, 1013, 1014, 859, 323, 1015, 324, 230, 1016,
	231, 325, 1017, 326, 327, 328, 329, 330, 331, 232,
	233, 234, 861, 1018, 238, 333, 0, 0, 0, 1019,
	332, 334, 341, 1020, 860, 335, 235, 337, 336, 338,
	339, 340, 236, 1021, 237, 1022, 342, 862, 863, 343,
	344, 345, 864, 346, 347, 0, 0, 348, 349, 350,
	1023, 352, 351, 1024, 353, 239, 865, 354, 355, 866,
	1025, 356, 357, 1026, 1027, 358, 0, 359, 938, 937,
	360, 361, 363, 364, 362, 867, 365, 366, 368, 367,
	1028, 1029, 868, 1030, 240, 241, 369, 370, 1031, 371,
	372, 1032, 1033, 373, 374, 1034, 1035, 375, 242, 869,
	376, 870, 243, 377, 378, 379, 380, 381, 382, 383,
	1036, 384, 244, 385, 245, 386, 1037, 387, 388, 389,
	390, 391, 392, 246, 393, 394, 1038, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	1039, 407, 871, 408, 409, 410, 411, 247, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 1040, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 1041, 432, 413,
	414, 433, 872, 434, 248, 435, 436, 1042, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 249,
	1043, 447, 448, 1044, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 1045, 250, 251, 252, 456, 1046, 1047,
	457, 458, 253, 254, 1048, 459, 460, 0, 461, 462,
	1049, 1050, 463, 464, 465, 467, 1051, 468, 1052, 466,
	469, 470, 471, 255, 256, 1053, 473, 472, 257, 1054,
	1055, 1056, 1057, 474, 475, 258, 476, 477, 478, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2927, 259, 260, 261, 262, 978,
	263, 979, 980, 981, 982, 215, 983, 984, 985, 986,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	987, 270, 271, 272, 273, 274, 275, 276, 988, 989,
	277, 220, 221, 222, 990, 278, 223, 991, 963, 992,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	993, 288, 0, 289, 290, 994, 857, 291, 292, 995,
	996, 998, 997, 999, 1000, 1001, 293, 294, 501, 295,
	296, 297, 224, 225, 1002, 298, 1003, 299, 1004, 300,
	1005, 1006, 301, 302, 303, 1007, 304, 1008, 305, 306,
	1009, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 1010, 858, 1011, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 1012, 322, 1013, 1014,
	859, 323, 1015, 324, 230, 1016, 231, 325, 1017, 326,
	327, 328, 329, 330, 331, 232, 233, 234, 861, 1018,
	238, 333, 0, 0, 0, 1019, 332, 334, 341, 1020,
	860, 335, 235, 337, 336, 338, 339, 340, 236, 1021,
	237, 1022, 342, 862, 863, 343, 344, 345, 864, 346,
	347, 0, 0, 348, 349, 350, 1023, 352, 351, 1024,
	353, 239, 865, 354, 355, 866, 1025, 356, 357, 1026,
	1027, 358, 0, 359, 938, 937, 360, 361, 363, 364,
	362, 867, 365, 366, 368, 367, 1028, 1029, 868, 1030,
	240, 241, 369, 370, 1031, 371, 372, 1032, 1033, 373,
	374, 1034, 1035, 375, 242, 869, 376, 870, 243, 377,
	378, 379, 380, 381, 382, 383, 1036, 384, 244, 385,
	245, 386, 1037, 387, 388, 389, 390, 391, 392, 246,
	393, 394, 1038, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 1039, 407, 871, 408,
	409, 410, 411, 247, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 1040, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 1041, 432, 413, 414, 433, 872, 434,
	248, 435, 436, 1042, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 249, 1043, 447, 448, 1044,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 1045,
	250, 251, 252, 456, 1046, 1047, 457, 458, 253, 254,
	1048, 459, 460, 0, 461, 462, 1049, 1050, 463, 464,
	465, 467, 1051, 468, 1052, 466, 469, 470, 471, 255,
	256, 1053, 473, 472, 257, 1054, 1055, 1056, 1057, 474,
	475, 258, 476, 477, 478, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2576, 259, 260, 261, 262, 978, 263, 979, 980, 981,
	982, 215, 983, 984, 985, 986, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 987, 270, 271, 272,
	273, 274, 275, 276, 988, 989, 277, 220, 221, 222,
	990, 278, 223, 991, 963, 992, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 993, 288, 0, 289,
	290, 994, 857, 291, 292, 995, 996, 998, 997, 999,
	1000, 1001, 293, 294, 501, 295, 296, 297, 224, 225,
	1002, 298, 1003, 299, 1004, 300, 1005, 1006, 301, 302,
	303, 1007, 304, 1008, 305, 306, 1009, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 1010, 858, 1011,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 1012, 322, 1013, 1014, 859, 323, 1015, 324,
	230, 1016, 231, 325, 1017, 326, 327, 328, 329, 330,
	331, 232, 233, 234, 861, 1018, 238, 333, 0, 0,
	0, 1019, 332, 334, 341, 1020, 860, 335, 235, 337,
	336, 338, 339, 340, 236, 1021, 237, 1022, 342, 862,
	863, 343, 344, 345, 864, 346, 347, 0, 0, 348,
	349, 350, 1023, 352, 351, 1024, 353, 239, 865, 354,
	355, 866, 1025, 356, 357, 1026, 1027, 358, 0, 359,
	938, 937, 360, 361, 363, 364, 362, 867, 365, 366,
	368, 367, 1028, 1029, 868, 1030, 240, 241, 369, 370,
	1031, 371, 372, 1032, 1033, 373, 374, 1034, 1035, 375,
	242, 869, 376, 870, 243, 377, 378, 379, 380, 381,
	382, 383, 1036, 384, 244, 385, 245, 386, 1037, 387,
	388, 389, 390, 391, 392, 246, 393, 394, 1038, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 1039, 407, 871, 408, 409, 410, 411, 247,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 1040,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 1041,
	432, 413, 414, 433, 872, 434, 248, 435, 436, 1042,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 249, 1043, 447, 448, 1044, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 1045, 250, 251, 252, 456,
	1046, 1047, 457, 458, 253, 254, 1048, 459, 460, 0,
	461, 462, 1049, 1050, 463, 464, 465, 467, 1051, 468,
	1052, 466, 469, 470, 471, 255, 256, 1053, 473, 472,
	257, 1054, 1055, 1056, 1057, 474, 475, 258, 476, 477,
	478, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2568, 259, 260, 261,
	262, 978, 263, 979, 980, 981, 982, 215, 983, 984,
	985, 986, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 987, 270, 271, 272, 273, 274, 275, 276,
	988, 989, 277, 220, 221, 222, 990, 278, 223, 991,
	963, 992, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 993, 288, 0, 289, 290, 994, 857, 291,
	292, 995, 996, 998, 997, 999, 1000, 1001, 293, 294,
	501, 295, 296, 297, 224, 225, 1002, 298, 1003, 299,
	1004, 300, 1005, 1006, 301, 302, 303, 1007, 304, 1008,
	305, 306, 1009, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 1010, 858, 1011, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 1012, 322,
	1013, 1014, 859, 323, 1015, 324, 230, 1016, 231, 325,
	1017, 326, 327, 328, 329, 330, 331, 232, 233, 234,
	861, 1018, 238, 333, 0, 0, 0, 1019, 332, 334,
	341, 1020, 860, 335, 235, 337, 336, 338, 339, 340,
	236, 1021, 237, 1022, 342, 862, 863, 343, 344, 345,
	864, 346, 347, 0, 0, 348, 349, 350, 1023, 352,
	351, 1024, 353, 239, 865, 354, 355, 866, 1025, 356,
	357, 1026, 1027, 358, 0, 359, 938, 937, 360, 361,
	363, 364, 362, 867, 365, 366, 368, 367, 1028, 1029,
	868, 1030, 240, 241, 369, 370, 1031, 371, 372, 1032,
	1033, 373, 374, 1034, 1035, 375, 242, 869, 376, 870,
	243, 377, 378, 379, 380, 381, 382, 383, 1036, 384,
	244, 385, 245, 386, 1037, 387, 388, 389, 390, 391,
	392, 246, 393, 394, 1038, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 1039, 407,
	871, 408, 409, 410, 411, 247, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 1040, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 1041, 432, 413, 414, 433,
	872, 434, 248, 435, 436, 1042, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 249, 1043, 447,
	448, 1044, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 1045, 250, 251, 252, 456, 1046, 1047, 457, 458,
	253, 254, 1048, 459, 460, 0, 461, 462, 1049, 1050,
	463, 464, 465, 467, 1051, 468, 1052, 466, 469, 470,
	471, 255, 256, 1053, 473, 472, 257, 1054, 1055, 1056,
	1057, 474, 475, 258, 476, 477, 478, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2429, 259, 260, 261, 262, 978, 263, 979,
	980, 981, 982, 215, 983, 984, 985, 986, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 987, 270,
	271, 272, 273, 274, 275, 276, 988, 989, 277, 220,
	221, 222, 990, 278, 223, 991, 963, 992, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 993, 288,
	0, 289, 290, 994, 857, 291, 292, 995, 996, 998,
	997, 999, 1000, 1001, 293, 294, 501, 295, 296, 297,
	224, 225, 1002, 298, 1003, 299, 1004, 300, 1005, 1006,
	301, 302, 303, 1007, 304, 1008, 305, 306, 1009, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 1010,
	858, 1011, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 1012, 322, 1013, 1014, 859, 323,
	1015, 324, 230, 1016, 231, 325, 1017, 326, 327, 328,
	329, 330, 331, 232, 233, 234, 861, 1018, 238, 333,
	0, 0, 0, 1019, 332, 334, 341, 1020, 860, 335,
	235, 337, 336, 338, 339, 340, 236, 1021, 237, 1022,
	342, 862, 863, 343, 344, 345, 864, 346, 347, 0,
	0, 348, 349, 350, 1023, 352, 351, 1024, 353, 239,
	865, 354, 355, 866, 1025, 356, 357, 1026, 1027, 358,
	0, 359, 938, 937, 360, 361, 363, 364, 362, 867,
	365, 366, 368, 367, 1028, 1029, 868, 1030, 240, 241,
	369, 370, 1031, 371, 372, 1032, 1033, 373, 374, 1034,
	1035, 375, 242, 869, 376, 870, 243, 377, 378, 379,
	380, 381, 382, 383, 1036, 384, 244, 385, 245, 386,
	1037, 387, 388, 389, 390, 391, 392, 246, 393, 394,
	1038, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 1039, 407, 871, 408, 409, 410,
	411, 247, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 1040, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 1041, 432, 413, 414, 433, 872, 434, 248, 435,
	436, 1042, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 249, 1043, 447, 448, 1044, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 1045, 250, 251,
	252, 456, 1046, 1047, 457, 458, 253, 254, 1048, 459,
	460, 0, 461, 462, 1049, 1050, 463, 464, 465, 467,
	1051, 468, 1052, 466, 469, 470, 471, 255, 256, 1053,
	473, 472, 257, 1054, 1055, 1056, 1057, 474, 475, 258,
	476, 477, 478, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1878, 259,
	260, 261, 262, 978, 263, 979, 980, 981, 982, 215,
	983, 984, 985, 986, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 987, 270, 271, 272, 273, 274,
	275, 276, 988, 989, 277, 220, 221, 222, 990, 278,
	223, 991, 963, 992, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 993, 288, 0, 289, 290, 994,
	857, 291, 292, 995, 996, 998, 997, 999, 1000, 1001,
	293, 294, 501, 295, 296, 297, 224, 225, 1002, 298,
	1003, 299, 1004, 300, 1005, 1006, 301, 302, 303, 1007,
	304, 1008, 305, 306, 1009, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 1010, 858, 1011, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	1012, 322, 1013, 1014, 859, 323, 1015, 324, 230, 1016,
	231, 325, 1017, 326, 327, 328, 329, 330, 331, 232,
	233, 234, 861, 1018, 238, 333, 0, 0, 0, 1019,
	332, 334, 341, 1020, 860, 335, 235, 337, 336, 338,
	339, 340, 236, 1021, 237, 1022, 342, 862, 863, 343,
	344, 345, 864, 346, 347, 0, 0, 348, 349, 350,
	1023, 352, 351, 1024, 353, 239, 865, 354, 355, 866,
	1025, 356, 357, 1026, 1027, 358, 0, 359, 938, 937,
	360, 361, 363, 364, 362, 867, 365, 366, 368, 367,
	1028, 1029, 868, 1030, 240, 241, 369, 370, 1031, 371,
	372, 1032, 1033, 373, 374, 1034, 1035, 375, 242, 869,
	376, 870, 243, 377, 378, 379, 380, 381, 382, 383,
	1036, 384, 244, 385, 245, 386, 1037, 387, 388, 389,
	390, 391, 392, 246, 393, 394, 1038, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	1039, 407, 871, 408, 409, 410, 411, 247, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 1040, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 1041, 432, 413,
	414, 433, 872, 434, 248, 435, 436, 1042, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 249,
	1043, 447, 448, 1044, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 1045, 250, 251, 252, 456, 1046, 1047,
	457, 458, 253, 254, 1048, 459, 460, 0, 461, 462,
	1049, 1050, 463, 464, 465, 467, 1051, 468, 1052, 466,
	469, 470, 471, 255, 256, 1053, 473, 472, 257, 1054,
	1055, 1056, 1057, 474, 475, 258, 476, 477, 478, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1534, 259, 260, 261, 262, 978,
	263, 979, 980, 981, 982, 215, 983, 984, 985, 986,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	987, 270, 271, 272, 273, 274, 275, 276, 988, 989,
	277, 220, 221, 222, 990, 278, 223, 991, 963, 992,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	993, 288, 0, 289, 290, 994, 857, 291, 292, 995,
	996, 998, 997, 999, 1000, 1001, 293, 294, 501, 295,
	296, 297, 224, 225, 1002, 298, 1003, 299, 1004, 300,
	1005, 1006, 301, 302, 303, 1007, 304, 1008, 305, 306,
	1009, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 1010, 858, 1011, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 1012, 322, 1013, 1014,
	859, 323, 1015, 324, 230, 1016, 231, 325, 1017, 326,
	327, 328, 329, 330, 331, 232, 233, 234, 861, 1018,
	238, 333, 0, 0, 0, 1019, 332, 334, 341, 1020,
	860, 335, 235, 337, 336, 338, 339, 340, 236, 1021,
	237, 1022, 342, 862, 863, 343, 344, 345, 864, 346,
	347, 0, 0, 348, 349, 350, 1023, 352, 351, 1024,
	353, 239, 865, 354, 355, 866, 1025, 356, 357, 1026,
	1027, 358, 0, 359, 938, 937, 360, 361, 363, 364,
	362, 867, 365, 366, 368, 367, 1028, 1029, 868, 1030,
	240, 241, 369, 370, 1031, 371, 372, 1032, 1033, 373,
	374, 1034, 1035, 375, 242, 869, 376, 870, 243, 377,
	378, 379, 380, 381, 382, 383, 1036, 384, 244, 385,
	245, 386, 1037, 387, 388, 389, 390, 391, 392, 246,
	393, 394, 1038, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 1039, 407, 871, 408,
	409, 410, 411, 247, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 1040, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 1041, 432, 413, 414, 433, 872, 434,
	248, 435, 436, 1042, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 249, 1043, 447, 448, 1044,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 1045,
	250, 251, 252, 456, 1046, 1047, 457, 458, 253, 254,
	1048, 459, 460, 0, 461, 462, 1049, 1050, 463, 464,
	465, 467, 1051, 468, 1052, 466, 469, 470, 471, 255,
	256, 1053, 473, 472, 257, 1054, 1055, 1056, 1057, 474,
	475, 258, 476, 477, 478, 1856, 0, 802, 761, 762,
	759, 760, 772, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 1853, 263, 0,
	0, 0, 0, 848, 777, 0, 0, 0, 264, 265,
	266, 216, 817, 798, 828, 786, 827, 826, 0, 270,
	271, 788, 787, 274, 275, 276, 778, 847, 277, 874,
	873, 222, 0, 278, 854, 0, 837, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 857, 291, 292, 840, 838, 839,
	844, 842, 841, 843, 293, 294, 501, 295, 830, 297,
	824, 823, 751, 298, 0, 299, 0, 300, 1854, 0,
	301, 822, 303, 0, 304, 0, 305, 306, 0, 756,
	307, 308, 310, 313, 309, 314, 315, 876, 877, 768,
	858, 0, 0, 0, 0, 0, 316, 317, 318, 821,
	819, 820, 0, 321, 0, 322, 0, 0, 859, 323,
	0, 324, 878, 0, 231, 325, 0, 326, 327, 328,
	329, 330, 331, 849, 850, 853, 861, 0, 851, 797,
	0, 0, 0, 0, 332, 334, 341, 0, 860, 335,
	810, 801, 811, 812, 813, 814, 815, 0, 803, 0,
	342, 862, 863, 343, 344, 345, 864, 835, 836, 0,
	0, 348, 349, 350, 0, 352, 351, 0, 353, 879,
	865, 354, 355, 866, 0, 356, 357, 0, 0, 358,
	0, 359, 753, 752, 360, 361, 363, 790, 362, 867,
	365, 366, 368, 367, 748, 0, 868, 769, 852, 825,
	369, 370, 0, 799, 800, 0, 0, 373, 374, 0,
	0, 375, 242, 869, 376, 870, 880, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 881, 385, 245, 386,
	0, 387, 388, 389, 390, 391, 392, 818, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 871, 408, 409, 410,
	411, 757, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 791, 792, 793, 794, 424, 430,
	431, 845, 432, 413, 414, 433, 872, 434, 816, 795,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 856,
	441, 442, 443, 882, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 789, 0, 831, 832,
	833, 834, 0, 0, 457, 458, 883, 884, 767, 459,
	460, 0, 461, 462, 0, 0, 463, 464, 465, 467,
	846, 468, 0, 796, 469, 470, 471, 255, 875, 1852,
	473, 472, 257, 0, 0, 0, 0, 474, 475, 258,
	476, 477, 478, 749, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 745, 746, 1855, 0,
	0, 0, 0, 0, 0, 773, 1851, 0, 0, 0,
	733, 771, 802, 761, 762, 759, 760, 772, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 848, 777,
	0, 0, 0, 264, 265, 266, 216, 817, 798, 828,
	786, 827, 826, 0, 270, 271, 788, 787, 274, 275,
	276, 778, 847, 277, 874, 873, 222, 0, 278, 854,
	0, 837, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 857,
	291, 292, 840, 838, 839, 844, 842, 841, 843, 293,
	294, 501, 295, 830, 297, 824, 823, 751, 298, 0,
	299, 0, 300, 0, 0, 301, 822, 303, 0, 304,
	0, 305, 306, 0, 756, 307, 308, 310, 313, 309,
	314, 315, 876, 877, 768, 858, 0, 0, 0, 0,
	0, 316, 317, 318, 821, 819, 820, 0, 321, 0,
	322, 0, 0, 859, 323, 0, 324, 878, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 849, 850,
	853, 861, 0, 851, 797, 0, 0, 0, 0, 332,
	334, 341, 0, 860, 335, 810, 801, 811, 812, 813,
	814, 815, 0, 803, 0, 342, 862, 863, 343, 344,
	345, 864, 835, 836, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 879, 865, 354, 355, 866, 0,
	356, 357, 0, 0, 358, 0, 359, 753, 752, 360,
	361, 363, 790, 362, 867, 365, 366, 368, 367, 748,
	0, 868, 769, 852, 825, 369, 370, 0, 799, 800,
	0, 0, 373, 374, 0, 0, 375, 242, 869, 376,
	870, 880, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 881, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 818, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 871, 408, 409, 410, 411, 757, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 172, 428, 429, 791,
	792, 793, 794, 424, 430, 431, 845, 432, 413, 414,
	433, 872, 434, 816, 795, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 856, 441, 442, 443, 882, 0,
	447, 448, 174, 449, 450, 451, 452, 453, 311, 454,
	312, 789, 0, 831, 832, 833, 834, 0, 0, 457,
	458, 883, 884, 767, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 846, 468, 0, 796, 469,
	470, 471, 1158, 875, 0, 473, 472, 257, 0, 0,
	0, 166, 474, 475, 258, 476, 477, 478, 749, 167,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 802, 761, 762, 759, 760, 772, 0,
	1384, 1382, 0, 0, 0, 0, 771, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 848,
	777, 0, 0, 0, 264, 265, 266, 216, 817, 798,
	828, 786, 827, 826, 0, 270, 271, 788, 787, 274,
	275, 276, 778, 847, 277, 874, 873, 222, 0, 278,
	854, 0, 837, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	857, 291, 292, 840, 838, 839, 844, 842, 841, 843,
	293, 294, 501, 295, 830, 297, 824, 823, 751, 298,
	0, 299, 0, 300, 0, 0, 301, 822, 303, 0,
	304, 0, 305, 306, 0, 756, 307, 308, 310, 313,
	309, 314, 315, 876, 877, 768, 858, 0, 0, 0,
	0, 0, 316, 317, 318, 821, 819, 820, 0, 321,
	0, 322, 0, 0, 859, 323, 0, 324, 878, 0,
	231, 325, 0, 326, 327, 328, 329, 330, 331, 849,
	850, 853, 861, 0, 851, 797, 0, 0, 0, 0,
	332, 334, 341, 0, 860, 335, 810, 801, 811, 812,
	813, 814, 815, 0, 803, 0, 342, 862, 863, 343,
	344, 345, 864, 835, 836, 0, 0, 348, 349, 350,
	0, 352, 351, 0, 353, 879, 865, 354, 355, 866,
	0, 356, 357, 0, 0, 358, 0, 359, 753, 752,
	360, 361, 363, 790, 362, 867, 365, 366, 368, 367,
	748, 0, 868, 769, 852, 825, 369, 370, 0, 799,
	800, 0, 0, 373, 374, 0, 0, 375, 242, 869,
	376, 870, 880, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 881, 385, 245, 386, 0, 387, 388, 389,
	390, 391, 392, 818, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 871, 408, 409, 410, 411, 757, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 172, 428, 429,
	791, 792, 793, 794, 424, 430, 431, 845, 432, 413,
	414, 433, 872, 434, 816, 795, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 856, 441, 442, 443, 882,
	0, 447, 448, 174, 449, 450, 451, 452, 453, 311,
	454, 312, 789, 0, 831, 832, 833, 834, 0, 0,
	457, 458, 883, 884, 767, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 846, 468, 0, 796,
	469, 470, 471, 1158, 875, 0, 473, 472, 257, 0,
	0, 0, 166, 474, 475, 258, 476, 477, 478, 749,
	167, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 745, 746, 802, 761, 762, 759, 760, 772,
	0, 1384, 2226, 0, 0, 0, 0, 771, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	848, 777, 0, 0, 0, 264, 265, 266, 216, 817,
	798, 828, 786, 827, 826, 0, 270, 271, 788, 787,
	274, 275, 276, 778, 847, 277, 874, 873, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 501, 295, 830, 297, 824, 823, 751,
	298, 0, 299, 0, 300, 0, 0, 301, 822, 303,
	0, 304, 0, 305, 306, 0, 756, 307, 308, 310,
	313, 309, 314, 315, 876, 877, 768, 858, 0, 0,
	0, 0, 0, 316, 317, 318, 821, 819, 820, 0,
	321, 0, 322, 0, 0, 859, 323, 0, 324, 878,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 810, 801, 811,
	812, 813, 814, 815, 0, 803, 0, 342, 862, 863,
	343, 344, 345, 864, 835, 836, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 753,
	752, 360, 361, 363, 790, 362, 867, 365, 366, 368,
	367, 748, 0, 868, 769, 852, 825, 369, 370, 0,
	799, 800, 0, 0, 373, 374, 0, 0, 375, 242,
	869, 376, 870, 880, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 881, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 818, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 871, 408, 409, 410, 411, 757, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 172, 428,
	429, 791, 792, 793, 794, 424, 430, 431, 845, 432,
	413, 414, 433, 872, 434, 816, 795, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 856, 441, 442, 443,
	882, 0, 447, 448, 174, 449, 450, 451, 452, 453,
	311, 454, 312, 789, 0, 831, 832, 833, 834, 0,
	0, 457, 458, 883, 884, 767, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 846, 468, 0,
	796, 469, 470, 471, 1158, 875, 0, 473, 472, 257,
	0, 0, 0, 166, 474, 475, 258, 476, 477, 478,
	749, 167, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 802, 761, 762, 759, 760,
	772, 0, 1384, 1382, 0, 0, 0, 0, 771, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 848, 777, 0, 0, 0, 264, 265, 266, 216,
	817, 798, 828, 786, 827, 826, 1940, 270, 271, 788,
	787, 274, 275, 276, 778, 847, 277, 874, 873, 222,
	0, 278, 854, 0, 837, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 857, 291, 292, 840, 838, 839, 844, 842,
	841, 843, 293, 294, 501, 295, 830, 297, 824, 823,
	751, 298, 0, 299, 0, 300, 0, 0, 301, 822,
	303, 0, 304, 0, 305, 306, 0, 756, 307, 308,
	310, 313, 309, 314, 315, 876, 877, 768, 858, 0,
	0, 0, 0, 0, 316, 317, 318, 821, 819, 820,
	0, 321, 0, 322, 0, 1945, 859, 323, 0, 324,
	878, 0, 231, 325, 0, 326, 327, 328, 329, 330,
	331, 849, 850, 853, 861, 0, 851, 797, 0, 0,
	0, 0, 332, 334, 341, 0, 860, 335, 810, 801,
	811, 812, 813, 814, 815, 0, 803, 0, 342, 862,
	863, 343, 344, 345, 864, 835, 836, 0, 0, 348,
	349, 350, 0, 352, 351, 1941, 353, 879, 865, 354,
	355, 866, 0, 356, 357, 0, 0, 358, 0, 359,
	753, 752, 360, 361, 363, 790, 362, 867, 365, 366,
	368, 367, 748, 0, 868, 769, 852, 825, 369, 370,
	0, 799, 800, 0, 0, 373, 374, 0, 0, 375,
	242, 869, 376, 870, 880, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 881, 385, 245, 386, 0, 387,
	388, 389, 390, 391, 392, 818, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 871, 408, 409, 410, 411, 757,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 791, 792, 793, 794, 424, 430, 431, 845,
	432, 413, 414, 433, 872, 434, 816, 795, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 856, 441, 442,
	443, 882, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 789, 0, 831, 832, 833, 834,
	0, 1942, 457, 458, 883, 884, 767, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 846, 468,
	0, 796, 469, 470, 471, 255, 875, 0, 473, 472,
	257, 0, 0, 0, 0, 474, 475, 258, 476, 477,
	478, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 802, 761, 762, 759,
	760, 772, 0, 773, 0, 0, 0, 0, 0, 771,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 848, 777, 0, 0, 0, 264, 265, 266,
	216, 817, 798, 828, 786, 827, 826, 0, 270, 271,
	788, 787, 274, 275, 276, 778, 847, 277, 874, 873,
	222, 0, 278, 854, 0, 837, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 857, 291, 292, 840, 838, 839, 844,
	842, 841, 843, 293, 294, 501, 295, 830, 297, 824,
	823, 751, 298, 0, 299, 0, 300, 0, 0, 301,
	822, 303, 0, 304, 0, 305, 306, 0, 756, 307,
	308, 310, 313, 309, 314, 315, 876, 877, 768, 858,
	0, 0, 0, 0, 0, 316, 317, 318, 821, 819,
	820, 0, 321, 0, 322, 0, 0, 859, 323, 0,
	324, 878, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 849, 850, 853, 861, 0, 851, 797, 0,
	0, 0, 0, 332, 334, 341, 0, 860, 335, 810,
	801, 811, 812, 813, 814, 815, 0, 803, 0, 342,
	862, 863, 343, 344, 345, 864, 835, 836, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 879, 865,
	354, 355, 866, 0, 356, 357, 0, 0, 358, 0,
	359, 753, 752, 360, 361, 363, 790, 362, 867, 365,
	366, 368, 367, 748, 2729, 868, 769, 852, 825, 369,
	370, 0, 799, 800, 0, 0, 373, 374, 0, 0,
	375, 242, 869, 376, 870, 880, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 881, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 818, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 871, 408, 409, 410, 411,
	757, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 791, 792, 793, 794, 424, 430, 431,
	845, 432, 413, 414, 433, 872, 434, 816, 795, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 856, 441,
	442, 443, 882, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 789, 0, 831, 832, 833,
	834, 0, 0, 457, 458, 883, 884, 767, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 846,
	468, 0, 796, 469, 470, 471, 255, 875, 0, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 749, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 745, 746, 1446, 802, 761,
	762, 759, 760, 772, 773, 0, 0, 0, 0, 0,
	771, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 848, 777, 0, 0, 0, 264,
	265, 266, 216, 817, 798, 828, 786, 827, 826, 0,
	270, 271, 788, 787, 274, 275, 276, 778, 847, 277,
	874, 873, 222, 0, 278, 854, 0, 837, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 857, 291, 292, 840, 838,
	839, 844, 842, 841, 843, 293, 294, 501, 295, 830,
	297, 824, 823, 751, 298, 0, 299, 0, 300, 0,
	0, 301, 822, 303, 0, 304, 0, 305, 306, 0,
	756, 307, 308, 310, 313, 309, 314, 315, 876, 877,
	768, 858, 0, 0, 0, 0, 0, 316, 317, 318,
	821, 819, 820, 0, 321, 0, 322, 0, 0, 859,
	323, 0, 324, 878, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 849, 850, 853, 861, 0, 851,
	797, 0, 0, 0, 1770, 332, 334, 341, 0, 860,
	335, 810, 801, 811, 812, 813, 814, 815, 0, 803,
	0, 342, 862, 863, 343, 344, 345, 864, 835, 836,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	879, 865, 354, 355, 866, 0, 356, 357, 0, 0,
	358, 0, 359, 753, 752, 360, 361, 363, 790, 362,
	867, 365, 366, 368, 367, 748, 0, 868, 769, 852,
	825, 369, 370, 0, 799, 800, 0, 0, 373, 374,
	0, 0, 375, 242, 869, 376, 870, 880, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 881, 385, 245,
	386, 1769, 387, 388, 389, 390, 391, 392, 818, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 871, 408, 409,
	410, 411, 757, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 791, 792, 793, 794, 424,
	430, 431, 845, 432, 413, 414, 433, 872, 434, 816,
	795, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	856, 441, 442, 443, 882, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 789, 0, 831,
	832, 833, 834, 0, 0, 457, 458, 883, 884, 767,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 846, 468, 0, 796, 469, 470, 471, 255, 875,
	0, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 0,
	0, 0, 0, 0, 0, 0, 773, 0, 0, 0,
	0, 741, 771, 802, 761, 762, 759, 760, 772, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 848,
	777, 0, 0, 0, 264, 265, 266, 216, 817, 798,
	828, 786, 827, 826, 0, 270, 271, 788, 787, 274,
	275, 276, 778, 847, 277, 874, 873, 222, 0, 278,
	854, 0, 837, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	857, 291, 292, 840, 838, 839, 844, 842, 841, 843,
	293, 294, 501, 295, 830, 297, 824, 823, 751, 298,
	0, 299, 0, 300, 0, 0, 301, 822, 303, 0,
	304, 0, 305, 306, 0, 756, 307, 308, 310, 313,
	309, 314, 315, 876, 877, 768, 858, 0, 0, 0,
	0, 0, 316, 317, 318, 821, 819, 820, 0, 321,
	0, 322, 0, 0, 859, 323, 0, 324, 878, 0,
	231, 325, 0, 326, 327, 328, 329, 330, 331, 849,
	850, 853, 861, 0, 851, 797, 0, 0, 0, 0,
	332, 334, 341, 0, 860, 335, 810, 801, 811, 812,
	813, 814, 815, 0, 803, 0, 342, 862, 863, 343,
	344, 345, 864, 835, 836, 0, 0, 348, 349, 350,
	0, 352, 351, 0, 353, 879, 865, 354, 355, 866,
	0, 356, 357, 0, 0, 358, 0, 359, 753, 752,
	360, 361, 363, 790, 362, 867, 365, 366, 368, 367,
	748, 0, 868, 769, 852, 825, 369, 370, 0, 799,
	800, 743, 0, 373, 374, 0, 0, 375, 242, 869,
	376, 870, 880, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 881, 385, 245, 386, 0, 387, 388, 389,
	390, 391, 392, 818, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 871, 408, 409, 410, 411, 757, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	791, 792, 793, 794, 424, 430, 431, 845, 432, 413,
	414, 433, 872, 434, 816, 795, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 856, 441, 442, 443, 882,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 789, 0, 831, 832, 833, 834, 0, 0,
	457, 458, 883, 884, 767, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 846, 468, 0, 796,
	469, 470, 471, 255, 875, 0, 473, 472, 257, 0,
	0, 0, 0, 474, 475, 258, 476, 477, 478, 749,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 745, 746, 802, 761, 762, 759, 760, 772,
	0, 773, 0, 0, 0, 0, 0, 771, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	848, 777, 0, 0, 0, 264, 265, 266, 216, 817,
	798, 828, 786, 827, 826, 0, 270, 271, 788, 787,
	274, 275, 276, 778, 847, 277, 874, 873, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 501, 295, 830, 297, 824, 823, 751,
	298, 0, 299, 0, 300, 0, 0, 301, 822, 303,
	0, 304, 0, 305, 306, 0, 756, 307, 308, 310,
	313, 309, 314, 315, 876, 877, 768, 858, 0, 0,
	0, 0, 0, 316, 317, 318, 821, 819, 820, 0,
	321, 0, 322, 0, 0, 859, 323, 0, 324, 878,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 810, 801, 811,
	812, 813, 814, 815, 0, 803, 0, 342, 862, 863,
	343, 344, 345, 864, 835, 836, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 753,
	752, 360, 361, 363, 790, 362, 867, 365, 366, 368,
	367, 748, 0, 868, 769, 852, 825, 369, 370, 0,
	799, 800, 0, 0, 373, 374, 0, 0, 375, 242,
	869, 376, 870, 880, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 881, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 818, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 871, 408, 409, 410, 411, 757, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 791, 792, 793, 794, 424, 430, 431, 845, 432,
	413, 414, 433, 872, 434, 816, 795, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 856, 441, 442, 443,
	882, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 789, 0, 831, 832, 833, 834, 0,
	0, 457, 458, 883, 884, 767, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 846, 468, 0,
	796, 469, 470, 471, 255, 875, 2555, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 802, 761, 762, 759, 760,
	772, 0, 773, 0, 0, 0, 0, 0, 771, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 848, 777, 0, 0, 0, 264, 265, 266, 216,
	817, 798, 828, 786, 827, 826, 0, 270, 271, 788,
	787, 274, 275, 276, 778, 847, 277, 874, 873, 222,
	0, 278, 854, 0, 837, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 857, 291, 292, 840, 838, 839, 844, 842,
	841, 843, 293, 294, 501, 295, 830, 297, 824, 823,
	751, 298, 0, 299, 0, 300, 0, 0, 301, 822,
	303, 0, 304, 0, 305, 306, 0, 756, 307, 308,
	310, 313, 309, 314, 315, 876, 877, 768, 858, 0,
	0, 0, 0, 0, 316, 317, 318, 821, 819, 820,
	0, 321, 0, 322, 0, 0, 859, 323, 0, 324,
	878, 0, 231, 325, 0, 326, 327, 328, 329, 330,
	331, 849, 850, 853, 861, 0, 851, 797, 0, 0,
	0, 0, 332, 334, 341, 0, 860, 335, 810, 801,
	811, 812, 813, 814, 815, 0, 803, 0, 342, 862,
	863, 343, 344, 345, 864, 835, 836, 0, 0, 348,
	349, 350, 0, 352, 351, 0, 353, 879, 865, 354,
	355, 866, 0, 356, 357, 0, 0, 358, 0, 359,
	753, 752, 360, 361, 363, 790, 362, 867, 365, 366,
	368, 367, 748, 0, 868, 769, 852, 825, 369, 370,
	0, 799, 800, 743, 0, 373, 374, 0, 0, 375,
	242, 869, 376, 870, 880, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 881, 385, 245, 386, 0, 387,
	388, 389, 390, 391, 392, 818, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 871, 408, 409, 410, 411, 757,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 791, 792, 793, 794, 424, 430, 431, 845,
	432, 413, 414, 433, 872, 434, 816, 795, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 856, 441, 442,
	443, 882, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 789, 0, 831, 832, 833, 834,
	0, 0, 457, 458, 883, 884, 767, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 846, 468,
	0, 796, 469, 470, 471, 255, 875, 0, 473, 472,
	257, 0, 0, 0, 0, 474, 475, 258, 476, 477,
	478, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 802, 761, 762, 759,
	760, 772, 0, 773, 0, 0, 0, 0, 0, 771,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 848, 777, 0, 0, 0, 264, 265, 266,
	216, 817, 798, 828, 786, 827, 826, 0, 270, 271,
	788, 787, 274, 275, 276, 778, 847, 277, 874, 873,
	222, 0, 278, 854, 0, 837, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 857, 291, 292, 840, 838, 839, 844,
	842, 841, 843, 293, 294, 501, 295, 830, 297, 824,
	823, 751, 298, 0, 299, 0, 300, 0, 0, 301,
	822, 303, 0, 304, 0, 305, 306, 0, 756, 307,
	308, 310, 313, 309, 314, 315, 876, 877, 768, 858,
	0, 0, 0, 0, 0, 316, 317, 318, 821, 819,
	820, 0, 321, 0, 322, 0, 0, 859, 323, 0,
	324, 878, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 849, 850, 853, 861, 0, 851, 797, 0,
	0, 0, 0, 332, 334, 341, 0, 860, 335, 810,
	801, 811, 812, 813, 814, 815, 0, 803, 0, 342,
	862, 863, 343, 344, 345, 864, 835, 836, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 879, 865,
	354, 355, 866, 0, 356, 357, 0, 0, 358, 0,
	359, 753, 752, 360, 361, 363, 790, 362, 867, 365,
	366, 368, 367, 748, 0, 868, 769, 852, 825, 369,
	370, 0, 799, 800, 0, 0, 373, 374, 0, 0,
	375, 242, 869, 376, 870, 880, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 881, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 818, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 871, 408, 409, 410, 411,
	757, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 791, 792, 793, 794, 424, 430, 431,
	845, 432, 413, 414, 433, 872, 434, 816, 795, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 856, 441,
	442, 443, 882, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 789, 0, 831, 832, 833,
	834, 0, 0, 457, 458, 883, 884, 767, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 846,
	468, 0, 796, 469, 470, 471, 255, 875, 0, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 749, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 745, 746, 1446, 802, 761,
	762, 759, 760, 772, 773, 0, 0, 0, 0, 0,
	771, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 848, 777, 0, 0, 0, 264,
	265, 266, 216, 817, 798, 828, 786, 827, 826, 0,
	270, 271, 788, 787, 274, 275, 276, 778, 847, 277,
	874, 873, 222, 0, 278, 854, 0, 837, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 857, 291, 292, 840, 838,
	839, 844, 842, 841, 843, 293, 294, 501, 295, 830,
	297, 824, 823, 751, 298, 0, 299, 0, 300, 0,
	0, 301, 822, 303, 0, 304, 0, 305, 306, 0,
	756, 307, 308, 310, 313, 309, 314, 315, 876, 877,
	768, 858, 0, 0, 0, 0, 0, 316, 317, 318,
	821, 819, 820, 0, 321, 0, 322, 0, 1945, 859,
	323, 0, 324, 878, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 849, 850, 853, 861, 0, 851,
	797, 0, 0, 0, 0, 332, 334, 341, 0, 860,
	335, 810, 801, 811, 812, 813, 814, 815, 0, 803,
	0, 342, 862, 863, 343, 344, 345, 864, 835, 836,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	879, 865, 354, 355, 866, 0, 356, 357, 0, 0,
	358, 0, 359, 753, 752, 360, 361, 363, 790, 362,
	867, 365, 366, 368, 367, 748, 0, 868, 769, 852,
	825, 369, 370, 0, 799, 800, 0, 0, 373, 374,
	0, 0, 375, 242, 869, 376, 870, 880, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 881, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 818, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 871, 408, 409,
	410, 411, 757, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 791, 792, 793, 794, 424,
	430, 431, 845, 432, 413, 414, 433, 872, 434, 816,
	795, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	856, 441, 442, 443, 882, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 789, 0, 831,
	832, 833, 834, 0, 0, 457, 458, 883, 884, 767,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 846, 468, 0, 796, 469, 470, 471, 255, 875,
	0, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 802,
	761, 762, 759, 760, 772, 0, 773, 0, 0, 0,
	0, 0, 771, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 848, 777, 0, 0, 0,
	264, 265, 266, 216, 817, 798, 828, 786, 827, 826,
	0, 270, 271, 788, 787, 274, 275, 276, 778, 847,
	277, 874, 873, 222, 0, 278, 854, 0, 837, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 857, 291, 292, 840,
	838, 839, 844, 842, 841, 843, 293, 294, 501, 295,
	830, 297, 824, 823, 751, 298, 0, 299, 0, 300,
	0, 0, 301, 822, 303, 0, 304, 0, 305, 306,
	0, 756, 307, 308, 310, 313, 309, 314, 315, 876,
	877, 768, 858, 0, 0, 0, 0, 0, 316, 317,
	318, 821, 819, 820, 0, 321, 0, 322, 0, 0,
	859, 323, 0, 324, 878, 0, 231, 325, 0, 326,
	327, 328, 329, 330, 331, 849, 850, 853, 861, 0,
	851, 797, 0, 0, 0, 0, 332, 334, 341, 0,
	860, 335, 810, 801, 811, 812, 813, 814, 815, 0,
	803, 0, 342, 862, 863, 343, 344, 345, 864, 835,
	836, 0, 0, 348, 349, 350, 0, 352, 351, 0,
	353, 879, 865, 354, 355, 866, 0, 356, 357, 0,
	0, 358, 0, 359, 753, 752, 360, 361, 363, 790,
	362, 867, 365, 366, 368, 367, 748, 0, 868, 769,
	852, 825, 369, 370, 0, 799, 800, 0, 0, 373,
	374, 0, 0, 375, 242, 869, 376, 870, 880, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 881, 385,
	245, 386, 0, 387, 388, 389, 390, 391, 392, 818,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 871, 408,
	409, 410, 411, 757, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 791, 792, 793, 794,
	424, 430, 431, 845, 432, 413, 414, 433, 872, 434,
	816, 795, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 856, 441, 442, 443, 882, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 789, 0,
	831, 832, 833, 834, 0, 0, 457, 458, 883, 884,
	767, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 846, 468, 0, 796, 469, 470, 471, 255,
	875, 0, 473, 472, 257, 0, 0, 0, 0, 474,
	475, 258, 476, 477, 478, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	0, 0, 0, 0, 0, 0, 0, 773, 1382, 0,
	0, 0, 1936, 771, 802, 761, 762, 759, 760, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	848, 777, 0, 0, 0, 264, 265, 266, 216, 817,
	798, 828, 786, 827, 826, 0, 270, 271, 788, 787,
	274, 275, 276, 778, 847, 277, 874, 873, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 501, 295, 830, 297, 824, 823, 751,
	298, 0, 299, 0, 300, 0, 0, 301, 822, 303,
	0, 304, 0, 305, 306, 0, 756, 307, 308, 310,
	313, 309, 314, 315, 876, 877, 768, 858, 0, 0,
	0, 0, 0, 316, 317, 318, 821, 819, 820, 0,
	321, 0, 322, 0, 0, 859, 323, 0, 324, 878,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 810, 801, 811,
	812, 813, 814, 815, 0, 803, 0, 342, 862, 863,
	343, 344, 345, 864, 835, 836, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 753,
	752, 360, 361, 363, 790, 362, 867, 365, 366, 368,
	367, 748, 0, 868, 769, 852, 825, 369, 370, 0,
	799, 800, 0, 0, 373, 374, 0, 0, 375, 242,
	869, 376, 870, 880, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 881, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 818, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 871, 408, 409, 410, 411, 757, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 791, 792, 793, 794, 424, 430, 431, 845, 432,
	413, 414, 433, 872, 434, 816, 795, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 856, 441, 442, 443,
	882, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 789, 0, 831, 832, 833, 834, 0,
	0, 457, 458, 883, 884, 767, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 846, 468, 0,
	796, 469, 470, 471, 255, 875, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 0, 0, 0, 0, 0,
	0, 0, 773, 0, 0, 0, 0, 1925, 771, 802,
	761, 762, 759, 760, 772, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 848, 777, 0, 0, 0,
	264, 265, 266, 216, 817, 798, 828, 786, 827, 826,
	0, 270, 271, 788, 787, 274, 275, 276, 778, 847,
	277, 874, 873, 222, 0, 278, 854, 0, 837, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 857, 291, 292, 840,
	838, 839, 844, 842, 841, 843, 293, 294, 501, 295,
	830, 297, 824, 823, 751, 298, 0, 299, 0, 300,
	0, 0, 301, 822, 303, 0, 304, 0, 305, 306,
	0, 756, 307, 308, 310, 313, 309, 314, 315, 876,
	877, 768, 858, 0, 0, 0, 0, 0, 316, 317,
	318, 821, 819, 820, 0, 321, 0, 322, 0, 0,
	859, 323, 0, 324, 878, 0, 231, 325, 0, 326,
	327, 328, 329, 330, 331, 849, 850, 853, 861, 0,
	851, 797, 0, 0, 0, 0, 332, 334, 341, 0,
	860, 335, 810, 801, 811, 812, 813, 814, 815, 0,
	803, 0, 342, 862, 863, 343, 344, 345, 864, 835,
	836, 0, 0, 348, 349, 350, 0, 352, 351, 0,
	353, 879, 865, 354, 355, 866, 0, 356, 357, 0,
	0, 358, 0, 359, 753, 752, 360, 361, 363, 790,
	362, 867, 365, 366, 368, 367, 748, 0, 868, 769,
	852, 825, 369, 370, 0, 799, 800, 0, 0, 373,
	374, 0, 0, 375, 242, 869, 376, 870, 880, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 881, 385,
	245, 386, 0, 387, 388, 389, 390, 391, 392, 818,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 871, 408,
	409, 410, 411, 757, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 791, 792, 793, 794,
	424, 430, 431, 845, 432, 413, 414, 433, 872, 434,
	816, 795, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 856, 441, 442, 443, 882, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 789, 0,
	831, 832, 833, 834, 0, 0, 457, 458, 883, 884,
	767, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 846, 468, 0, 796, 469, 470, 471, 255,
	875, 0, 473, 472, 257, 0, 0, 0, 0, 474,
	475, 258, 476, 477, 478, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	0, 0, 0, 0, 0, 0, 0, 773, 0, 0,
	0, 0, 1923, 771, 802, 761, 762, 759, 760, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	848, 777, 0, 0, 0, 264, 265, 266, 216, 817,
	798, 828, 786, 827, 826, 0, 270, 271, 788, 787,
	274, 275, 276, 778, 847, 277, 874, 873, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 501, 295, 830, 297, 824, 823, 751,
	298, 0, 299, 0, 300, 0, 0, 301, 822, 303,
	0, 304, 0, 305, 306, 0, 756, 307, 308, 310,
	313, 309, 314, 315, 876, 877, 768, 858, 0, 0,
	0, 0, 0, 316, 317, 318, 821, 819, 820, 0,
	321, 0, 322, 0, 0, 859, 323, 0, 324, 878,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 810, 801, 811,
	812, 813, 814, 815, 0, 803, 0, 342, 862, 863,
	343, 344, 345, 864, 835, 836, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 753,
	752, 360, 361, 363, 790, 362, 867, 365, 366, 368,
	367, 748, 0, 868, 769, 852, 825, 369, 370, 0,
	799, 800, 0, 0, 373, 374, 0, 0, 375, 242,
	869, 376, 870, 880, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 881, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 818, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 871, 408, 409, 410, 411, 757, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 791, 792, 793, 794, 424, 430, 431, 845, 432,
	413, 414, 433, 872, 434, 816, 795, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 856, 441, 442, 443,
	882, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 789, 0, 831, 832, 833, 834, 0,
	0, 457, 458, 883, 884, 767, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 846, 468, 0,
	796, 469, 470, 471, 255, 875, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 0, 0, 0, 0, 0,
	0, 0, 773, 0, 0, 0, 0, 1921, 771, 802,
	761, 762, 759, 760, 772, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 848, 777, 0, 0, 0,
	264, 265, 266, 216, 817, 798, 828, 786, 827, 826,
	0, 270, 271, 788, 787, 274, 275, 276, 778, 847,
	277, 874, 873, 222, 0, 278, 854, 0, 837, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 857, 291, 292, 840,
	838, 839, 844, 842, 841, 843, 293, 294, 501, 295,
	830, 297, 824, 823, 751, 298, 0, 299, 0, 300,
	0, 0, 301, 822, 303, 0, 304, 0, 305, 306,
	0, 756, 307, 308, 310, 313, 309, 314, 315, 876,
	877, 768, 858, 0, 0, 0, 0, 0, 316, 317,
	318, 821, 819, 820, 0, 321, 0, 322, 0, 0,
	859, 323, 0, 324, 878, 0, 231, 325, 0, 326,
	327, 328, 329, 330, 331, 849, 850, 853, 861, 0,
	851, 797, 0, 0, 0, 0, 332, 334, 341, 0,
	860, 335, 810, 801, 811, 812, 813, 814, 815, 0,
	803, 0, 342, 862, 863, 343, 344, 345, 864, 835,
	836, 0, 0, 348, 349, 350, 0, 352, 351, 0,
	353, 879, 865, 354, 355, 866, 0, 356, 357, 0,
	0, 358, 0, 359, 753, 752, 360, 361, 363, 790,
	362, 867, 365, 366, 368, 367, 748, 0, 868, 769,
	852, 825, 369, 370, 0, 799, 800, 0, 0, 373,
	374, 0, 0, 375, 242, 869, 376, 870, 880, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 881, 385,
	245, 386, 0, 387, 388, 389, 390, 391, 392, 818,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 871, 408,
	409, 410, 411, 757, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 791, 792, 793, 794,
	424, 430, 431, 845, 432, 413, 414, 433, 872, 434,
	816, 795, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 856, 441, 442, 443, 882, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 789, 0,
	831, 832, 833, 834, 0, 0, 457, 458, 883, 884,
	767, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 846, 468, 0, 796, 469, 470, 471, 255,
	875, 0, 473, 472, 257, 0, 0, 0, 0, 474,
	475, 258, 476, 477, 478, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	0, 0, 0, 0, 0, 0, 0, 773, 0, 0,
	0, 0, 1919, 771, 1911, 761, 762, 759, 760, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	848, 777, 0, 0, 0, 264, 265, 266, 216, 817,
	798, 828, 786, 827, 826, 0, 270, 271, 788, 787,
	274, 275, 276, 778, 847, 277, 874, 873, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 501, 295, 830, 1914, 824, 823, 751,
	298, 0, 299, 0, 300, 0, 0, 301, 822, 303,
	0, 304, 0, 305, 306, 0, 756, 307, 308, 310,
	313, 309, 314, 315, 876, 877, 768, 858, 0, 0,
	0, 0, 0, 316, 317, 318, 821, 819, 820, 0,
	321, 0, 322, 0, 0, 859, 323, 0, 324, 878,
	0, 231, 325, 0, 326, 327, 1915, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 810, 801, 811,
	812, 813, 814, 815, 0, 803, 0, 342, 862, 863,
	343, 344, 345, 864, 835, 836, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 753,
	752, 1916, 1913, 363, 790, 362, 867, 365, 366, 368,
	367, 748, 0, 868, 769, 852, 825, 369, 370, 0,
	799, 800, 0, 0, 373, 374, 0, 0, 375, 242,
	869, 376, 870, 880, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 881, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 818, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 871, 408, 409, 410, 411, 757, 412,
	0, 416, 417, 418, 419, 420, 421, 1917, 0, 428,
	429, 791, 792, 793, 794, 424, 430, 431, 845, 432,
	413, 414, 433, 872, 434, 816, 795, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 856, 441, 442, 443,
	882, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 789, 0, 831, 832, 833, 834, 0,
	0, 457, 458, 883, 884, 767, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 846, 468, 0,
	796, 469, 470, 471, 255, 875, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 1912, 478,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 0, 0, 0, 0, 0,
	0, 0, 773, 0, 0, 0, 0, 1908, 771, 1911,
	761, 762, 759, 760, 772, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 848, 777, 0, 0, 0,
	264, 265, 266, 216, 817, 798, 828, 786, 827, 826,
	0, 270, 271, 788, 787, 274, 275, 276, 778, 847,
	277, 874, 873, 222, 0, 278, 854, 0, 837, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 857, 291, 292, 840,
	838, 839, 844, 842, 841, 843, 293, 294, 501, 295,
	830, 1914, 824, 823, 751, 298, 0, 299, 0, 300,
	0, 0, 301, 822, 303, 0, 304, 0, 305, 306,
	0, 756, 307, 308, 310, 313, 309, 314, 315, 876,
	877, 768, 858, 0, 0, 0, 0, 0, 316, 317,
	318, 821, 819, 820, 0, 321, 0, 322, 0, 0,
	859, 323, 0, 324, 878, 0, 231, 325, 0, 326,
	327, 1915, 329, 330, 331, 849, 850, 853, 861, 0,
	851, 797, 0, 0, 0, 0, 332, 334, 341, 0,
	860, 335, 810, 801, 811, 812, 813, 814, 815, 0,
	803, 0, 342, 862, 863, 343, 344, 345, 864, 835,
	836, 0, 0, 348, 349, 350, 0, 352, 351, 0,
	353, 879, 865, 354, 355, 866, 0, 356, 357, 0,
	0, 358, 0, 359, 753, 752, 1916, 1913, 363, 790,
	362, 867, 365, 366, 368, 367, 748, 0, 868, 769,
	852, 825, 369, 370, 0, 799, 800, 0, 0, 373,
	374, 0, 0, 375, 242, 869, 376, 870, 880, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 881, 385,
	245, 386, 0, 387, 388, 389, 390, 391, 392, 818,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 871, 408,
	409, 410, 411, 757, 412, 0, 416, 417, 418, 419,
	420, 421, 1917, 0, 428, 429, 791, 792, 793, 794,
	424, 430, 431, 845, 432, 413, 414, 433, 872, 434,
	816, 795, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 856, 441, 442, 443, 882, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 789, 0,
	831, 832, 833, 834, 0, 0, 457, 458, 883, 884,
	767, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 846, 468, 0, 796, 469, 470, 471, 255,
	875, 0, 473, 472, 257, 0, 0, 0, 0, 474,
	475, 258, 476, 1912, 478, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	802, 761, 762, 759, 760, 772, 0, 773, 0, 0,
	0, 0, 0, 771, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 777, 0, 0,
	0, 264, 265, 266, 216, 817, 798, 828, 786, 827,
	826, 0, 270, 271, 788, 787, 274, 275, 276, 778,
	847, 277, 874, 873, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 501,
	295, 830, 297, 824, 823, 751, 298, 0, 299, 0,
	300, 0, 0, 301, 822, 303, 0, 304, 0, 305,
	306, 0, 756, 307, 308, 310, 313, 309, 314, 315,
	876, 877, 768, 858, 0, 0, 0, 0, 0, 316,
	317, 318, 821, 819, 820, 0, 321, 0, 322, 0,
	0, 859, 323, 0, 324, 878, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 797, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 810, 801, 811, 812, 813, 814, 815,
	0, 803, 0, 342, 862, 863, 343, 344, 345, 864,
	835, 836, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 753, 752, 360, 361, 363,
	790, 362, 867, 365, 366, 368, 367, 748, 0, 868,
	769, 852, 825, 369, 370, 0, 799, 800, 0, 0,
	373, 374, 0, 0, 375, 242, 869, 376, 870, 880,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 881,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	818, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 871,
	408, 409, 410, 411, 757, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 791, 792, 793,
	794, 424, 430, 431, 845, 432, 413, 414, 433, 872,
	434, 816, 795, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 856, 441, 442, 443, 882, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 789,
	0, 831, 832, 833, 834, 0, 0, 457, 458, 883,
	884, 767, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 846, 468, 0, 796, 469, 470, 471,
	255, 875, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 0, 0, 0, 0, 0, 1390, 0, 773, 0,
	0, 0, 0, 0, 771, 802, 761, 762, 759, 760,
	772, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 1757, 263, 0, 0, 0,
	0, 848, 777, 0, 0, 0, 264, 265, 266, 216,
	817, 798, 828, 786, 827, 826, 0, 270, 271, 788,
	787, 274, 275, 276, 778, 847, 277, 874, 873, 222,
	0, 278, 854, 0, 837, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 857, 291, 292, 840, 838, 839, 844, 842,
	841, 843, 293, 294, 501, 295, 830, 297, 824, 823,
	751, 298, 0, 299, 0, 300, 0, 0, 301, 822,
	303, 0, 304, 0, 305, 306, 0, 756, 307, 308,
	310, 313, 309, 314, 315, 876, 877, 768, 858, 0,
	0, 0, 0, 0, 316, 317, 318, 821, 819, 820,
	0, 321, 0, 322, 0, 0, 859, 323, 0, 324,
	878, 0, 231, 325, 0, 326, 327, 328, 329, 330,
	331, 849, 850, 853, 861, 0, 851, 797, 0, 0,
	0, 0, 332, 334, 341, 0, 860, 335, 810, 801,
	811, 812, 813, 814, 815, 0, 803, 0, 342, 862,
	863, 343, 344, 345, 864, 835, 836, 0, 0, 348,
	349, 350, 0, 352, 351, 0, 353, 879, 865, 354,
	355, 866, 0, 356, 357, 0, 0, 358, 0, 359,
	753, 752, 360, 361, 363, 790, 362, 867, 365, 366,
	368, 367, 748, 0, 868, 769, 852, 825, 369, 370,
	0, 799, 800, 0, 0, 373, 374, 0, 0, 375,
	242, 869, 376, 870, 880, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 881, 385, 245, 386, 0, 387,
	388, 389, 390, 391, 392, 818, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 871, 408, 409, 410, 411, 757,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 791, 792, 793, 794, 424, 430, 431, 845,
	432, 413, 414, 433, 872, 434, 816, 795, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 856, 441, 442,
	443, 882, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 789, 0, 831, 832, 833, 834,
	0, 0, 457, 458, 883, 884, 767, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 846, 468,
	0, 796, 469, 470, 471, 255, 875, 0, 473, 472,
	257, 0, 0, 0, 0, 474, 475, 258, 476, 477,
	478, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 0, 0, 0, 0,
	0, 0, 0, 773, 0, 0, 0, 0, 1080, 771,
	802, 761, 762, 759, 760, 772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 777, 0, 0,
	0, 264, 265, 266, 216, 817, 798, 828, 786, 827,
	826, 0, 270, 271, 788, 787, 274, 275, 276, 778,
	847, 277, 874, 873, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 501,
	295, 830, 297, 824, 823, 751, 298, 0, 299, 0,
	300, 0, 0, 301, 822, 303, 0, 304, 0, 305,
	306, 0, 756, 307, 308, 310, 313, 309, 314, 315,
	876, 877, 768, 858, 0, 0, 0, 0, 0, 316,
	317, 318, 821, 819, 820, 0, 321, 0, 322, 0,
	0, 859, 323, 0, 324, 878, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 1079, 850, 853, 861,
	0, 851, 797, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 810, 801, 811, 812, 813, 814, 815,
	0, 803, 0, 342, 862, 863, 343, 344, 345, 864,
	835, 836, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 753, 752, 360, 361, 363,
	790, 362, 867, 365, 366, 368, 367, 748, 0, 868,
	769, 852, 825, 369, 370, 0, 799, 800, 0, 0,
	373, 374, 0, 0, 375, 242, 869, 376, 870, 880,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 881,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	818, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 871,
	408, 409, 410, 411, 757, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 791, 792, 793,
	794, 424, 430, 431, 845, 432, 413, 414, 433, 872,
	434, 816, 795, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 856, 441, 442, 443, 882, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 789,
	0, 831, 832, 833, 834, 0, 0, 457, 458, 883,
	884, 767, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 846, 468, 0, 796, 469, 470, 471,
	255, 875, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 0, 0, 0, 0, 0, 0, 0, 773, 0,
	0, 0, 0, 1074, 771, 802, 761, 762, 759, 760,
	772, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 848, 777, 0, 0, 0, 264, 265, 266, 216,
	817, 798, 828, 786, 827, 826, 0, 270, 271, 788,
	787, 274, 275, 276, 778, 847, 277, 874, 873, 222,
	0, 278, 854, 0, 837, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 857, 291, 292, 840, 838, 839, 844, 842,
	841, 843, 293, 294, 501, 295, 830, 297, 824, 823,
	751, 298, 0, 299, 0, 300, 0, 0, 301, 822,
	303, 0, 304, 0, 305, 306, 0, 756, 307, 308,
	310, 313, 309, 314, 315, 876, 877, 768, 858, 0,
	0, 0, 0, 0, 316, 317, 318, 821, 819, 820,
	0, 321, 0, 322, 0, 0, 859, 323, 0, 324,
	878, 0, 231, 325, 0, 326, 327, 328, 329, 330,
	331, 1073, 850, 853, 861, 0, 851, 797, 0, 0,
	0, 0, 332, 334, 341, 0, 860, 335, 810, 801,
	811, 812, 813, 814, 815, 0, 803, 0, 342, 862,
	863, 343, 344, 345, 864, 835, 836, 0, 0, 348,
	349, 350, 0, 352, 351, 0, 353, 879, 865, 354,
	355, 866, 0, 356, 357, 0, 0, 358, 0, 359,
	753, 752, 360, 361, 363, 790, 362, 867, 365, 366,
	368, 367, 748, 0, 868, 769, 852, 825, 369, 370,
	0, 799, 800, 0, 0, 373, 374, 0, 0, 375,
	242, 869, 376, 870, 880, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 881, 385, 245, 386, 0, 387,
	388, 389, 390, 391, 392, 818, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 871, 408, 409, 410, 411, 757,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 791, 792, 793, 794, 424, 430, 431, 845,
	432, 413, 414, 433, 872, 434, 816, 795, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 856, 441, 442,
	443, 882, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 789, 0, 831, 832, 833, 834,
	0, 0, 457, 458, 883, 884, 767, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 846, 468,
	0, 796, 469, 470, 471, 255, 875, 0, 473, 472,
	257, 0, 0, 0, 0, 474, 475, 258, 476, 477,
	478, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 0, 0, 0, 0,
	0, 0, 0, 773, 0, 0, 0, 0, 1069, 771,
	802, 761, 762, 759, 760, 772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 777, 0, 0,
	0, 264, 265, 266, 216, 817, 798, 828, 786, 827,
	826, 0, 270, 271, 788, 787, 274, 275, 276, 778,
	847, 277, 874, 873, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 501,
	295, 830, 297, 824, 823, 751, 298, 0, 299, 0,
	300, 0, 0, 301, 822, 303, 0, 304, 0, 305,
	306, 0, 756, 307, 308, 310, 313, 309, 314, 315,
	876, 877, 768, 858, 0, 0, 0, 0, 0, 316,
	317, 318, 821, 819, 820, 0, 321, 0, 322, 0,
	0, 859, 323, 0, 324, 878, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 797, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 810, 801, 811, 812, 813, 814, 815,
	0, 803, 0, 342, 862, 863, 343, 344, 345, 864,
	835, 836, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 753, 752, 360, 361, 363,
	790, 362, 867, 365, 366, 368, 367, 748, 0, 868,
	769, 852, 825, 369, 370, 0, 799, 800, 0, 0,
	373, 374, 0, 0, 375, 242, 869, 376, 870, 880,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 881,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	818, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 871,
	408, 409, 410, 411, 757, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 791, 792, 793,
	794, 424, 430, 431, 845, 432, 413, 414, 433, 872,
	434, 816, 795, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 856, 441, 442, 443, 882, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 789,
	0, 831, 832, 833, 834, 0, 0, 457, 458, 883,
	884, 767, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 846, 468, 0, 796, 469, 470, 471,
	255, 875, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 802, 761, 762, 759, 760, 772, 0, 773, 0,
	0, 0, 0, 0, 771, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 848, 777, 0,
	0, 0, 264, 265, 266, 216, 817, 798, 828, 786,
	827, 826, 0, 270, 271, 788, 787, 274, 275, 276,
	778, 847, 277, 874, 873, 222, 0, 278, 854, 0,
	837, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 857, 291,
	292, 840, 838, 839, 844, 842, 841, 843, 293, 294,
	501, 295, 830, 297, 824, 823, 751, 298, 0, 299,
	0, 300, 0, 0, 301, 822, 303, 0, 304, 0,
	305, 306, 0, 756, 307, 308, 310, 313, 309, 314,
	315, 876, 877, 768, 858, 0, 0, 0, 0, 0,
	316, 317, 318, 821, 819, 820, 0, 321, 0, 322,
	0, 0, 859, 323, 0, 324, 878, 0, 231, 325,
	0, 326, 327, 328, 329, 330, 331, 849, 850, 853,
	861, 0, 851, 797, 0, 0, 0, 0, 332, 334,
	341, 0, 860, 335, 810, 801, 811, 812, 813, 814,
	815, 0, 803, 0, 342, 862, 863, 343, 344, 345,
	864, 835, 836, 0, 0, 348, 349, 350, 0, 352,
	351, 0, 353, 879, 865, 354, 355, 866, 0, 356,
	357, 0, 0, 358, 0, 359, 753, 752, 360, 361,
	363, 790, 362, 867, 365, 366, 368, 367, 748, 0,
	868, 769, 852, 825, 369, 370, 0, 799, 800, 0,
	0, 373, 374, 0, 0, 375, 242, 869, 376, 870,
	880, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	881, 385, 245, 386, 0, 387, 388, 389, 390, 391,
	392, 818, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	871, 408, 409, 410, 411, 757, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 791, 792,
	793, 794, 424, 430, 431, 845, 432, 413, 414, 433,
	872, 434, 816, 795, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 856, 441, 442, 443, 882, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	789, 0, 831, 832, 833, 834, 0, 0, 457, 458,
	883, 884, 767, 459, 460, 0, 461, 462, 0, 0,
	463, 464, 465, 467, 846, 468, 0, 796, 469, 470,
	471, 255, 875, 0, 473, 472, 257, 0, 0, 0,
	0, 474, 475, 258, 476, 477, 478, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 802, 761, 762, 759, 760, 772, 0, 773,
	0, 0, 0, 0, 0, 771, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 848, 777,
	0, 0, 0, 264, 265, 266, 216, 817, 798, 828,
	786, 827, 826, 0, 270, 271, 788, 787, 274, 275,
	276, 778, 847, 277, 874, 873, 222, 0, 278, 854,
	0, 837, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 857,
	291, 3118, 840, 838, 839, 844, 842, 841, 843, 293,
	294, 501, 295, 830, 297, 824, 823, 751, 298, 0,
	299, 0, 300, 0, 0, 301, 822, 303, 0, 304,
	0, 305, 306, 0, 756, 307, 308, 310, 313, 309,
	314, 315, 876, 877, 768, 858, 0, 0, 0, 0,
	0, 316, 317, 318, 821, 819, 820, 0, 321, 0,
	322, 0, 0, 859, 323, 0, 324, 878, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 849, 850,
	853, 861, 0, 851, 797, 0, 0, 0, 0, 332,
	334, 341, 0, 860, 335, 810, 801, 811, 812, 813,
	814, 815, 0, 803, 0, 342, 862, 863, 343, 344,
	345, 864, 835, 836, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 879, 865, 354, 355, 866, 0,
	356, 357, 0, 0, 358, 0, 359, 753, 752, 360,
	361, 363, 790, 362, 867, 365, 366, 368, 367, 748,
	0, 868, 769, 852, 825, 369, 370, 0, 799, 800,
	0, 0, 373, 374, 0, 0, 375, 242, 869, 376,
	870, 880, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 881, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 818, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 871, 408, 409, 410, 411, 757, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 791,
	792, 793, 794, 424, 430, 431, 845, 432, 413, 414,
	433, 872, 434, 816, 795, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 856, 441, 442, 443, 882, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 789, 0, 831, 832, 833, 834, 0, 0, 457,
	458, 883, 884, 767, 459, 460, 0, 3117, 462, 0,
	0, 463, 464, 465, 467, 846, 468, 0, 796, 469,
	470, 471, 255, 875, 0, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 749, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 802, 761, 762, 759, 760, 772, 0,
	773, 0, 0, 0, 0, 0, 771, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 848,
	777, 0, 0, 0, 264, 265, 266, 3116, 817, 798,
	828, 786, 827, 826, 0, 270, 271, 788, 787, 274,
	275, 276, 778, 847, 277, 874, 873, 222, 0, 278,
	854, 0, 837, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	857, 291, 3118, 840, 838, 839, 844, 842, 841, 843,
	293, 294, 501, 295, 830, 297, 824, 823, 751, 298,
	0, 299, 0, 300, 0, 0, 301, 822, 303, 0,
	304, 0, 305, 306, 0, 756, 307, 308, 310, 313,
	309, 314, 315, 876, 877, 768, 858, 0, 0, 0,
	0, 0, 316, 317, 318, 821, 819, 820, 0, 321,
	0, 322, 0, 0, 859, 323, 0, 324, 878, 0,
	231, 325, 0, 326, 327, 328, 329, 330, 331, 849,
	850, 853, 861, 0, 851, 797, 0, 0, 0, 0,
	332, 334, 341, 0, 860, 335, 810, 801, 811, 812,
	813, 814, 815, 0, 803, 0, 342, 862, 863, 343,
	344, 345, 864, 835, 836, 0, 0, 348, 349, 350,
	0, 352, 351, 0, 353, 879, 865, 354, 355, 866,
	0, 356, 357, 0, 0, 358, 0, 359, 753, 752,
	360, 361, 363, 790, 362, 867, 365, 366, 368, 367,
	748, 0, 868, 769, 852, 825, 369, 370, 0, 799,
	800, 0, 0, 373, 374, 0, 0, 375, 242, 869,
	376, 870, 880, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 881, 385, 245, 386, 0, 387, 388, 389,
	390, 391, 392, 818, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 871, 408, 409, 410, 411, 757, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	791, 792, 793, 794, 424, 430, 431, 845, 432, 413,
	414, 433, 872, 434, 816, 795, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 856, 441, 442, 443, 882,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 789, 0, 831, 832, 833, 834, 0, 0,
	457, 458, 883, 884, 767, 459, 460, 0, 3117, 462,
	0, 0, 463, 464, 465, 467, 846, 468, 0, 796,
	469, 470, 471, 255, 875, 0, 473, 472, 257, 0,
	0, 0, 0, 474, 475, 258, 476, 477, 478, 749,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 745, 746, 802, 761, 762, 759, 760, 772,
	0, 773, 0, 0, 0, 0, 0, 771, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	848, 777, 0, 0, 0, 264, 265, 266, 216, 817,
	798, 828, 786, 827, 826, 0, 270, 271, 788, 787,
	274, 275, 276, 778, 847, 277, 874, 873, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 501, 295, 830, 297, 824, 823, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 822, 303,
	0, 304, 0, 305, 306, 0, 756, 307, 308, 310,
	313, 309, 314, 315, 876, 877, 768, 858, 0, 0,
	0, 0, 0, 316, 317, 318, 821, 819, 820, 0,
	321, 0, 322, 0, 0, 859, 323, 0, 324, 878,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 810, 801, 811,
	812, 813, 814, 815, 0, 803, 0, 342, 862, 863,
	343, 344, 345, 864, 835, 836, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 938,
	937, 360, 361, 363, 790, 362, 867, 365, 366, 368,
	367, 0, 0, 868, 769, 852, 825, 369, 370, 0,
	799, 800, 0, 0, 373, 374, 0, 0, 375, 242,
	869, 376, 870, 880, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 881, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 818, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 871, 408, 409, 410, 411, 757, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 791, 792, 793, 794, 424, 430, 431, 845, 432,
	413, 414, 433, 872, 434, 816, 795, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 856, 441, 442, 443,
	882, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 789, 0, 831, 832, 833, 834, 0,
	0, 457, 458, 883, 884, 767, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 846, 468, 0,
	796, 469, 470, 471, 255, 875, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	802, 761, 762, 759, 760, 772, 0, 0, 1933, 0,
	0, 0, 0, 1931, 1932, 0, 259, 260, 261, 262,
	0, 263, 773, 0, 0, 0, 848, 777, 771, 0,
	0, 264, 265, 266, 0, 817, 798, 828, 786, 827,
	826, 0, 270, 271, 788, 787, 274, 275, 276, 778,
	847, 277, 874, 873, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 3118,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 501,
	295, 830, 297, 824, 823, 751, 298, 0, 299, 0,
	300, 0, 0, 301, 822, 303, 0, 304, 0, 305,
	306, 0, 756, 307, 308, 310, 313, 309, 314, 315,
	876, 877, 768, 858, 0, 0, 0, 0, 0, 316,
	317, 318, 821, 819, 820, 0, 321, 0, 322, 0,
	0, 859, 323, 0, 324, 878, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 0,
	0, 851, 797, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 810, 801, 811, 812, 813, 814, 815,
	0, 803, 0, 342, 0, 0, 343, 344, 345, 864,
	835, 836, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 879, 865, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 753, 752, 360, 361, 363,
	790, 362, 867, 365, 366, 368, 367, 748, 0, 0,
	769, 852, 825, 369, 370, 0, 799, 800, 0, 0,
	373, 374, 0, 0, 375, 242, 869, 376, 870, 880,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 881,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	818, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 871,
	408, 409, 410, 411, 757, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 791, 792, 793,
	794, 424, 430, 431, 845, 432, 413, 414, 433, 0,
	434, 816, 795, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 856, 441, 442, 443, 882, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 789,
	0, 831, 832, 833, 834, 0, 0, 457, 458, 883,
	884, 767, 459, 460, 0, 3117, 462, 0, 0, 463,
	464, 465, 467, 846, 468, 0, 796, 469, 470, 471,
	255, 875, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 733, 0, 936, 0, 0, 0, 0, 745,
	746, 0, 0, 0, 0, 0, 0, 0, 773, 0,
	259, 260, 261, 262, 771, 263, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 847, 277, 220, 221, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 876, 877, 0, 858, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 859, 323, 0, 324, 878,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 862, 863,
	343, 344, 345, 864, 346, 347, 0, 0, 348, 349,
	350, 923, 352, 351, 0, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 938,
	937, 360, 361, 363, 364, 362, 867, 365, 366, 368,
	367, 0, 0, 868, 0, 852, 241, 369, 370, 0,
	371, 372, 0, 928, 373, 374, 0, 0, 375, 242,
	869, 376, 870, 880, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 881, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 871, 408, 409, 410, 411, 247, 930,
	0, 416, 417, 418, 419, 420, 421, 422, 172, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 845, 432,
	413, 414, 433, 872, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	882, 0, 447, 448, 174, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 883, 884, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 846, 468, 0,
	466, 469, 470, 471, 1158, 256, 0, 473, 472, 257,
	0, 0, 936, 166, 474, 475, 258, 476, 477, 478,
	0, 167, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 848, 0,
	920, 0, 1471, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 847, 277, 220, 221, 222, 0, 278, 854,
	0, 837, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 857,
	291, 292, 840, 838, 839, 844, 842, 841, 843, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 876, 877, 0, 858, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 859, 323, 0, 324, 878, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 849, 850,
	853, 861, 0, 851, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 860, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 862, 863, 343, 344,
	345, 864, 346, 347, 0, 0, 348, 349, 350, 923,
	352, 351, 0, 353, 879, 865, 354, 355, 866, 0,
	356, 357, 0, 0, 358, 0, 359, 938, 937, 360,
	361, 363, 364, 362, 867, 365, 366, 368, 367, 0,
	0, 868, 0, 852, 241, 369, 370, 0, 371, 372,
	0, 928, 373, 374, 0, 0, 375, 242, 869, 376,
	870, 880, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 881, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 871, 408, 409, 410, 411, 247, 930, 0, 416,
	417, 418, 419, 420, 421, 422, 172, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 845, 432, 413, 414,
	433, 872, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 882, 0,
	447, 448, 174, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 883, 884, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 846, 468, 0, 466, 469,
	470, 471, 1158, 256, 0, 473, 472, 257, 2330, 0,
	936, 166, 474, 475, 258, 476, 477, 478, 0, 167,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 848, 0, 920, 0,
	1471, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	847, 277, 220, 221, 222, 0, 278, 854, 0, 837,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	840, 838, 839, 844, 842, 841, 843, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	876, 877, 0, 858, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 859, 323, 0, 324, 878, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 849, 850, 853, 861,
	0, 851, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 923, 352, 351,
	0, 353, 879, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 852, 241, 369, 370, 0, 371, 372, 0, 928,
	373, 374, 0, 0, 375, 242, 869, 376, 870, 880,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 881,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 871,
	408, 409, 410, 411, 247, 930, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 845, 432, 413, 414, 433, 872,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 882, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 883,
	884, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 846, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 919, 0, 936, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 848, 0, 920, 0, 925, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 847, 277,
	220, 221, 222, 0, 278, 854, 0, 837, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 857, 291, 292, 840, 838,
	839, 844, 842, 841, 843, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 876, 877,
	0, 858, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 859,
	323, 0, 324, 878, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 849, 850, 853, 861, 0, 851,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 860,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 862, 863, 343, 344, 345, 864, 346, 347,
	0, 0, 348, 349, 350, 923, 352, 351, 0, 353,
	879, 865, 354, 355, 866, 0, 356, 357, 0, 0,
	358, 0, 359, 938, 937, 360, 361, 363, 364, 362,
	867, 365, 366, 368, 367, 0, 0, 868, 0, 852,
	241, 369, 370, 0, 371, 372, 0, 928, 373, 374,
	0, 0, 375, 242, 869, 376, 870, 880, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 881, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 871, 408, 409,
	410, 411, 247, 930, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 845, 432, 413, 414, 433, 872, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 882, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 883, 884, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 846, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 0, 0, 936, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 848, 0, 920, 0, 925, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 847, 277, 220, 221,
	222, 0, 278, 854, 0, 837, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 857, 291, 292, 840, 838, 839, 844,
	842, 841, 843, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 876, 877, 0, 858,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 859, 323, 0,
	324, 878, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 849, 850, 853, 861, 0, 851, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 860, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	862, 863, 343, 344, 345, 864, 346, 347, 0, 0,
	348, 349, 350, 923, 352, 351, 0, 353, 879, 865,
	354, 355, 866, 0, 356, 357, 0, 0, 358, 0,
	359, 938, 937, 360, 361, 363, 364, 362, 867, 365,
	366, 368, 367, 0, 0, 868, 0, 852, 241, 369,
	370, 0, 371, 372, 0, 928, 373, 374, 0, 0,
	375, 242, 869, 376, 870, 880, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 881, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 871, 408, 409, 410, 411,
	247, 930, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	845, 432, 413, 414, 433, 872, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 882, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 883, 884, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 846,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 0, 0, 936, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	848, 0, 920, 0, 925, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 847, 277, 220, 221, 222, 0,
	278, 854, 0, 837, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 840, 838, 839, 844, 842, 841,
	843, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 876, 877, 0, 858, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 859, 323, 0, 324, 878,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	849, 850, 853, 861, 0, 851, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 862, 863,
	343, 344, 345, 864, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 879, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 938,
	937, 360, 361, 363, 364, 362, 867, 365, 366, 368,
	367, 0, 0, 868, 0, 852, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	869, 376, 870, 880, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 881, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 871, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 845, 432,
	413, 414, 433, 872, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	882, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 883, 884, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 846, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	0, 0, 936, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 848, 0,
	0, 0, 2670, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 847, 277, 220, 221, 222, 0, 278, 854,
	0, 837, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 857,
	291, 292, 840, 838, 839, 844, 842, 841, 843, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 876, 877, 0, 858, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 859, 323, 0, 324, 878, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 849, 850,
	853, 861, 0, 851, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 860, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 862, 863, 343, 344,
	345, 864, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 879, 865, 354, 355, 866, 0,
	356, 357, 0, 0, 358, 0, 359, 938, 937, 360,
	361, 363, 364, 362, 867, 365, 366, 368, 367, 0,
	0, 868, 0, 852, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 869, 376,
	870, 880, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 881, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 871, 408, 409, 410, 411, 247, 930, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 845, 432, 413, 414,
	433, 872, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 882, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 883, 884, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 846, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 1155, 0,
	959, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	1371, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 858, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 859, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 869, 376, 870, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 871,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 172, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 872,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	174, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	1158, 256, 0, 473, 472, 257, 0, 0, 936, 166,
	474, 475, 258, 476, 477, 478, 0, 167, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 848, 0, 0, 0, 137, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 847, 277,
	220, 221, 222, 0, 278, 854, 0, 837, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 857, 291, 292, 840, 838,
	839, 844, 842, 841, 843, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 876, 877,
	0, 858, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 859,
	323, 0, 324, 878, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 849, 850, 853, 861, 0, 851,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 860,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 862, 863, 343, 344, 345, 864, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	879, 865, 354, 355, 866, 0, 356, 357, 0, 0,
	358, 0, 359, 938, 937, 360, 361, 363, 364, 362,
	867, 365, 366, 368, 367, 0, 0, 868, 0, 852,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 869, 376, 870, 880, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 881, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 871, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 845, 432, 413, 414, 433, 872, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 882, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 883, 884, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 846, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 733, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	172, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 174, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 1158, 256, 0, 473,
	472, 257, 0, 0, 498, 166, 474, 475, 258, 476,
	477, 478, 0, 167, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 137, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	0, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 2121, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 0, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	2579, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 1234, 0, 959, 958,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 1476, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 963, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 857, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 858, 0, 0, 0, 0, 0, 1233, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 859,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 861, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 860,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 862, 863, 343, 344, 345, 864, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 865, 354, 355, 866, 0, 356, 357, 0, 0,
	358, 0, 359, 938, 937, 360, 361, 363, 364, 362,
	867, 365, 366, 368, 367, 0, 0, 868, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 869, 376, 870, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 1232, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 871, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 872, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 1151, 0, 959, 958, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 963, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 857, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 858,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 859, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 1150, 233, 234, 861, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 860, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	862, 863, 343, 344, 345, 864, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 865,
	354, 355, 866, 0, 356, 357, 0, 0, 358, 0,
	359, 938, 937, 360, 361, 363, 364, 362, 867, 365,
	366, 368, 367, 0, 0, 868, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 869, 376, 870, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 871, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 872, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 1147, 0, 959, 958, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 963, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 858, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 859, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	1146, 233, 234, 861, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 862, 863,
	343, 344, 345, 864, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 938,
	937, 360, 361, 363, 364, 362, 867, 365, 366, 368,
	367, 0, 0, 868, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	869, 376, 870, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 871, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 872, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	1105, 0, 959, 958, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 963, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 857,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 858, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 859, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 1104, 233,
	234, 861, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 860, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 862, 863, 343, 344,
	345, 864, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 865, 354, 355, 866, 0,
	356, 357, 0, 0, 358, 0, 359, 938, 937, 360,
	361, 363, 364, 362, 867, 365, 366, 368, 367, 0,
	0, 868, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 869, 376,
	870, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 871, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 872, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 1102, 0,
	959, 958, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 858, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 859, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 1101, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 869, 376, 870, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 871,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 872,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 952, 0, 959, 958,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 963, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 857, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 858, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 859,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 954, 233, 234, 861, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 860,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 862, 863, 343, 344, 345, 864, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 865, 354, 355, 866, 0, 356, 357, 0, 0,
	358, 0, 359, 938, 937, 360, 361, 363, 364, 362,
	867, 365, 366, 368, 367, 0, 0, 868, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 869, 376, 870, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 871, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 872, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 959, 958, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 963, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 857, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 858, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 859, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 861, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 860, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 862, 863,
	343, 344, 345, 864, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 865, 354, 355,
	866, 0, 356, 357, 0, 0, 358, 0, 359, 938,
	937, 360, 361, 363, 364, 362, 867, 365, 366, 368,
	367, 0, 0, 868, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	869, 376, 870, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 871, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 872, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	959, 958, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 963,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 857, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 858, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 859, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 861,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 860, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 862, 863, 343, 344, 345, 864,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 865, 354, 355, 866, 0, 356, 357,
	0, 0, 358, 0, 359, 938, 937, 360, 361, 363,
	364, 362, 867, 365, 366, 368, 367, 0, 0, 868,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 869, 376, 870, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 871,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 872,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 959, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 963, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 857,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 858, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 859, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 861, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 860, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 862, 863, 343, 344,
	345, 864, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 865, 354, 355, 866, 0,
	356, 357, 0, 0, 358, 0, 359, 938, 937, 360,
	361, 363, 364, 362, 867, 365, 366, 368, 367, 0,
	0, 868, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 869, 376,
	870, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 871, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 872, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 604, 0,
	208, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 214,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	213, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 207, 0, 208, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 481, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 214, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 213, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	208, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 481,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 214,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	1730, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	213, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 208, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 481, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 214, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 213, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 498, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 481, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 498, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 481, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 2005, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 2002, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 2084,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 2008, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 2082, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 2081,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 2007,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 2083, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 498, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 2005, 278, 223, 0, 0, 1999, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 2002,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 2008, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 1998, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 2007, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 2006, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 611, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 610, 588, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 591, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 592,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	593, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 587, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 588, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	591, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 592, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 593, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 498, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 591, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 592,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	593, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 1276, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 1279,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 1277, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 1278, 472, 257,
	1126, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 928, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 947, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 949, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 928,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 944, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 946, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 928, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 940, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 942, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 928, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 596, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 595, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	523, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 522, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 521, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 498, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 1980, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	498, 2495, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 498, 2495, 0, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 2492, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 498, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 928, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	498, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 259, 260, 261, 262,
	1723, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 1681, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 1679, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 637, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 1205, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 638, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 634, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 633, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	1568, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 1567, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 498, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 1552, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	637, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 1205, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 638, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 634, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 633, 251, 252, 456, 0, 0, 457,
	1206, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 637, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 627, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 638, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 634,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 1177, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 633, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 1144, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 1143, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 1140, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 1139, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 1137, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	1136, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	1134, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 1133, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 1130, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 1129, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 498, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 259, 260,
	261, 262, 1118, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 1116, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 1115, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 1107, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 1098, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 1097, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 1093, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	1089, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 1091, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 967, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 969, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 964, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 637, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 627, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 626, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 638, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	628, 412, 0, 416, 417, 634, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 629, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 633, 251, 252,
	456, 0, 0, 457, 631, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 617, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 618, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	613, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 602, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 545, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	498, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 498, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 2388, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 498, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	2386, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 498, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 2375, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 498, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 618, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	498, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 1581, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 0, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 498, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 1572, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 498, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 902, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 498, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 0,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 0, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 0, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343,
	1351, 1352, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 1335, 1336, 0, 1310, 0, 0, 0,
	0, 1316, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1355, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 1333, 1334, 1335, 1336, 0, 0, 0,
	0, 0, 1346, 1316, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 0, 1348, 1358, 0,
	0, 1338, 1339, 1340, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1355, 0, 0, 0, 0, 0, 0,
	1325, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 1337, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 1349, 0, 0,
	1311, 0, 1347, 1357, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 0, 0, 0, 0, 0, 0, 1310, 0, 2276,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 1311, 0, 1347, 1357, 0, 1322, 1323, 1329,
	1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 0, 1333, 1334, 1335, 1336, 0, 1310,
	0, 2275, 0, 0, 1316, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 1333, 1334, 1335, 1336,
	0, 0, 0, 0, 0, 1346, 1316, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1337, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	1356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	1349, 0, 0, 1311, 0, 1347, 1357, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 0, 0, 0, 0, 0, 0,
	1310, 0, 2272, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 1311, 0, 1347, 1357, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 1333, 1334, 1335,
	1336, 0, 1310, 0, 2271, 0, 0, 1316, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 0, 0, 0, 0, 1346, 1316,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1356, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1337, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 1349, 0, 0, 1311, 0, 1347, 1357,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0,
	0, 0, 0, 1310, 0, 2270, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 1311, 0,
	1347, 1357, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0,
	1333, 1334, 1335, 1336, 0, 1310, 0, 1867, 0, 0,
	1316, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 1333, 1334, 1335, 1336, 0, 0, 0, 0,
	0, 1346, 1316, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1356, 0, 1348, 1358, 0, 0,
	1338, 1339, 1340, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1355, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 1337, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 1356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 1349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1349, 0, 0, 0,
	0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	0, 0, 0, 0, 3083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 1357, 0,
	0, 0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328,
	1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 1310, 0, 0, 0, 3079, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 1310, 0, 0, 0, 0, 1316,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 1333, 1334, 1335, 1336, 0, 0, 0, 0, 0,
	1346, 1316, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1356, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1355, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1337, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 1356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0,
	0, 0, 0, 3020, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
	1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 1357, 0, 0,
	0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 1310, 0, 0, 0, 3019, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 1357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 1334,
	1335, 1336, 0, 1310, 0, 0, 0, 0, 1316, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1355, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 0, 0,
	1333, 1334, 1335, 1336, 0, 0, 0, 0, 0, 1346,
	1316, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1356, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1337, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 1356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1349, 0, 0, 0, 0, 1347,
	0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0,
	0, 0, 2969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 1357, 0, 0, 0,
	0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	1310, 0, 0, 0, 2930, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 1334, 1335,
	1336, 0, 1310, 0, 0, 0, 0, 1316, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 0, 0, 0, 0, 1346, 1316,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1356, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1337, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 0, 0, 0, 0, 1347, 0,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0,
	0, 2841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 1357, 0, 0, 0, 0,
	1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1310,
	0, 0, 0, 2799, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 1308,
	1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 1357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1333, 1334, 1335, 1336,
	0, 1310, 0, 0, 0, 0, 1316, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 1333, 1334,
	1335, 1336, 0, 0, 0, 0, 0, 1346, 1316, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1356, 0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1355, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	1337, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 0, 0,
	0, 0, 1356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 1347, 0, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0,
	2798, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 1309, 0, 1341,
	1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 1357, 0, 0, 0, 0, 1347,
	0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1310, 0,
	0, 0, 2797, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 1334, 1335, 1336, 0,
	1310, 0, 0, 0, 0, 1316, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1358, 0, 0, 1338, 1339, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 1355, 0, 0, 0, 0,
	0, 0, 1325, 1326, 0, 0, 0, 1333, 1334, 1335,
	1336, 0, 0, 0, 0, 0, 1346, 1316, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1356,
	0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 1337,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 1356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 1347, 0, 0, 1322,
	1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0, 2763,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 1357, 0, 0, 0, 0, 1347, 0,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 1310, 0, 0,
	0, 2584, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 1357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 1334, 1335, 1336, 0, 1310,
	0, 0, 0, 0, 1316, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 1333, 1334, 1335, 1336,
	0, 0, 0, 0, 0, 1346, 1316, 3160, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1337, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	1356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	1349, 0, 0, 1311, 0, 1347, 1357, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 0, 0, 2230, 0, 0, 0,
	1310, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 2201, 0, 1311, 0, 1347, 1357, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 1333, 1334, 1335,
	1336, 0, 1310, 0, 0, 0, 0, 1316, 0, 2317,
	1330, 0, 2316, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 0, 2202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 0, 0, 0, 0, 1346, 1316,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1356, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1337, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 0, 0, 0, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 1344, 0,
	0, 0, 1954, 0, 0, 1311, 0, 0, 1357, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1310, 1349, 0, 0, 0, 0, 1347, 0,
	1330, 1322, 1323, 1329, 1328, 1324, 1350, 1327, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 0, 0, 0, 0, 0, 1316,
	1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0,
	0, 0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 1309, 0, 1341,
	1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 1344, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 1357, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 0, 0, 1349, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 1334, 1335, 1336, 0,
	0, 0, 0, 0, 1310, 1316, 0, 0, 0, 0,
	1347, 0, 1330, 1322, 1323, 1329, 1328, 1324, 1350, 1327,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1348,
	1358, 0, 0, 1338, 1339, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 1355, 0, 0, 0, 0,
	0, 0, 1325, 1326, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 1335, 1336, 0, 1346, 0, 0, 0,
	0, 1316, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1356,
	0, 0, 0, 0, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 1345, 730, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1355, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 1346, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 1347, 0, 0, 1322,
	1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2574, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
	1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 1357, 0, 0,
	0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 1310, 0, 0, 0, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 2318, 0, 0, 1311, 0, 0, 1357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 1334,
	1335, 1336, 0, 1310, 0, 0, 0, 0, 1316, 0,
	0, 1330, 0, 2323, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1355, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 0, 0,
	1333, 1334, 1335, 1336, 0, 0, 0, 0, 0, 1346,
	1316, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1356, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1337, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 1356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 1357,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1310, 1349, 0, 0, 0, 0, 1347,
	0, 1330, 1322, 1323, 1329, 1328, 1324, 1350, 1327, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 1334, 1335, 1336, 0, 0, 0, 0, 0, 0,
	1316, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	0, 0, 0, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2285, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 1344, 0, 0, 0, 2269,
	0, 0, 1311, 0, 0, 1357, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1310,
	0, 0, 0, 0, 1349, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 1357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1333, 1334, 1335, 1336,
	0, 0, 0, 0, 0, 1310, 1316, 0, 0, 0,
	0, 1347, 0, 1330, 1322, 1323, 1329, 1328, 1324, 1350,
	1327, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 1333, 1334, 1335, 1336, 0, 1346, 0, 0,
	0, 0, 1316, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1356, 0, 0, 0, 0, 0, 1348, 1358, 0, 0,
	1338, 1339, 1340, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1355, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 1346, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 1332, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
	1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 1344, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 1357, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 0, 1349, 1347, 0, 1330,
	1322, 1323, 1329, 1328, 1324, 1350, 1327, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 1334,
	1335, 1336, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328,
	1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 1348, 1358, 0, 0, 1338, 1339, 1340, 0,
	0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 0, 1354, 1355, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 1311, 0,
	0, 1357, 0, 0, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 1310, 145, 0, 0, 0,
	0, 39, 1356, 1330, 0, 0, 0, 0, 0, 0,
	1327, 0, 40, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 45, 0, 51, 0, 0, 0,
	0, 0, 1333, 1334, 1335, 1336, 0, 0, 0, 1332,
	0, 0, 1316, 0, 0, 0, 52, 0, 0, 0,
	54, 0, 0, 0, 0, 58, 0, 0, 143, 0,
	0, 0, 1349, 59, 72, 0, 1348, 1358, 60, 61,
	1338, 1339, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1355, 62, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 0, 0, 1347,
	0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 64, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1349, 0, 0, 0,
	0, 0, 75, 138, 66, 0, 67, 0, 68, 0,
	0, 0, 144, 0, 1641, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 1652,
	1637, 1642, 1625, 1662, 1661, 0, 0, 0, 1627, 1626,
	174, 0, 0, 0, 0, 0, 1671, 1670, 0, 0,
	0, 0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328,
	1324, 1350, 113, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 139, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 1663, 0, 1659, 1658, 166,
	0, 0, 0, 0, 0, 0, 0, 167, 1657, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 4, 0, 0, 0, 0, 1656, 1654, 1655, 0,
	662, 0, 692, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 1636, 0, 0, 0,
	0, 0, 0, 0, 667, 0, 0, 1645, 1640, 1646,
	1647, 1648, 1649, 1650, 0, 1644, 0, 0, 0, 0,
	0, 0, 0, 0, 1668, 1669, 0, 0, 668, 0,
	0, 0, 0, 670, 0, 0, 0, 697, 0, 0,
	0, 0, 0, 676, 677, 0, 0, 0, 687, 0,
	0, 0, 0, 0, 1629, 0, 0, 0, 0, 0,
	0, 693, 671, 0, 0, 0, 1660, 0, 0, 0,
	1638, 1639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 691, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1653, 0, 0, 0, 1622, 1620,
	1621, 1624, 1623, 0, 0, 0, 672, 0, 0, 0,
	0, 0, 0, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 673, 674,
	0, 1630, 1631, 1632, 1633, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1651, 1634, 0, 0, 0,
	680, 0, 0, 0, 0, 0, 1673, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 679, 0, 1628, 0, 1664, 1665, 1666, 1667, 0,
	0, 0, 0, 694, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1635, 0, 0, 0, 0, 1672, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 678, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 689, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 664, 682, 695, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	665, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	685, 0, 0, 683, 0, 0, 0, 698, 699, 0,
	0, 0, 0, 696, 0, 0, 0, 0, 0, 0,
	686, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 688,
}
var sqlPact = [...]int{

	59596, -1000, 1, -1000, -1000, -1000, 231, -1000, -1000, -1000,
	-1000, 229, 216, 214, -1000, 213, 210, 206, 204, 203,
	202, 201, 198, 197, 196, 193, 191, -1000, -1000, 184,
	-1000, -1000, -1000, -1000, 183, 182, 169, -1000, 167, 1629,
	32204, 164, 162, 158, 1957, 49976, 1553, 156, 153, -1000,
	146, 3162, 37988, 1202, 1740, -1000, 145, 142, 1481, 49594,
	271, 2027, 34890, 37600, 2003, 49206, 31816, 1954, 34502, 48818,
	-1000, -1000, 1097, -1000, -1000, 48430, 141, 140, 139, 138,
	137, -1000, 135, 48042, 132, 129, 127, 122, 112, 111,
	-1000, 107, 106, 101, 100, 99, 96, 92, 85, 81,
	78, 76, 75, 74, 73, 72, 71, -1000, 60028, 70,
	69, 68, -1000, 1350, 67, 66, 65, 64, 62, -1000,
	-1000, -1000, 54, 53, 52, 51, -1000, 50, 49, 123,
	48, 47, 46, 45, 43, -1000, 1219, 1264, 2278, 14059,
	1298, 1296, 1285, 1266, 1281, 829, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 52650, 49976, 41, -57,
	39, -1000, 2463, 860, 24384, 59596, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37212, 36824,
	36436, 30264, 47654, 47266, 10755, 10755, 970, -1000, -1000, -1000,
	-1000, -1000, -1, 33350, 49976, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	277, -1000, -1000, -1000, -1000, -1000, -1000, 20776, 533, 20351,
	553, 19926, 551, 448, -1000, -1000, -1000, 276, -1000, -1000,
	-1000, -1000, 1283, -1000, -1000, -1000, -1000, 46878, 46490, 2098,
	46102, 29866, 29468, 45714, 49976, 49976, 1799, 1795, 45326, -1000,
	-1000, 44938, -1000, -1000, 2302, 2017, 2015, 36048, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44556, 44168, 43780,
	43392, 43004, 29070, 28672, 644, -1000, -1000, -1000, -1000, 25936,
	643, -1000, -1000, -1000, -1000, -1000, 37, -1000, 36, 33,
	-1000, 30, 29, 28, 19, 18, 16, 15, 14, -1000,
	13, 12, -1000, 11, 10, -1000, 9, 5, 3351, 1602,
	1595, 42616, 1070, 49976, -1000, 1552, -12, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 642, 49976, -1000, -1000, 21187, 444,
	-1000, 638, -1000, 2035, -1000, 21187, 444, -1000, 1546, 225,
	1443, -1000, -1000, -1000, 1368, 1132, -1000, -1000, 49976, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2676, 1426, 636, 42228,
	-1000, 1754, -1000, 787, 14881, -1000, 957, -1000, 14881, 272,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1471, 1267, 2636, 28274, 1442, 2460,
	2285, 2675, 1719, 2270, 2212, 2150, 2141, 2140, 2674, 1145,
	2673, 1204, 2671, 2107, 2104, 2648, 1452, 35660, 2670, 2669,
	2013, 2021, -1000, -1000, -1000, -1000, 1152, -1000, -1000, -1000,
	-1000, -1000, -1000, 39524, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1219, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1710, 2418, 2418, 2418,
	2496, 431, 427, -1000, 123, -1000, 1894, -1000, 1420, -1000,
	-1000, -1000, 59133, -1000, -1000, 21187, 21187, 21187, 21187, 21187,
	1318, -1000, -1000, -1000, 677, -1000, 635, 579, -1000, -1000,
	-1000, -1000, -1000, 634, 2657, -1000, 848, -1000, -1000, -1000,
	-1000, 2577, -1000, 12400, -1000, -1000, -1000, 410, 21187, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 266, 796, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 560, 1220, 557, 557, 557, -1000, -1000, 828, -1000,
	-1000, 757, -1000, 756, -1000, -1000, -1000, 2091, 633, 630,
	-1000, 629, 619, 618, -1000, -1000, -1000, 617, 615, 614,
	611, 610, 609, 608, 605, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 828, 828, -1000, 603, 602, 601, 600,
	598, 596, 594, 587, 584, 1592, -1000, -1000, 1592, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 968, 51504, -1000, -1000,
	-1000, -2, 49976, -1000, 448, -2, -1000, -1000, 582, -1000,
	15292, 15292, 15292, -1000, -1000, 1539, 21187, -1000, 2134, -1000,
	5105, -216, 748, 25548, -1000, 23608, 748, 639, 27876, -1000,
	1989, -1000, -1000, 581, 262, -1000, -1000, -1000, -1000, -1000,
	-1000, 2197, 2296, 1066, -1000, 1195, 2293, -1000, 3134, 2287,
	1194, -1000, -1000, 811, 2283, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1417, -1000, -1000, 1572, 2276,
	-138, 2144, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1571, -1000,
	30660, 33350, -3, -1000, -1000, -66, -1000, 10359, 59133, -1000,
	-1000, -1000, 59133, 751, -1000, -1000, 2275, -1000, 59133, 747,
	-1000, -1000, 2273, -1000, 1974, 49976, 10755, 49976, 49976, -1000,
	580, 1652, 1536, -1000, -1000, 41840, 3134, 1650, -1000, -1000,
	806, 1641, -1000, -1000, 1640, -1000, 448, -1000, -1000, 801,
	-1000, 2668, 41458, 52268, 806, 1636, -1000, -1000, -1000, 39524,
	-1000, 49976, -1000, 49976, -1000, 1087, -1000, 51886, 170, 2271,
	-1000, -1000, 170, 2268, -1000, 170, 2262, -1000, 168, 2254,
	-1000, -1000, 1509, 2251, -1000, -67, 2247, -1000, -1000, -67,
	2245, -1000, -1000, 21187, -13, -1000, -1000, -1000, 860, 31428,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 41070, 30660, 32968,
	49976, 35272, 30660, 607, 59133, -1000, 2533, 59890, 30660, 59133,
	-1000, 32968, 49976, 2088, -1000, 40682, 40294, 2406, 786, -1000,
	-1000, 49976, -1000, 21187, -1000, 2531, 1690, -16, -1000, -1000,
	-1000, -1000, -1000, 1687, 1678, 944, 1779, -1000, 14881, 14881,
	2364, -1000, 259, 10755, -1000, -1000, 1015, 1726, -1000, -1000,
	-1000, -1000, 30660, 30660, -1000, 39906, -1000, -1000, -1000, 1414,
	49976, -1000, -1000, 2079, -1000, 32586, 49976, -1000, 49976, -1000,
	49976, -1000, 49976, -1000, 49976, -1000, -1000, -1000, -1000, -1000,
	2194, 1301, 1254, -1000, 49976, -1000, 49976, -1000, -1000, -1000,
	1686, -1000, -1000, -1000, -1000, 49976, -1000, -1000, -1000, -1000,
	-1000, -1000, 1201, -1000, 1012, -1000, -1000, 171, -1000, -1000,
	1710, -1000, 1554, 1765, 19501, 1698, 21187, 123, -1000, -1000,
	123, 123, 13634, -1000, -1000, -1000, 49976, -1000, 59890, 59890,
	10755, 989, 21187, 21187, 21187, 21187, 21187, 21187, 21187, 21187,
	21187, 21187, 21187, 21187, 21187, 21187, 21187, 21187, 21187, 21187,
	21187, 21187, 21187, 21187, 21187, 21187, 21187, 21187, 21187, 21187,
	21187, 21187, 21187, 21187, 21187, 21187, 21187, 1591, 21187, 963,
	21187, 21187, 21187, 21187, 1653, -1000, -1000, 1363, 484, 1396,
	-1000, 2626, 2626, 2626, 59553, 59553, 554, 677, -1000, 21187,
	-1000, 444, 21187, 11153, -1000, 2641, 1423, -1000, -1000, 427,
	6591, 1551, -1000, 425, 11578, -1000, -1000, -1000, 12400, 579,
	19076, 823, 59133, 9963, 1964, 1851, -1000, 2638, -1000, -1000,
	2577, -1000, -1000, -1000, -1000, 985, 983, 978, 977, 578,
	703, 696, 695, 693, 682, 21187, 21187, 21187, 21187, 21187,
	21187, 21187, 21187, -1000, -1000, 18665, 18240, 17815, 17390, 16965,
	22420, 16540, 21187, 12811, -1000, -16, -1000, 51504, -1000, 49976,
	-2, 2530, 21187, 209, -1000, 57780, -1000, 209, 209, 577,
	-15, 59133, 1741, 1738, 24772, 1695, 1385, 1385, 1385, -1000,
	576, 664, 748, 7568, 38370, 1358, 748, 748, 175, 280,
	424, 23220, 2134, 38370, -1000, -1000, 49976, 574, 11153, 10755,
	-8, 1275, -1000, 34114, 2447, 2420, 2378, 1086, -1000, 1052,
	2495, 39524, 2510, 965, 2402, 1968, -1000, -1000, 962, 39524,
	3134, -1000, 59890, -1000, 1801, 2494, 1116, 1129, 1116, 1116,
	1108, 39524, 960, 1235, 30660, 2401, 958, -11, 2509, 709,
	2399, 1938, 956, -1000, -1000, 49976, 10755, 2396, 1010, 698,
	-3, 33350, 49976, 255, -1000, 21187, 444, 21187, 444, 1049,
	-18, 253, 1757, 1755, 175, -1000, 33732, 2529, 2242, 49976,
	1761, -7, 49976, -1000, -1000, 3134, 2241, -1000, 1233, -1000,
	2238, 2229, 2528, 544, 2667, -1000, 1535, 1633, -1000, -1000,
	-1000, 1528, 1632, 999, 2224, 803, 450, 2525, 450, 27100,
	-1000, 49976, -1000, 49976, -1000, -1000, 49976, -1000, 49976, -1000,
	49976, -1000, 49976, 49976, -1000, 49976, 30660, 30660, 30660, -20,
	552, 31428, -21, 805, 955, -30, -1000, 423, 49976, 852,
	33732, 5320, -23, -1000, 966, -1000, -1000, -1000, -1000, 392,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 828, 573, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 560, 1220, 557, 557,
	557, -1000, -1000, -1000, 757, -1000, 756, -1000, -1000, -1000,
	828, 828, -1000, -1000, -186, 1935, -66, 35272, 698, -1000,
	698, -1000, 2076, -1000, 2407, 740, -28, 888, -16, -1000,
	1592, -1000, 1391, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2653, -1000, 2633, -1000,
	-1000, 2637, -4, -1000, -4, -1000, 10755, -1000, 49976, 2068,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49976, -1000,
	49976, -1000, -1000, -1000, -1000, -1000, -1000, 1110, -1000, 2066,
	-1000, 2065, -1000, 249, -1000, -1000, -1000, 49976, 49976, 49976,
	-1000, 39524, -1000, -1000, -1000, -1000, 59133, -1000, 422, -1000,
	-1000, 59133, 1150, 1764, -1000, 1764, -5, -1000, 57520, 1718,
	49976, -1000, -1000, -1000, -1000, -1000, -1000, 778, 494, 494,
	973, 973, 973, 973, 2595, 846, 3217, 575, 317, 317,
	317, 317, 317, 317, 317, 317, 407, 959, 959, 407,
	407, 407, 407, 407, 959, 959, 959, 317, 317, 317,
	59553, 59389, 4886, 21187, 21187, 953, 1356, 484, 4324, 21187,
	3646, 3646, 3646, 3646, -1000, 1618, -1000, -1000, -1000, -1000,
	1933, 556, 22420, 22420, -1000, -1000, -1000, -1000, 11989, 21187,
	-1000, -1000, -1000, -1000, 16115, -1000, 57085, -235, 415, -115,
	38, -1000, 21187, 21187, 21187, 408, -1000, 404, -1000, 947,
	-1000, 946, 938, 937, -1000, 550, 247, 21187, 49976, -1000,
	54220, 656, -90, -1000, 1100, -1000, 21187, 242, -1000, 1335,
	549, 546, 403, -31, 775, 773, 772, 769, 21187, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 59057,
	54148, 53857, 53785, 6274, 53494, 53422, -33, 393, -1000, 1929,
	-115, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 387, -1000,
	-41, -1000, -42, -1000, 386, -1000, 58801, -115, 385, 6485,
	-1000, 22420, 22420, 22420, -1000, 384, -1000, 57448, -1000, 58541,
	15704, 15704, 15704, 383, 58469, 21187, -115, -1000, -1000, 545,
	-61, 803, 15292, 23996, 10755, -1000, 803, 803, 21187, -1000,
	21187, 24772, 24772, 3041, 1734, 24772, -1000, -1000, -1000, -1000,
	38370, 445, 748, 38370, -1000, 2577, 1749, -1000, -1000, -1000,
	49976, 448, -1000, 38370, 38370, 10755, 748, -1000, 380, 26324,
	38, 241, 1648, 49976, 49976, 49976, -1000, -1000, 1626, 51122,
	1623, 59890, 49976, -1000, -1000, 543, 542, 1715, 1712, 49976,
	49976, 50740, 50358, 49976, 1250, 21187, 1548, 2109, 444, -1000,
	444, 768, 541, 49976, 1173, -1000, -1000, -1000, -1000, -1000,
	49976, -1000, -1000, 2635, -1000, 1116, -1000, -1000, -1000, 1116,
	3134, 1172, 49976, 30660, 810, 767, 49976, 1277, 444, -1000,
	444, 766, 540, 10755, 1375, -1000, 765, 49976, 1821, -1000,
	1567, -1000, -1000, 9567, 59133, -1000, 59133, -1000, -1000, -1000,
	10755, 1823, 1823, 379, -6, -1000, -1000, -1000, -1000, -1000,
	-1000, 1790, 49976, 616, 49976, 444, 49976, 185, 805, 30660,
	49976, -7, 49976, 30660, 30660, 30660, 444, 2666, 539, 2665,
	-1000, 49976, 2223, 49976, 2221, 2217, 707, 49976, 1424, 21187,
	1225, -1000, 26712, 843, 49976, 1162, 174, -1000, -1000, -1000,
	27, 49976, -1000, -1000, 170, 170, 170, -1000, 168, 1509,
	-1000, -67, -67, -1000, -1000, -1000, 552, 1924, 39142, 49976,
	2552, 805, 538, 30660, -69, -1000, 861, 943, 941, -1000,
	59890, -1000, 675, 887, -1000, 2627, 536, 2577, -1000, 805,
	49976, 93, -1000, 808, 1456, -1000, 14881, 14881, -1000, 1592,
	-1000, -1000, 1184, -1000, 1209, -1000, -1000, -1000, -1000, 14881,
	-1000, -1000, 1007, -66, -66, -1000, 1105, 1091, 49976, -1000,
	-1000, -1000, -1000, 1150, -1000, 21187, -1000, -1000, -1000, 13634,
	-1000, -1000, -1000, 49976, -209, 21187, 21187, 4223, 3582, 21187,
	22420, 22420, -1000, 21187, 3379, -1000, -1000, -1000, -1000, -1000,
	1918, 529, 21187, 59890, 5057, 1432, -1000, 375, 7132, 407,
	-1000, 21187, -1000, 374, 14470, -1000, 58036, -29, -29, -1000,
	2651, 1605, 1268, 1192, 1124, 2597, 9171, -115, -77, -1000,
	-1000, 674, 2301, -1000, 21187, 58112, 8775, -1000, 27488, 817,
	1424, -1000, -1000, 2577, -1000, -1000, -1000, -1000, 56728, 59890,
	59890, 21187, 21187, -1000, 21187, 21187, 21187, -1000, -1000, 21187,
	-1000, -1000, -1000, -1000, 1898, 21187, -1000, 59890, 59890, 22420,
	22420, 22420, 22420, 22420, 22420, 22420, 22420, 22420, 22420, 22420,
	22420, 22420, 22420, 22420, 22420, 22420, 22420, 22420, 1691, 22420,
	2598, 2598, 2598, -1000, 2059, 1898, 21187, 21187, 59890, 370,
	368, 364, -1000, 21187, -115, 5320, -1000, 1848, -1000, -173,
	-1000, 2134, -1000, -1000, 1848, 1848, -78, 59133, -1000, 3041,
	-1000, 528, 21187, 24772, -1000, 654, -1000, -79, -1000, 38370,
	-1000, 653, -232, -1000, 743, -1000, 448, -1000, -1000, -1000,
	238, 38370, -1000, -84, -1000, 2523, 362, 10755, -1000, -1000,
	935, 934, -1000, 2216, -1000, 1608, -1000, 847, -1000, 1269,
	21187, 25160, 527, 526, 1314, -1000, 2203, 1509, 2179, 1509,
	-1000, -1000, 791, -1000, 59133, 525, 520, -1000, -8, 1226,
	-1000, -1000, 21187, 21187, -1000, 933, -1000, -1000, -1000, 3134,
	932, -1000, -1000, 1229, 21187, -1000, -1000, -1000, -1000, 21187,
	21187, -1000, -11, 930, 21187, 2138, 805, 1895, 1026, -1000,
	-1000, -1000, -1000, -1000, -1000, 1781, 33732, 49976, 518, 49976,
	517, -1000, -1000, 516, 49976, -1000, -1000, -1000, 3134, -1000,
	806, -1000, -1000, -1000, 2664, -1000, 851, 10755, 511, 10755,
	1694, 707, 31046, -1000, 806, 1765, -1000, 59133, -1000, 1162,
	13222, 2381, -85, -1000, 236, -1000, -1000, -1000, 803, 27100,
	24772, 21187, 2663, -87, -1000, -1000, -1000, -1000, -1000, -1000,
	444, -14, 506, -1000, 742, 722, -66, 1437, -1000, 30660,
	49976, 49976, -1000, 2584, -1000, 651, 361, 2577, 359, -1000,
	-66, 49976, -1000, 1429, 10755, 49976, 49976, 10755, 49976, -1000,
	-1000, -16, -1000, -1000, -1000, -1000, 49976, -1000, -1000, -1000,
	1459, 56656, -1000, 2390, 10755, 2590, 3646, 21187, 21187, 632,
	1093, 363, 3646, 21187, 21187, 59890, 5958, -104, 21187, 21187,
	-1000, 21187, 650, 59133, 2649, 21187, 347, 346, 342, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 336, -1000, -1000,
	-1000, -1000, -1000, 59133, 21187, 234, -1000, -1000, -1000, 53032,
	-1000, 21187, 334, 332, -1000, 331, 330, 7023, 5486, 56299,
	56227, 55870, 59133, 2059, 59133, -1000, -1000, 802, 802, 1119,
	1119, 1119, 1119, 2598, 306, 726, 233, 1399, 1399, 1399,
	472, 665, 665, 1399, 1399, 1399, 1884, 1700, 503, 5340,
	-1000, -1000, 59133, 59133, 325, -1000, -1000, -1000, -115, 318,
	1840, 2491, -1000, 24772, 1840, 1840, -1000, -1000, 49976, 59133,
	-1000, -216, -1000, 2577, -1000, -1000, 1749, -1000, 7978, -1000,
	10755, -1000, -1000, 26324, -1000, 501, -1000, 94, 49976, 49976,
	49976, 2153, -1000, 3248, -1000, 55798, -112, -1000, 2451, 2451,
	21187, 175, 25160, 49976, -1000, 1328, 1807, 873, 49976, -1000,
	49976, -1000, -1000, 49976, 49976, 49976, 49976, 49976, 59133, -113,
	49976, 49976, 30660, 59133, 59133, -114, 10755, 59133, 2386, -1000,
	30660, 976, 1277, 1813, -1000, 498, 25160, 497, 49976, 33732,
	2515, -1000, -1000, -1000, -1000, 496, 1961, 1525, 25160, 1519,
	1701, 707, 31046, -1000, 999, 1162, -1000, -1000, -43, -1000,
	505, 444, 49976, 2661, 1424, -1000, -52, 59133, -1000, 720,
	-1000, 38756, 38756, 30660, 30660, -1000, 303, 2352, 2334, 648,
	-1000, -1000, 293, -1000, -66, 1593, -1000, -1000, 1306, 1560,
	-1000, -1000, -1000, -1000, -1000, 2390, 3646, 3646, 21187, 21187,
	21187, 3646, 5958, -119, -1000, 3646, 3646, -115, -1000, -1000,
	58036, -1000, -1000, -1000, -1000, 59133, 8379, 1309, -1000, 55441,
	-1000, -1000, -1000, -1000, 21187, 21187, -1000, -1000, -1000, -1000,
	-1000, 22420, 1865, 491, 59890, -1000, -1000, 814, 21187, 21187,
	2134, 814, 814, -121, 748, -1000, -1000, -1000, 2577, 94,
	-1000, 2600, 10755, -1000, -1000, -1000, 49976, -1000, 49976, -1000,
	10755, 49976, 1872, 1597, -1000, -1000, 1711, 485, 22420, 49976,
	713, -1000, 1322, 25160, 2390, 10755, 2390, 55369, -122, -124,
	1596, -1000, -1000, 1590, 21187, -1000, 59890, 1509, 1509, -130,
	-132, -1000, 927, 926, 919, -1000, -1000, -1000, 898, -1000,
	763, -67, 21187, -1000, -1000, 1300, 25160, -135, 25160, -141,
	289, 444, 25160, -1000, -1000, 49976, -146, 49976, -1000, 707,
	31046, -1000, 2217, -1000, 2310, 49976, 2374, -1000, -1000, -1000,
	1765, 484, -1000, -147, -1000, -1000, 805, 482, 480, -1000,
	-1000, -97, -1000, 716, 715, -1000, -1000, -1000, 10755, 1004,
	-1000, 3646, 3646, 3646, -1000, 283, -1000, -1000, 1424, 2490,
	-1000, 55012, 54940, 4304, 22420, 59890, -148, -1000, 49976, 59133,
	-115, -1000, -1000, -1000, 38370, 495, -1000, -1000, 2184, -1000,
	-1000, -1000, 49976, 1603, -1000, -1000, 21187, 5340, 479, 21187,
	-1000, 1781, 478, -1000, -1000, -1000, -1000, -1000, -1000, 2451,
	-1000, 1199, -1000, -1000, 59133, 2437, -1000, -1000, 477, 471,
	49976, 49976, 469, 458, 21187, 59133, 49976, -153, 1322, -156,
	-1000, 1781, -1000, -158, 851, -1000, 457, 31046, -1000, 1694,
	1011, -159, 49976, 1162, -1000, -1000, -1000, 30660, 30660, 1593,
	-1000, 49976, -1000, 49976, -1000, 49976, -1000, 1289, 21187, -1000,
	-1000, 4304, -161, -1000, -107, -1000, 2514, -1000, -1000, -1000,
	-1000, 2142, 54583, 1664, 49976, 54511, 1277, 49976, 2390, 49976,
	850, 10755, 1306, 1306, -1000, -1000, 21187, 21187, 59133, 456,
	-1000, 1781, 1322, 1277, 1322, 454, 25160, -1000, 1701, 1081,
	-1000, 803, -1000, -1000, -164, -167, -1000, -170, -172, -1000,
	211, 22009, 22009, 22009, -115, -1000, 49976, 451, 2125, -1000,
	1473, 1383, 40, 883, -1000, -175, -1000, 448, -1000, 21187,
	-1000, -178, -1000, 842, -181, -1000, 838, -187, -188, 49976,
	1277, 1781, -1000, 1781, 25160, -189, -1000, 27100, -1000, 805,
	805, -1000, -1000, -1000, -1000, -1000, 22816, 1408, 1134, 57157,
	-1000, -1000, -1000, -1000, 49976, -1000, 1505, 1492, 1146, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1664, 59133, -1000, 1306,
	1811, -1000, 1306, 1860, -1000, -1000, -196, -1000, 1277, 1277,
	-197, -1000, -180, -1000, -1000, 2544, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2320, -1000, 865, 1651, 1651, 1473, -1000,
	447, -1000, 442, 1462, -1000, -1000, 1322, -1000, 21598, -1000,
	2560, -1000, -1000, 1723, -1000, -1000, 21187, 21187, -1000, -1000,
	-1000, 1781, -1000, -1000, -1000, -1000, -199, -202, 1277, 1277,
	895, -1000, -1000, 433, 21187, -214, 1277, -1000,
}
var sqlPgo = [...]int{

	0, 3178, 3177, 1990, 3176, 2456, 3175, 3174, 3171, 3169,
	3168, 2431, 3165, 3161, 3159, 3158, 3157, 3156, 3155, 3154,
	3150, 3147, 3144, 3139, 3136, 3135, 3134, 3130, 3129, 3124,
	3111, 3109, 3106, 3105, 2419, 3104, 2397, 3099, 3094, 3093,
	3092, 3090, 3089, 3088, 3086, 22, 3083, 3081, 3079, 3078,
	3076, 2395, 3075, 3074, 2364, 3073, 3064, 2348, 3061, 3057,
	2333, 3053, 2329, 3051, 3037, 2322, 3036, 3030, 2316, 3028,
	2314, 3022, 3021, 2312, 3020, 98, 107, 3019, 2310, 3018,
	3017, 2307, 2297, 2291, 3015, 2288, 3011, 3007, 2260, 2245,
	3005, 189, 2997, 2995, 2991, 2989, 2234, 2224, 2985, 2984,
	2983, 175, 2978, 2168, 2973, 2972, 2971, 2970, 2966, 2960,
	2958, 2956, 2951, 2950, 2949, 2948, 2947, 2946, 2944, 2942,
	2941, 2940, 2938, 2937, 2933, 2932, 2931, 2926, 193, 112,
	2925, 2924, 2045, 1951, 2920, 2917, 47, 55, 16, 75,
	233, 170, 4685, 157, 2914, 2913, 2912, 2909, 2908, 30,
	123, 119, 115, 117, 141, 2907, 2903, 49, 36, 23,
	21, 77, 2902, 2901, 2900, 1866, 96, 2899, 2898, 173,
	172, 2897, 620, 2893, 34, 83, 129, 81, 89, 48,
	2892, 100, 15, 2890, 116, 164, 2889, 73, 40, 18,
	4465, 80, 194, 79, 57, 150, 143, 153, 145, 120,
	86, 2884, 178, 74, 139, 2883, 2882, 2880, 52, 134,
	14, 2, 142, 6, 2879, 13, 2878, 5, 2876, 2874,
	2869, 2868, 26, 111, 32, 38, 2866, 27, 186, 128,
	2863, 155, 2861, 72, 2859, 180, 140, 152, 7, 149,
	2856, 2854, 2853, 2851, 2850, 68, 20, 71, 2847, 2841,
	99, 160, 2838, 37, 118, 87, 94, 192, 154, 93,
	158, 151, 2835, 2833, 2828, 183, 2819, 133, 108, 2818,
	2816, 29, 42, 159, 35, 2815, 2814, 109, 2813, 137,
	2812, 2811, 2810, 187, 106, 127, 12, 78, 88, 10,
	156, 104, 65, 56, 2809, 2834, 321, 2111, 2808, 101,
	61, 33, 59, 103, 171, 39, 2807, 2806, 1463, 2804,
	2803, 2801, 2797, 122, 2794, 2788, 2786, 90, 51, 50,
	2784, 105, 43, 97, 185, 58, 147, 125, 179, 121,
	2783, 132, 95, 2780, 136, 177, 54, 2779, 1415, 2777,
	131, 2775, 2771, 2761, 2760, 1011, 2758, 2757, 2756, 1288,
	2755, 102, 2753, 130, 126, 144, 138, 110, 162, 163,
	1155, 2752, 135, 31, 2751, 92, 25, 0, 3731, 3422,
	2747, 146, 91, 2741, 2738, 2737, 2736, 28, 8, 1,
	4, 11, 9, 208, 166, 2735, 2732, 148, 85, 113,
	2730, 188, 161, 2729, 2728, 2727, 45, 2722, 19, 2721,
	17, 2719, 2718, 24, 3, 2717, 2716, 165, 2715, 2714,
	2713, 2711, 2497, 2708, 181, 2706, 2705, 82, 2702, 2699,
	2696, 2690, 2121, 2683, 2682, 44, 62, 124,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 9, 9, 9, 33, 33, 11, 11,
	10, 10, 10, 12, 7, 7, 7, 7, 7, 7,
	7, 7, 14, 14, 24, 24, 15, 26, 414, 414,
	18, 28, 19, 29, 13, 22, 20, 20, 30, 17,
	17, 25, 25, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 413, 413, 153, 153, 152, 148,
	148, 416, 416, 154, 154, 154, 156, 156, 34, 34,
	89, 89, 89, 139, 82, 82, 82, 82, 82, 77,
	77, 365, 365, 366, 366, 135, 135, 136, 136, 136,
	136, 137, 137, 138, 138, 138, 48, 36, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 39, 39, 39, 39, 39, 39,
	46, 46, 129, 129, 49, 49, 49, 49, 49, 49,
	49, 49, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 60, 60, 50,
	409, 409, 236, 236, 333, 333, 62, 62, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	71, 71, 71, 72, 72, 72, 69, 69, 69, 67,
	67, 67, 66, 66, 66, 70, 70, 70, 68, 68,
	68, 237, 237, 73, 73, 73, 73, 73, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 76, 76, 76, 76, 76, 76,
	76, 76, 335, 335, 74, 74, 306, 306, 78, 78,
	266, 266, 79, 79, 79, 79, 79, 80, 80, 80,
	80, 90, 90, 90, 90, 412, 412, 229, 229, 169,
	169, 169, 169, 85, 85, 85, 85, 86, 86, 86,
	87, 87, 134, 134, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 40, 40, 40, 41, 41, 42,
	42, 43, 43, 44, 44, 45, 45, 45, 45, 45,
	97, 97, 97, 99, 96, 96, 96, 98, 98, 98,
	98, 100, 100, 101, 101, 101, 101, 101, 101, 102,
	102, 359, 359, 244, 244, 357, 357, 358, 358, 206,
	206, 206, 206, 206, 207, 207, 207, 364, 364, 364,
	364, 364, 364, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	119, 119, 119, 128, 128, 128, 128, 128, 128, 128,
	121, 121, 121, 112, 112, 104, 104, 104, 104, 108,
	108, 108, 108, 108, 105, 105, 109, 109, 111, 111,
	113, 113, 113, 113, 113, 113, 106, 106, 106, 106,
	115, 115, 115, 115, 114, 114, 124, 124, 124, 124,
	124, 124, 320, 320, 120, 120, 120, 120, 123, 123,
	123, 123, 118, 118, 118, 122, 122, 125, 125, 125,
	125, 107, 107, 107, 419, 419, 419, 126, 126, 117,
	117, 127, 127, 127, 127, 127, 127, 127, 116, 116,
	116, 415, 415, 110, 410, 410, 407, 407, 407, 407,
	407, 407, 407, 408, 408, 411, 411, 83, 83, 83,
	55, 55, 56, 56, 208, 208, 209, 209, 288, 288,
	288, 288, 210, 210, 155, 155, 155, 213, 214, 214,
	211, 211, 212, 212, 212, 216, 216, 215, 218, 218,
	217, 287, 375, 375, 376, 376, 376, 376, 376, 376,
	376, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 373, 373, 373, 374, 371, 371, 372, 372, 372,
	372, 420, 420, 286, 286, 222, 222, 378, 378, 378,
	378, 379, 379, 379, 379, 379, 382, 381, 380, 380,
	380, 380, 380, 316, 316, 316, 59, 59, 59, 255,
	255, 254, 254, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 131, 131, 57, 57,
	57, 161, 161, 54, 54, 54, 58, 58, 61, 61,
	61, 61, 61, 61, 53, 53, 53, 53, 53, 271,
	271, 271, 270, 270, 227, 227, 322, 322, 322, 173,
	173, 174, 174, 149, 149, 149, 21, 23, 23, 16,
	16, 16, 16, 16, 16, 31, 31, 32, 32, 27,
	27, 417, 417, 418, 418, 84, 84, 88, 88, 88,
	94, 94, 130, 130, 130, 130, 130, 130, 130, 35,
	35, 35, 35, 47, 47, 47, 47, 92, 423, 423,
	423, 93, 93, 422, 422, 168, 168, 168, 168, 170,
	170, 283, 283, 284, 284, 424, 424, 285, 285, 285,
	163, 162, 164, 164, 52, 52, 52, 157, 157, 158,
	158, 159, 159, 160, 160, 425, 425, 81, 81, 81,
	133, 133, 202, 202, 279, 279, 279, 223, 223, 179,
	179, 282, 282, 280, 280, 280, 253, 253, 253, 132,
	132, 232, 232, 246, 246, 247, 247, 330, 330, 248,
	91, 91, 142, 142, 140, 140, 140, 140, 140, 140,
	141, 141, 141, 143, 143, 143, 143, 143, 143, 143,
	146, 146, 146, 146, 147, 147, 147, 145, 145, 389,
	389, 389, 391, 391, 392, 388, 388, 390, 390, 421,
	421, 257, 257, 257, 220, 221, 219, 219, 426, 426,
	225, 225, 224, 226, 226, 321, 321, 321, 251, 251,
	251, 251, 274, 274, 272, 272, 273, 273, 275, 275,
	276, 276, 276, 277, 277, 278, 278, 250, 250, 302,
	302, 144, 144, 144, 231, 231, 231, 233, 233, 293,
	293, 293, 294, 294, 292, 292, 292, 292, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 324, 324, 234,
	234, 325, 281, 281, 405, 405, 405, 406, 406, 319,
	319, 326, 326, 326, 326, 326, 326, 317, 317, 318,
	318, 331, 332, 332, 260, 260, 260, 260, 258, 258,
	259, 259, 327, 327, 327, 327, 252, 252, 328, 328,
	328, 289, 289, 336, 336, 336, 336, 351, 230, 230,
	230, 346, 346, 337, 337, 337, 337, 337, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	340, 340, 340, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 350, 350, 350, 350, 350, 341, 341, 347, 348,
	342, 343, 349, 349, 349, 349, 353, 353, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 345, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	267, 267, 268, 268, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	297, 297, 297, 297, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 383, 383, 383,
	383, 383, 383, 383, 383, 386, 386, 387, 387, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 393, 393,
	394, 394, 396, 396, 397, 397, 398, 399, 399, 399,
	400, 401, 401, 395, 395, 402, 402, 402, 402, 403,
	403, 404, 404, 404, 404, 404, 308, 308, 309, 309,
	315, 315, 315, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 171,
	171, 171, 171, 171, 242, 242, 240, 240, 240, 243,
	243, 241, 241, 239, 239, 238, 238, 305, 305, 303,
	303, 307, 307, 261, 261, 352, 352, 352, 352, 352,
	352, 352, 262, 262, 262, 269, 263, 263, 264, 264,
	264, 264, 264, 299, 300, 265, 265, 265, 301, 301,
	310, 314, 314, 313, 312, 312, 311, 311, 290, 290,
	291, 291, 249, 249, 427, 427, 245, 245, 329, 329,
	329, 329, 204, 204, 235, 235, 203, 203, 197, 197,
	198, 198, 198, 198, 228, 228, 354, 354, 354, 355,
	356, 304, 189, 188, 176, 177, 187, 186, 185, 175,
	178, 182, 183, 184, 180, 181, 193, 192, 191, 190,
	334, 199, 199, 200, 200, 200, 201, 201, 201, 201,
	172, 172, 194, 194, 195, 196, 196, 165, 165, 165,
	166, 166, 167, 167, 363, 363, 361, 361, 361, 362,
	362, 362, 362, 360, 360, 360, 360, 360, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 6, 1, 1,
	5, 5, 6, 6, 7, 7, 7, 10, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 9, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 1, 2, 1, 2, 7, 3, 6,
	1, 2, 1, 3, 2, 0, 8, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 6, 3, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 3, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 6, 3, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 3, 1, 3, 2, 1, 3, 1, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 2, 3, 3, 3, 6, 4,
	2, 3, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 7, 7, 8, 10, 7, 4, 5, 5, 5,
	3, 1, 1, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	8, 11, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 4, 2, 5, 5, 5,
	2, 8, 9, 6, 5, 3, 1, 4, 7, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 7, 3, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 4, 2, 4, 7,
	3, 3, 0, 3, 6, 3, 6, 3, 6, 7,
	6, 5, 3, 4, 13, 16, 9, 12, 4, 2,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 2,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 1,
	1, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 1, 5, 5,
	3, 1, 1, 1, 2, 2, 2, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 1, 2, 3, 2,
	3, 2, 3, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 1,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 2, 2, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 7, 1, 7, 5, 3,
	1, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 425, -4, -34, -36, -48, -46,
	-49, -79, -62, -63, -64, -78, -73, -77, -80, -81,
	-82, -83, -74, -89, -88, -90, -94, -40, -91, -84,
	-85, -95, -103, -130, -131, -132, -133, -5, -11, 25,
	36, -37, -38, -39, 51, 78, 66, -57, -54, -51,
	-60, 80, 100, -390, 104, -65, -68, -70, 109, 117,
	122, 123, 147, 157, 259, 266, 288, 290, 292, 301,
	-42, -41, 118, -140, -142, 286, -86, -87, -96, -97,
	-98, -99, -134, 319, -104, -105, -106, -107, -108, -109,
	-110, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, 322, -35,
	-47, -93, -92, 366, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -389,
	-66, -67, -69, -71, -72, -143, -141, 422, 287, 376,
	37, 331, 67, 112, 296, 20, -14, -18, -19, -15,
	-17, -20, -16, -24, -28, -29, -26, -25, -27, -30,
	-31, -32, -33, -21, -22, -13, 393, 401, -146, -144,
	-145, -147, 308, 384, 344, 426, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 2, 344, 387,
	309, 377, 93, 170, 271, 257, -407, 2, 4, -369,
	-367, -198, -197, 344, 93, 30, 38, 39, 41, 44,
	56, 57, 58, 61, 97, 98, 116, 124, 125, 136,
	149, 151, 160, 161, 162, 177, 183, 185, 165, 206,
	235, 236, 249, 253, 263, 265, 274, 298, 325, 340,
	355, 356, 357, 363, 364, 384, 385, 389, 396, 20,
	21, 22, 23, 25, 35, 36, 37, 40, 42, 43,
	46, 47, 48, 49, 50, 51, 52, 55, 60, 65,
	66, 67, 68, 69, 74, 71, 72, 73, 76, 78,
	79, 82, 83, 91, 92, 94, 95, 96, 100, 102,
	104, 107, 108, 109, 111, 113, 114, 117, 118, 121,
	119, 350, 352, 120, 122, 123, 133, 134, 135, 137,
	138, 140, 142, 146, 148, 152, 154, 155, 156, 157,
	158, 159, 171, 166, 172, 176, 179, 178, 180, 181,
	182, 173, 187, 190, 191, 192, 194, 195, 198, 199,
	200, 203, 202, 205, 208, 209, 212, 213, 216, 218,
	221, 222, 225, 223, 224, 227, 228, 230, 229, 237,
	238, 240, 241, 244, 245, 248, 251, 254, 255, 256,
	257, 258, 259, 260, 262, 264, 266, 268, 269, 270,
	271, 272, 273, 275, 276, 278, 279, 280, 281, 282,
	286, 284, 285, 287, 288, 289, 290, 292, 294, 295,
	296, 297, 299, 320, 321, 333, 301, 302, 303, 304,
	305, 306, 307, 311, 315, 312, 313, 314, 309, 310,
	316, 317, 319, 322, 324, 326, 327, 330, 331, 332,
	334, 337, 338, 339, 335, 336, 329, 342, 343, 345,
	346, 347, 348, 349, 351, 353, 358, 361, 362, 366,
	367, 369, 370, 373, 374, 375, 380, 376, 378, 381,
	382, 383, 388, 387, 394, 395, 397, 398, 399, -196,
	-165, 415, -195, 425, 425, 425, 2, 191, 192, 270,
	269, 316, 317, -190, -194, -195, -196, -165, 4, -367,
	-369, 93, 242, 425, 425, 425, 2, 344, 332, 55,
	309, 377, 294, 387, 367, 107, -270, 187, 93, 372,
	-165, 266, 24, 2, 102, 176, 375, 374, 24, 262,
	310, 346, 348, 2, 425, 425, 2, 387, 309, 344,
	170, 93, 377, 294, -184, 2, -165, -76, 2, 422,
	27, -75, -5, -51, -60, -65, -78, -73, -11, -34,
	-36, -57, -54, -62, -68, -70, -82, -81, -83, -85,
	-89, -88, -91, -96, -97, -103, -132, -133, 80, 25,
	109, 319, 118, 186, 2, -412, -229, 2, 24, -169,
	-165, 80, 147, 308, -139, 344, 2, -165, 191, 192,
	2, -184, 2, -407, 2, 191, 192, 2, -412, -229,
	23, 2, -165, 2, 305, 322, -170, 2, 301, -165,
	425, 425, 425, 425, 425, 425, 213, 60, 298, 316,
	-101, 362, -100, 355, 303, -102, -359, 2, 225, -165,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 2, -128, 316, 332, 155, 36, 60, 24,
	65, 94, 148, 170, 171, 199, 75, 76, 269, 213,
	192, -320, 317, 345, 304, 342, 362, 80, 378, 295,
	-415, 119, 4, 93, 225, 318, 355, 69, 349, 350,
	425, 425, 425, -421, 2, 344, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, -141, -143, -142,
	425, 425, 425, 425, 425, -224, -225, 371, 184, 115,
	247, -140, -142, 2, -389, -128, 316, 2, 60, 24,
	-357, 2, -295, 242, -297, 413, 414, 408, 231, 400,
	-308, 99, 220, 219, -298, -310, 116, 298, -243, 7,
	8, 5, 6, -172, -338, -304, -345, 365, 126, 234,
	-201, 428, 9, 422, -386, -142, -309, 31, 53, -361,
	-200, -339, -348, -343, -344, -346, 42, 49, 48, 353,
	224, 311, 312, 313, 314, 326, 380, 166, 40, 240,
	241, 178, 4, 185, -199, -165, -383, -384, -367, -368,
	177, 179, 180, 181, 182, 183, 325, 39, 274, 137,
	138, 136, 108, 98, 97, 236, 44, 43, 41, -349,
	95, 355, 356, 357, 358, 194, 195, 63, 85, 86,
	84, 89, 88, 90, 87, 318, 377, 54, 30, 160,
	161, 165, 235, 162, 61, -385, 336, 81, 127, 145,
	175, 163, 188, 189, 193, 207, 210, 226, 233, 250,
	252, 293, 323, 57, 56, 385, 124, 125, 149, 206,
	253, 263, 340, 363, 364, -422, 2, 362, 362, 2,
	-422, 2, -422, 2, -168, 2, 362, 359, -423, 362,
	396, -391, 275, -392, -184, -391, 425, 425, 427, 425,
	-219, -220, -221, 2, 24, 105, 422, 2, -323, 2,
	420, -327, -142, 201, -326, 422, -324, -190, 243, -387,
	299, -383, -384, -172, -165, -200, 4, 220, 219, -3,
	2, -327, 160, -190, 2, -327, 160, 2, -191, 160,
	-327, -194, 2, -365, 160, -363, 9, -362, 5, 4,
	-367, -369, -368, 63, 2, -175, -165, 2, -203, 160,
	-190, -187, -360, 4, -367, -369, -368, -370, 24, 26,
	27, 28, 29, 31, 32, 33, 34, 45, 53, 54,
	59, 62, 64, 75, 80, 84, 85, 87, 86, 88,
	89, 90, 99, 101, 103, 105, 106, 110, 112, 115,
	126, 128, 141, 143, 144, 147, 150, 153, 164, 170,
	174, 184, 186, 201, 204, 211, 214, 215, 231, 232,
	234, 239, 242, 243, 246, 247, 261, 267, 277, 291,
	308, 318, 328, 341, 344, 354, 359, 360, 365, 371,
	372, 377, 379, 386, 390, 391, 392, 393, -188, -360,
	359, 427, -235, -197, -198, -228, -165, 424, -295, 2,
	-91, 2, -295, 160, 2, -91, 160, 2, -295, 160,
	2, -91, 160, 2, -222, 422, 424, 344, 64, 2,
	-190, 160, -180, 2, -165, 141, -191, 160, 2, -194,
	-365, 160, 2, -365, 160, 2, -193, 2, -190, -192,
	-194, -192, 170, 170, -175, 160, 2, -165, 24, 144,
	2, 186, 2, 186, 2, -328, 2, -327, -237, 160,
	2, -190, -237, 160, 2, -237, 160, 2, -204, 160,
	2, -203, -175, 160, 2, -366, 160, 2, -365, -366,
	160, 2, -266, 422, -335, 2, -334, -362, 384, 422,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 316, -139, 242,
	359, 427, 422, -190, -295, -91, -306, 422, 144, -295,
	-91, 242, 144, 244, 2, 93, 344, 399, 24, -165,
	2, 320, 2, 422, -101, 58, 362, -284, 2, -285,
	-162, -163, -164, 190, 268, 273, 399, -357, 359, 405,
	144, -357, -244, 424, -128, 2, 141, 379, 2, 7,
	2, -365, 272, 133, 2, 320, 2, 269, 317, 60,
	144, 2, 2, -410, 2, 242, 144, 2, 144, 2,
	144, 2, 144, 2, 144, 2, 2, 269, 317, 2,
	361, 200, 120, 2, 144, 2, 144, 2, 5, 2,
	190, 268, 333, 2, -190, -419, 2, 344, 387, 309,
	2, 2, 144, 2, 144, 399, 2, -252, -327, -224,
	-225, -251, -272, -273, 211, 128, 239, -257, 24, 105,
	-257, -257, 47, 423, 423, -128, 320, 2, 10, 11,
	62, 35, 413, 414, 415, 416, 139, 417, 418, 411,
	412, 410, 403, 404, 407, 196, 197, 77, 406, 405,
	70, 217, 300, 129, 130, 131, 132, 283, 167, 168,
	169, 13, 14, 15, 28, 246, 210, 400, 163, 323,
	408, 16, 17, 18, 188, 189, 233, 38, 164, -171,
	-205, -295, -295, -295, -295, -295, 252, -249, -290, 420,
	-142, 422, 422, 422, 5, 422, 5, -356, 7, -142,
	-295, -308, 423, -241, 422, -142, -308, -303, 422, 298,
	420, -311, -295, 424, -393, 394, -341, 422, 265, -340,
	422, -340, -340, -353, 388, 395, 401, 395, 401, 141,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, -353, -353, 422, 422, 422, 422, 422,
	422, 422, 422, 422, -283, -284, -283, 359, -170, 427,
	-391, -222, 422, -245, -329, -295, 415, -245, -245, 242,
	-238, -295, 81, -260, 193, 226, 145, 207, 293, 175,
	-356, -76, -292, 428, -319, 401, -142, -324, -165, -142,
	-326, 422, -323, -319, 415, -190, 422, 144, 422, 424,
	-151, 284, -150, 22, 25, 109, 382, 121, -212, 172,
	257, 116, 329, -414, 118, 302, 351, 352, 284, 116,
	-254, -256, 32, 91, 228, 254, 50, 158, 219, 220,
	331, 116, 284, 393, 116, 118, 284, -153, 329, -414,
	118, 302, 284, -152, -212, 116, 428, 118, 237, -365,
	-235, 427, 427, -360, 415, 116, 116, 116, 116, 144,
	-228, -360, -190, -199, -165, -200, 422, -222, 231, 242,
	-409, -236, 344, -190, -255, -254, 231, -161, -388, 393,
	231, 231, -222, 32, 422, 2, -177, 160, 2, -166,
	-165, -177, 160, -388, 231, -328, -202, -190, -202, 319,
	-184, 32, -154, 427, 52, 289, 116, -154, 116, -154,
	116, -154, 427, 116, -154, 116, 427, 116, 116, -238,
	423, 427, -335, -365, -407, -228, -169, -365, 144, 80,
	422, 32, -305, -336, -337, -350, -338, -347, -342, -345,
	279, 280, 278, 282, 281, 42, 49, 48, 353, 224,
	311, 312, 313, 314, 326, 380, 166, 40, 240, 241,
	178, 4, 41, -349, 185, 177, 179, 180, 181, 182,
	183, 325, 39, 274, 137, 138, 136, 108, 98, 97,
	236, 44, 43, 95, 355, 356, 357, 358, 194, 195,
	57, 56, 385, 336, -366, -407, -228, 141, -175, 2,
	-190, 2, 71, 72, 399, -359, -238, 32, -284, 2,
	-424, 427, 209, -207, 216, 230, 154, 243, 397, -364,
	5, 4, -304, -316, 99, 213, -345, 8, 414, -354,
	7, 413, -358, -357, -358, 83, 424, -360, 344, 194,
	-365, -365, -359, 24, 321, 2, -190, -411, 141, -408,
	294, -407, -190, -190, -190, -190, -190, 141, 2, 361,
	2, 361, 2, -165, -165, 209, -190, 344, 170, 344,
	-154, 427, -251, -273, -272, -275, -295, 24, -278, 135,
	227, -295, -297, -141, -141, -141, -226, -321, -295, 267,
	170, -359, -351, -336, -336, -189, -360, 355, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, 210, 163, 323, 38, 164, -295, 359,
	-295, -295, -295, -295, 223, 231, 234, 365, 126, 373,
	105, 237, -427, 341, 34, -301, -142, -242, 422, -315,
	29, 328, 24, -308, 422, -290, -295, -291, -239, -238,
	-238, 423, 386, 24, 105, 415, 2, 7, -267, 398,
	222, 96, 156, 221, -268, 307, 423, 427, 32, 423,
	-295, -239, -307, -303, -314, -313, 390, -360, 415, -394,
	134, 150, 7, -356, 355, 355, 355, 355, 422, 423,
	2, 423, 2, 423, 2, 423, 2, 423, 2, -295,
	-295, -295, -295, -295, -295, -295, -238, -261, 2, -352,
	-238, 4, 398, 222, 96, 156, 221, 307, -261, 2,
	-238, 2, -238, 2, -262, 2, -295, -238, -263, -296,
	-297, 413, 414, 408, -308, -264, 2, -295, -239, -295,
	45, 204, 360, -265, -295, 144, -238, -170, -392, 32,
	-238, -231, 427, 144, 32, 4, -231, -231, 422, 423,
	427, 193, 193, -323, -260, 193, -258, 250, -258, -258,
	-405, 422, 421, -319, -176, 420, 429, -360, -318, -317,
	32, -184, 248, -319, -319, 424, 423, -318, -190, 422,
	-238, -360, 427, 359, -417, 75, 64, -287, 160, 64,
	-371, -178, 75, -372, -165, 59, 372, 267, 143, -417,
	75, -417, 75, 75, 319, 332, 47, -327, 35, -91,
	205, 73, 144, 359, -327, -256, -336, 91, 219, 220,
	47, -355, -354, 414, -355, 47, -355, -355, -355, 393,
	-191, -327, 359, 258, -365, 73, 359, 427, 35, -91,
	205, 73, 144, 359, -203, -176, 73, 344, -332, -331,
	402, -197, -165, 424, -295, -91, -295, -91, 334, 423,
	424, 188, 188, -208, -209, -165, -288, -287, -373, -374,
	-371, 187, 170, 372, 127, 32, 116, -228, -333, 186,
	427, -236, 116, 258, 116, 116, 32, 422, 113, 271,
	2, 242, 231, 242, 231, -157, 347, 116, -289, 391,
	-279, -91, 422, 99, 32, -279, -246, -247, -330, -248,
	-178, 422, -184, -190, -237, -237, -237, -203, -204, -175,
	-365, -366, -366, 423, -76, -334, 423, -138, 393, 359,
	393, 423, -139, 379, -209, -75, 25, 80, 109, 423,
	427, -230, 31, 420, -267, 422, -353, 422, -138, -331,
	144, -229, -332, -332, 141, 72, 405, 359, 423, 362,
	-285, -206, 273, 327, 285, 315, 8, 7, 7, 427,
	-360, -190, 141, -228, -228, 316, 141, 141, 424, -190,
	-203, -190, -327, -276, -354, 422, -277, 298, 299, 427,
	-149, 33, 103, 198, -190, 399, 114, -295, -295, 359,
	-427, 341, -301, 114, -295, 223, 234, 365, 126, 373,
	105, 237, 144, 422, -296, -296, 423, -240, -295, -295,
	421, 431, 423, -426, 427, -224, -295, -238, -238, 423,
	423, 359, 359, 359, 359, 422, 424, -238, -228, 421,
	421, 427, -312, -313, 110, -295, 424, -399, 251, 422,
	422, 423, 423, 427, 399, 399, 399, 399, -295, 32,
	427, 427, 427, 423, 427, 427, 427, 423, 423, 144,
	423, 423, 423, 423, -269, 261, 423, 10, 11, 413,
	414, 415, 416, 139, 417, 418, 411, 412, 410, 403,
	404, 405, 70, 217, 300, 13, 14, 15, 188, 164,
	-296, -296, -296, 423, -299, -300, 144, 141, 32, -265,
	-265, -265, 423, 144, -238, 422, 423, -289, -329, -233,
	2, -323, -186, -360, -289, -289, -238, -295, -323, -323,
	-259, 379, 242, 193, -323, -317, 423, -406, -356, -319,
	-318, -356, -294, -293, 142, 229, -184, -222, -318, -318,
	-360, -319, 423, -234, -325, -387, -426, 424, -150, -190,
	-178, -185, -165, 231, -287, 160, -156, 231, -336, -185,
	422, 422, 198, 198, -178, -185, 160, -178, 160, -185,
	-185, -413, 273, 238, -295, 212, 271, 232, -151, 284,
	-91, -91, 399, 422, -193, 284, -199, -355, -355, -254,
	284, -191, -365, 393, 399, -175, -152, -91, -91, 399,
	422, -176, -153, 284, 399, -190, -135, 159, 237, 415,
	-360, -129, 5, 234, -129, 423, 427, 170, -177, 170,
	-183, -166, -91, -190, 144, -138, -365, -190, -191, -365,
	-365, -365, -91, 2, 422, 2, -190, 116, -190, 116,
	-158, 111, -425, 405, -175, -225, -224, -295, -253, -282,
	291, 242, -223, -179, -178, 384, -184, -253, -232, 427,
	144, 405, 424, -223, -154, -154, -154, -154, -154, -76,
	144, -137, 245, -136, -165, 5, -228, 23, -138, 422,
	-365, 423, -336, 420, 421, 7, 7, 422, -356, -138,
	-228, 144, -43, 393, 271, 93, 344, 257, 170, -357,
	-357, -284, 370, 68, 273, -357, 344, 316, 316, -165,
	-277, -295, -321, -190, 428, -295, -295, 114, 114, -295,
	-296, -296, -295, 114, 144, 422, -295, -305, 28, 28,
	423, 427, -291, -295, 423, 386, -426, -426, -426, 5,
	222, 156, 221, -268, 221, -268, -268, 7, 415, -360,
	423, -303, 112, -295, 354, -360, 415, -400, -181, 422,
	-165, 391, -224, -356, 423, -351, -336, -295, -295, -295,
	-295, -295, -295, -299, -295, -351, -336, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, 105, 231, 237, -296,
	-300, -299, -295, -295, -336, 423, 423, 423, -238, -75,
	-250, 150, -332, 427, -250, -250, 423, -259, 422, -295,
	-323, 421, 423, 427, -318, 421, 427, 430, 405, -222,
	424, -317, 423, 427, -281, 32, 423, -360, 359, 359,
	116, 231, 381, -375, -372, -295, -227, -322, -178, -387,
	422, -165, 422, 422, -148, 109, 319, -418, 116, -154,
	116, -154, 397, 422, 422, 359, -417, 75, -295, -238,
	359, 359, 258, -295, -295, -238, 359, -295, 118, -138,
	144, 343, -210, 173, -288, -166, 422, -177, 422, 422,
	-222, -190, -255, -161, 2, -271, 379, -176, 422, -176,
	-159, 203, -425, -363, -388, -274, -272, -253, -245, 232,
	74, 423, 427, 424, -289, -247, -233, -295, 2, 423,
	-91, 427, 422, 405, 405, 244, -365, -139, -139, 7,
	421, 423, -356, 423, -228, 245, -187, -175, -190, -188,
	-203, -190, 243, 423, -149, -176, -295, -295, 114, 28,
	28, -295, -295, -305, 423, -295, -295, -238, 421, 5,
	-295, 423, 423, 423, 423, -295, 424, -401, -165, -295,
	423, 423, 423, 423, 427, 427, 423, 423, 423, 423,
	-300, 144, 105, 237, 422, 423, 423, -302, 153, 47,
	-323, -302, -302, -228, -292, -356, -293, -176, 420, -360,
	-325, 422, 424, -178, -185, -287, 116, -376, 75, -377,
	62, 127, 80, 231, 234, 372, 267, 59, 99, 277,
	32, 423, 423, 427, -174, 62, -174, -295, -227, -228,
	231, 338, 99, 231, 99, 92, 367, -178, -185, -228,
	-228, -190, -178, -185, 423, -193, -191, -365, 423, -176,
	73, -366, 355, -211, -212, 164, 422, -227, 422, -228,
	-208, 32, 422, 146, 46, 242, -227, 242, -160, 202,
	-425, -363, -157, -253, -280, 422, 242, -91, -179, 2,
	-225, 405, -136, -137, -365, -365, 423, 92, 92, 421,
	423, -44, -45, 170, 75, 260, -214, -213, 257, 237,
	-149, -295, -295, -295, 423, -426, -360, 415, -395, 257,
	423, -295, -295, -296, 144, 422, -305, -396, 392, -295,
	-238, -396, -396, 423, -319, -356, 2, -287, -185, -189,
	-182, -165, 127, 160, 234, 198, 422, -296, -190, 422,
	2, -286, -420, 79, 339, -322, -149, -189, -149, 423,
	423, 423, 234, 234, -295, -336, -154, -154, 423, 423,
	359, 359, 359, 359, 399, -295, 255, -227, 423, -227,
	423, 423, -91, -227, -190, 423, -190, -425, -363, -158,
	106, -228, 75, -274, -301, 423, -138, 422, 422, 427,
	24, 422, 24, 422, -188, 344, 423, -225, 47, 423,
	423, -296, -305, 423, -397, -398, -181, -318, 421, -377,
	-182, 231, -295, -167, 422, -295, -210, 422, -174, 277,
	-173, 62, 422, 422, -178, -185, 422, 422, -295, -190,
	423, -286, 423, -210, 423, -271, 422, -363, -159, 374,
	232, 423, -185, -253, -366, -366, -45, -228, -228, -190,
	-402, 271, 299, 152, -238, 423, 427, 32, 116, 423,
	-378, 218, -165, 423, -211, -228, -149, -190, -416, 379,
	-189, -216, -215, -213, -218, -217, -213, -238, -238, 422,
	-210, -286, -211, -286, 422, -227, -160, 319, -289, 423,
	423, 423, 423, 423, -403, -404, 38, 369, 83, -295,
	-403, -403, -398, -400, 127, -379, -382, -381, 242, 145,
	256, 324, 423, 338, 389, 423, -222, -295, 423, 427,
	384, 423, 427, 384, 423, 423, -228, -211, -210, -210,
	-227, 423, -246, -138, -138, -404, 264, 140, 298, 264,
	140, -182, -381, 242, -382, 242, 374, 102, -378, -215,
	164, -217, 144, 423, -211, -211, 423, -289, 28, -380,
	228, 289, 52, 319, -380, -379, 422, 422, -155, 52,
	289, -286, -404, 21, 234, 99, -238, -238, -210, 423,
	423, -211, -211, 359, 422, -238, 423, -211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 254, 255, 257, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	394, 395, 0, 870, -2, 0, 373, 375, 384, 386,
	388, 390, 391, 0, 453, 455, 457, 459, 461, 463,
	465, 466, 468, 470, 472, 474, 476, 478, 480, 482,
	484, 486, 488, 490, 492, 494, 496, 498, -2, 782,
	784, 786, 788, -2, 62, 64, 66, 68, 70, 72,
	88, 222, 223, 225, 227, 229, 232, 233, 235, 907,
	260, 262, 264, 266, 268, -2, 921, 0, 0, 0,
	-2, 0, -2, -2, -2, 800, 73, 74, 75, 76,
	77, 78, 79, 94, 95, 96, 97, 98, 99, 100,
	81, 83, 84, 90, 91, 93, 0, 0, 883, 885,
	887, 889, -2, 0, 0, -2, 7, 13, 15, 17,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 42, 46, 52, 54, 56, 60, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, -2, -2,
	-2, -2, 0, 0, 1564, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1565, 1566, 1567, 1568, 1569,
	1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
	1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
	1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
	1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
	1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1460,
	1504, 1463, 1458, 188, 190, 192, 193, 0, 0, 0,
	0, 0, 0, 676, 1489, 1502, 1503, 1504, 1507, 1508,
	1509, 1564, 0, 215, 217, 220, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	352, 1656, 354, 356, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 256, 258, 259, 0, 0, 0,
	0, 0, 0, 0, 351, 349, 1483, 293, 294, 0,
	0, 334, 335, 336, 337, 338, 339, 341, 298, 300,
	302, 303, 305, 307, 309, 311, 313, 315, 317, 319,
	320, 322, 324, 325, 327, 329, 330, 332, 743, 0,
	0, 0, 0, 0, 170, 0, 366, 360, 365, 367,
	369, 370, 371, 372, 0, 0, 168, 163, 0, 0,
	609, 347, 345, 0, 162, 0, 0, 779, 0, 366,
	1531, 364, 780, 781, 0, 0, 775, 776, 1686, 810,
	374, 376, 385, 387, 389, 392, -2, -2, 1781, -2,
	415, -2, 423, 1784, 1688, 426, 0, 428, -2, 431,
	454, 456, 458, 460, 462, 464, 467, 469, 471, 473,
	475, 477, 479, 481, 483, 485, 487, 489, 491, 493,
	495, 497, 499, 500, 0, 0, 0, 0, 0, 504,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 503, 505, 506, 507, 0, 552, 591, 592,
	783, 785, 787, 0, 717, 909, 63, 65, 67, 69,
	71, 224, 226, 228, 230, 234, 236, -2, 881, 882,
	261, 263, 265, 267, 269, -2, 0, 913, 913, 913,
	0, 0, 882, 880, 0, 377, 0, 379, 0, 504,
	382, 383, 435, 436, 1124, 0, 0, 0, 0, 0,
	1358, 1208, -2, -2, 1240, 1242, 1760, 1781, 1357, 1244,
	1245, 1246, 1247, 0, 0, 1250, 0, 1252, 1253, 1254,
	1255, 0, 1257, 0, 1261, 1262, 1263, 0, 1437, 1500,
	-2, 1038, 1039, 1040, 1041, 1042, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1496, 1491, 1329, 1276, -2, 1518,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1572, -2, -2, -2, -2, -2, -2, 1091,
	-2, -2, -2, -2, -2, -2, -2, 1793, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 0, 1749, 1766,
	1767, 1772, 1774, 1768, 1757, 1299, -2, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1806, 1807, 1808,
	1809, 1810, 1811, -2, -2, -2, 1761, 1762, 1764, 1773,
	1777, 1778, 1783, 1787, 1788, 812, 790, 803, 812, 792,
	793, 794, 795, 796, 801, 802, 805, 0, 797, 798,
	799, 899, 1663, 902, 676, 900, 884, 886, 0, 888,
	0, 0, 0, 893, 916, 914, 0, 952, 897, 898,
	908, 967, 990, 0, 972, 0, 990, 1012, 0, 977,
	1682, 1277, 1278, 0, 1504, 1501, -2, 1804, 1805, 2,
	80, 0, 1766, 1012, 82, 0, 1766, 85, 0, 1766,
	0, -2, 89, 0, 1766, 171, 172, 1514, 1515, 1519,
	1520, 1521, 1522, 1793, 92, 0, 1479, 101, 0, 1766,
	1457, 0, 1476, 1523, 1524, 1525, 1526, 1527, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 0, 1473,
	0, 0, 601, 1454, 1459, 602, 1464, 0, 194, 195,
	196, 197, 198, 1766, 200, 201, 0, 203, 204, 1766,
	206, 207, 0, 209, 0, 0, 0, 0, 0, 231,
	676, 1766, 0, 238, 1484, 0, 700, 1766, 698, 1488,
	-2, 1766, 720, 723, 1766, 725, 676, 727, 1486, 732,
	1487, 0, -2, 1511, 906, 1766, 826, 353, 355, 0,
	247, 0, 839, 0, 841, 0, 860, 1018, 155, 1766,
	272, 291, 155, 1766, 275, 155, 1766, 278, 155, 1766,
	281, 1452, 155, 1766, 284, 285, 1766, 287, 173, 288,
	1766, 290, 348, 0, 0, -2, 342, 1490, -2, 0,
	340, 299, 301, 304, 306, 308, 310, 312, 314, 316,
	318, 321, 323, 326, 328, 331, 333, -2, 0, 0,
	0, 0, 0, 0, 607, 608, 0, 0, 0, 777,
	778, 0, 0, 0, 396, 0, 0, 0, 0, 809,
	393, 0, 412, 0, 414, 1756, -2, -2, 418, 813,
	817, 818, 819, 0, 0, 0, 0, 425, 0, 0,
	0, 429, 432, 0, 501, 502, 0, 0, 512, 513,
	514, 515, 1661, 1586, 518, 0, 521, 542, 556, 0,
	0, 525, 527, 606, 529, 0, 0, 531, 0, 533,
	0, 535, 0, 537, 0, 539, 541, 543, 557, 545,
	0, 0, 0, 555, 0, 561, 0, 564, 565, 566,
	0, 568, 569, 570, 571, 0, 573, 574, -2, -2,
	578, 580, 0, 590, 0, 508, 509, 155, 1016, -2,
	0, 876, 930, 931, 0, 0, 0, 0, 911, 912,
	0, 0, 0, 872, 873, 378, 0, 381, 0, 0,
	0, 0, 1363, 1364, 1365, 1366, 1367, 1368, 1371, 1372,
	1369, 1370, 1373, 1374, 0, 0, 0, 0, 0, 1375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1376, 1377, 1378, 0, 0, 1380, 0, 1382, 0,
	0, 0, 0, 0, 0, 1187, 1189, 1445, 0, 0,
	1379, 1129, 1130, 1131, 1166, 1167, 0, 1241, 1442, 1441,
	1243, 0, 1394, 0, 1249, 0, 1121, 1256, 1470, -2,
	0, 1358, 1389, 0, 0, 1264, 1265, 1266, 0, 0,
	1394, 0, 1436, 0, 1331, 0, 1074, 0, 1075, 1076,
	0, 1077, 1078, 1089, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 1093, 0, 0, 0, 0, 0,
	1417, -2, 0, 0, 789, -2, 791, 0, 807, 0,
	901, 0, 0, 956, 1446, 1450, 1451, 956, 956, 0,
	0, 1395, 0, 0, 0, 0, 1009, 1009, 1009, 1007,
	984, 0, 990, 0, 1000, 0, 990, 990, 0, -2,
	972, 0, 0, 1000, 1013, 1014, 0, 0, 0, 0,
	102, 772, 123, 0, 772, 772, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 119, 108, 109, 0, 0,
	86, 701, 0, 704, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 121, 0, 146, 148, 0, 0, 0, 0, 1003,
	600, 0, 0, 1505, 1462, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 1491, 1492, 615, 0, 0, 0,
	245, 240, 0, 242, 696, 699, 0, 718, 0, 905,
	0, 0, 0, 0, 0, 733, 0, 1766, 738, 1475,
	1510, 0, 1766, 828, 0, 1022, 0, 842, 0, 0,
	1019, 0, 270, 0, 153, 154, 0, 273, 0, 276,
	0, 279, 0, 0, 282, 0, 0, 0, 0, 0,
	908, 0, 0, 185, 0, 358, 368, 0, 0, 0,
	0, 908, 0, 1397, 1030, 1026, 1033, 1034, 1035, 1121,
	1081, 1082, 1083, 1084, 1085, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1097, 1091, 1107, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1087, 0, 1062, 1062,
	1062, 1079, 1080, 1098, 1099, 1101, 1103, 1105, 1031, 1032,
	1097, 1097, 1094, 1095, 185, 0, 362, 0, 1003, 398,
	1003, 400, 0, 586, 0, 0, 0, 0, -2, 420,
	0, 815, 0, 820, 444, 445, 446, 822, 823, 424,
	447, 448, 449, 450, 451, 452, 0, 693, 0, 695,
	1466, 0, 421, 437, 422, 427, 0, 433, 0, 0,
	516, 517, 519, 520, 522, 523, 524, 528, 0, 594,
	1678, 604, 530, 532, 534, 536, 538, 0, 547, 0,
	549, 0, 551, 559, 562, 567, 572, 0, 0, 0,
	716, 0, 879, 928, 929, 934, 938, 939, 942, 945,
	946, 936, 1124, 894, 895, 896, 922, 923, 755, 0,
	0, 380, 1125, 1027, 1126, 1127, 1472, 0, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, -2, -2,
	-2, -2, -2, -2, -2, -2, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, -2, -2, -2,
	1164, 1165, -2, 1381, 1383, 0, 1445, 0, -2, 0,
	-2, -2, -2, -2, 1184, 0, 1186, 1191, 1193, 1195,
	0, 0, 0, 0, 1444, 1205, 1428, 1429, 0, 0,
	1360, 1361, 1362, 1190, 0, 1443, 1440, 0, 0, 1393,
	919, 1267, 0, 0, 0, 0, 1274, 0, 1471, 1108,
	1109, 1110, 1111, 1112, 1113, 1122, 1260, 1391, 0, 1390,
	0, 0, 0, 1401, 1435, 1431, 0, 1493, 1499, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 0,
	1404, -2, -2, -2, -2, -2, -2, -2, 0, 1313,
	0, 1325, 0, 1327, 0, 1315, 1395, 1414, 0, 0,
	1211, 0, 0, 0, 1358, 0, 1318, 1395, 1422, 0,
	0, 0, 0, 0, 1395, 0, 1427, 806, 903, 0,
	0, 1022, 0, 0, 0, 1449, 1022, 1022, 0, 951,
	0, 0, 0, 0, 0, 0, 1004, 1008, 1005, 1006,
	0, 0, 990, 1000, 964, 0, 0, 1474, 970, 999,
	0, 676, 989, 1000, 1000, 0, -2, 974, 0, 0,
	919, -2, 0, 0, 0, 0, 771, 125, 1766, 0,
	157, 0, 0, 666, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 702, 703, 705, 711, 713,
	0, 707, 1469, 0, 708, 0, 710, 712, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 1456, 0, 0, 176, 1002,
	0, 1455, 1465, 0, 199, 202, 205, 208, 186, 675,
	0, 0, 0, 0, 614, -2, 616, 618, 619, 620,
	621, 1612, 1511, 0, 1511, 0, 0, 0, 185, 0,
	0, 241, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 830, 836, 0, 921, 0,
	858, 844, 0, 0, 0, 858, 862, 863, 865, 866,
	0, 0, 1020, 292, 155, 155, 155, 1453, 155, 155,
	174, 286, 289, 350, 295, 343, 908, 0, 0, 0,
	0, 185, 0, 0, 0, 344, 0, 0, 0, 346,
	0, 1023, 1025, 0, 1036, 0, 1089, 0, 160, 185,
	0, 0, 397, 402, 0, 587, 0, 0, 413, 0,
	814, 821, 0, 441, 0, 443, 694, 1468, 1467, 0,
	434, 510, 0, 605, 603, 546, 0, 0, 0, 588,
	589, 593, 1017, 0, 940, 0, 937, 943, 944, 0,
	925, 753, 754, 0, 0, 0, 0, -2, -2, 0,
	0, 0, 1206, 0, -2, 1185, 1188, 1192, 1194, 1196,
	0, 0, 0, 0, 0, 0, 1384, 0, 1386, 1207,
	1438, 1441, 1356, 0, 0, 918, 919, 919, 919, 1273,
	0, 0, 0, 0, 0, 0, 0, 1392, 0, 1399,
	1400, 0, 0, 1432, 0, 0, 0, 1275, 0, 0,
	0, 1086, 1060, 0, 1100, 1102, 1104, 1106, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 1298, 1310, 0,
	1312, 1324, 1326, 1314, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1214, 1215, 1216, 1317, 1420, 1421, 0, 0, 0, 0,
	0, 0, 1323, 0, 1426, 908, 953, 948, 1447, 1003,
	955, 957, 1448, 1477, 948, 948, 0, 1396, 992, 0,
	994, 0, 0, 0, 996, 0, 985, 0, 987, 1000,
	969, 0, 0, 962, 0, 961, 676, 998, 971, 975,
	1493, 0, 1015, 0, 979, 982, 0, 0, 124, 759,
	0, 0, 1478, 0, 127, 1766, 136, 0, 643, 0,
	0, 0, 0, 0, 774, 137, 1766, 155, 1766, 155,
	138, 141, 0, 145, 143, 0, 0, 634, 103, 772,
	106, 112, 0, 0, 765, 0, 706, 709, 715, 87,
	0, 767, 757, 0, 0, 756, 147, 107, 113, 0,
	0, 769, 105, 0, 0, 0, 185, 0, 0, 1461,
	1506, 210, 212, 213, 211, 623, 0, 1511, 0, 1511,
	0, 1482, 612, 676, 0, 239, 244, 243, 700, 721,
	-2, 724, 726, 728, 0, 730, 741, 0, 0, 0,
	832, 836, 0, 835, 906, 933, 920, 1021, 837, 858,
	0, 0, 0, 847, 849, 846, 843, 840, 1022, 0,
	0, 0, 0, 0, 271, 274, 277, 280, 283, 296,
	0, 183, 1644, 181, 178, 180, 357, 0, 164, 0,
	0, 0, 1398, 0, 1028, 0, 0, 0, 0, 161,
	361, 0, 399, 0, 0, 0, 0, 0, 0, 410,
	411, -2, 439, 440, 442, 438, 0, 548, 550, 558,
	0, 0, 924, 755, 0, 1128, 1169, 0, 0, -2,
	0, 0, 1173, 0, 0, 0, -2, 0, 0, 0,
	1385, 1387, 0, 1440, 1268, 0, 0, 0, 0, 1251,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 0, 1258, 1259,
	1359, 1402, 1430, 1434, 0, 1494, 1498, 1337, 1338, 1342,
	1485, 0, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 0, 1403, 1413, 1415, 1212, 1213, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, -2, -2, -2,
	1230, 1231, 1232, -2, -2, -2, 0, 0, 0, 1416,
	1418, 1419, 1423, 1424, 0, 1320, 1321, 1322, 1425, 0,
	950, 0, 954, 0, 950, 950, 915, 993, 0, 1011,
	995, 967, 986, 0, 976, 965, 0, 966, 0, 997,
	0, 973, 978, 0, 981, 0, 1268, -2, 0, 0,
	0, 0, 156, 641, 665, 0, 0, 744, 752, 752,
	0, 1480, 0, 0, 129, 0, 0, 0, 0, 134,
	0, 140, 144, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 115, 118, 0, 0, 114, 0, 158,
	0, 0, 631, 0, 617, 0, 0, 0, 0, 615,
	0, 237, 697, 719, 729, 0, 0, 0, 0, 0,
	834, 836, 0, 827, 828, 858, 932, 838, 856, 857,
	855, 0, 0, 0, 921, 864, 861, 867, 868, 0,
	169, 0, 0, 0, 0, 359, 0, 0, 0, 0,
	1029, 1037, 0, 1090, 363, 0, 581, 582, 629, 0,
	585, 511, 935, 941, 926, 755, 1171, 1175, 0, 0,
	0, 1177, -2, 0, 1199, -2, -2, 1388, 1439, 1248,
	919, 1269, 1271, 1272, 1123, 1433, 0, 1344, 1341, 0,
	1328, 1061, 1289, 1290, 0, 0, 1293, 1295, 1296, 1297,
	1412, 0, 0, 0, 0, 1319, 904, 1333, 0, 0,
	958, 1333, 1333, 0, 990, 988, 963, 959, 0, 1494,
	980, 0, 0, 761, 763, 126, 0, 642, 0, 645,
	0, 0, 0, 0, 652, 653, 0, 0, 0, 0,
	0, 667, 674, 0, 755, 0, 755, 0, 0, 0,
	0, 131, 150, 0, 0, 773, 0, 155, 155, 0,
	0, 760, 0, 0, 0, 766, 768, 758, 0, 770,
	0, 175, 0, 610, 630, 0, 0, 0, 0, 0,
	0, 0, 0, 739, 740, 0, 0, 0, 824, 836,
	0, 829, 830, 246, 0, 0, 0, 845, 848, 850,
	933, 0, 182, 0, 177, 179, 185, 0, 0, 1024,
	1088, 401, 403, 0, 0, 409, 583, 628, 0, 0,
	927, 1179, -2, -2, 1200, 0, 1495, 1497, 921, 0,
	1330, 0, 0, -2, 0, 0, 0, 890, 0, 949,
	947, 891, 892, 1010, 1000, 0, 983, 128, 0, 646,
	647, 1481, 649, 0, 651, 654, 0, 656, 1513, 0,
	660, 623, 0, 671, 672, 745, 746, 751, 747, 752,
	669, 0, 130, 132, 149, 750, 133, 139, 0, 0,
	0, 0, 0, 0, 0, 1001, 0, 0, 674, 0,
	664, 623, 613, 0, 741, 736, 0, 0, 831, 832,
	0, 0, 0, 858, 869, 184, 165, 0, 0, 0,
	405, 0, 407, 0, 627, 0, 1270, 1348, 0, 1291,
	1292, -2, 0, 1238, 1332, 1334, 0, 968, 960, 644,
	648, 0, 0, 680, 0, 0, 631, 0, 755, 0,
	152, 0, 0, 0, 762, 764, 0, 0, 117, 0,
	663, 623, 674, 631, 674, 0, 0, 833, 834, 0,
	852, 1022, 854, 859, 0, 0, 404, 0, 0, 584,
	0, 0, 0, 0, 1343, 1239, 0, 0, 0, 655,
	685, 0, 0, 0, 668, 0, 748, 676, 135, 0,
	749, 0, 635, 0, 0, 638, 0, 0, 0, 0,
	631, 623, 611, 623, 0, 0, 825, 0, 853, 185,
	185, 406, 408, 1340, 1345, 1349, -2, 1731, 1561, 0,
	1346, 1347, 1335, 1336, 0, 657, 681, 682, 0, 677,
	678, 679, 1512, 658, 659, 673, 680, 151, 632, 0,
	0, 633, 0, 0, 120, 122, 0, 661, 631, 631,
	0, 737, 1022, 166, 167, 0, 1351, 1352, 1353, 1354,
	1355, 650, 683, 0, 684, 0, 0, 0, 685, 636,
	0, 639, 0, 626, 662, 734, 674, 851, 0, 686,
	0, 689, 690, 0, 687, 670, 0, 0, 622, 624,
	625, 623, 1350, 688, 691, 692, 0, 0, 631, 631,
	0, 735, 637, 0, 0, 0, 631, 640,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 411, 3, 417, 412, 3,
	422, 423, 415, 413, 427, 414, 424, 416, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 431, 426,
	403, 405, 404, 407, 428, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 420, 3, 421, 418, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 429, 410, 430, 408,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 406, 57746, 409, 57747, 419, 57748, 425, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1025
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1031
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1040
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1074
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1077
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1086
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1169
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1173
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1226
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1230
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1234
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1240
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1250
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1256
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1266
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1273
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1280
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1287
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1294
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1304
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1314
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1324
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1337
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1349
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1359
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1369
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1380
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1410
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1414
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1417
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1438
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1455
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1458
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1474
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1503
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1507
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1525
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1529
		{
			sqlVAL.union.val = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1539
		{
			sqlVAL.union.val = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1546
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1550
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1554
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1564
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1593
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1623
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1627
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1662
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1670
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1674
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1677
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1694
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1697
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1701
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1705
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1711
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1721
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1725
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1731
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1735
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1739
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1743
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1749
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1759
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1763
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1766
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1770
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1782
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1783
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1784
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1785
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1795
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1803
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1805
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1808
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1818
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1827
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1835
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1837
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1841
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1844
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1854
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1863
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1871
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1873
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1877
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1880
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1884
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1889
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1895
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1896
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1906
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1908
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1909
		{
			return helpWith(sqllex, "CREATE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1914
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1915
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1916
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1918
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1919
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1920
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1921
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1931
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1938
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1942
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1952
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1962
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1973
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1977
		{
			sqlVAL.union.val = nil
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1990
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2000
		{
			return helpWith(sqllex, "DELETE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2007
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2010
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2011
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2012
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2013
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2014
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2023
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2024
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2025
		{
			return helpWith(sqllex, "DROP")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2028
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2029
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2030
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2031
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2032
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2040
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2044
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2047
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2055
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2059
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2062
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2070
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2074
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2077
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2085
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2093
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2100
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2108
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2116
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2123
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2131
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2135
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2138
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2146
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2150
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2153
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2157
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2187
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2191
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2198
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2201
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2202
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2204
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2205
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2206
		{
			return helpWith(sqllex, "DELETE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2207
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2208
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2209
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2210
		{
			return helpWith(sqllex, "INSERT")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2211
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2213
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2214
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2216
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2219
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2220
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2222
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2223
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2231
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2232
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2236
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2240
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2257
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2261
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2265
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2275
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2281
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2287
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2291
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2301
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2305
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2309
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2313
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2316
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2336
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2340
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2344
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2347
		{
			return helpWith(sqllex, "GRANT")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2367
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2371
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2375
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2378
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2383
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2387
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2398
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2402
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2416
		{
			return helpWith(sqllex, "RESET")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2417
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2425
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2429
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2432
		{
			return helpWith(sqllex, "RESET")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2440
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2443
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2454
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2457
		{
			return helpWith(sqllex, "USE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2461
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2462
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2463
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2464
		{
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2465
		{
			return helpWith(sqllex, "USE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2466
		{
			return unimplemented(sqllex, "set local")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2482
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2497
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2500
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2518
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2526
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2530
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2534
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2540
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2544
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2550
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2554
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2558
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2562
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2584
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2590
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2606
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2610
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2615
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2632
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2635
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2640
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2644
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2655
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2672
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2679
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2685
		{
			return unimplemented(sqllex, "set from current")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2686
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2694
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2699
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2706
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2710
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2716
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2727
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2733
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2743
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2747
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2751
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2755
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2759
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2765
		{
			sqlVAL.union.val = tree.Low
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2769
		{
			sqlVAL.union.val = tree.Normal
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2773
		{
			sqlVAL.union.val = tree.High
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2784
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2788
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2792
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2797
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2801
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2813
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2814
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2815
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2816
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2817
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2818
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2820
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2821
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2822
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2823
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2824
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2825
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2826
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2827
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2828
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2829
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2830
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2831
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2832
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2833
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2834
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2835
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2837
		{
			return helpWith(sqllex, "SHOW")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2844
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2845
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2846
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2857
		{
			sqlVAL.str = "client_encoding"
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2860
		{
			sqlVAL.str = "timezone"
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2861
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2875
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2879
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2882
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2893
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2901
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2909
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2916
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2923
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2929
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2939
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2943
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2946
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2948
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2951
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2959
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2962
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2970
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2973
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2986
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2994
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3002
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3005
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3007
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3010
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3012
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3015
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3023
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3028
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3031
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3039
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3044
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3048
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3061
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3070
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3075
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3078
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3080
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3087
		{
			sqlVAL.union.val = true
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3088
		{
			sqlVAL.union.val = false
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3096
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3099
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3101
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3105
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3115
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3124
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3133
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3136
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3143
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3147
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3150
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3157
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3169
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3174
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3179
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3183
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3191
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3195
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3212
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3215
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3223
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3230
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3235
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3240
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3247
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3255
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3262
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3267
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3279
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3283
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3286
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3294
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3301
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3306
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3426
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3430
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3434
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3473
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3477
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3482
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3486
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3495
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3502
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3506
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3518
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3527
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3530
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3566
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3578
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3592
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3603
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3617
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3623
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3627
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3633
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3639
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3645
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3653
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3660
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3665
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3670
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3676
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3683
		{
			sqlVAL.str = ""
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3690
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3696
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3703
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3710
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3716
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3726
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3736
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 640:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3746
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3757
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3768
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3772
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3778
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3782
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3786
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3790
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3794
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3798
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3802
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3820
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3824
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3828
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3832
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3836
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3840
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3844
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3852
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3856
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3860
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3867
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3877
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3889
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3899
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3911
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3916
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3922
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3928
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3939
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3973
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3977
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3983
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3987
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3992
		{
			return unimplemented(sqllex, "match full")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3993
		{
			return unimplemented(sqllex, "match partial")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3994
		{
			return unimplemented(sqllex, "match simple")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3995
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4002
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4006
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4010
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4014
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4018
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4024
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4030
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4038
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4042
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4046
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4050
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4054
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4060
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4064
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4070
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4088
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 697:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4096
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4104
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4108
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4111
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4115
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4116
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4118
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4119
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4120
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4123
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4125
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4127
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4129
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4130
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4132
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4133
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4135
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4144
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4147
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4155
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4159
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4162
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4166
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4170
		{
			sqlVAL.union.val = nil
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4180
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4184
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4187
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4195
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4202
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4210
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4212
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4214
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4216
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4218
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4220
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4236
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4249
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4263
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4272
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4281
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4286
		{
			sqlVAL.union.val = true
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4290
		{
			sqlVAL.union.val = false
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4294
		{
			sqlVAL.union.val = false
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4300
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4304
		{
			sqlVAL.union.val = false
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4323
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4326
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4327
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4330
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4331
		{
			sqlVAL.str = ""
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4334
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4335
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4339
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4343
		{
			sqlVAL.union.val = tree.Descending
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4347
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4353
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4360
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4364
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4370
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4374
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4378
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4382
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4386
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4388
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4392
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4396
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4402
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4406
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4412
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4416
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4421
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4422
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4425
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4426
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4434
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4437
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4447
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4456
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4459
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4467
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4470
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4474
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4475
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4476
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4492
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4495
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4497
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4500
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4510
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4513
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4515
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4518
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4522
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4527
		{
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4528
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4529
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4537
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4544
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4547
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4548
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4552
		{
			sqlVAL.str = ""
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4556
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4560
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4564
		{
			sqlVAL.str = ""
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4570
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4574
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4580
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4584
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4590
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4594
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4607
		{
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4609
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4613
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4617
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4621
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4627
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4633
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4639
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4643
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 824:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4653
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4663
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4673
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4677
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4681
		{
			sqlVAL.str = ""
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4687
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4691
		{
			sqlVAL.str = ""
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4697
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4701
		{
			sqlVAL.str = ""
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4707
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4711
		{
			sqlVAL.str = ""
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4716
		{
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4717
		{
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4729
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4736
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4743
		{
			return helpWith(sqllex, "INSERT")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4754
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4761
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4765
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4773
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4779
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4783
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4787
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4793
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4817
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4821
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4825
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4831
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4835
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4837
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4843
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4848
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4852
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 859:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4869
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4880
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4884
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4885
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4889
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4906
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4909
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4913
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4956
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4962
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4966
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4981
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4985
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4989
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4993
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4997
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5001
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5008
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5043
		{
			return helpWith(sqllex, "SELECT")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5044
		{
			return helpWith(sqllex, "VALUES")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5045
		{
			return helpWith(sqllex, "TABLE")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5067
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5080
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5094
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5106
		{
			return helpWith(sqllex, "SELECT")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5110
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5119
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5128
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5143
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5150
		{
			return helpWith(sqllex, "TABLE")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5162
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5165
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5166
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5170
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5180
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5188
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5189
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5193
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5196
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5199
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5200
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5204
		{
			sqlVAL.union.val = true
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5208
		{
			sqlVAL.union.val = false
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5212
		{
			sqlVAL.union.val = false
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5218
		{
			sqlVAL.union.val = true
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5224
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5229
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5230
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5233
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5234
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5238
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5242
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5248
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5254
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5258
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5264
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5268
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5272
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5281
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5290
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5301
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5305
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5314
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5320
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5327
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5334
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5343
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5347
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5351
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5357
		{
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5358
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5361
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5362
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5379
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5383
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5389
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5393
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5412
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5415
		{
			return helpWith(sqllex, "VALUES")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5417
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5429
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5432
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5434
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5440
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5450
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5454
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5460
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5466
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5471
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5483
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5487
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5491
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5495
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 968:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5522
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5536
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5545
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5552
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5554
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5558
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5562
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5567
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5583
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5589
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5593
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5599
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5601
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5605
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5611
		{
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5613
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5616
		{
			sqlVAL.union.val = nil
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5617
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5618
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5622
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = true
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5636
		{
			sqlVAL.union.val = false
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5656
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5660
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5664
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5668
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5672
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5676
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5682
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5686
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5693
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5699
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5706
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5712
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5716
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5720
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5724
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5730
		{
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5731
		{
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5742
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5746
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5751
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5752
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5753
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5754
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5758
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5775
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5779
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5783
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5789
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5793
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5805
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5819
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5828
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5837
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5843
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5850
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5852
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5861
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5865
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5869
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5878
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5900
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5904
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5908
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5912
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5916
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5920
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5924
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5928
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5932
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5936
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5940
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5944
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5948
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5952
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5956
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5960
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5980
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5984
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5988
		{
			sqlVAL.union.val = nil
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5995
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5999
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6003
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6007
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6011
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6015
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6019
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6023
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6027
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6031
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6035
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6039
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6049
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6053
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6062
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6071
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6080
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6084
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6091
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6095
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6099
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6103
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6107
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6113
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6117
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6123
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6134
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6140
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6152
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6158
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6170
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6175
		{
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6176
		{
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6181
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6185
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6189
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6193
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6197
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6201
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6205
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6209
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6213
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6218
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6224
		{
			sqlVAL.union.val = tree.Year
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6228
		{
			sqlVAL.union.val = tree.Month
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6232
		{
			sqlVAL.union.val = tree.Day
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6236
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6240
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6244
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6250
		{
			sqlVAL.union.val = tree.Month
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6254
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6258
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6262
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6266
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6270
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6274
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6278
		{
			sqlVAL.union.val = nil
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6284
		{
			sqlVAL.union.val = tree.Second
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6287
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6311
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6319
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6322
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6331
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6340
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6356
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6360
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6380
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6384
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6388
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6400
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6404
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6412
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6416
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6420
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6428
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6432
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6480
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6484
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6488
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6492
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6496
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6504
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6508
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6524
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6528
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6532
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6536
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6544
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6548
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6564
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6568
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6575
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6589
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6593
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6601
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6609
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6613
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6617
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6621
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6625
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6629
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6633
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6637
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6641
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6658
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6662
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6666
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6685
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6689
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6693
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6697
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6701
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6705
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6709
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6713
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6717
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6721
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6725
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6729
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6733
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6737
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6741
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6745
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6749
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6753
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6757
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6761
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6765
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6769
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6773
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6777
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6781
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6785
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6789
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6803
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6811
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6847
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6851
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6855
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6859
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6862
		{
			return unimplemented(sqllex, "func const")
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6864
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6868
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6871
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6873
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6877
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6881
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6885
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6889
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6898
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6903
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6911
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6920
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6924
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6928
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6932
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6945
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6948
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6949
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6951
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6959
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6962
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6973
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6980
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6989
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6990
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6994
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7006
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7014
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7052
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7056
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7060
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7072
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7082
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7084
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7087
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7092
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7094
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7097
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7102
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7104
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7107
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7112
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7114
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7117
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7126
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7127
		{
			return unimplemented(sqllex, "treat")
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7148
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7150
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7153
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7158
		{
			return unimplemented(sqllex, "within group")
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7159
		{
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7174
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7178
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7184
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7194
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7202
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7206
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7210
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7237
		{
			sqlVAL.str = ""
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7243
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7247
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7258
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7272
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7279
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7285
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7298
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7326
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7334
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7338
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7345
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7361
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7365
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7372
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = tree.Any
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = tree.Some
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7392
		{
			sqlVAL.union.val = tree.All
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7397
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7398
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7399
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7400
		{
			sqlVAL.union.val = tree.Div
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7401
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7402
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7403
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7404
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7405
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7406
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7407
		{
			sqlVAL.union.val = tree.LT
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7408
		{
			sqlVAL.union.val = tree.GT
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7409
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = tree.LE
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7411
		{
			sqlVAL.union.val = tree.GE
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7412
		{
			sqlVAL.union.val = tree.NE
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7416
		{
			sqlVAL.union.val = tree.Like
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7417
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7418
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7419
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7442
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7446
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7452
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7456
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7460
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7471
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7475
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7485
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7492
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7498
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7502
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7508
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7522
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7528
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7532
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7538
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7542
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7564
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7568
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7572
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7578
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7585
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7589
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7606
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7610
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7614
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7618
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7622
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7628
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7634
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7640
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7644
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7648
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7654
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7666
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7673
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7677
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7683
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7689
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7693
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7700
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7717
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7723
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7727
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7732
		{
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7733
		{
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7737
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7741
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7747
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7756
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7760
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7764
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7772
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7782
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7792
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7799
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7827
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7831
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7835
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7841
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7845
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7853
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7857
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7868
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7879
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7889
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7987
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7994
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8016
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8020
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8024
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8055
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8069
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8083
		{
			sqlVAL.str = ""
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8089
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8093
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
