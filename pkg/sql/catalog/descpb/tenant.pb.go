// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/catalog/descpb/tenant.proto

package descpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The state of the tenant. Dictates whether SQL sessions for the tenant
// should be allowed, although this is currently not enforced.
type TenantInfo_State int32

const (
	// Tenant is online and available for SQL sessions.
	TenantInfo_ACTIVE TenantInfo_State = 0
	// Tenant is being added. Not available for SQL sessions.
	TenantInfo_ADD TenantInfo_State = 1
	// Tenant is being dropped. Not available for SQL sessions.
	TenantInfo_DROP TenantInfo_State = 2
)

var TenantInfo_State_name = map[int32]string{
	0: "ACTIVE",
	1: "ADD",
	2: "DROP",
}

var TenantInfo_State_value = map[string]int32{
	"ACTIVE": 0,
	"ADD":    1,
	"DROP":   2,
}

func (x TenantInfo_State) Enum() *TenantInfo_State {
	p := new(TenantInfo_State)
	*p = x
	return p
}

func (x TenantInfo_State) String() string {
	return proto.EnumName(TenantInfo_State_name, int32(x))
}

func (x *TenantInfo_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TenantInfo_State_value, data, "TenantInfo_State")
	if err != nil {
		return err
	}
	*x = TenantInfo_State(value)
	return nil
}

func (TenantInfo_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b0599e17640b090, []int{0, 0}
}

// TenantInfo represents a tenant in a multi-tenant cluster and is
// stored in the "info" column of the "system.tenants" table. The
// TenantInfo has a globally-unique ID.
type TenantInfo struct {
	ID    uint64           `protobuf:"varint,1,opt,name=id" json:"id"`
	State TenantInfo_State `protobuf:"varint,2,opt,name=state,enum=cockroach.sql.sqlbase.TenantInfo_State" json:"state"`
	Name  string           `protobuf:"bytes,3,opt,name=name" json:"name"`
}

func (m *TenantInfo) Reset()         { *m = TenantInfo{} }
func (m *TenantInfo) String() string { return proto.CompactTextString(m) }
func (*TenantInfo) ProtoMessage()    {}
func (*TenantInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b0599e17640b090, []int{0}
}
func (m *TenantInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TenantInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantInfo.Merge(m, src)
}
func (m *TenantInfo) XXX_Size() int {
	return m.Size()
}
func (m *TenantInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TenantInfo proto.InternalMessageInfo

// TenantInfoAndUsage contains the information for a tenant in a multi-tenant
// cluster plus metadata related to cost control and consumption.
type TenantInfoWithUsage struct {
	TenantInfo `protobuf:"bytes,1,opt,name=info,embedded=info" json:"info"`
	Usage      *TenantInfoWithUsage_Usage `protobuf:"bytes,2,opt,name=usage" json:"usage,omitempty"`
}

func (m *TenantInfoWithUsage) Reset()         { *m = TenantInfoWithUsage{} }
func (m *TenantInfoWithUsage) String() string { return proto.CompactTextString(m) }
func (*TenantInfoWithUsage) ProtoMessage()    {}
func (*TenantInfoWithUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b0599e17640b090, []int{1}
}
func (m *TenantInfoWithUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantInfoWithUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TenantInfoWithUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantInfoWithUsage.Merge(m, src)
}
func (m *TenantInfoWithUsage) XXX_Size() int {
	return m.Size()
}
func (m *TenantInfoWithUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantInfoWithUsage.DiscardUnknown(m)
}

var xxx_messageInfo_TenantInfoWithUsage proto.InternalMessageInfo

// Usage contains metadata related to cost control and consumption. In a
// running cluster, this data is stored in the system.tenant_usage table.
// Each field corresponds has a corresponding column in that table.
type TenantInfoWithUsage_Usage struct {
	RUBurstLimit float64 `protobuf:"fixed64,1,opt,name=ru_burst_limit,json=ruBurstLimit" json:"ru_burst_limit"`
	RURefillRate float64 `protobuf:"fixed64,2,opt,name=ru_refill_rate,json=ruRefillRate" json:"ru_refill_rate"`
	RUCurrent    float64 `protobuf:"fixed64,3,opt,name=ru_current,json=ruCurrent" json:"ru_current"`
	// All-time consumption for this tenant. Each field has a corresponding column
	// in system.tenant_usage.
	Consumption roachpb.TenantConsumption `protobuf:"bytes,4,opt,name=consumption" json:"consumption"`
}

func (m *TenantInfoWithUsage_Usage) Reset()         { *m = TenantInfoWithUsage_Usage{} }
func (m *TenantInfoWithUsage_Usage) String() string { return proto.CompactTextString(m) }
func (*TenantInfoWithUsage_Usage) ProtoMessage()    {}
func (*TenantInfoWithUsage_Usage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b0599e17640b090, []int{1, 0}
}
func (m *TenantInfoWithUsage_Usage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantInfoWithUsage_Usage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TenantInfoWithUsage_Usage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantInfoWithUsage_Usage.Merge(m, src)
}
func (m *TenantInfoWithUsage_Usage) XXX_Size() int {
	return m.Size()
}
func (m *TenantInfoWithUsage_Usage) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantInfoWithUsage_Usage.DiscardUnknown(m)
}

var xxx_messageInfo_TenantInfoWithUsage_Usage proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.sql.sqlbase.TenantInfo_State", TenantInfo_State_name, TenantInfo_State_value)
	proto.RegisterType((*TenantInfo)(nil), "cockroach.sql.sqlbase.TenantInfo")
	proto.RegisterType((*TenantInfoWithUsage)(nil), "cockroach.sql.sqlbase.TenantInfoWithUsage")
	proto.RegisterType((*TenantInfoWithUsage_Usage)(nil), "cockroach.sql.sqlbase.TenantInfoWithUsage.Usage")
}

func init() { proto.RegisterFile("sql/catalog/descpb/tenant.proto", fileDescriptor_8b0599e17640b090) }

var fileDescriptor_8b0599e17640b090 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x8f, 0xd3, 0x74, 0xac, 0x5f, 0xa7, 0xa9, 0x33, 0x43, 0x8a, 0x7a, 0x48, 0x4a, 0x85, 0xa0,
	0xa7, 0x64, 0xea, 0x71, 0x17, 0xb4, 0xb4, 0x20, 0x55, 0x9a, 0x04, 0x32, 0x2b, 0x48, 0x5c, 0x2a,
	0x37, 0x4d, 0xbb, 0x88, 0x34, 0xce, 0x1c, 0xe7, 0x11, 0xb8, 0xf3, 0x08, 0x3c, 0x00, 0x57, 0xde,
	0xa1, 0xc7, 0x1e, 0x77, 0xaa, 0x20, 0xbd, 0xf0, 0x18, 0xc8, 0x76, 0x20, 0x43, 0x42, 0xea, 0x21,
	0x91, 0xed, 0xdf, 0x9f, 0xef, 0xfb, 0x7e, 0x36, 0xb8, 0xf9, 0x5d, 0xe2, 0x87, 0x54, 0xd0, 0x84,
	0xad, 0xfc, 0x45, 0x94, 0x87, 0xd9, 0xdc, 0x17, 0x51, 0x4a, 0x53, 0xe1, 0x65, 0x9c, 0x09, 0x86,
	0x9f, 0x84, 0x2c, 0xfc, 0xc4, 0x19, 0x0d, 0x6f, 0xbd, 0xfc, 0x2e, 0x91, 0xdf, 0x9c, 0xe6, 0x51,
	0xf7, 0x7c, 0xc5, 0x56, 0x4c, 0x31, 0x7c, 0xb9, 0xd2, 0xe4, 0xee, 0x99, 0x22, 0x66, 0x73, 0x9f,
	0x66, 0xb1, 0x3e, 0xea, 0x7f, 0x47, 0x00, 0x37, 0xca, 0x70, 0x92, 0x2e, 0x19, 0xee, 0x82, 0x19,
	0x2f, 0x6c, 0xd4, 0x43, 0x03, 0x2b, 0x80, 0xcd, 0xce, 0x35, 0xca, 0x9d, 0x6b, 0x4e, 0xc6, 0xc4,
	0x8c, 0x17, 0x78, 0x04, 0xcd, 0x5c, 0x50, 0x11, 0xd9, 0x66, 0x0f, 0x0d, 0x4e, 0x87, 0x2f, 0xbc,
	0xff, 0x96, 0xf6, 0x6a, 0x37, 0xef, 0x9d, 0xa4, 0x07, 0x96, 0xf4, 0x21, 0x5a, 0x8b, 0x6d, 0xb0,
	0x52, 0xba, 0x8e, 0xec, 0x46, 0x0f, 0x0d, 0x5a, 0x15, 0xa4, 0x4e, 0xfa, 0xcf, 0xa1, 0xa9, 0xf8,
	0x18, 0xe0, 0xe8, 0x6a, 0x74, 0x33, 0x79, 0xff, 0xaa, 0x63, 0xe0, 0x47, 0xd0, 0xb8, 0x1a, 0x8f,
	0x3b, 0x08, 0x1f, 0x83, 0x35, 0x26, 0x6f, 0xde, 0x76, 0xcc, 0x4b, 0xeb, 0xd7, 0x57, 0x17, 0xf5,
	0xbf, 0x35, 0xe0, 0x71, 0x5d, 0xe9, 0x43, 0x2c, 0x6e, 0xa7, 0x39, 0x5d, 0x45, 0xf8, 0x25, 0x58,
	0x71, 0xba, 0x64, 0x6a, 0x84, 0xf6, 0xf0, 0xe9, 0xc1, 0x1e, 0x83, 0x63, 0xd9, 0xc2, 0x76, 0xe7,
	0x22, 0xa2, 0x84, 0xf8, 0x35, 0x34, 0x0b, 0xe9, 0xa4, 0xa6, 0x6c, 0x0f, 0x2f, 0x0e, 0x3a, 0xfc,
	0xad, 0xed, 0xa9, 0x3f, 0xd1, 0xf2, 0xee, 0x67, 0x13, 0x9a, 0xba, 0xa5, 0x4b, 0x38, 0xe5, 0xc5,
	0x6c, 0x5e, 0xf0, 0x5c, 0xcc, 0x92, 0x78, 0x1d, 0x0b, 0xd5, 0x1c, 0x0a, 0xce, 0xab, 0x7c, 0x4f,
	0xc8, 0x34, 0x90, 0xe0, 0xb5, 0xc4, 0xc8, 0x09, 0x2f, 0xea, 0x5d, 0xa5, 0xe5, 0xd1, 0x32, 0x4e,
	0x92, 0x19, 0xff, 0x13, 0xfe, 0x3f, 0x5a, 0xa2, 0x40, 0x42, 0x45, 0x24, 0xb5, 0xf5, 0x0e, 0x5f,
	0x00, 0xf0, 0x62, 0x16, 0x16, 0x9c, 0x47, 0xa9, 0x50, 0x81, 0xa3, 0xe0, 0xac, 0xd2, 0xb5, 0xc8,
	0x74, 0xa4, 0x01, 0xd2, 0xe2, 0x45, 0xb5, 0xc4, 0xd7, 0xd0, 0x0e, 0x59, 0x9a, 0x17, 0xeb, 0x4c,
	0xc4, 0x2c, 0xb5, 0x2d, 0x95, 0xc0, 0xb3, 0x07, 0x09, 0x54, 0xef, 0xa7, 0x9a, 0x7e, 0x54, 0x73,
	0xab, 0x9b, 0x7c, 0x28, 0xd7, 0x17, 0xa5, 0xff, 0xc1, 0x60, 0xf3, 0xd3, 0x31, 0x36, 0xa5, 0x83,
	0xb6, 0xa5, 0x83, 0xee, 0x4b, 0x07, 0xfd, 0x28, 0x1d, 0xf4, 0x65, 0xef, 0x18, 0xdb, 0xbd, 0x63,
	0xdc, 0xef, 0x1d, 0xe3, 0xe3, 0x91, 0x7e, 0xdd, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x71, 0x01,
	0x7e, 0x70, 0xf2, 0x02, 0x00, 0x00,
}

func (this *TenantInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TenantInfo)
	if !ok {
		that2, ok := that.(TenantInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *TenantInfoWithUsage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TenantInfoWithUsage)
	if !ok {
		that2, ok := that.(TenantInfoWithUsage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TenantInfo.Equal(&that1.TenantInfo) {
		return false
	}
	if !this.Usage.Equal(that1.Usage) {
		return false
	}
	return true
}
func (this *TenantInfoWithUsage_Usage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TenantInfoWithUsage_Usage)
	if !ok {
		that2, ok := that.(TenantInfoWithUsage_Usage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RUBurstLimit != that1.RUBurstLimit {
		return false
	}
	if this.RURefillRate != that1.RURefillRate {
		return false
	}
	if this.RUCurrent != that1.RUCurrent {
		return false
	}
	if !this.Consumption.Equal(&that1.Consumption) {
		return false
	}
	return true
}
func (m *TenantInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintTenant(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintTenant(dAtA, i, uint64(m.State))
	i--
	dAtA[i] = 0x10
	i = encodeVarintTenant(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TenantInfoWithUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantInfoWithUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantInfoWithUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Usage != nil {
		{
			size, err := m.Usage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TenantInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TenantInfoWithUsage_Usage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantInfoWithUsage_Usage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantInfoWithUsage_Usage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Consumption.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RUCurrent))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RURefillRate))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RUBurstLimit))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func encodeVarintTenant(dAtA []byte, offset int, v uint64) int {
	offset -= sovTenant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TenantInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTenant(uint64(m.ID))
	n += 1 + sovTenant(uint64(m.State))
	l = len(m.Name)
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func (m *TenantInfoWithUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TenantInfo.Size()
	n += 1 + l + sovTenant(uint64(l))
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *TenantInfoWithUsage_Usage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	l = m.Consumption.Size()
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func sovTenant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTenant(x uint64) (n int) {
	return sovTenant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TenantInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TenantInfo_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantInfoWithUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantInfoWithUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantInfoWithUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TenantInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &TenantInfoWithUsage_Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantInfoWithUsage_Usage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Usage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Usage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RUBurstLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RUBurstLimit = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RURefillRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RURefillRate = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RUCurrent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RUCurrent = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consumption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTenant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTenant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTenant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTenant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTenant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTenant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTenant = fmt.Errorf("proto: unexpected end of group")
)
