// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/catalog/catenumpb/index.proto

package catenumpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IndexColumn_Direction refers to the direction of a column in an index.
type IndexColumn_Direction int32

const (
	IndexColumn_ASC  IndexColumn_Direction = 0
	IndexColumn_DESC IndexColumn_Direction = 1
)

var IndexColumn_Direction_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var IndexColumn_Direction_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x IndexColumn_Direction) String() string {
	return proto.EnumName(IndexColumn_Direction_name, int32(x))
}

func (IndexColumn_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b06497ef3e3ad0ec, []int{0, 0}
}

// IndexColumn contains an enum used to represent the direction of a column
// in an index key.
type IndexColumn struct {
}

func (m *IndexColumn) Reset()         { *m = IndexColumn{} }
func (m *IndexColumn) String() string { return proto.CompactTextString(m) }
func (*IndexColumn) ProtoMessage()    {}
func (*IndexColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_b06497ef3e3ad0ec, []int{0}
}
func (m *IndexColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndexColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexColumn.Merge(m, src)
}
func (m *IndexColumn) XXX_Size() int {
	return m.Size()
}
func (m *IndexColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexColumn.DiscardUnknown(m)
}

var xxx_messageInfo_IndexColumn proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.sql.catalog.catpb.IndexColumn_Direction", IndexColumn_Direction_name, IndexColumn_Direction_value)
	proto.RegisterType((*IndexColumn)(nil), "cockroach.sql.catalog.catpb.IndexColumn")
}

func init() { proto.RegisterFile("sql/catalog/catenumpb/index.proto", fileDescriptor_b06497ef3e3ad0ec) }

var fileDescriptor_b06497ef3e3ad0ec = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0x2e, 0xcc, 0xd1,
	0x4f, 0x4e, 0x2c, 0x49, 0xcc, 0xc9, 0x4f, 0x07, 0xd1, 0xa9, 0x79, 0xa5, 0xb9, 0x05, 0x49, 0xfa,
	0x99, 0x79, 0x29, 0xa9, 0x15, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xd2, 0xc9, 0xf9, 0xc9,
	0xd9, 0x45, 0xf9, 0x89, 0xc9, 0x19, 0x7a, 0xc5, 0x85, 0x39, 0x7a, 0x50, 0xc5, 0x20, 0xba, 0x20,
	0x49, 0x4a, 0x24, 0x3d, 0x3f, 0x3d, 0x1f, 0xac, 0x4e, 0x1f, 0xc4, 0x82, 0x68, 0x51, 0xd2, 0xe5,
	0xe2, 0xf6, 0x04, 0x99, 0xe0, 0x9c, 0x9f, 0x53, 0x9a, 0x9b, 0xa7, 0x24, 0xc7, 0xc5, 0xe9, 0x92,
	0x59, 0x94, 0x9a, 0x5c, 0x92, 0x99, 0x9f, 0x27, 0xc4, 0xce, 0xc5, 0xec, 0x18, 0xec, 0x2c, 0xc0,
	0x20, 0xc4, 0xc1, 0xc5, 0xe2, 0xe2, 0x1a, 0xec, 0x2c, 0xc0, 0xe8, 0x14, 0x73, 0xe2, 0xa1, 0x1c,
	0xc3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0xde, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91,
	0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65,
	0x95, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0x77, 0x4e, 0x4a, 0x12,
	0x82, 0xad, 0x5f, 0x90, 0x9d, 0xae, 0x8f, 0xd5, 0x2f, 0x49, 0x6c, 0x60, 0x37, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x76, 0xef, 0x85, 0x3f, 0xeb, 0x00, 0x00, 0x00,
}

func (m *IndexColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintIndex(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndex(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndexColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovIndex(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndex(x uint64) (n int) {
	return sovIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndex
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndex
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndex
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndex        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndex          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndex = fmt.Errorf("proto: unexpected end of group")
)

