// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/distsqlrun/stats.proto

package distsqlrun

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import time "time"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// InputStats represents the stats collected from an input.
type InputStats struct {
	// num_rows is the number of rows received from the input.
	NumRows int64 `protobuf:"varint,1,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	// Duration in nanoseconds of the cumulative time spent stalled.
	StallTime time.Duration `protobuf:"bytes,8,opt,name=stall_time,json=stallTime,stdduration" json:"stall_time"`
}

func (m *InputStats) Reset()                    { *m = InputStats{} }
func (m *InputStats) String() string            { return proto.CompactTextString(m) }
func (*InputStats) ProtoMessage()               {}
func (*InputStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{0} }

// TableReaderStats are the stats collected during a tableReader run.
type TableReaderStats struct {
	InputStats InputStats `protobuf:"bytes,1,opt,name=input_stats,json=inputStats" json:"input_stats"`
}

func (m *TableReaderStats) Reset()                    { *m = TableReaderStats{} }
func (m *TableReaderStats) String() string            { return proto.CompactTextString(m) }
func (*TableReaderStats) ProtoMessage()               {}
func (*TableReaderStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{1} }

// HashJoinerStats are the stats collected during a hashJoiner run.
type HashJoinerStats struct {
	LeftInputStats   InputStats `protobuf:"bytes,1,opt,name=left_input_stats,json=leftInputStats" json:"left_input_stats"`
	RightInputStats  InputStats `protobuf:"bytes,2,opt,name=right_input_stats,json=rightInputStats" json:"right_input_stats"`
	StoredSide       string     `protobuf:"bytes,3,opt,name=stored_side,json=storedSide,proto3" json:"stored_side,omitempty"`
	MaxAllocatedMem  int64      `protobuf:"varint,4,opt,name=max_allocated_mem,json=maxAllocatedMem,proto3" json:"max_allocated_mem,omitempty"`
	MaxAllocatedDisk int64      `protobuf:"varint,5,opt,name=max_allocated_disk,json=maxAllocatedDisk,proto3" json:"max_allocated_disk,omitempty"`
}

func (m *HashJoinerStats) Reset()                    { *m = HashJoinerStats{} }
func (m *HashJoinerStats) String() string            { return proto.CompactTextString(m) }
func (*HashJoinerStats) ProtoMessage()               {}
func (*HashJoinerStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{2} }

// AggregatorStats are the stats collected during an aggregator run.
type AggregatorStats struct {
	InputStats      InputStats `protobuf:"bytes,1,opt,name=input_stats,json=inputStats" json:"input_stats"`
	MaxAllocatedMem int64      `protobuf:"varint,2,opt,name=max_allocated_mem,json=maxAllocatedMem,proto3" json:"max_allocated_mem,omitempty"`
}

func (m *AggregatorStats) Reset()                    { *m = AggregatorStats{} }
func (m *AggregatorStats) String() string            { return proto.CompactTextString(m) }
func (*AggregatorStats) ProtoMessage()               {}
func (*AggregatorStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{3} }

// DistinctStats are the stats collected during a distinct run.
type DistinctStats struct {
	InputStats      InputStats `protobuf:"bytes,1,opt,name=input_stats,json=inputStats" json:"input_stats"`
	MaxAllocatedMem int64      `protobuf:"varint,2,opt,name=max_allocated_mem,json=maxAllocatedMem,proto3" json:"max_allocated_mem,omitempty"`
}

func (m *DistinctStats) Reset()                    { *m = DistinctStats{} }
func (m *DistinctStats) String() string            { return proto.CompactTextString(m) }
func (*DistinctStats) ProtoMessage()               {}
func (*DistinctStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{4} }

// MergeJoinerStats are the stats collected during a mergeJoiner run.
type MergeJoinerStats struct {
	LeftInputStats  InputStats `protobuf:"bytes,1,opt,name=left_input_stats,json=leftInputStats" json:"left_input_stats"`
	RightInputStats InputStats `protobuf:"bytes,2,opt,name=right_input_stats,json=rightInputStats" json:"right_input_stats"`
}

func (m *MergeJoinerStats) Reset()                    { *m = MergeJoinerStats{} }
func (m *MergeJoinerStats) String() string            { return proto.CompactTextString(m) }
func (*MergeJoinerStats) ProtoMessage()               {}
func (*MergeJoinerStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{5} }

// SorterStats are the stats collected during a sorter run.
type SorterStats struct {
	InputStats       InputStats `protobuf:"bytes,1,opt,name=input_stats,json=inputStats" json:"input_stats"`
	MaxAllocatedMem  int64      `protobuf:"varint,2,opt,name=max_allocated_mem,json=maxAllocatedMem,proto3" json:"max_allocated_mem,omitempty"`
	MaxAllocatedDisk int64      `protobuf:"varint,3,opt,name=max_allocated_disk,json=maxAllocatedDisk,proto3" json:"max_allocated_disk,omitempty"`
}

func (m *SorterStats) Reset()                    { *m = SorterStats{} }
func (m *SorterStats) String() string            { return proto.CompactTextString(m) }
func (*SorterStats) ProtoMessage()               {}
func (*SorterStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{6} }

// JoinReaderStats are the stats collected during a joinReader run.
type JoinReaderStats struct {
	InputStats              InputStats  `protobuf:"bytes,1,opt,name=input_stats,json=inputStats" json:"input_stats"`
	IndexLookupStats        InputStats  `protobuf:"bytes,2,opt,name=index_lookup_stats,json=indexLookupStats" json:"index_lookup_stats"`
	PrimaryIndexLookupStats *InputStats `protobuf:"bytes,3,opt,name=primary_index_lookup_stats,json=primaryIndexLookupStats" json:"primary_index_lookup_stats,omitempty"`
}

func (m *JoinReaderStats) Reset()                    { *m = JoinReaderStats{} }
func (m *JoinReaderStats) String() string            { return proto.CompactTextString(m) }
func (*JoinReaderStats) ProtoMessage()               {}
func (*JoinReaderStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{7} }

func init() {
	proto.RegisterType((*InputStats)(nil), "cockroach.sql.distsqlrun.InputStats")
	proto.RegisterType((*TableReaderStats)(nil), "cockroach.sql.distsqlrun.TableReaderStats")
	proto.RegisterType((*HashJoinerStats)(nil), "cockroach.sql.distsqlrun.HashJoinerStats")
	proto.RegisterType((*AggregatorStats)(nil), "cockroach.sql.distsqlrun.AggregatorStats")
	proto.RegisterType((*DistinctStats)(nil), "cockroach.sql.distsqlrun.DistinctStats")
	proto.RegisterType((*MergeJoinerStats)(nil), "cockroach.sql.distsqlrun.MergeJoinerStats")
	proto.RegisterType((*SorterStats)(nil), "cockroach.sql.distsqlrun.SorterStats")
	proto.RegisterType((*JoinReaderStats)(nil), "cockroach.sql.distsqlrun.JoinReaderStats")
}
func (m *InputStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumRows != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NumRows))
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintStats(dAtA, i, uint64(types.SizeOfStdDuration(m.StallTime)))
	n1, err := types.StdDurationMarshalTo(m.StallTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *TableReaderStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableReaderStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStats(dAtA, i, uint64(m.InputStats.Size()))
	n2, err := m.InputStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *HashJoinerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashJoinerStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStats(dAtA, i, uint64(m.LeftInputStats.Size()))
	n3, err := m.LeftInputStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintStats(dAtA, i, uint64(m.RightInputStats.Size()))
	n4, err := m.RightInputStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.StoredSide) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.StoredSide)))
		i += copy(dAtA[i:], m.StoredSide)
	}
	if m.MaxAllocatedMem != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MaxAllocatedDisk))
	}
	return i, nil
}

func (m *AggregatorStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatorStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStats(dAtA, i, uint64(m.InputStats.Size()))
	n5, err := m.InputStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.MaxAllocatedMem != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MaxAllocatedMem))
	}
	return i, nil
}

func (m *DistinctStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistinctStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStats(dAtA, i, uint64(m.InputStats.Size()))
	n6, err := m.InputStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.MaxAllocatedMem != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MaxAllocatedMem))
	}
	return i, nil
}

func (m *MergeJoinerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeJoinerStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStats(dAtA, i, uint64(m.LeftInputStats.Size()))
	n7, err := m.LeftInputStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintStats(dAtA, i, uint64(m.RightInputStats.Size()))
	n8, err := m.RightInputStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *SorterStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SorterStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStats(dAtA, i, uint64(m.InputStats.Size()))
	n9, err := m.InputStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.MaxAllocatedMem != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MaxAllocatedDisk))
	}
	return i, nil
}

func (m *JoinReaderStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinReaderStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStats(dAtA, i, uint64(m.InputStats.Size()))
	n10, err := m.InputStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintStats(dAtA, i, uint64(m.IndexLookupStats.Size()))
	n11, err := m.IndexLookupStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.PrimaryIndexLookupStats != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.PrimaryIndexLookupStats.Size()))
		n12, err := m.PrimaryIndexLookupStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func encodeVarintStats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InputStats) Size() (n int) {
	var l int
	_ = l
	if m.NumRows != 0 {
		n += 1 + sovStats(uint64(m.NumRows))
	}
	l = types.SizeOfStdDuration(m.StallTime)
	n += 1 + l + sovStats(uint64(l))
	return n
}

func (m *TableReaderStats) Size() (n int) {
	var l int
	_ = l
	l = m.InputStats.Size()
	n += 1 + l + sovStats(uint64(l))
	return n
}

func (m *HashJoinerStats) Size() (n int) {
	var l int
	_ = l
	l = m.LeftInputStats.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.RightInputStats.Size()
	n += 1 + l + sovStats(uint64(l))
	l = len(m.StoredSide)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if m.MaxAllocatedMem != 0 {
		n += 1 + sovStats(uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		n += 1 + sovStats(uint64(m.MaxAllocatedDisk))
	}
	return n
}

func (m *AggregatorStats) Size() (n int) {
	var l int
	_ = l
	l = m.InputStats.Size()
	n += 1 + l + sovStats(uint64(l))
	if m.MaxAllocatedMem != 0 {
		n += 1 + sovStats(uint64(m.MaxAllocatedMem))
	}
	return n
}

func (m *DistinctStats) Size() (n int) {
	var l int
	_ = l
	l = m.InputStats.Size()
	n += 1 + l + sovStats(uint64(l))
	if m.MaxAllocatedMem != 0 {
		n += 1 + sovStats(uint64(m.MaxAllocatedMem))
	}
	return n
}

func (m *MergeJoinerStats) Size() (n int) {
	var l int
	_ = l
	l = m.LeftInputStats.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.RightInputStats.Size()
	n += 1 + l + sovStats(uint64(l))
	return n
}

func (m *SorterStats) Size() (n int) {
	var l int
	_ = l
	l = m.InputStats.Size()
	n += 1 + l + sovStats(uint64(l))
	if m.MaxAllocatedMem != 0 {
		n += 1 + sovStats(uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		n += 1 + sovStats(uint64(m.MaxAllocatedDisk))
	}
	return n
}

func (m *JoinReaderStats) Size() (n int) {
	var l int
	_ = l
	l = m.InputStats.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.IndexLookupStats.Size()
	n += 1 + l + sovStats(uint64(l))
	if m.PrimaryIndexLookupStats != nil {
		l = m.PrimaryIndexLookupStats.Size()
		n += 1 + l + sovStats(uint64(l))
	}
	return n
}

func sovStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStats(x uint64) (n int) {
	return sovStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InputStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRows", wireType)
			}
			m.NumRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRows |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StallTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.StallTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableReaderStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableReaderStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableReaderStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InputStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashJoinerStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashJoinerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashJoinerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftInputStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeftInputStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightInputStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RightInputStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredSide", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredSide = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedMem", wireType)
			}
			m.MaxAllocatedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedMem |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedDisk", wireType)
			}
			m.MaxAllocatedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedDisk |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatorStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatorStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatorStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InputStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedMem", wireType)
			}
			m.MaxAllocatedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedMem |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistinctStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistinctStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistinctStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InputStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedMem", wireType)
			}
			m.MaxAllocatedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedMem |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeJoinerStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeJoinerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeJoinerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftInputStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeftInputStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightInputStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RightInputStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SorterStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SorterStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SorterStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InputStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedMem", wireType)
			}
			m.MaxAllocatedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedMem |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedDisk", wireType)
			}
			m.MaxAllocatedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedDisk |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinReaderStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinReaderStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinReaderStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InputStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexLookupStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IndexLookupStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryIndexLookupStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrimaryIndexLookupStats == nil {
				m.PrimaryIndexLookupStats = &InputStats{}
			}
			if err := m.PrimaryIndexLookupStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStats   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sql/distsqlrun/stats.proto", fileDescriptorStats) }

var fileDescriptorStats = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x33, 0x49, 0x81, 0xf4, 0x46, 0x90, 0xd4, 0x42, 0xc2, 0xcd, 0xc2, 0x89, 0xac, 0x2e,
	0x22, 0x84, 0x1c, 0xa9, 0x3c, 0x41, 0xa3, 0x2c, 0x28, 0xd0, 0x8d, 0x13, 0x21, 0xc4, 0x66, 0x34,
	0x89, 0xa7, 0xce, 0x28, 0x33, 0x9e, 0x64, 0x66, 0xac, 0x86, 0x37, 0x40, 0xac, 0x58, 0x22, 0xf1,
	0x1a, 0xac, 0x58, 0xb1, 0xcc, 0x92, 0x25, 0x2b, 0x7e, 0xc2, 0x8b, 0x20, 0x8f, 0x1b, 0x92, 0xa2,
	0x44, 0xe2, 0x47, 0x55, 0xd5, 0x9d, 0x7d, 0x7d, 0xfc, 0x9d, 0x33, 0xf7, 0x5e, 0x0d, 0xd4, 0xf5,
	0x94, 0xb7, 0x23, 0xa6, 0x8d, 0x9e, 0x72, 0x95, 0x26, 0x6d, 0x6d, 0x88, 0xd1, 0xc1, 0x44, 0x49,
	0x23, 0x1d, 0x77, 0x28, 0x87, 0x63, 0x25, 0xc9, 0x70, 0x14, 0xe8, 0x29, 0x0f, 0x56, 0xaa, 0xfa,
	0xdd, 0x58, 0xc6, 0xd2, 0x8a, 0xda, 0xd9, 0x53, 0xae, 0xaf, 0x7b, 0xb1, 0x94, 0x31, 0xa7, 0x6d,
	0xfb, 0x36, 0x48, 0x4f, 0xdb, 0x51, 0xaa, 0x88, 0x61, 0x32, 0xc9, 0xbf, 0xfb, 0x63, 0x80, 0xe3,
	0x64, 0x92, 0x9a, 0x5e, 0xe6, 0xe1, 0xec, 0x43, 0x39, 0x49, 0x05, 0x56, 0xf2, 0x4c, 0xbb, 0xa8,
	0x89, 0x5a, 0xa5, 0xf0, 0x56, 0x92, 0x8a, 0x50, 0x9e, 0x69, 0xa7, 0x03, 0xa0, 0x0d, 0xe1, 0x1c,
	0x1b, 0x26, 0xa8, 0x5b, 0x6e, 0xa2, 0x56, 0xe5, 0x70, 0x3f, 0xc8, 0xe9, 0xc1, 0x92, 0x1e, 0x74,
	0xcf, 0xe9, 0x9d, 0xf2, 0xfc, 0x4b, 0xa3, 0xf0, 0xf6, 0x6b, 0x03, 0x85, 0xbb, 0xf6, 0xb7, 0x3e,
	0x13, 0xd4, 0xc7, 0x50, 0xeb, 0x93, 0x01, 0xa7, 0x21, 0x25, 0x11, 0x55, 0xb9, 0xe5, 0x13, 0xa8,
	0xb0, 0x2c, 0x00, 0xb6, 0xa7, 0xb4, 0xae, 0x95, 0xc3, 0x83, 0x60, 0xdb, 0x31, 0x83, 0x55, 0xda,
	0xce, 0x4e, 0xe6, 0x11, 0x02, 0xfb, 0x55, 0xf1, 0x3f, 0x14, 0xa1, 0xfa, 0x88, 0xe8, 0xd1, 0x63,
	0xc9, 0x92, 0xa5, 0x41, 0x1f, 0x6a, 0x9c, 0x9e, 0x1a, 0xfc, 0x7f, 0x2e, 0x77, 0x32, 0xc6, 0x5a,
	0xa7, 0x9e, 0xc1, 0x9e, 0x62, 0xf1, 0xe8, 0x22, 0xb6, 0xf8, 0xd7, 0xd8, 0xaa, 0x85, 0xac, 0x71,
	0x1b, 0x50, 0xd1, 0x46, 0x2a, 0x1a, 0x61, 0xcd, 0x22, 0xea, 0x96, 0x9a, 0xa8, 0xb5, 0x1b, 0x42,
	0x5e, 0xea, 0xb1, 0x88, 0x3a, 0xf7, 0x61, 0x4f, 0x90, 0x19, 0x26, 0x9c, 0xcb, 0x21, 0x31, 0x34,
	0xc2, 0x82, 0x0a, 0x77, 0xc7, 0xce, 0xaa, 0x2a, 0xc8, 0xec, 0x68, 0x59, 0x3f, 0xa1, 0xc2, 0x79,
	0x00, 0xce, 0x45, 0x6d, 0xc4, 0xf4, 0xd8, 0xbd, 0x61, 0xc5, 0xb5, 0x75, 0x71, 0x97, 0xe9, 0xb1,
	0xff, 0x1a, 0x41, 0xf5, 0x28, 0x8e, 0x15, 0x8d, 0x89, 0x91, 0x97, 0x30, 0x9d, 0xcd, 0xd1, 0x8b,
	0x1b, 0xa3, 0xfb, 0xaf, 0x10, 0xdc, 0xee, 0x32, 0x6d, 0x58, 0x32, 0x34, 0x57, 0x1c, 0xe5, 0x23,
	0x82, 0xda, 0x09, 0x55, 0x31, 0xbd, 0xb6, 0x5b, 0xe5, 0xbf, 0x47, 0x50, 0xe9, 0x49, 0x65, 0xe8,
	0x15, 0x8f, 0x75, 0xcb, 0x46, 0x96, 0xb6, 0x6c, 0xe4, 0xbb, 0x22, 0x54, 0xb3, 0xa6, 0x5f, 0xd6,
	0x7d, 0xe1, 0x3c, 0x07, 0x87, 0x25, 0x11, 0x9d, 0x61, 0x2e, 0xe5, 0x38, 0x9d, 0xfc, 0x73, 0xc3,
	0x6b, 0x96, 0xf2, 0xd4, 0x42, 0x72, 0x32, 0x81, 0xfa, 0x44, 0x31, 0x41, 0xd4, 0x4b, 0xbc, 0xc1,
	0xa1, 0xf4, 0xe7, 0x0e, 0xe1, 0xbd, 0x73, 0xce, 0xf1, 0x6f, 0x16, 0x9d, 0x83, 0xf9, 0x77, 0xaf,
	0x30, 0x5f, 0x78, 0xe8, 0xd3, 0xc2, 0x43, 0x9f, 0x17, 0x1e, 0xfa, 0xb6, 0xf0, 0xd0, 0x9b, 0x1f,
	0x5e, 0xe1, 0x05, 0xac, 0x48, 0x83, 0x9b, 0xf6, 0x6e, 0x7e, 0xf8, 0x33, 0x00, 0x00, 0xff, 0xff,
	0x90, 0x88, 0x45, 0x07, 0x55, 0x06, 0x00, 0x00,
}
