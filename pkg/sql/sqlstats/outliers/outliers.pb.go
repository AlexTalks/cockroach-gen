// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/sqlstats/outliers/outliers.proto

package outliers

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Outlier struct {
	Session     *Outlier_Session     `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Transaction *Outlier_Transaction `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Statement   *Outlier_Statement   `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (m *Outlier) Reset()         { *m = Outlier{} }
func (m *Outlier) String() string { return proto.CompactTextString(m) }
func (*Outlier) ProtoMessage()    {}
func (*Outlier) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c2b4c6eab9d9d1, []int{0}
}
func (m *Outlier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Outlier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Outlier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outlier.Merge(m, src)
}
func (m *Outlier) XXX_Size() int {
	return m.Size()
}
func (m *Outlier) XXX_DiscardUnknown() {
	xxx_messageInfo_Outlier.DiscardUnknown(m)
}

var xxx_messageInfo_Outlier proto.InternalMessageInfo

type Outlier_Session struct {
	ID []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Outlier_Session) Reset()         { *m = Outlier_Session{} }
func (m *Outlier_Session) String() string { return proto.CompactTextString(m) }
func (*Outlier_Session) ProtoMessage()    {}
func (*Outlier_Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c2b4c6eab9d9d1, []int{0, 0}
}
func (m *Outlier_Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Outlier_Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Outlier_Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outlier_Session.Merge(m, src)
}
func (m *Outlier_Session) XXX_Size() int {
	return m.Size()
}
func (m *Outlier_Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Outlier_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Outlier_Session proto.InternalMessageInfo

type Outlier_Transaction struct {
	ID *github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"id,omitempty"`
}

func (m *Outlier_Transaction) Reset()         { *m = Outlier_Transaction{} }
func (m *Outlier_Transaction) String() string { return proto.CompactTextString(m) }
func (*Outlier_Transaction) ProtoMessage()    {}
func (*Outlier_Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c2b4c6eab9d9d1, []int{0, 1}
}
func (m *Outlier_Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Outlier_Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Outlier_Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outlier_Transaction.Merge(m, src)
}
func (m *Outlier_Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Outlier_Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Outlier_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Outlier_Transaction proto.InternalMessageInfo

type Outlier_Statement struct {
	ID               []byte  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LatencyInSeconds float64 `protobuf:"fixed64,2,opt,name=latency_in_seconds,json=latencyInSeconds,proto3" json:"latency_in_seconds,omitempty"`
}

func (m *Outlier_Statement) Reset()         { *m = Outlier_Statement{} }
func (m *Outlier_Statement) String() string { return proto.CompactTextString(m) }
func (*Outlier_Statement) ProtoMessage()    {}
func (*Outlier_Statement) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c2b4c6eab9d9d1, []int{0, 2}
}
func (m *Outlier_Statement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Outlier_Statement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Outlier_Statement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outlier_Statement.Merge(m, src)
}
func (m *Outlier_Statement) XXX_Size() int {
	return m.Size()
}
func (m *Outlier_Statement) XXX_DiscardUnknown() {
	xxx_messageInfo_Outlier_Statement.DiscardUnknown(m)
}

var xxx_messageInfo_Outlier_Statement proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Outlier)(nil), "cockroach.sql.outliers.Outlier")
	proto.RegisterType((*Outlier_Session)(nil), "cockroach.sql.outliers.Outlier.Session")
	proto.RegisterType((*Outlier_Transaction)(nil), "cockroach.sql.outliers.Outlier.Transaction")
	proto.RegisterType((*Outlier_Statement)(nil), "cockroach.sql.outliers.Outlier.Statement")
}

func init() {
	proto.RegisterFile("sql/sqlstats/outliers/outliers.proto", fileDescriptor_30c2b4c6eab9d9d1)
}

var fileDescriptor_30c2b4c6eab9d9d1 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x6b, 0xc2, 0x30,
	0x18, 0xc6, 0x9b, 0x0a, 0x3a, 0xe3, 0x0e, 0x23, 0x0c, 0x11, 0x0f, 0x71, 0x1b, 0x83, 0xfd, 0x25,
	0x81, 0x79, 0xde, 0x61, 0x22, 0x0c, 0x0f, 0x32, 0x56, 0xe7, 0x65, 0x0c, 0xa4, 0xa6, 0xa5, 0x06,
	0x6b, 0xa2, 0x4d, 0x7a, 0xd8, 0xb7, 0xd8, 0xc7, 0xd9, 0x47, 0xf0, 0xe8, 0x51, 0x76, 0x90, 0xad,
	0x7e, 0x91, 0x61, 0x6b, 0x6d, 0x0f, 0x1b, 0xde, 0x1e, 0xf2, 0x3e, 0xcf, 0xc3, 0xef, 0x7d, 0x03,
	0xcf, 0xd5, 0xcc, 0xa7, 0x6a, 0xe6, 0x2b, 0x6d, 0x6b, 0x45, 0x65, 0xa8, 0x7d, 0xee, 0x06, 0x99,
	0x20, 0xd3, 0x40, 0x6a, 0x89, 0xaa, 0x4c, 0xb2, 0x71, 0x20, 0x6d, 0x36, 0x22, 0x6a, 0xe6, 0x93,
	0x74, 0x5a, 0x3f, 0xf6, 0xa4, 0x27, 0x63, 0x0b, 0xdd, 0xa8, 0xc4, 0x7d, 0xf6, 0x59, 0x80, 0xa5,
	0xa7, 0xc4, 0x82, 0x1e, 0x60, 0x49, 0xb9, 0x4a, 0x71, 0x29, 0x6a, 0xe0, 0x04, 0x5c, 0x56, 0xee,
	0x2e, 0xc8, 0xdf, 0x5d, 0x64, 0x9b, 0x20, 0xbd, 0xc4, 0x6e, 0xa5, 0x39, 0xd4, 0x85, 0x15, 0x1d,
	0xd8, 0x42, 0xd9, 0x4c, 0x6f, 0x6a, 0xcc, 0xb8, 0xe6, 0x66, 0x5f, 0xcd, 0x4b, 0x16, 0xb1, 0xf2,
	0x79, 0xf4, 0x08, 0xcb, 0x9b, 0x65, 0xdd, 0x89, 0x2b, 0x74, 0xad, 0x10, 0x97, 0x5d, 0xed, 0x65,
	0x4a, 0x03, 0x56, 0x96, 0xad, 0x9f, 0xc2, 0xd2, 0x96, 0x15, 0x55, 0xa1, 0xc9, 0x9d, 0x78, 0xc1,
	0xc3, 0x56, 0x31, 0x5a, 0x35, 0xcc, 0x4e, 0xdb, 0x32, 0xb9, 0x53, 0x7f, 0x83, 0x95, 0x1c, 0x07,
	0xea, 0xe6, 0x6c, 0xf7, 0x5f, 0xab, 0x46, 0xd3, 0xe3, 0x7a, 0x14, 0x0e, 0x09, 0x93, 0x13, 0xba,
	0x23, 0x70, 0x86, 0x99, 0xa6, 0xd3, 0xb1, 0x47, 0x43, 0xcd, 0x7d, 0x1a, 0x86, 0xdc, 0x21, 0xfd,
	0x7e, 0xa7, 0x9d, 0x6b, 0x7f, 0x86, 0xe5, 0x1d, 0xd8, 0x7f, 0x08, 0xe8, 0x16, 0x22, 0xdf, 0xd6,
	0xae, 0x60, 0xef, 0x03, 0x2e, 0x06, 0xca, 0x65, 0x52, 0x38, 0x2a, 0x3e, 0x22, 0xb0, 0x8e, 0xb6,
	0x93, 0x8e, 0xe8, 0x25, 0xef, 0xad, 0xeb, 0xf9, 0x0f, 0x36, 0xe6, 0x11, 0x06, 0x8b, 0x08, 0x83,
	0x65, 0x84, 0xc1, 0x77, 0x84, 0xc1, 0xc7, 0x1a, 0x1b, 0x8b, 0x35, 0x36, 0x96, 0x6b, 0x6c, 0xbc,
	0x1e, 0xa4, 0xc7, 0x19, 0x16, 0xe3, 0xdf, 0x6e, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd6, 0xfa,
	0x3b, 0x45, 0x43, 0x02, 0x00, 0x00,
}

func (m *Outlier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outlier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outlier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Statement != nil {
		{
			size, err := m.Statement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutliers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutliers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutliers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Outlier_Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outlier_Session) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outlier_Session) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintOutliers(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Outlier_Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outlier_Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outlier_Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size := m.ID.Size()
			i -= size
			if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintOutliers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Outlier_Statement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outlier_Statement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outlier_Statement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatencyInSeconds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LatencyInSeconds))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintOutliers(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutliers(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutliers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Outlier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovOutliers(uint64(l))
	}
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovOutliers(uint64(l))
	}
	if m.Statement != nil {
		l = m.Statement.Size()
		n += 1 + l + sovOutliers(uint64(l))
	}
	return n
}

func (m *Outlier_Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovOutliers(uint64(l))
	}
	return n
}

func (m *Outlier_Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovOutliers(uint64(l))
	}
	return n
}

func (m *Outlier_Statement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovOutliers(uint64(l))
	}
	if m.LatencyInSeconds != 0 {
		n += 9
	}
	return n
}

func sovOutliers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutliers(x uint64) (n int) {
	return sovOutliers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Outlier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutliers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Outlier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Outlier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutliers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutliers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutliers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Outlier_Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutliers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutliers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutliers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &Outlier_Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutliers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutliers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutliers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statement == nil {
				m.Statement = &Outlier_Statement{}
			}
			if err := m.Statement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutliers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutliers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outlier_Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutliers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutliers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutliers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutliers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutliers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutliers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outlier_Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutliers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutliers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutliers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutliers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cockroachdb_cockroach_pkg_util_uuid.UUID
			m.ID = &v
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutliers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutliers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outlier_Statement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutliers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Statement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Statement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutliers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutliers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutliers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyInSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LatencyInSeconds = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOutliers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutliers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutliers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutliers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutliers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutliers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutliers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutliers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutliers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutliers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutliers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutliers = fmt.Errorf("proto: unexpected end of group")
)
