// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloud/externalconn/connectionpb/connection.proto

package connectionpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConnectionProvider int32

const (
	ConnectionProvider_TypeUnspecified ConnectionProvider = 0
	// External Storage providers.
	ConnectionProvider_TypeNodelocal ConnectionProvider = 1
	// KMS providers.
	ConnectionProvider_TypeGSKMS ConnectionProvider = 2
)

var ConnectionProvider_name = map[int32]string{
	0: "Unknown",
	1: "nodelocal",
	2: "gs_kms",
}

var ConnectionProvider_value = map[string]int32{
	"Unknown":   0,
	"nodelocal": 1,
	"gs_kms":    2,
}

func (x ConnectionProvider) String() string {
	return proto.EnumName(ConnectionProvider_name, int32(x))
}

func (ConnectionProvider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2ab8ae20df1e701, []int{0}
}

// ConnectionType is the type of the External Connection object.
type ConnectionType int32

const (
	TypeUnspecified ConnectionType = 0
	TypeStorage     ConnectionType = 1
	TypeKMS         ConnectionType = 2
)

var ConnectionType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "STORAGE",
	2: "KMS",
}

var ConnectionType_value = map[string]int32{
	"UNSPECIFIED": 0,
	"STORAGE":     1,
	"KMS":         2,
}

func (x ConnectionType) String() string {
	return proto.EnumName(ConnectionType_name, int32(x))
}

func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2ab8ae20df1e701, []int{1}
}

// SimpleURI encapsulates the information that represents an External Connection
// object that only relies on a URI to connect.
type SimpleURI struct {
	URI string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *SimpleURI) Reset()         { *m = SimpleURI{} }
func (m *SimpleURI) String() string { return proto.CompactTextString(m) }
func (*SimpleURI) ProtoMessage()    {}
func (*SimpleURI) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ab8ae20df1e701, []int{0}
}
func (m *SimpleURI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleURI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SimpleURI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleURI.Merge(m, src)
}
func (m *SimpleURI) XXX_Size() int {
	return m.Size()
}
func (m *SimpleURI) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleURI.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleURI proto.InternalMessageInfo

// ConnectionsDetails is the byte representation of the resource represented by
// an External Connection object.
type ConnectionDetails struct {
	Provider ConnectionProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=cockroach.cloud.externalconn.connectionpb.ConnectionProvider" json:"provider,omitempty"`
	// Types that are valid to be assigned to Details:
	//	*ConnectionDetails_SimpleURI
	Details isConnectionDetails_Details `protobuf_oneof:"details"`
}

func (m *ConnectionDetails) Reset()         { *m = ConnectionDetails{} }
func (m *ConnectionDetails) String() string { return proto.CompactTextString(m) }
func (*ConnectionDetails) ProtoMessage()    {}
func (*ConnectionDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ab8ae20df1e701, []int{1}
}
func (m *ConnectionDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConnectionDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionDetails.Merge(m, src)
}
func (m *ConnectionDetails) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionDetails proto.InternalMessageInfo

type isConnectionDetails_Details interface {
	isConnectionDetails_Details()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConnectionDetails_SimpleURI struct {
	SimpleURI *SimpleURI `protobuf:"bytes,2,opt,name=simple_uri,json=simpleUri,proto3,oneof" json:"simple_uri,omitempty"`
}

func (*ConnectionDetails_SimpleURI) isConnectionDetails_Details() {}

func (m *ConnectionDetails) GetDetails() isConnectionDetails_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *ConnectionDetails) GetSimpleURI() *SimpleURI {
	if x, ok := m.GetDetails().(*ConnectionDetails_SimpleURI); ok {
		return x.SimpleURI
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConnectionDetails) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConnectionDetails_SimpleURI)(nil),
	}
}

func init() {
	proto.RegisterEnum("cockroach.cloud.externalconn.connectionpb.ConnectionProvider", ConnectionProvider_name, ConnectionProvider_value)
	proto.RegisterEnum("cockroach.cloud.externalconn.connectionpb.ConnectionType", ConnectionType_name, ConnectionType_value)
	proto.RegisterType((*SimpleURI)(nil), "cockroach.cloud.externalconn.connectionpb.SimpleURI")
	proto.RegisterType((*ConnectionDetails)(nil), "cockroach.cloud.externalconn.connectionpb.ConnectionDetails")
}

func init() {
	proto.RegisterFile("cloud/externalconn/connectionpb/connection.proto", fileDescriptor_f2ab8ae20df1e701)
}

var fileDescriptor_f2ab8ae20df1e701 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x09, 0xaa, 0xf1, 0x84, 0xb4, 0xee, 0xd2, 0x03, 0xb5, 0xd0, 0x76, 0x55, 0x21,
	0x54, 0x7a, 0x70, 0x50, 0xe1, 0xca, 0x81, 0xb4, 0xa1, 0x44, 0x51, 0x4a, 0x65, 0xd7, 0x07, 0xb8,
	0x54, 0xae, 0xbd, 0x84, 0x55, 0xdc, 0x5d, 0x6b, 0xed, 0xf2, 0xe7, 0x0d, 0x90, 0x4f, 0xbc, 0x80,
	0x4f, 0xbc, 0x4c, 0x8f, 0x3d, 0xf6, 0x54, 0xc0, 0x79, 0x11, 0xb4, 0x0e, 0x24, 0x96, 0x10, 0x12,
	0x5c, 0x2c, 0xef, 0xcc, 0x7c, 0xbf, 0xf9, 0xbe, 0xd5, 0xc2, 0xe3, 0x28, 0x91, 0x17, 0x71, 0x8f,
	0x7d, 0xcc, 0x99, 0x12, 0x61, 0x12, 0x49, 0x21, 0x7a, 0xfa, 0xc3, 0xa2, 0x9c, 0x4b, 0x91, 0x9e,
	0x35, 0x0e, 0x6e, 0xaa, 0x64, 0x2e, 0xf1, 0xa3, 0x48, 0x46, 0x53, 0x25, 0xc3, 0xe8, 0x9d, 0x5b,
	0x6b, 0xdd, 0xa6, 0xd6, 0x6d, 0x6a, 0x9d, 0x8d, 0x89, 0x9c, 0xc8, 0x5a, 0xd5, 0xd3, 0x7f, 0x73,
	0xc0, 0xf6, 0x43, 0xb0, 0x7c, 0x7e, 0x9e, 0x26, 0x2c, 0xf0, 0x86, 0x78, 0x13, 0xda, 0x17, 0x8a,
	0xdf, 0x43, 0x14, 0xed, 0x58, 0x7d, 0xb3, 0xba, 0xd9, 0x6a, 0x07, 0xde, 0xd0, 0xd3, 0xb5, 0xed,
	0x6f, 0x08, 0xd6, 0xf7, 0x17, 0xb8, 0x03, 0x96, 0x87, 0x3c, 0xc9, 0xf0, 0x6b, 0xb8, 0x9d, 0x2a,
	0xf9, 0x9e, 0xc7, 0x4c, 0xd5, 0xaa, 0xd5, 0xbd, 0x67, 0xee, 0x3f, 0x3b, 0x72, 0x97, 0xbc, 0xe3,
	0x5f, 0x10, 0x6f, 0x81, 0xc3, 0x31, 0x40, 0x56, 0x1b, 0x3b, 0xd5, 0x96, 0x5a, 0x14, 0xed, 0x74,
	0xf6, 0x9e, 0xfe, 0x07, 0x7c, 0x91, 0xaa, 0xdf, 0xad, 0x6e, 0xb6, 0x96, 0x21, 0x5f, 0x1a, 0x9e,
	0x35, 0x07, 0x07, 0x8a, 0xf7, 0x2d, 0x30, 0xe3, 0x79, 0x96, 0xdd, 0x0c, 0xf0, 0x9f, 0x86, 0x30,
	0x05, 0x33, 0x10, 0x53, 0x21, 0x3f, 0x08, 0xdb, 0x70, 0xee, 0x16, 0x25, 0x5d, 0x3b, 0xf9, 0x94,
	0xb2, 0x40, 0x64, 0x29, 0x8b, 0xf8, 0x5b, 0xce, 0x62, 0x4c, 0xc1, 0x12, 0x32, 0x66, 0x89, 0x8c,
	0xc2, 0xc4, 0x46, 0xce, 0x7a, 0x51, 0xd2, 0xae, 0x9e, 0x39, 0xfa, 0x5d, 0xc4, 0x9b, 0xb0, 0x32,
	0xc9, 0x4e, 0xa7, 0xe7, 0x99, 0xdd, 0x72, 0xba, 0x45, 0x49, 0x2d, 0xdd, 0x3e, 0xf4, 0x47, 0x63,
	0x7f, 0x37, 0x85, 0xd5, 0xe5, 0x52, 0x5d, 0xc6, 0x0f, 0xa0, 0x13, 0x1c, 0xf9, 0xc7, 0x83, 0xfd,
	0xe1, 0x8b, 0xe1, 0xe0, 0xe0, 0x6f, 0x4b, 0xef, 0x83, 0xe9, 0x9f, 0xbc, 0xf2, 0x9e, 0x1f, 0x0e,
	0x6c, 0xe4, 0xac, 0x15, 0x25, 0xed, 0xe8, 0x09, 0x3f, 0x97, 0x2a, 0x9c, 0x30, 0xbc, 0x01, 0xed,
	0xd1, 0xd8, 0xb7, 0x5b, 0x4e, 0xa7, 0x28, 0xa9, 0xa9, 0x3b, 0xa3, 0xb1, 0xef, 0xdc, 0xfa, 0xfc,
	0x95, 0x18, 0x7d, 0xf7, 0xf2, 0x07, 0x31, 0x2e, 0x2b, 0x82, 0xae, 0x2a, 0x82, 0xae, 0x2b, 0x82,
	0xbe, 0x57, 0x04, 0x7d, 0x99, 0x11, 0xe3, 0x6a, 0x46, 0x8c, 0xeb, 0x19, 0x31, 0xde, 0xdc, 0x69,
	0xde, 0xe3, 0xd9, 0x4a, 0xfd, 0x4e, 0x9e, 0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x67, 0xb9, 0x01,
	0xed, 0x9c, 0x02, 0x00, 0x00,
}

func (m *SimpleURI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleURI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleURI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintConnection(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size := m.Details.Size()
			i -= size
			if _, err := m.Details.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Provider != 0 {
		i = encodeVarintConnection(dAtA, i, uint64(m.Provider))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionDetails_SimpleURI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionDetails_SimpleURI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SimpleURI != nil {
		{
			size, err := m.SimpleURI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintConnection(dAtA []byte, offset int, v uint64) int {
	offset -= sovConnection(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SimpleURI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovConnection(uint64(l))
	}
	return n
}

func (m *ConnectionDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Provider != 0 {
		n += 1 + sovConnection(uint64(m.Provider))
	}
	if m.Details != nil {
		n += m.Details.Size()
	}
	return n
}

func (m *ConnectionDetails_SimpleURI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SimpleURI != nil {
		l = m.SimpleURI.Size()
		n += 1 + l + sovConnection(uint64(l))
	}
	return n
}

func sovConnection(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConnection(x uint64) (n int) {
	return sovConnection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SimpleURI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleURI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleURI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConnection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			m.Provider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Provider |= ConnectionProvider(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleURI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimpleURI{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &ConnectionDetails_SimpleURI{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConnection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConnection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConnection
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConnection
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConnection
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConnection        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConnection          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConnection = fmt.Errorf("proto: unexpected end of group")
)
