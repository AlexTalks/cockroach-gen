// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd/roachprod/upgrade/teamcity.proto

package upgrade

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TCBuildResponse struct {
	Count int32      `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Build []*TCBuild `protobuf:"bytes,2,rep,name=build,proto3" json:"build,omitempty"`
}

func (m *TCBuildResponse) Reset()         { *m = TCBuildResponse{} }
func (m *TCBuildResponse) String() string { return proto.CompactTextString(m) }
func (*TCBuildResponse) ProtoMessage()    {}
func (*TCBuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e438468ccd3015, []int{0}
}
func (m *TCBuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TCBuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TCBuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCBuildResponse.Merge(m, src)
}
func (m *TCBuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *TCBuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TCBuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TCBuildResponse proto.InternalMessageInfo

type TCBuild struct {
	Id                int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WebUrl            string `protobuf:"bytes,2,opt,name=webUrl,proto3" json:"webUrl,omitempty"`
	BranchName        string `protobuf:"bytes,3,opt,name=branchName,proto3" json:"branchName,omitempty"`
	FinishOnAgentDate string `protobuf:"bytes,4,opt,name=finishOnAgentDate,proto3" json:"finishOnAgentDate,omitempty"`
}

func (m *TCBuild) Reset()         { *m = TCBuild{} }
func (m *TCBuild) String() string { return proto.CompactTextString(m) }
func (*TCBuild) ProtoMessage()    {}
func (*TCBuild) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e438468ccd3015, []int{1}
}
func (m *TCBuild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TCBuild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TCBuild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCBuild.Merge(m, src)
}
func (m *TCBuild) XXX_Size() int {
	return m.Size()
}
func (m *TCBuild) XXX_DiscardUnknown() {
	xxx_messageInfo_TCBuild.DiscardUnknown(m)
}

var xxx_messageInfo_TCBuild proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TCBuildResponse)(nil), "upgrade.TCBuildResponse")
	proto.RegisterType((*TCBuild)(nil), "upgrade.TCBuild")
}

func init() {
	proto.RegisterFile("cmd/roachprod/upgrade/teamcity.proto", fileDescriptor_04e438468ccd3015)
}

var fileDescriptor_04e438468ccd3015 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0xce, 0x4d, 0xd1,
	0x2f, 0xca, 0x4f, 0x4c, 0xce, 0x28, 0x28, 0xca, 0x4f, 0xd1, 0x2f, 0x2d, 0x48, 0x2f, 0x4a, 0x4c,
	0x49, 0xd5, 0x2f, 0x49, 0x4d, 0xcc, 0x4d, 0xce, 0x2c, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x87, 0x8a, 0x2b, 0xf9, 0x73, 0xf1, 0x87, 0x38, 0x3b, 0x95, 0x66, 0xe6, 0xa4, 0x04,
	0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89, 0x70, 0xb1, 0x26, 0xe7, 0x97, 0xe6, 0x95,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x41, 0x38, 0x42, 0x6a, 0x5c, 0xac, 0x49, 0x20, 0x65,
	0x12, 0x4c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x02, 0x7a, 0x50, 0x13, 0xf4, 0x60, 0xda, 0x21, 0xd2,
	0x4a, 0xf5, 0x5c, 0xec, 0x50, 0x11, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0xa8, 0x29, 0x4c, 0x99,
	0x29, 0x42, 0x62, 0x5c, 0x6c, 0xe5, 0xa9, 0x49, 0xa1, 0x45, 0x39, 0x12, 0x4c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x50, 0x9e, 0x90, 0x1c, 0x17, 0x57, 0x52, 0x51, 0x62, 0x5e, 0x72, 0x86, 0x5f, 0x62,
	0x6e, 0xaa, 0x04, 0x33, 0x58, 0x0e, 0x49, 0x44, 0x48, 0x87, 0x4b, 0x30, 0x2d, 0x33, 0x2f, 0xb3,
	0x38, 0xc3, 0x3f, 0xcf, 0x31, 0x3d, 0x35, 0xaf, 0xc4, 0x25, 0xb1, 0x24, 0x55, 0x82, 0x05, 0xac,
	0x0c, 0x53, 0xc2, 0x49, 0xe1, 0xc4, 0x43, 0x39, 0x86, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92,
	0x63, 0xbc, 0xf1, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c,
	0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0x1c, 0x06, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xef, 0x36, 0x5f, 0x52, 0x2b, 0x01, 0x00, 0x00,
}

func (m *TCBuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCBuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCBuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Build) > 0 {
		for iNdEx := len(m.Build) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Build[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeamcity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintTeamcity(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TCBuild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCBuild) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCBuild) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinishOnAgentDate) > 0 {
		i -= len(m.FinishOnAgentDate)
		copy(dAtA[i:], m.FinishOnAgentDate)
		i = encodeVarintTeamcity(dAtA, i, uint64(len(m.FinishOnAgentDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BranchName) > 0 {
		i -= len(m.BranchName)
		copy(dAtA[i:], m.BranchName)
		i = encodeVarintTeamcity(dAtA, i, uint64(len(m.BranchName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WebUrl) > 0 {
		i -= len(m.WebUrl)
		copy(dAtA[i:], m.WebUrl)
		i = encodeVarintTeamcity(dAtA, i, uint64(len(m.WebUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTeamcity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTeamcity(dAtA []byte, offset int, v uint64) int {
	offset -= sovTeamcity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TCBuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovTeamcity(uint64(m.Count))
	}
	if len(m.Build) > 0 {
		for _, e := range m.Build {
			l = e.Size()
			n += 1 + l + sovTeamcity(uint64(l))
		}
	}
	return n
}

func (m *TCBuild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTeamcity(uint64(m.Id))
	}
	l = len(m.WebUrl)
	if l > 0 {
		n += 1 + l + sovTeamcity(uint64(l))
	}
	l = len(m.BranchName)
	if l > 0 {
		n += 1 + l + sovTeamcity(uint64(l))
	}
	l = len(m.FinishOnAgentDate)
	if l > 0 {
		n += 1 + l + sovTeamcity(uint64(l))
	}
	return n
}

func sovTeamcity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTeamcity(x uint64) (n int) {
	return sovTeamcity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TCBuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamcity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCBuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCBuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamcity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamcity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamcity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamcity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Build = append(m.Build, &TCBuild{})
			if err := m.Build[len(m.Build)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamcity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeamcity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCBuild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamcity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCBuild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCBuild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamcity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamcity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamcity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamcity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamcity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamcity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamcity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishOnAgentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamcity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamcity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamcity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinishOnAgentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamcity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeamcity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTeamcity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTeamcity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeamcity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeamcity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTeamcity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTeamcity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTeamcity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTeamcity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTeamcity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTeamcity = fmt.Errorf("proto: unexpected end of group")
)

