// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multitenant/tenantcapabilities/tenantcapabilitiespb/capabilities.proto

package tenantcapabilitiespb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TenantCapabilities encapsulates a set of capabilities[1] for a specific
// tenant. Capabilities for a specific tenant are stored in the system.tenants
// table and are checked against in KV when the tenant performs a privileged
// operation.
//
// [1] Certain requests in the system are considered "privileged", and as such,
// tenants are only allowed to perform them if they have the appropriate
// capability. For example, performing an AdminSplit.
type TenantCapabilities struct {
	// CanAdminSplit, if set to true, grants grants the tenant the ability to
	// successfully perform `AdminSplit` requests.
	CanAdminSplit bool `protobuf:"varint,1,opt,name=can_admin_split,json=canAdminSplit,proto3" json:"can_admin_split,omitempty"`
}

func (m *TenantCapabilities) Reset()         { *m = TenantCapabilities{} }
func (m *TenantCapabilities) String() string { return proto.CompactTextString(m) }
func (*TenantCapabilities) ProtoMessage()    {}
func (*TenantCapabilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_810c0776c7e5b013, []int{0}
}
func (m *TenantCapabilities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantCapabilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TenantCapabilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantCapabilities.Merge(m, src)
}
func (m *TenantCapabilities) XXX_Size() int {
	return m.Size()
}
func (m *TenantCapabilities) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantCapabilities.DiscardUnknown(m)
}

var xxx_messageInfo_TenantCapabilities proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TenantCapabilities)(nil), "cockroach.multitenant.tenantcapabilitiespb.TenantCapabilities")
}

func init() {
	proto.RegisterFile("multitenant/tenantcapabilities/tenantcapabilitiespb/capabilities.proto", fileDescriptor_810c0776c7e5b013)
}

var fileDescriptor_810c0776c7e5b013 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0xcb, 0x2d, 0xcd, 0x29,
	0xc9, 0x2c, 0x49, 0xcd, 0x4b, 0xcc, 0x2b, 0xd1, 0x87, 0x50, 0xc9, 0x89, 0x05, 0x89, 0x49, 0x99,
	0x39, 0x99, 0x25, 0x99, 0xa9, 0xc5, 0x58, 0x84, 0x0a, 0x92, 0xf4, 0x91, 0xb9, 0x7a, 0x05, 0x45,
	0xf9, 0x25, 0xf9, 0x42, 0x5a, 0xc9, 0xf9, 0xc9, 0xd9, 0x45, 0xf9, 0x89, 0xc9, 0x19, 0x7a, 0x48,
	0x26, 0xea, 0x61, 0xd3, 0x2e, 0x25, 0x92, 0x9e, 0x9f, 0x9e, 0x0f, 0xd6, 0xa6, 0x0f, 0x62, 0x41,
	0x4c, 0x50, 0x72, 0xe2, 0x12, 0x0a, 0x01, 0xab, 0x76, 0x46, 0x52, 0x2d, 0xa4, 0xc6, 0xc5, 0x9f,
	0x9c, 0x98, 0x17, 0x9f, 0x98, 0x92, 0x9b, 0x99, 0x17, 0x5f, 0x5c, 0x90, 0x93, 0x59, 0x22, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x11, 0xc4, 0x9b, 0x9c, 0x98, 0xe7, 0x08, 0x12, 0x0d, 0x06, 0x09, 0x5a,
	0xb1, 0xbc, 0x58, 0x20, 0xcf, 0xe8, 0x64, 0x76, 0xe2, 0xa1, 0x1c, 0xc3, 0x89, 0x47, 0x72, 0x8c,
	0x17, 0x1e, 0xc9, 0x31, 0xde, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72,
	0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x25, 0x82, 0xcd, 0x45, 0x49, 0x6c,
	0x60, 0x27, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x88, 0x99, 0xb2, 0xdc, 0x0e, 0x01, 0x00,
	0x00,
}

func (this *TenantCapabilities) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TenantCapabilities)
	if !ok {
		that2, ok := that.(TenantCapabilities)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CanAdminSplit != that1.CanAdminSplit {
		return false
	}
	return true
}
func (m *TenantCapabilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantCapabilities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantCapabilities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanAdminSplit {
		i--
		if m.CanAdminSplit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCapabilities(dAtA []byte, offset int, v uint64) int {
	offset -= sovCapabilities(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TenantCapabilities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanAdminSplit {
		n += 2
	}
	return n
}

func sovCapabilities(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCapabilities(x uint64) (n int) {
	return sovCapabilities(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TenantCapabilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapabilities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantCapabilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantCapabilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanAdminSplit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapabilities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanAdminSplit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCapabilities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCapabilities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCapabilities(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCapabilities
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCapabilities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCapabilities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCapabilities
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCapabilities
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCapabilities
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCapabilities        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCapabilities          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCapabilities = fmt.Errorf("proto: unexpected end of group")
)
